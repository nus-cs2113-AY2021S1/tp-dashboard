[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "# eCardnomics"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "            ___              _                       _           "
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "      ___  / __\\__ _ _ __ __| |_ __   ___  _ __ ___ (_) ___ ___  "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     / _ \\/ /  / _` | \u0027__/ _` | \u0027_ \\ / _ \\| \u0027_ ` _ \\| |/ __/ __| "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    |  __/ /__| (_| | | | (_| | | | | (_) | | | | | | | (__\\__ \\ "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     \\___\\____/\\__,_|_|  \\__,_|_| |_|\\___/|_| |_| |_|_|\\___|___/"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "eCardnomics is a **desktop flashcard application to quickly create, manage, and access new flashcards via a Command"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": " Line Interface (CLI)**."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "Useful links:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "* [User Guide](https://ay2021s1-cs2113-t14-2.github.io/tp/UserGuide.html)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "* [Developer Guide](https://ay2021s1-cs2113-t14-2.github.io/tp/DeveloperGuide.html)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "* [About Us](AboutUs.md)"
      }
    ],
    "authorContributionMap": {
      "kaijiel24": 13,
      "-": 1
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    compile group: \u0027org.apache.poi\u0027, name: \u0027poi\u0027, version: \u00274.1.2\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    compile group: \u0027org.apache.poi\u0027, name: \u0027poi-ooxml\u0027, version: \u00274.1.2\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    compile \u0027org.beryx:awt-color-factory:1.0.1\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    mainClassName \u003d \"seedu.ecardnomics.Main\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    archiveBaseName \u003d \"ecardnomics\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaijiel24": 6,
      "LiewWS": 2,
      "zhixiangteoh": 2,
      "-": 44
    }
  },
  {
    "path": "data/deckList.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "deck | 0"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "name | Micro-Economics"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "tags | Economics | EC1301 "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "size | 5"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "Q | What is the Law of demand?"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "A | When the price of a good rises, the quantity of the good demanded will fall, ceteris paribus."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "Q | What is the Law of supply?"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "A | When the price of a good increases, the quantity supplied increases, ceteris paribus."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "Q | What is price elasticity of demand?"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "A | Percentage change in quantity demanded caused by a 1 percent change in price."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "Q | What is price elasticity of supply?"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "A | Percentage change in quantity supplied caused by a 1 percent change in price."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "Q | What is Market Failure?"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "A | Market failure is the economic situation defined by an inefficient distribution of goods and services in the free market."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "deck | 1"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "name | Macro-Economics"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "tags | Economics | EC1301 "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "size | 6"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "Q | What are ways GDP can be calculated?"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "A | Three ways: Expenditure approach, Value-addedd approach and Factor payments approach."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "Q | What is the GDP formula using the Expenditure approach?"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "A | GDP \u003d C + I + G + NX"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "Q | Define frictional unemployment."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "A | Unemployment related to time taken for people to find new jobs."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "Q | Define seasonal unemployment."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "A | Unemployment related to changes in weather, tourist patterns, or other seasonal factors."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "Q | Define structural unemployment."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "A | Unemployment related to skill mismatch between workers\u0027 skills and employers\u0027 requirements."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "Q | Define cyclical unemployment."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "A | Unemployment arising from changes in production over the business cycle."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "deck | 2"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "name | Object-oriented Programming"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "tags | Computer Science | CS2113 "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "size | 3"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "Q | What are the programming paradigms based on OODP?"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "A | Abstraction, Polymorphism, Inheritence, Encapsulation"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "Q | What are access modifiers?"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "A | Access level modifiers determine whether other classes can use a particular field or invoke a particular method."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "Q | How do you represent for and while loops in a sequence diagram?"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "A | Using the \"loop\" notation."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      }
    ],
    "authorContributionMap": {
      "zhixiangteoh": 3,
      "wangwaynesg": 41
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Liew Wei Siew | [Github](https://github.com/LiewWS) | [Portfolio](./team/LiewWS.md)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "![](./team/zhixiangteoh.png) | Zhixiang Teoh | [Github](https://github.com/zhixiangteoh) | [Portfolio](./team/zhixiangteoh.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Trang | [Github](https://github.com/alwaysnacy/) | [Portfolio](./team/alwaysnacy.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Kai Jie | [Github](https://github.com/kaijiel24) | [Portfolio](./team/kaijiel24.md)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "![](./team/wangwaynesg.png) | Wang Wayne | [Github](https://github.com/wangwaynesg/) | [Portfolio](./team/wangwaynesg.md)"
      }
    ],
    "authorContributionMap": {
      "zhixiangteoh": 4,
      "wangwaynesg": 1,
      "-": 4
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "Flash Card manager for Economics students on Command Line."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "See also: [User Guide](./UserGuide.md) | [Releases](https://github.com/AY2021S1-CS2113-T14-2/tp/releases) | [Team Project Portfolio Page](./AboutUs.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "## Contents"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "- [Design](#design)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  * [Application Architecture](#application-architecture)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    + [How the components interact with one another](#how-the-components-interact-with-one-another)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  * [User Interface](#user-interface)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  * [Logic](#logic)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    + [Overall Logic](#overall-logic)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    + [Commands](#commands)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "      - [Overview](#overview)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "      - [Mode-specific commands](#mode-specific-commands)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "      - [Command sequence](#command-sequence)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  * [Deck Model](#deck-model)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  * [Storage](#storage)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    + [Loading the deckList data](#loading-the-decklist-data)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    + [Writing the deckList data](#writing-the-decklist-data)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  * [Exceptions](#exceptions)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "- [Implementation - Features](#implementation---features)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  * [Print to PowerPoint SlideShow](#print-to-powerpoint-slideshow)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "  * [Pretty Printing](#pretty-printing--wei-siew-)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    + [Design Consideration:](#design-consideration-)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  * [Tags for grouping and searching decks](#tags-for-grouping-and-searching-decks)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  * [Game Mode](#game-mode)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    + [General Architecture](#general-architecture)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    + [Example Use Case](#example-use-case)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    + [Sequential Flow](#sequential-flow)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "- [Product scope](#product-scope)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  * [Target user profile](#target-user-profile)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  * [Value proposition](#value-proposition)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "- [User Stories](#user-stories)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "- [Non-Functional Requirements](#non-functional-requirements)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "- [Glossary](#glossary)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "- [Instructions for manual testing](#instructions-for-manual-testing)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "## Design"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "### Application Architecture"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "![Architecture](images-dg/Architecture.png)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "The **Architecture Diagram** given above explains the high-level design of the Flash Card Manager Application."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "`Main` is responsible for initializing the other components in the program and linking them up correctly."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "* `Ui` Takes in instructions from user and displays the output to the user"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "* `Logic` Consists of the `Parsers` and the `Commands`. The `Parser` decipher the user input and executes the specific `Command` that affects the change the user wishes."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "* `Model` Holds the data that is in memory as the program runs. It consists of the 3 components:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    * `Flash Card` : A single question and answer pair."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    * `Deck` : A list of `Flash Card`s under a common topic."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    * `Deck List` : A complete list of all the `Deck`s in memory."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "* `Storage` Reads and writes data from and to a text file."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "#### How the components interact with one another"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "The following **Sequence Diagram** shows how the components interact for a basic `create \u003cdeck name\u003e` command where a new deck is created and added in to the `Deck List`."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "![Sequence Diagram](images-dg/Sequence%20Diagram.png)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "The sequence shown is as follows:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "* The **`Main`** instance runs and calls the *`readUserInput()`*  of **`Ui`**. The function waits for the user to key in one line of input "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "and then returns that input as a String to **`Main`**. **`Main`** calls *`parse`* of which creates a new **`CreateCommand`** and this is returned to **`Main`**. "
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "This section will be explained in details in the `Parser` section later on."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "**`Main`** then calls for *`execute()`*  of the *`CreateCommand`* that calls *`addDeck()`* of **`DeckList`** and subsequently  *`printNewDeck()`* "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "of **`Ui`** which prints the output to the user. "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "Finally, **`Main`** calls *`write()`* of **`Storage`** to write the updated Deck List to the text file."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "### User Interface"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "**API**: [seedu/ecardnomics/Ui.java](https://github.com/AY2021S1-CS2113-T14-2/tp/tree/master/src/main/java/seedu/ecardnomics/Ui.java)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "The **`Ui`** contains String constants that represent the outputs that the application is defined to produce."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "The **`Ui`** component has two main purposes:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "* Reading user input from the console."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "* Printing program output to the console."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "Reading of user input is done using the method *`readUserInput()`*"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "which reads one line of user input. The other methods within **`Ui`** are"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "called when a specific output needs to be printed."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "The **`Ui`** component passes the user input to the **`NormalParser`**, **`DeckParser`** and"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "**`GameParser`** components that will extract the relevant information."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "The **`Ui`** component provides its printing methods to **`NormalParser`**, **`DeckParser`**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "and **`GameParser`** for printing the appropriate output when required."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "### Logic"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "#### Overall Logic"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "![DG-Overall Logic UML](./images-dg/Logic-DG.png?raw\u003dtrue \"Overall Logic Diagram\")"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "1. The overall logic component consists of the **`Parser`** class and **`Command`** class."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "2. The **`Parser`** parses the user input and creates the respective **`Command`** object."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "3. This command will be executed by the **`Main`** class."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "4. The command execution then can affect the Model (e.g. creating a new deck)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "#### Commands"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "##### Overview"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "![DG-Design Commands UML](./images-dg/DG-Design-Commands-UML.png?raw\u003dtrue \"Commands UML Class Diagram\")"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "**API**: [seedu.ecardnomics/command](https://github.com/AY2021S1-CS2113-T14-2/tp/tree/master/src/main/java/seedu/ecardnomics/command)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "Commands are primarily classified into three categories, **`NormalCommand`**, **`DeckCommand`**, and **`GameCommand`**,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": " corresponding to the application\u0027s Normal, Deck, and Game Modes, respectively. All three are abstract children"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  derived from the overarching abstract class **`Command`**. The basis **`Command`** class is defined as such:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "   "
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "```java"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public abstract void execute();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "```"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "It only requires that all derived children implement the *`execute()`* method. The only two classes not belonging to"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": " individual modes are **`ExitCommand`** and **`VoidCommand`**. The former is so that users can call the command `exit`"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  from anywhere in the application, while the latter is a catch-all \"command\" for all erroneous commands a user"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  enters."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "##### Mode-specific commands"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "The specific commands defined within the different Modes are shown below; one can simply substitute the `Normal Mode"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": " Commands`, `Game Mode Commands` and `Deck Mode Commands` components in the above UML class diagram with the"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  corresponding `Command` classes, with all of the classes inheriting from the corresponding abstract classes, and"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "   being associated (with arrows pointing towards) with the corresponding **`Parser`** classes."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "   "
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "![DG-Design Commands Breakdown](./images-dg/DG-Design-Commands-Breakdown.png?raw\u003dtrue \"Commands Components Breakdown\")"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "Notice that the same **`StartCommand`** class above is indicated as being in both Normal Mode and Deck Mode. While the"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": " diagram does not explain this phenomenon fully, the idea is there: that `start` is a command that can be run from"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  within Deck Mode, but that its implementation is passed to **`NormalParser`** to be handled as a Normal Mode command"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  . More specifically, within the specification of **`DeckParser`**\u0027s *`parseCommand()`* method, the case of command"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "   word being parsed as `start` will in turn call **`NormalParser`**\u0027s *`parseCommand()`* method, supplementing it with"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    **`DeckParser`**\u0027s Deck class field object as the `arguments` String. "
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "##### Command sequence"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "The **`Parser`** classes play important roles in execution of specific commands, e.g. **`CreateCommand`**, because"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": " they define methods that check and ensure the conformity of user input to the commands\u0027 expected input. Below is a"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  sequence diagram showcasing this interaction, for execution of a **`CreateCommand`**, e.g. `create"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "   microeconomics`:"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  "
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "![DG-Design CreateCommand Sequence UML](./images-dg/DG-Design-Sequence-Diagram.png?raw\u003dtrue \"CreateCommand UML"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": " Sequence Diagram\")"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": " "
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "Here, *`parse()`* first splits the user input `create microeconomics` into two strings, \"create\" and \"microeconomics\","
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": " the command word and command arguments respectively. Then within the *`parseCommand()`* call in **`NormalParser`**, a"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": " dedicated method to create a new deck based on the argument string \"microeconomics\", *`prepareNewDeck()`*, is called"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": " . A new **`Deck`** object is returned to the same *`parseCommand()`* call and used to create the new "
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": " **`CreateCommand`** object, which is then propagated back to `Main` (not shown here) that called `parse()`."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": " "
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "\u003e Note that the **`CreateCommand`** object is not marked as deleted in the above diagram because its lifeline does not"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "\u003e really end until its *`execute()`* method has been called from **`Main`**, using **`Main`**\u0027s *`executeCommand()`*."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "### Deck Model"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "![DG-Design Model UML](./images-dg/DG-Design-Model.png?raw\u003dtrue \"Model UML Class Diagram\")"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "**API**: [seedu/ecardnomics/deck](https://github.com/AY2021S1-CS2113-T14-2/tp/tree/master/src/main/java/seedu/ecardnomics/deck)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "The Deck Model component is made up of three parts:"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "* **`DeckList`**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "* **`Deck`**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "* **`FlashCard`**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "The **`FlashCard`** component represents a flashcard, storing question"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "and answer data. The **`Deck`** represents a collection of flashcards"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "related by a common topic. The **`DeckList`** represents the collection"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "of all the **`Deck`** objects that the user has."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "Only the **`Command`** components can modify the **`DeckList`**, **`Deck`** and"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "**`FlashCard`** components. However, **`Ui`**, **`DeckParser`** and **`NormalParser`**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "are able to read data from the **`DeckList`**, **`Deck`** and **`FlashCard`** components."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "### Storage"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "#### Loading the deckList data"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "![Storage Sequence Diagram](./images-dg/Storage.png?raw\u003dtrue \"load Storage sequence diagram\")"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "**API**: [seedu/ecardnomics/storage](https://github.com/AY2021S1-CS2113-T14-2/tp/blob/master/src/main/java/seedu/ecardnomics/storage)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "Storage of this application uses basic `.txt` read and write functions.  "
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "Upon start of the program, the application checks whether there is a `./data` folder and creates one is there isn\u0027t.  "
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "Then, it reads from the storage file `deckList.txt` line by line to create:"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "* new **`Deck`**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "* new **`FlashCard`**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "and adds them to the current `deckList` passed into the *`load`* method call."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "#### Writing the deckList data"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "Similarly, for writing the data into `.txt` file, the Storage will loop through all the current `Decks` and their"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "current `FlashCards` and write them in a specific format in the text file in the `./data` folder."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "### Exceptions"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "![DG-Design Exceptions Architecture](./images-dg/DG-Exceptions-Architecture.png?raw\u003dtrue \"Exceptions Architecture"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": " Overview\")"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "**API**: [seedu/ecardnomics/exceptions](https://github.com/AY2021S1-CS2113-T14-2/tp/blob/master/src/main/java/seedu/ecardnomics/exceptions)"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "How to read the diagram above:"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "- The font colour of the methods correspond to the fill colour of the Exception classes that they throw; e.g"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "., **`NormalParser`**s *`prepareNewDeck()`* method throws **`EmptyInputException`**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "- Additionally, methods that throw more than one exception will have their colours corresponding to one of the"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": " exception classes\u0027 fill colours, with the other associations denoted by explicit textual annotation on the"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  association arrows; e.g., **`NormalParser`**\u0027s *`getIndex()`* and *`prepareDeck()`* methods additionally throw"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "   **`DeckRangeException`**, on top of throwing **`IndexFormatException`**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "- Each Exception class only has one String field unique to the class that holds the Exception message which is"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": " printed to the user on encountering the associated erroneous feedback"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "## Implementation - Features"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "### Print to PowerPoint SlideShow"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "An additional feature targeted at students who wish to use add more style to their flash cards outside of the command "
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "line option to allow keep things interesting when they are revising."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "The `PowerPointCommand` is parsed by `NormalParser` but the \"Print to PowerPoint\" command can be called from both Normal "
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "and Deck Mode. "
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "The following diagram shows how the `PowerPointCommand`\u0027s `execute()` calls the `createNewPowerPoint()` method of `PowerPoint`."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "*`execute()`* first checks if the whether `isPptxCreated` is `true` and only creates the PowerPoint if so. This is necessary as "
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "the user might have input the command `pptx` but when prompt for confirmation, they input `n` which means no, but the parser will "
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "still output a **`PowerPointCommand`** except with the element `isPptxCreated` as `false` and thus, when executed, nothing happens."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "![PPTX Sequence Diagram](images-dg/PPTX-Sequence-Diagram.png)"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "The `newIntroSlide()`, `newSlide()` and `exportSlide()` method of `PowerPoint` uses a third party library - Apache POI "
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "to create new slides, populate them with the questions and answers from the deck and finally print them out to a new PowerPoint"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": " file in the `pptx` folder under the name `\u003cdeck name\u003e.pptx`."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": " "
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "The following are the Classes/ Enum of the third part package `org.apache.poi.xslf.usermodel` which are used:"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "* `SlideLayout` - Enum representing the Slide Layouts available"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "* `XMLSlideShow` - Class representing an entire Slide Show"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "* `XSLFSlide` - Class representing a single Slide"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "* `XSLFSlideLayout` - Class representing the layout of a slide"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "* `XSLFSlideMaster` - Class representing the default slides layouts"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "* `XSLFTextShape` - Class representing a shape within a slide"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "* `XSLFTextParagraph` - Class representing a paragraph of text within a shape"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "* `XSLFTextRun` - Class representing the properties of the text within a paragraph"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "### Pretty Printing"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "The purpose of this feature is to improve the readability of the command line text output for the user, in particular,"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "the question and answer fields of a flashcard . Without this feature, long text outputs would follow the default "
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "wrapping style of the console. When words are truncated unnecessarily, it is going to be distracting and annoying"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "for students trying to study. We illustrate the problem with the following example:"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "```"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "This is a long question (or maybe answer) field. Suppose tha"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "t our console is 60 characters wide, we see that the word \"t"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "hat\" was truncated in the first line and again in the second"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "line."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "```"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "In this section, we define the following terms:"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "* `lineLength` is the maximum number of characters on a line, set to be equal to `Ui.DASH_LINES.length()`. This is"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "also the number of characters between the start of line and end of line."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "* `offset` is the number of characters after the start of the line before the target string will be printed."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "* `usableLength` is the number of characters that can be used for printing the output. "
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "This is `Ui.DASH_LINES.length() - offset`."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "The *`prettyPrintFormatter(String target, int offset)`* static method of the **`Ui`** class takes as argument the"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "target string to be formatted for printing as well as the offset. The formatted String is returned to the caller for"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "printing. This is illustrated in the following sequence diagram:"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "![DG-Implementation-Features-PP-Sequence](./images-dg/PP-Sequence.png?raw\u003dtrue)"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "\u003eNote:"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "\u003e The lifeline on the left represents the calling method that requires a formatted string."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "\u003e The *`printMethod()`* is a placeholder for any of the printing methods of **`Ui`** class."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "\u003e The call to *`System.out.println`* is omitted. "
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "\u003e Minimal notation is used for the return of control to the calling method."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "The `offset` parameter specifies the number of characters already"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "printed on the line before the target string will be printed."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "*`prettyPrintFormatter()`* places as many words as possible on each line until"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "the next word does not fit within the `usableLength` of the current"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "line. This word is therefore placed on the next line and the process"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "repeats until all the words have been formatted into the response. If"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "the  length of a single word exceeds the `usableLength`, the word is"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "split across multiple lines to prevent the program from looping"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "infinitely as it would never be able to fit the word on any line."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "Take note that infinite loops can still occur if *`prettyPrintFormatter()`* is called with offset \u003e\u003d `lineLength`"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "### Tags for grouping and searching decks"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "The purpose of this feature is to provide a mean to group the decks based on their subjects"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "and search for relevant decks related to one or more relevant subjects in a robust way. Each created deck will"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "tagged to their respective field."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "![DG-Implementation-Features-TagArchitecture](./images-dg/TagFeature-UML.png?raw\u003dtrue)"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "The user can also modify to tags of the decks by using tag or untag command, and uses search by tag to find"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "a group of decks he/she is interested in."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "![DG-Implementation-Features-TagSequence](./images-dg/Tag.png?raw\u003dtrue)"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "### Game Mode"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "eCardnomics\u0027 quintessential mode. Game Mode can be started from either Normal Mode or Deck Mode. The `start` command"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": " is parsed by **`NormalParser`** (see [Commands](#commands))."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "#### General Architecture"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "Game Mode contains two main components: a storage component, **`GameStorage`**, and a logic component, **`GameEngine`**. The"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": " former handles all data structures used by Game Mode, and stores the original deck (`originalDeck`), question pool"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  (`deque`), and retest question pool (`retestStore`). The latter executes the main game loop (*`runGameLoop()`*), and"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "   interacts with **`GameStorage`** on package-private basis; i.e., **`GameEngine`** and **`GameStorage`** have full mutual"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    access as if they were a single class. This is one of the main intentional design decisions."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  "
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "![DG-Implementation-Features-Game-Mode-Architecture](./images-dg/DG-Game-Mode-Architecture-Overview.png?raw\u003dtrue \"Game Mode"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": " Architecture Overview\")"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "The schematic below describes the individual responsibilities of the **`GameStorage`** and **`GameEngine`** classes (or"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": " components) of Game Mode as introduced above, and also two key interactions between the two classes, namely via"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  **`GameEngine`**\u0027s *`update(isResponseY:boolean, flashCard:FlashCard)`* and *`poseQuestion()`* method calls. For"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "   context, *`poseQuestion()`* pops the top flash card off **`GameStorage`**\u0027s question pool **`deque`** to display to the user"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "   , while *`update()`* is the **`GameEngine`** method that adds to the retest question pool `retestStore` "
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "   when the user chooses to do so (via `isResponseY \u003d\u003d true`). This essentially describes one iteration of"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "   *`runGameLoop()`*; more explanation and a full-blown illustration and sequence are given further below.  "
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "![DG-Implementation-Features-Game-Storage-Game-Engine](./images-dg/DG-Game-Storage-Game-Engine.png?raw\u003dtrue \"Game"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": " Mode Game Storage Game Engine\")"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": " "
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "**See also**: [Gameplay description](./UserGuide.md#gameplay)"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "The actual \"game\" aspect of eCardnomics is essentially summarised in the *`runGameLoop()`* high-level overview above"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ". For a textual gameplay description, check out the \"See also\" link. "
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "#### Example Use Case"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "For a more contextual use case, consider the following scenario of Econs Wiz attempting the Game Mode for the first"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": " deck, `Demand-Supply`, in his deck list."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "\u003e Note: Focus on the biggest box in the diagram!"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "![DG-Implementation-Features-Game-Use-Case](./images-dg/DG-Game-Use-Case.png?raw\u003dtrue \"Game Mode Use Case\")"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "**API**: [seedu/ecardnomics/game](https://github.com/AY2021S1-CS2113-T14-2/tp/tree/master/src/main/java/seedu/ecardnomics/game)"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "Since there are quite a few things going on in this diagram, here are the key takeaways (the last of which arguably"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": " the most important):"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "- the retest question pool (`retestStore`) is updated upon the user\u0027s attempt at each question and response to the"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": " prompt to include or exclude the flash card to be displayed again—if `y` then the flash card is added to the"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  `retestStore`"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "- whenever the current question pool (`deque`) is emptied, i.e. all flash cards have been popped off and displayed to"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": " the user, the retest question pool (`retestStore`) is consulted from which to create a new question pool (`deque`)"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "- after a specific question is displayed, it does not appear again (even if the user has chosen to re-encounter the"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": " question) until after all other questions in the current question pool (`deque`) have been exhausted "
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "#### Sequential Flow"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "For a more formal sequential flow of the inner workings of Game Mode, the following elaborates the execution"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": " sequence of Game Mode, from after a `start` command has been parsed in Normal Mode:"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "![DG-Implementation-Features-Game-Mode-Sequence](./images-dg/DG-Game-Mode-Sequence.png?raw\u003dtrue \"Game Mode UML Sequence"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": " Diagram\")"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": " "
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": " In the above diagram the key takeaway is the existence of an *intermediary* `game:Game` object that holds"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  **`GameEngine`** and **`GameStorage`** together. In fact, this is the sole purpose of the **`Game`** class: to hold the"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "   current game instance, in a Single-Responsibility-Principle (SRP) and Object-Oriented Programming (OOP) manner. "
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "   This intermediary role of the **`Game`** class is also illustrated in the upper part of the earlier [use case"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    diagram](#example-use-case). Note how it is from this `game` object that the main game loop, run and managed by"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "     **`GameEngine`**, is started."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": " "
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "![DG-Implementation-Features-Game-Mode-Sequence-run-game-loop-sd](./images-dg/DG-run-game-loop-sd.png?raw\u003dtrue \"Game"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": " Mode UML Sequence Diagram run game loop sd\")"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": " "
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "The main game loop. As with all simple games, this flash card game mode is fundamentally built on the concept of a"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": " possibly never-ending game loop with specific end conditions. In this case, the main end condition is explicitly"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  that the `command` object that is parsed and returned upon the *`getAttempt()`* call (that prompts the user for an"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "   answer attempt) is either a **`DoneGameCommand`** or **`ExitCommand`**. "
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "\u003e This is not the **only** end condition, though, because the other important but implicit end scenario is when the"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "\u003e question pool is exhausted (i.e., `storage.deque` is empty) **and** the retest question pool (`storage.retestStore"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "\u003e`) is empty."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "Naturally, the other sequence of special note here is the whole *`update()`* sequence, and even more specifically the"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": " *`updateDeque()`* call within the *`update()`* sequence. Notice how *`updateDeque()`* calls "
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": " *`createRandomisedStack(storage.retestStore)`* with the `retestStore` as argument. This essentially creates a new"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  randomised question pool from the retest question pool. "
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  "
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "Notice how this *`updateDeque()`* sequence is only called exactly when the `storage.deque` is empty (i.e., when all"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": " questions have been popped off the question pool). This is important because it ensures that the user encounters all"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  available questions in the `deque` at least once before the retest questions are later displayed. Cross-check this"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "   with the detailed descriptions of the inner workings of the game loop implementation shown in the earlier"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    [architecture](#general-architecture) and [use case](#example-use-case) diagrams."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  "
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "Lastly, notice how *`refreshRetestStore()`* is called at the end of *`updateDeque()`* to, as its name suggests, clear"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": " the retest question pool to get ready to store the next wave of retest questions. This is also covered in the bottom"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  few lines of the **`GameEngine`** portion of the use case diagram. "
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "## Product scope"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "### Target user profile"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "Junior College Economics Students."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "Anybody \u003e Students \u003e Students in courses with high amount of content \u003e Economics students \u003e **Junior College"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": " Economics students** (focus on theory than calculations)"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "### Value proposition"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "Flashcard application that allows students to quickly create new flashcards and access flashcards quickly on the"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": " command line to enhance their studying experience, and ultimately be an aid for [active recall](https://getatomi.com/blog/what-is-active-recall-and-how-effective-is-it)."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "## User Stories"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "|Version| As a(n) ... | I want to ... | So that I can ...|"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "|--------|----------|---------------|------------------|"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "|v1.0|poor student|have small computer programs|run it on my old computer|"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "|v1.0|fast typist|have an easily-navigable interface to type up notes and store them|create and manage notes quickly and efficiently|"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "|v1.0|smart student|be able to use the system effectively and efficiently|save time and maximise my productivity|"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "|v1.0|JC econs student|quickly create short notes of key concepts|keep up during lectures and tutorials|"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "|v1.0|tech-savvy student|have a software tool to store my notes|stop needing to worry about losing my hardcopy notes|"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "|v1.0|lazy student|create flashcards to keep my notes concise|learn at a comfortable, incrementing pace|"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "|v2.0|organised student|have my notes be stored in a systematic way|retrieve them quickly and easily|"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "|v2.0|student|have a system that can categorise material into different topics|quickly revise all the content for a topic when studying for an exam|"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "|v2.0|hardworking student|have a studying system that can help me memorise content in a non-traditional manner|remember all the facts during an exam through active recall|"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "|v2.0|busy student|have my notes available outside of CLI|study while on the go and not waste any time"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "## Non-Functional Requirements"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "* The program should not attempt to save user data to disk if it is not given permission by the user."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "* The program should work on a machine that has Java 11 installed."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "* The error messages should be easy to understand even if the reader does not have knowledge about programming."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "* The program should not terminate unexpectedly."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "* The program is not expected to guarantee that modifications to data file will be during execution will be retained."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "## Glossary"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "* *glossary item* - Definition"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "## Instructions for manual testing"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "Starting the program:"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "1. Download the `ecardnomics.jar` file and copy it into an empty folder where read, write and execute permissions"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "are allowed."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "1. Run the command `java -jar ecardnomics.jar` in a command line terminal to start the program."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "Saving data to disk:"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "1. After starting the program, the directory \"data\" should be created."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "   1. After program terminates, verify that the file \"data/deckList\" exists and contains the data supplied during"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "   program execution."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "1. During execution, the directory \"log\" should be created."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "1. If a pptx command is executed, the \"pptx\" directory should be created."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "   1. After the command is executed, verfiy that \"pptx/\u003cfile name\u003e\" exists for the deck that was converted to"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "   PowerPoint format."
      }
    ],
    "authorContributionMap": {
      "alwaysnacy": 17,
      "kaijiel24": 53,
      "LiewWS": 100,
      "zhixiangteoh": 238,
      "wangwaynesg": 19,
      "-": 28
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "# eCardnomics"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            ___              _                       _           "
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "      ___  / __\\__ _ _ __ __| |_ __   ___  _ __ ___ (_) ___ ___  "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     / _ \\/ /  / _` | \u0027__/ _` | \u0027_ \\ / _ \\| \u0027_ ` _ \\| |/ __/ __| "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    |  __/ /__| (_| | | | (_| | | | | (_) | | | | | | | (__\\__ \\ "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     \\___\\____/\\__,_|_|  \\__,_|_| |_|\\___/|_| |_| |_|_|\\___|___/"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "eCardnomics is a **desktop flashcard application to quickly create, manage, and access new flashcards via a Command"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": " Line Interface (CLI)**."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Useful links:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* [User Guide](UserGuide.md)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "* [Developer Guide](DeveloperGuide.md)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "* [About Us](AboutUs.md)"
      }
    ],
    "authorContributionMap": {
      "kaijiel24": 5,
      "zhixiangteoh": 3,
      "-": 6
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "eCardnomics is a **desktop flashcard application to quickly create, manage, and access new flashcards via a Command"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": " Line Interface (CLI)**. eCardnomics is targeted at economics students in Junior College in Singapore, and aims to"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": " enhance students’ study experience as an efficient and handy aid for active recall. Through the ability to create"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": " multiple decks of flashcards and tag them independently, students can segment the subject syllabus into topics when"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": " managing flashcards, yet consolidate flashcards by topic when accessing them to study."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "## Contents"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "- [Preliminaries](#preliminaries)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  * [Installation](#installation)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  * [Running the program](#running-the-program)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  * [Guide format](#guide-format)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "- [Features - Normal Mode](#features---normal-mode)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "  * [Create a new deck: `create`](#create-a-new-deck-create)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    + [Format](#format)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    + [Examples](#examples)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "  * [Tag an existing deck: `tag`](#tag-an-existing-deck-tag)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    + [Format](#format-1)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    + [Examples](#examples-1)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "  * [Untag an existing tag: `untag`](#untag-an-existing-tag-untag)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    + [Format](#format-2)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    + [Examples](#examples-2)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "  * [Search decks by tag: `search`](#search-decks-by-tag-search)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    + [Format](#format-3)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    + [Examples:](#examples-)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "  * [Display all decks: `decks`](#display-all-decks-decks)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    + [Format](#format-4)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    + [Examples](#examples-3)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "  * [Delete an existing deck: `delete`](#delete-an-existing-deck-delete)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    + [Format](#format-5)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    + [Examples](#examples-4)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "  * [Deck Mode: `edit`](#deck-mode-edit)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    + [Format](#format-6)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    + [Examples](#examples-5)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "  * [Game Mode: `start`](#game-mode-start)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    + [Format](#format-7)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    + [Examples](#examples-6)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "  * [Print an Existing Deck to a PowerPoint File: `pptx`](#print-an-existing-deck-to-a-powerpoint-file-pptx)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    + [Format](#format-8)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    + [Examples](#examples-7)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "  * [Viewing help in Normal Mode: `help`](#viewing-help-in-normal-mode-help)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    + [Examples](#examples-8)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "- [Features - Deck Mode](#features---deck-mode)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "  * [Add a flashcard: `add`](#add-a-flashcard-add)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    + [Format](#format-9)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    + [Examples](#examples-9)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "  * [List all the flashcards in the deck: `list`](#list-all-the-flashcards-in-the-deck-list)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    + [Format](#format-10)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    + [Examples](#examples-10)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "  * [Delete an existing Flash Card: `delete`](#delete-an-existing-flash-card-delete)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    + [Format](#format-11)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    + [Examples](#examples-11)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "  * [Update an existing Flash Card: `update`](#update-an-existing-flash-card-update)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    + [Format](#format-12)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    + [Examples](#examples-12)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "  * [Game Mode: `start`](#game-mode-start-1)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    + [Format](#format-13)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    + [Examples](#examples-13)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "  * [Print Current Deck to a PowerPoint File: `pptx`](#print-current-deck-to-a-powerpoint-file-pptx)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    + [Format](#format-14)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    + [Examples](#examples-14)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "  * [Exits Deck Mode: `done`](#exits-deck-mode-done)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    + [Examples](#examples-15)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "  * [Viewing help in Deck Mode: `help`](#viewing-help-in-deck-mode-help)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    + [Examples](#examples-16)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "- [Features - Game Mode](#features---game-mode)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  * [Gameplay](#gameplay)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    + [Examples](#examples-17)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "  * [Exits Game Mode: `done`](#exits-game-mode-done)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    + [Examples](#examples-18)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "  * [Viewing help in Game Mode: `help`](#viewing-help-in-game-mode-help)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    + [Examples](#examples-19)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "- [Features - Print to PowerPoint](#features---print-to-powerpoint)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "  * [Create new PowerPoint based on the selected deck: `pptx`](#create-new-powerpoint-based-on-the-selected-deck-pptx)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "- [Features - Anywhere](#features---anywhere)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "  * [Exits the program: `exit`](#exits-the-program-exit)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    + [Examples](#examples-20)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "  * [Shows release version: `--version`](#shows-release-version---version)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    + [Examples](#examples-21)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "- [Features - (Proposed) Encryption and Decryption](#features---proposed-encryption-and-decryption)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "- [FAQ](#faq)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "  * [General](#general)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "  * [Deck Mode](#deck-mode)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  * [Game Mode](#game-mode)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "- [Command Summary](#command-summary)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "  * [Normal Mode](#normal-mode-1)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "  * [Deck Mode](#deck-mode-1)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  * [Game Mode](#game-mode-1)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  * [Anywhere](#anywhere)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "## Preliminaries"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "### Installation"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure that you have Java 11 or above installed."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "2. Download the latest _jar_ release of `eCardnomics` from [here](https://github.com/AY2021S1-CS2113-T14"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "-2/tp/releases)."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "\u003e Java 11 and above is highly recommended, although eCardnomics might run on a lower version."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "### Running the program"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "Open your command line or terminal and navigate to the folder (e.g., `~/downloads`) where you downloaded the jar file"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ". Then simply run the command `java -jar ecardnomics.jar`:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "```batch"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "$ cd ~/downloads"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "$ ls "
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "ecardnomics.jar"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "$ java -jar ecardnomics.jar"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "```"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "\u003e Note: You can also run eCardnomics by double clicking the `ecardnomics.jar` file directly."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "### Guide format"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "Words in `\u003c\u003e` are parameters or additional input to be supplied by the user. "
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "\u003e Example: `edit \u003cindex\u003e`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "\u003e "
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "\u003e Here, `index` is a parameter supplied by the user, in this case to specify a deck index to enter edit mode for."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "Commented-out lines `//` represent system output by the program."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "\u003e Example:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "\u003e ```java"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "\u003e add"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "\u003e // Enter question: \u003cquestion description\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "\u003e // Enter answer: \u003cquestion answer or explanation\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "\u003e ```"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "\u003e Notice how `\u003cquestion description\u003e` is still commented out but still represents user input. In other words"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "\u003e, `\u003c\u003e` can be thought of as being delimiters in output representation across this guide."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "Words in square brackets `[]` represent optional input parameters."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "\u003e Example: list [/ans]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "## Features - Normal Mode"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "\u003e `[Normal]` is displayed at every command prompt, to indicate that the program is in Normal Mode."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "### Create a new deck: `create`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "Creates a new deck of flashcards. The `create` command expects one argument specifying the name of the deck to be"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": " created."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "#### Format"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "Create deck without tags:"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "```java"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "create \u003cname of deck\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "```"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "Create deck with tag(s):"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "```java"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "create \u003cname of deck\u003e [/tag \u003ctag1\u003e [\u003ctag2\u003e]]"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "```"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "#### Examples"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "```java"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "[Normal]"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  \u003e create market-failure"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// New deck created: market-failure"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "```"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "```java"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "[Normal]"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "  \u003e create market-failure /tag beginner"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "// New deck created: market-failure | Tag(s): beginner "
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "```"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "### Tag an existing deck: `tag`"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "Adds a tag to an existing deck of flashcards. The `tag` command expects one argument specifying the name of the deck"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": " to tag. At least one additional argument after /tag specifies tags to be added to the deck."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "#### Format"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "```java"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "tag \u003cindex of deck\u003e /tag \u003ctag1\u003e [\u003ctag2\u003e]"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "```"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "\u003e Note: Do `decks` command first to obtain up-to-date index. "
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "\u003e Tags\u0027 name should not include spaces, spaces are used to separate different tags"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "#### Examples"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "```java"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "[Normal]"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "  \u003e tag 1 /tag beginner"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "// The deck market-failure has been tagged as: beginner"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "```"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "### Untag an existing tag: `untag`"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "Removes an existing tag from an existing deck of flashcards. The `untag` command expects one argument specifying the "
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "name of the deck to remove a deck from. At least one additional argument after /tag specifies tags to be removed from the deck."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "#### Format"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "```java"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "untag \u003cindex of deck\u003e /tag \u003ctag1\u003e [\u003ctag2\u003e]"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "// Do you want to remove the tag \u003ctag1\u003e from \u003cname of deck\u003e? [y/n] y/n"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "```"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "\u003e Note: Do `decks` command first to obtain up-to-date index."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "\u003e Tags\u0027 name should not include spaces, spaces are used to separate different tags."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "\u003e "
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "#### Examples"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "```java"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "[Normal]"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "  \u003e untag 1 /tag beginner"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "// Do you want to remove the tag beginner from market-failure? [y/n] y/n"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "// The tag beginner has been removed from the deck market-failure."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "```"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "### Search decks by tag: `search`"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "Searches all the decks containing the specified tag. The `search` command expects at least one argument specifying one "
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "or more tags related to the deck. "
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "#### Format"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "```java"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "search \u003ctag1\u003e [\u003ctag2\u003e]"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "```"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "#### Examples:"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "```java"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "[Normal]"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "  \u003e search beginner"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// The decks having tags you are searching for:"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "// 2. Micro-economics"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "// 4. Macro-economics"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "```"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "\u003e Notice how the original deck index is displayed."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "### Display all decks: `decks`"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "Displays an enumerated list of all the decks available to the user. The `decks` command does not expect any arguments."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "#### Format"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "```java"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "decks"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "```"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "#### Examples"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "```java"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "[Normal]"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  \u003e decks"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// The following decks are available:"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// 1. market-failure"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// 2. perfect competition"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// 3. externalities"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "```"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "### Delete an existing deck: `delete`"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "Deletes an existing deck of flashcards. The `delete` command expects one argument specifying the index of the deck to"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": " be deleted. User is then further prompted for an input of only either `y` or `n`."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": " "
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "#### Format"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "```java"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "[Normal]"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  \u003e delete \u003cindex of deck\u003e"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// Do you want to delete `name of deck`? [y/n] \u003cy/n\u003e"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// `name of deck` has been deleted."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "```"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "\u003e Note: `name of deck` is a placeholder for the actual name of the deck corresponding to the index entered. The second"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "\u003e line will only be displayed if the user entered y at the prompt for \u003cy/n\u003e."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "One-line format:"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "```"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "  \u003e delete \u003cindex of deck\u003e -y"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "```"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "This command forces the delete of the deck at index `\u003cindex of deck\u003e`."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "#### Examples"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "Deciding not to delete:"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "```java"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "[Normal]"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  \u003e delete 1"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// Do you want to delete market-failure? [y/n] n"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "[Normal]"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  \u003e "
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "```"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "Confirming a delete:"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "```java"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "[Normal]"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  \u003e delete 2"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// Do you want to delete perfect competition? [y/n] y"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// perfect competition has been deleted."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "[Normal]"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  \u003e"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "```"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "Entering an invalid response:"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "```java"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "[Normal]"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  \u003e delete 1"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// Do you want to delete market-failure? [y/n] no way"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// Response should be \u0027y\u0027 or \u0027n\u0027!"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// Do you want to delete market-failure? [y/n] y"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// market-failure has been deleted."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "[Normal]"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  \u003e"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "```"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "### Deck Mode: `edit`"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "Enters the Deck Mode to edit an existing deck. The `edit` command expects one argument specifying the deck index for"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": " which to enter Deck Mode."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": " "
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "#### Format"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "```java"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "[Normal]"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  \u003e edit \u003cindex of deck\u003e"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "```"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "#### Examples"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "```java"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "[Normal]"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  \u003e edit 1"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// ------------------------------------------------------------"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// You are now in Deck Mode, editing: [1] market-failure"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// ------------------------------------------------------------"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "[Deck - market-failure]"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  \u003e"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "```"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "\u003e Notice how the prompt mode identifier `[Normal]` changed to `[Deck - market-failure]`."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "### Game Mode: `start`"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "Starts Game Mode for an existing deck. The `start` command expects one argument specifying the deck index for which to"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": " enter Deck Mode."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": " "
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "\u003e The `start` command can also be entered from within Deck Mode, without the need for a deck index."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": " "
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "#### Format"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "```java"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "[Normal]"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  \u003e start \u003cindex of deck\u003e"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "```"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "#### Examples"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "```java"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "[Normal]"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  \u003e start 1"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// ------------------------------------------------------------"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// Welcome to Game Mode!"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// In this mode, you test your knowledge against..."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// ... "
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "//                                      ...Have fun!"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// Game Mode is started for: [1] market-failure"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// ------------------------------------------------------------"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// Q: What is market failure?"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "//   Enter your attempt below (or `done`, `exit`, `help`):"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  \u003e"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "```"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "### Print an Existing Deck to a PowerPoint File: `pptx`"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "Prints an existing deck to a new PowerPoint file named `\u003cdeck name\u003e.pptx` in `pptx/` folder."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "The `pptx` command expects one argument specifying the deck index for which to enter Deck Mode."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "You can add the option `-y` to create the PowerPoint without any further prompt."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "#### Colors for background and text options"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "To select the color for background and text, you can either select from one of the 10 default color schemes"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "using `-cs \u003cindex\u003e` or choose your own background and text colors using `-oc \u003cbg color\u003e \u003ctxt color\u003e`. "
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "You can only choose *either* and **not both** options to select color."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "More details about the colors for original colors and color schemes available can be found [below](#features---print-to-powerpoint) "
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": " "
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": " \u003e The `pptx` command can also be entered from within Deck Mode, without the need for deck index."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "#### Format"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "```java"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// ------------------------------------------------------------"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "[Deck - `name of deck`]"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "  \u003e pptx \u003cindex of deck\u003e"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// Do you want to print `name of deck` deck to PowerPoint? [y/n] yes"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// Response should be \u0027y\u0027 or \u0027n\u0027!"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "//   \u003e y"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "// ------------------------------------------------------------"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "// `name of deck` has been created as PowerPoint."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "// ------------------------------------------------------------"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "```"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "```java"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// ------------------------------------------------------------"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "[Deck - `name of deck`]"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "  \u003e pptx \u003cindex of deck\u003e -y"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "// ------------------------------------------------------------"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "// `name of deck` has been created as PowerPoint."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "// ------------------------------------------------------------"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "```"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "#### Examples"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "```java"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "------------------------------------------------------------"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "[Deck - Micro-Economics]"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "  \u003e pptx 1"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "// Do you want to print Micro-Economics deck to PowerPoint? [y/n]"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "//   \u003e yes"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "// Response should be \u0027y\u0027 or \u0027n\u0027"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "//   \u003e y"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "// ------------------------------------------------------------"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "// Micro-Economics has been created as PowerPoint."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "// ------------------------------------------------------------"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "```"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "```java"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// ------------------------------------------------------------"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "[Deck - Micro-Economics]"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "  \u003e pptx 1 -y"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "// ------------------------------------------------------------"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "// Micro-Economics has been created as PowerPoint."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "// ------------------------------------------------------------"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "```"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "### Viewing help in Normal Mode: `help`"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "Displays the list of all commands in Normal Mode. "
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "#### Examples"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "```java"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "[Normal]"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  \u003e help"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// ------------------------------------------------------------"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// eCardnomics."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// Normal Mode."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// Usage:"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "//   create \u003cnm\u003e   [/tag \u003ctag1\u003e [\u003ctag2\u003e ...]]    Creates a new deck of flash cards, named \u003cnm\u003e."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "//   decks                                       Lists all available decks."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "//   edit   \u003cix\u003e                                 Enter Deck Mode for editing the deck at list index \u003cix\u003e."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "//   start  \u003cix\u003e                                 Enter Game Mode for deck at list index \u003cix\u003e! Do your best!"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "//   delete \u003cix\u003e   [-y]                          Deletes the deck at list index \u003cix\u003e from list of decks."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "//   pptx   \u003cix\u003e   [-y]                          Creates a PowerPoint slides based on the deck at list index \u003cix\u003e."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "//   pptx   \u003cix\u003e   [-y] [-cs \u003cindex |            Creates a PowerPoint slides based on the current deck."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "//                 -oc \u003cbg color\u003e \u003ctxt color\u003e]  "
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "//   tag    \u003cix\u003e   /tag \u003ctag1\u003e [\u003ctag2\u003e ...]      Tags the deck at list index \u003cix\u003e, with 1 or more tags."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "//   untag  \u003cix\u003e   /tag \u003ctag1\u003e [\u003ctag2\u003e ...]      Untags specified \u003ctag\u003es of the deck at list index \u003cix\u003e."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "//   search \u003ctag1\u003e [\u003ctag2\u003e ...]                  Search deck list for decks tagged with specified \u003ctag\u003es."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "//   exit                                        Exits the program."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "//   help                                        Show this output."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// Options:"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "//   --version      Show version."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// ------------------------------------------------------------"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "```"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "## Features - Deck Mode"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "### Add a flashcard: `add`"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "Adds a flashcard to the end of the current deck. The `add` command expects no initial arguments. Instructions and "
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "format of card entry is displayed. Then, the user is prompted to specify the details of the flashcard to be added."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "#### Format"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "```java"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  \u003e add"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "// Enter question: \u003cquestion description\u003e"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "// Enter answer: \u003cquestion answer or explanation\u003e"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "```"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": " "
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "Equivalent One-line format:"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "```java"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "  \u003e add \u003cquestion description\u003e /ans \u003cquestion answer or explanation\u003e"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "```"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "\u003eIf `/ans` is not supplied, `\u003cquestion description\u003e` is stored and the user is prompted for the answer."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "\u003eIf `\u003cquestion description\u003e` is empty, the input is invalid and the error message "
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "\u003e```java"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "\u003e\"Input shouldn\u0027t be empty! Returning...\""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "\u003e```"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "\u003eis shown."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "#### Examples"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "```java"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "[Deck - market failure]"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     \u003e add "
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "// ------------------------------------------------------------"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "// You are now adding a FlashCard to: market failure"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "// ------------------------------------------------------------"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "// Enter question:"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     \u003e define market failure"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "// Enter answer:"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     \u003e Market failure is the economic situation defined by an inefficient distribution of goods "
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "and services in the free market"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "// FlashCard successfully added! "
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "// ------------------------------------------------------------ "
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "```"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "### List all the flashcards in the deck: `list`"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "Lists all the existing flash cards within the current deck. You can add the option `\\ans` after the `list` command "
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "to show all the questions, and their respective answers."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "#### Format"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "```java"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "[Deck - `name of deck`]"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  \u003e list"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// ------------------------------------------------------------"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// You are now viewing deck: `name of deck`"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// ------------------------------------------------------------"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// 1. Question: \u003cquestion 1\u003e"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// "
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// 2. Question: \u003cquestion 2\u003e"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// 3. Question: \u003cquestion 3\u003e"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// ------------------------------------------------------------"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "```"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "```java"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "[Deck - `name of deck`]"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  \u003e list /ans"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// ------------------------------------------------------------"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// You are now viewing deck: `name of deck`"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// ------------------------------------------------------------"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// 1. Question: \u003cquestion 1\u003e"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "//    Answer:   \u003canswer 1\u003e"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// 2. Question: \u003cquestion 2\u003e"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "//    Answer:   \u003canswer 2\u003e"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// 3. Question: \u003cquestion 3\u003e"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "//    Answer:   \u003canswer 3\u003e"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// ------------------------------------------------------------"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "```"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "#### Examples"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "List without answers:"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "```java"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "[Deck - market-failure]"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  \u003e list"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// ------------------------------------------------------------"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// You are now viewing deck: market-failure"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// ------------------------------------------------------------"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// 1. Question: define market failure"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// 2. Question: What is a public good?"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// 3. Question: What is a merit good?"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// ------------------------------------------------------------"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "```"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "List with answers:"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "```java"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "[Deck - market-failure]"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  \u003e list /ans"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// ------------------------------------------------------------"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// You are now viewing deck: market-failure"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// ------------------------------------------------------------"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// 1. Question: define market failure"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "//    Answer:   Market failure is the economic situation"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "//              defined by an inefficient distribution of goods"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "//              and services in the free market"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// "
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// 2. Question: What is a public good?"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "//    Answer:   A good which are non-rival and non-excludable"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// "
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// 3. Question: What is a merit good?"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "//    Answer:   A good that people underestimates the benefits"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "//              of"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// ------------------------------------------------------------"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "```"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "### Delete an existing Flash Card: `delete`"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "Deletes an existing flashcard from deck. The `delete` command expects one argument specifying the index of the flash card to"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": " be deleted. User is then further prompted for an input of only either `y` or `n`."
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": " "
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "#### Format"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "```java"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "[Deck - `name of deck`]"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "  \u003e delete 1"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// Do you want to delete the following flash card? [y/n] ?"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "//   \u0027\u003cquestion 1\u003e\u0027 n"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "// ------------------------------------------------------------"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "```"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "```java"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "[Deck - `name of deck`]"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "  \u003e delete 2"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "// Do you want to delete the following flash card? [y/n] ?"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "//   \u0027\u003cquestion 2\u003e\u0027 y"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "// ------------------------------------------------------------"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "// The following flash card has been deleted:"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "//   \u0027\u003cquestion 2\u003e\u0027"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "// ------------------------------------------------------------"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "```"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "\u003e Note: `name of deck` is a placeholder for the name of the current deck. The second"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "\u003e line will only be displayed if the user entered y at the prompt for \u003cy/n\u003e."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "One-line format:"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "```java"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "  \u003e delete \u003cindex of FlashCard\u003e -y"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "```"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "This command forces the delete of the Flashcard at index `\u003cindex of FlashCard\u003e`."
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "#### Examples"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "Deciding not to delete:"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "```java"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "[Deck - market-failure]"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "  \u003e delete 1"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "// Do you want to delete the following flash card? [y/n]"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "//   `define market failure?` n"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "// ------------------------------------------------------------"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "[Deck - market-failure]"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  \u003e "
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "```"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "Confirming a delete:"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "```java"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "[Deck - market-failure]"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "  \u003e delete 2"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "// Do you want to delete the following flash card? [y/n] ?"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "//   \u0027What is a public good?\u0027 y"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "// ------------------------------------------------------------"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "// The following flash card has been deleted:"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "//   \u0027What is a public good?\u0027"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "// ------------------------------------------------------------"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "[Deck - market-failure]"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  \u003e "
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "```"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "Entering an invalid response:"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "```java"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "[Deck - market failure]"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "  \u003e delete 2"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "// Do you want to delete the following flash card? [y/n] ?"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "//   \u0027What is a public good?\u0027 definitely"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "// Response should be \u0027y\u0027 or \u0027n\u0027!"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "//   \u003e y"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "// ------------------------------------------------------------"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "// The following flash card has been deleted:"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "//   \u0027What is a public good?\u0027"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "// ------------------------------------------------------------"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "```"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "### Update an existing Flash Card: `update`"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "Updates the question and answer fields of a  specified flashcard in the deck. The `update` command expects no initial"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": " arguments. The current question and answer are displayed. Then, the user is prompted to specify the new details of"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  the flashcard."
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "#### Format"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "```java"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "[Deck - `name`]"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "  \u003e update \u003cindex of flashcard\u003e"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "// Question: `Current Question`"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "// New Question:"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    \u003e \u003cnew question\u003e"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "// Answer:   `Current Answer`"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "// New Answer:"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    \u003e \u003cnew answer\u003e"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "```"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "\u003e Note: `name` is a placeholder for the actual name of the deck that is being edited."
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "\u003e `Current Question` and `Current Answer` are placeholders for the original question"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "\u003e and answer of the flashcard."
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "If a blank line is supplied as the new detail, then the detail is unchanged."
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "#### Examples"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "Updating both the question and answer:"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "```java"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "[Deck - market failure]"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "  \u003e update 1"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "// Question: Define market failure"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "// New Question:"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "  \u003e What is the difference between free-loading and free-riding?"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "// Answer:   Economic situation defined by inefficient distribution of goods and services in the free market"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "// New Answer:"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "  \u003e Free-loading gives a benefit to the free-loader but there is a cost to the people taken advantage of."
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    Free-riding is an advantage to the free-rider without imposing a cost on others or society."
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "// ------------------------------------------------------------"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "// Question and answer updated."
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "// ------------------------------------------------------------"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "```"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "Updating question only:"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "```java"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "[Deck - market failure]"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "  \u003e update 1"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "// Question: Define market failure"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "// New Question:"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "  \u003e Define Market Failure"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "// Answer:   Economic situation defined by inefficient distribution of goods and services in the free market"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "// New Answer:"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "  \u003e "
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "// ------------------------------------------------------------"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "// Question updated."
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "// ------------------------------------------------------------"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "```"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "Updating answer only:"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "```java"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "[Deck - market failure]"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "  \u003e update 1"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "// Question: Define market failure"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "// New Question:"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "  \u003e "
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "// Answer:   Economic situation defined by inefficient distribution of goods and services in the free market"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "// New Answer: Economic situation where distribution of goods and services in the free market is inefficient"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "  \u003e Economic situation where distribution of goods and services in the free market is inefficient"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "// ------------------------------------------------------------"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "// Answer updated."
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "// ------------------------------------------------------------"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "```"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "No updates:"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "```java"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "[Deck - market failure]"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "  \u003e update 1"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "// Question: Define market failure"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "// New Question:"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "  \u003e "
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "// Answer:   Economic situation defined by inefficient distribution of goods and services in the free market"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "// New Answer: Economic situation where distribution of goods and services in the free market is inefficient"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "  \u003e "
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "// ------------------------------------------------------------"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "// Original question and answer retained."
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "// ------------------------------------------------------------"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "```"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "### Game Mode: `start`"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "Starts Game Mode for the current deck. "
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": " "
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "\u003e The `start` command can also be entered from within Normal Mode."
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": " "
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "#### Format"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "```java"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "[Deck - market-failure]"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "  \u003e start"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "```"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "#### Examples"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "```java"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// You are now in Deck Mode, editing: [1] market-failure"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "// ------------------------------------------------------------"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "[Deck - market-failure]"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  \u003e ..."
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// ..."
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "// ------------------------------------------------------------"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "[Deck - market-failure]"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  \u003e start"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// ------------------------------------------------------------"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// Welcome to Game Mode!"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "//"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// In this mode, you test your knowledge against..."
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// ... "
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "//                                      ...Have fun!"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "//"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// Game Mode is started for: [1] market-failure"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "// ------------------------------------------------------------"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// Q: What is market failure?"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "//   Enter your attempt below (or `done`, `exit`, `help`):"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  \u003e"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "```"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "### Print Current Deck to a PowerPoint File: `pptx`"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "Prints the current deck to a new PowerPoint file named `\u003cdeck name\u003e.pptx` in `pptx/` folder."
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "You can add the option `-y` to create the PowerPoint without any further prompt."
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "#### Colors for background and text options"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "To select the color for background and text, you can either select from one of the 10 default color schemes"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "using `-cs \u003cindex\u003e` or choose your own background and text colors using `-oc \u003cbg color\u003e \u003ctxt color\u003e`. "
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "You can only choose *either* and **not both** options to select color."
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "More details about the colors for original colors and color schemes available can be found [below](#features---print-to-powerpoint)"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "\u003e The `pptx` command can also be entered from within Normal Mode."
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": " "
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "#### Format"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "```java"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "[Deck - `name of deck`]"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "  \u003e pptx"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// Do you want to print `name of deck` deck to PowerPoint? [y/n] \u003cy/n\u003e"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "// ------------------------------------------------------------"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "// `name of deck` has been created as PowerPoint."
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "// ------------------------------------------------------------"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "```"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "\u003e Above displays the result for the case when user enters `y`."
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "```java"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "[Deck - `name of deck`]"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "  \u003e pptx -y"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "// ------------------------------------------------------------"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "// `name of deck` has been created as PowerPoint."
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "// ------------------------------------------------------------"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "```"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "#### Examples"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "```java"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "[Deck - Micro-Economics]"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "  \u003e pptx"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// Do you want to print Micro-Economics deck to PowerPoint? [y/n] yes"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "// Response should be \u0027y\u0027 or \u0027n\u0027"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "//   \u003e y"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "// ------------------------------------------------------------"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "// Micro-Economics has been created as PowerPoint."
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "// ------------------------------------------------------------"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "```"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "```java"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "[Deck - Micro-Economics]"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "  \u003e pptx -y"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "// ------------------------------------------------------------"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "// Micro-Economics has been created as PowerPoint."
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "// ------------------------------------------------------------"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "```"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "### Exits Deck Mode: `done`"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "Returns to Normal Mode."
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "#### Examples"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "```java"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "[Deck - market-failure]"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  \u003e done"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "// ------------------------------------------------------------"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// You are back in Normal Mode"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "// ------------------------------------------------------------"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "[Normal]"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  \u003e"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "```"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "### Viewing help in Deck Mode: `help`"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "Displays the list of all commands in Deck Mode."
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "#### Examples"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "```java"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "[Deck - market-failure]"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  \u003e help"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// ------------------------------------------------------------"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// eCardnomics."
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// Deck Mode."
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "// "
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// Usage:"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "//   add         [\u003cqn\u003e /ans \u003cans\u003e]          Adds a new flash card to the current deck."
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "//   list        [/ans]                     Lists all flash cards in the current deck, optionally with answers."
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "//   delete \u003cix\u003e [-y]                       Deletes the flash card at list index \u003cix\u003e from the current deck."
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "//   pptx        [-y] [-cs \u003cindex |         Creates a PowerPoint slides based on the current deck."
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "//               -oc \u003cbg color\u003e \u003ctxt color\u003e]  "
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "//   start                                  Enter Game Mode for this deck! Do your best!"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "//   done                                   Exits from Deck Mode and returns to Normal Mode."
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "//   exit                                   Exits the program."
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "//   help                                   Show this output."
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "//"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// Options:"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "//   --version      Show version."
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "// ------------------------------------------------------------"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "```"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "## Features - Game Mode"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "### Gameplay"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "Questions are displayed in a randomised order. At each question, the user will:"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "1. Try to attempt an answer at the question, by typing at the prompt; then"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "2. Press `\u003center\u003e` (optionally with an empty attempt)."
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "Then, the correct answer is displayed, and our \u0027advanced\u0027 algorithm scores the user\u0027s attempt against the correct"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": " answer. Finally, the user is given the option to re-attempt the question later. See below for example gamplay."
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": " "
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "#### Examples"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "* Start Game Mode (from within Deck Mode)"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "```java"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "[Deck - Micro-Economics]"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "  \u003e list"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "// ------------------------------------------------------------"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// You are now viewing deck: Micro-Economics"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// 1. Question: What is the Law of demand?"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "// "
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// 2. Question: What is the Law of supply?"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "//"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// 3. Question: What is price elasticity of demand?"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// 4. Question: What is price elasticity of supply?"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "// ------------------------------------------------------------"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "[Deck - Micro-Economics]"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "  \u003e start"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "```"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "* Play!"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "```java"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// ..."
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// Game Mode is started for: [1] Micro-Economics"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "// ------------------------------------------------------------"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// Q: What is the Law of supply?"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "//   Enter your attempt below (or `done`, `exit`, `help`):"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "   \u003e Price of good increases, quantity supplied increases."
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// A: When the price of a good increases, the quantity supplied increases, ceteris paribus."
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// The % match between your answer and the actual answer is: 53.85"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "// ------------------------------------------------------------"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// Do you want to re-attempt this question later? [y/n]"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  \u003e y"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// ------------------------------------------------------------"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// Q: What is price elasticity of demand?"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "//   Enter your attempt below (or `done`, `exit`, `help`):"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  \u003e I don\u0027t know."
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// A: Percentage change in quantity demanded caused by a 1 percent change in price."
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// The % match between your answer and the actual answer is: 0.00"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// ------------------------------------------------------------"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// Do you want to re-attempt this question later? [y/n]"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  \u003e y"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// ------------------------------------------------------------"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// Q: What is the Law of demand?"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "//   Enter your attempt below (or `done`, `exit`, `help`):"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  \u003e Quantity of good demanded fall when price of good rises."
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// A: When the price of a good rises, the quantity of the good demanded will fall, ceteris paribus."
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// The % match between your answer and the actual answer is: 58.82"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// ------------------------------------------------------------"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// Do you want to re-attempt this question later? [y/n]"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  \u003e n"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// ------------------------------------------------------------"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// Q: What is price elasticity of supply?"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "//   Enter your attempt below (or `done`, `exit`, `help`):"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  \u003e Percentage change in quantity supplied for a 1 percent price change"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// A: Percentage change in quantity supplied caused by a 1 percent change in price."
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// The % match between your answer and the actual answer is: 84.62"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// ------------------------------------------------------------"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// Do you want to re-attempt this question later? [y/n]"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  \u003e n"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// ------------------------------------------------------------"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// Q: What is price elasticity of demand?"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "//   Enter your attempt below (or `done`, `exit`, `help`):"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  \u003e Percentage change in quantity demanded for a 1 percent price change."
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// A: Percentage change in quantity demanded caused by a 1 percent change in price."
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// The % match between your answer and the actual answer is: 84.62"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// ------------------------------------------------------------"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// Do you want to re-attempt this question later? [y/n]"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  \u003e n"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// ------------------------------------------------------------"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// Q: What is the Law of supply?"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "//   Enter your attempt below (or `done`, `exit`, `help`):"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  \u003e Price of a good increases, the quantity supplied increases, ceteris paribus."
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// A: When the price of a good increases, the quantity supplied increases, ceteris paribus."
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// The % match between your answer and the actual answer is: 92.31"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// ------------------------------------------------------------"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// Do you want to re-attempt this question later? [y/n]"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  \u003e n"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// ------------------------------------------------------------"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// You have completed all the flash cards in this deck!"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// Returning to Normal Mode..."
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// ------------------------------------------------------------"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// You are back in Normal Mode"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// ------------------------------------------------------------"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "[Normal]"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  \u003e"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "```"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "### Exits Game Mode: `done`"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "Returns to Normal Mode."
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "#### Examples"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "```java"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// ..."
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// ------------------------------------------------------------"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// Q: What is market-failure?"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "//   Enter your attempt below (or `done`, `exit`, `help`):"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  \u003e done"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// ------------------------------------------------------------"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// You are back in Normal Mode"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// ------------------------------------------------------------"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "[Normal]"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  \u003e "
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "```"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "### Viewing help in Game Mode: `help`"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "Displays the list of all commands in Game Mode."
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "#### Examples"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "```java"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// ..."
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// ------------------------------------------------------------"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// Q: What is market-failure?"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "//   Enter your attempt below (or `done`, `exit`, `help`):"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  \u003e help"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// ------------------------------------------------------------"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// eCardnomics."
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// Game Mode."
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "//"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// Usage:"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "//   done           Exits from Game Mode and returns to Normal Mode."
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "//   exit           Exits the program."
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "//   help           Show this output."
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "// "
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// Options:"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "//   --version      Show version."
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// Gameplay:"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// Questions will be displayed in a randomised order. At each question, you can"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "//     1. Try to attempt an answer at the question, by typing at the prompt"
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "//     2. Press \u003center\u003e (with an empty attempt if you want to do it in your head)"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// "
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// Then, our \u0027advanced\u0027 algorithms will check your answer and score your answer "
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// (if any), and display the correct answer for you to check your answer against."
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// Finally, we will ask if you think you got it right. If you did not, the"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// question will be inserted back into the question pool, and you will get a "
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// chance to attempt it again!"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "// ------------------------------------------------------------"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// Q: What is market-failure?"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "//   Enter your attempt below (or `done`, `exit`, `help`):"
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  \u003e "
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "```"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "## Features - Print to PowerPoint"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "### Create new PowerPoint based on the selected deck: `pptx`"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "Can be done from both Normal Mode and Deck Mode. In Normal Mode, a deck index is required, "
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "but in Deck Mode, there is no need to specify the deck index."
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "Has the option to skip confirmation prompt using `-y` suffix."
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "There is also the option to select both the background and text colors. There are 10 default color schemes that the "
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "user can choose from using the option `-cs 1`. [See below for the default color schemes](#default-color-schemes)"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "There is also the option to choose your own colors for background and text from the provided colors using the option"
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "`-oc \u003cbg color\u003e \u003ctxt color\u003e`. [See below for the colors available](#original-colors-available)"
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "For details, check out:"
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "* [Normal Mode PowerPoint](#print-an-existing-deck-to-a-powerpoint-file-pptx)"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "* [Deck Mode PowerPoint](#print-current-deck-to-a-powerpoint-file-pptx)"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "#### Default Color Schemes"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "The following is the default schemes that are available and their respective index."
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "![Default Color Schemes](images-ug/PPTX-Default-Color-Schemes.png)"
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "#### Original Colors available"
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "Soome of the colors include:"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "* Red"
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "* Blue"
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "* Yellow"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "* Green"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "* Black"
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "* White"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "* Purple"
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "* Violet"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "* Pink "
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "* Navy"
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "* Gray"
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "The complete list of colors can be found at [here] (https://www.javadoc.io/doc/org.beryx/awt-color-factory/1.0.1/org.beryx.awt.color/org/beryx/awt/color/ColorFactory.html)"
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "## Features - Anywhere"
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "### Exits the program: `exit`"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "Can be entered from any mode, anywhere in the program."
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "\u003e Except during Y/N prompts."
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "#### Examples"
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "```java"
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "[Normal]"
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  \u003e exit"
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// ------------------------------------------------------------"
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// Bye! Hope to see you again soon!"
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// ------------------------------------------------------------"
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "```"
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "```java"
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "[Deck - market-failure]"
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  \u003e exit"
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// ------------------------------------------------------------"
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// Bye! Hope to see you again soon!"
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// ------------------------------------------------------------"
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "```"
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "```java"
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "..."
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// ------------------------------------------------------------"
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// Q: What is market-failure?"
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "//   Enter your attempt below (or `done`, `exit`, `help`):"
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  \u003e exit"
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// ------------------------------------------------------------"
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// Bye! Hope to see you again soon!"
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// ------------------------------------------------------------"
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "```"
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "### Shows release version: `--version`"
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "Shows release version from anywhere in the program."
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "\u003e Except during Y/N prompts."
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "#### Examples"
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "```java"
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// ..."
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// ------------------------------------------------------------"
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// Q: What is market-failure?"
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "//   Enter your attempt below (or `done`, `exit`, `help`):"
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  \u003e --version"
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// ------------------------------------------------------------"
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// Version: 2.0"
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// ------------------------------------------------------------"
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// Q: What is market-failure?"
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "//   Enter your attempt below (or `done`, `exit`, `help`):"
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  \u003e "
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "```"
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "## Features - (Proposed) Encryption and Decryption"
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "-"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "### General"
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "**Q**: Why are some of the output (e.g. questions and answer) aligned to the dashed lines but not others (like help)."
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "**A**: Question and answers could possibly be very long and could take up multiple lines. These are also important"
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "information that the economics students are trying to study. We would not want an inconsistent wrapping scheme"
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "distracting users from focusing on the contents of the flashcards. For other output with fixed lengths that"
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "slightly exceed the dashed lines, the readability is not really affected and one could even say that having all"
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "the information on a single line is more readable."
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "**Q**: Help command can be typed anywhere but is not found in the \"Anywhere\" section of this document. Why?"
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "**A**:  Anywhere section is for generic commands that have same effect regardless of user\u0027s location within"
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "application. help commands are unique and distinct across different modes, which explains the decision to place"
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "it within each mode, rather than within the \"Anywhere\" section."
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "### Deck Mode"
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "**Q**: Can my answer contain \"/ans\"?"
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "**A**: Yes, just type it in the same way as any other one-line add command:"
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "```java"
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "\u003e add My Question /ans /ans"
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "```"
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "Alternatively, `add` and `add My Question` also work since the answer will be read separately."
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "**Q**: Why is a single line update command not provided?"
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "**A**: When updating the information on a flashcard, it is important to view the previous contents of the flashcard"
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "to determine the correct new information to update the flashcard. Therefore, it is unlikely that there will be a"
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "useful scenario for a single line update command."
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "### Game Mode"
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "**Q**: What if my flash card answer contains a single word \"done\" or \"exit\"?"
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "```java"
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// Q: What is the command to exit Game Mode or Deck Mode?"
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "//   Enter your attempt below (or `done`, `exit`, or `help`):"
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  \u003e done"
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// ------------------------------------------------------------"
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// You are back in Normal Mode"
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// ------------------------------------------------------------"
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "[Normal]"
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  \u003e"
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "```"
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "**A**: Escape the command using punctuations, e.g. `\\done` or `\"done\"`."
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "```java"
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// Q: What is the command to exit Game Mode or Deck Mode?"
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "//   Enter your attempt below (or `done`, `exit`, or `help`):"
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  \u003e \"done\""
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// A: done"
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// The % match between your answer and the actual answer is: 100.00"
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// ------------------------------------------------------------"
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// ..."
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "```"
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "-"
        },
        "content": "## Command Summary"
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "### Normal Mode"
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "|Action|Format|Example|"
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "|------|------|-------|"
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "|Create deck|`create \u003cnm\u003e`|`create market-failure`|"
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "|Tag deck|`tag \u003cix\u003e /tag \u003ctag1\u003e [\u003ctag2\u003e ...]`|`tag 1 /tag important final-exam`|"
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "|Untag deck|`untag \u003cix\u003e /tag \u003ctag1\u003e [\u003ctag2\u003e ...]`|`untag 1 /tag important`|"
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "|Search by tag(s)|`search \u003ctag1\u003e [\u003ctag2\u003e ...]`|`search final-exam important`|"
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "|Display decks|`decks`||"
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "|Delete deck|`delete \u003cix\u003e`|`delete 1`|"
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "|Enter Deck Mode|`edit \u003cix\u003e`|`edit 1`|"
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "|Enter Game Mode|`start \u003cix\u003e`|`start 1`|"
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "|Create PowerPoint|`pptx \u003cix\u003e [-y] [-oc \u003cbg color\u003e \u003ctxt color\u003e] [-cs \u003ccs index\u003e]`|`pptx 1`|"
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "|Help|`help`||"
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "### Deck Mode"
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "|Action|Format|Example|"
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "|------|------|-------|"
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "|Add flash card|`add`||"
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "|List flash cards|`list [/ans]`||"
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "|Delete flash card|`delete \u003cix\u003e`|`delete 1`|"
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "|Update flash card|`update \u003cix\u003e`|`update 1`|"
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "|Enter Game Mode|`start`||"
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "|Create PowerPoint|`pptx [-y]`||"
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "|Exit Deck Mode|`done`||"
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "|Help|`help`||"
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "### Game Mode"
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "|Action|Format|Example|"
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "|------|------|-------|"
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "|Done|`done`||"
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "|Help|`help`||"
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "### Anywhere"
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "|Action|Format|Example|"
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "|------|------|-------|"
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "|Exit program|`exit`||"
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "|Show version|`--version`||"
      }
    ],
    "authorContributionMap": {
      "alwaysnacy": 92,
      "kaijiel24": 233,
      "LiewWS": 198,
      "zhixiangteoh": 695,
      "-": 34
    }
  },
  {
    "path": "docs/team/LiewWS.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "# Liew Wei Siew - Project Portfolio Page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "eCardnomics is a **desktop flashcard application to quickly create, manage, and access new flashcards via a Command"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "Line Interface (CLI)**. While it is mainly targeted at Junior College economics students, eCardnomics can be used"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "by anyone who would need to keep track of large amounts of *text-based* information. This is facilitated by the "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "capabilities to group similar flashcards into decks and tag decks to provide a summary of the information contained"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "in the deck. Furthermore, the game mode and the feature of exporting decks into powerpoint allow review of the "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "help theinformation to user to memorize the text data."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "### Summary of Contributions"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "[Code contribution as detected by RepoSense.](https://nus-cs2113-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dliewws)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "In v1.0:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "* Implemented Help command in Normal Mode"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "* Refactored code in **`NormalParser`**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "* Added JUnit tests for **`CreateCommand`** and  **`DeleteDeckCommand`**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "* Updated behaviour of Delete Command in Normal Mode to the specification in the User Guide"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "* Added assertions to methods in **`NormalParser`**, **`Deck`**, **`DeckList`** and **`FlashCard`**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "* Added logging for **`NormalParser`** methods."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "##### Enhancements implemented"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "In v2.0:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "* Implemented pretty printing for question and answer when printing flashcards and added JUnit tests"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "* Implemneted feature to update flashcards in existing decks and added Junit tests"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "* Implemented feature to add and delete flashcards in a single line command"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "In v2.1:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "* Refactor the pretty printing method to **`Ui`** so that it can be used for formatting other output."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "* Implement logging to file to replace the printing of log to console output."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "##### Contributions to User Guide"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "* Wrote the section for the Update Command in Deck Mode"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "* Added the one-line versions of the commands to add flashcard, delete flashcard and delete deck."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "##### Contributions to Developer Guide"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "* Described the User Interface and Deck Model under the Design section."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "* Explained the Pretty Printing feature under the Implementation-Features section."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "* Documented some non-functional requirements and manual testing steps. "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "##### Contributions to team-based tasks"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "* Set-up the GitHub team organisation."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "* Compiled some FAQs into the User Guide."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "##### Review/mentoring contributions"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "Reviewed and provided recommendations for [this](https://github.com/AY2021S1-CS2113-T14-2/tp/pull/94)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "major pull request by Zhixiang."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "##### Contributions beyond the project team"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "* Reviewed the Developer Guide for [ModTracker](https://github.com/nus-cs2113-AY2021S1/tp/pull/62) and provided"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "suggestions for improving UML diagrams."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "* Tested v2.0 of PlanNUS and reported bugs including [this](https://github.com/AY2021S1-CS2113T-F12-1/tp/issues/185)."
      }
    ],
    "authorContributionMap": {
      "LiewWS": 54,
      "zhixiangteoh": 2,
      "-": 5
    }
  },
  {
    "path": "docs/team/alwaysnacy.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "# Huynh Thi Thu Trang - Project Portfolio Page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "### Summary of Contributions"
      }
    ],
    "authorContributionMap": {
      "zhixiangteoh": 2,
      "-": 5
    }
  },
  {
    "path": "docs/team/kaijiel24.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "# Liau Kai Jie - Project Portfolio Page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "eCardnomics is a complete Command Line Interface Flash Card manager program for fast-typing, Junior College Economics "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "students to create flash cards. The manager can store multiple decks of flash cards, which consists of a question and an "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "answer, and has 3 distinct modes of operation."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "In Normal mode, it can manage decks of flash card performing operations such as `create`, `delete`, `tag`, `search` and "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "`ppt` on a particular deck. "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "There is also Deck mode which can accessed from Normal mode via the operation `edit` which allows the user to edit the "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "flash cards within a deck by performing operations such as `add`, `delete` and `update`. "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "The last mode is Game mode which is the main tool that the users will be using after they have created a deck to help them "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "with their studying by practicing active recall. Questions will be presented one at a time, at random, and the user has to key in the "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "answer as they remember it. The program will then calculate the percentage similarity with the correct answer and display "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "the original answer at the same time. The program prompts the user on whether to have the question come up again in the current "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "game. "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "### Summary of Contributions"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "The following are the basic and additional features that I have worked on:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "Basic features"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "* Run Normal mode and run Deck mode in Main"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "* Normal Parser "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "* Deck Parser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "* Edit command to enter Deck mode from Normal mode"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "* Exit command from both Normal and Deck mode"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "* Done Edit command to return to Normal mode form Deck mode"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "* Getting index from user input to be used in commands which require an index (such as `delete`, `edit`,`tag`)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "* Handling Exceptions for user input index (such as number too big, index format error)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "Additional features"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "* Powerpoint command "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    * This feature allows the user to print any deck to a PowerPoint Slide (.pptx file)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    * The target for this could be students who wish to use the flash cards they have created on other platforms such"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        their mobile phones or test themselves outside of the CLI. "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    * This command can be called from both Normal mode (need to specify which deck to use) and Deck mode (do not "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        need to specify, automatically uses the current deck)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "* \u0027Force Yes\u0027 option for commands that have prompt for confirmation (such as `delete` and `ppt`)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    * This feature allows fast-typist to directly enter a one-line command by adding the option `-y` after the commands"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        to by pass the prompt, and to be more efficient in their use of the program."
      }
    ],
    "authorContributionMap": {
      "kaijiel24": 35,
      "zhixiangteoh": 2,
      "-": 5
    }
  },
  {
    "path": "docs/team/wangwaynesg.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "# Wang Wayne - Project Portfolio Page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "eCardnomics is a **desktop flashcard application to quickly create, manage, and access new flashcards via a Command"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "Line Interface (CLI)**. The main target audience of this application is Junior College students studying economics."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "The main functionality stores text based flash cards in decks and displays them to the user upon request."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "There are also added features such as a gamde mode and exporting to powerpoint slides. "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "The goal of this application is to help the user memorize their flash cards to study better."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "### Summary of Contributions"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "#### Code contributed"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "Summary: [tP Code Dashboard](https://nus-cs2113-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dwangwaynesg\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-09-27\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "**In v1.0:**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "* Wrote some basic commands such as [Add Command](https://github.com/AY2021S1-CS2113-T14-2/tp/pull/21) and [List Command](https://github.com/AY2021S1-CS2113-T14-2/tp/pull/22)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "* [JUnit tests for commands written](https://github.com/AY2021S1-CS2113-T14-2/tp/pull/69)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "* [Exception Handling for commands written](https://github.com/AY2021S1-CS2113-T14-2/tp/pull/51)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "**In v2.0:**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "* Implement [Storage feature](https://github.com/AY2021S1-CS2113-T14-2/tp/pull/98)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "* [Developer\u0027s Guide for Storage](https://github.com/AY2021S1-CS2113-T14-2/tp/pull/121)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "**In v2.1:**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "* [Enhanced storage to check for corrupted file](https://github.com/AY2021S1-CS2113-T14-2/tp/pull/155)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "#### Enhancements implemented"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "* Wrote the **`Storage`** Class to implement storage features for the program."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "* Enhanced the **`Storage`** Class to be able to handle corrupted data."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "#### Contributions to documentation"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "* Wrote the section for the **`Add Command`** and **`List Command`** for Deck Mode."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "#### Contributions to the DG"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "* Wrote the section for the **`Storage`** Class and constructed its sequence diagram."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "* Wrote several users stories."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "#### Contributions to team-based tasks"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "* Helped raise questions and suggestions during discussions."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "* Conformed to timeliness of internal deadlines."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "#### Review/mentoring contributions"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "* Helped look through some teammates\u0027 pull requests before their merge."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "#### Contributions beyond the project team"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "* Answered coursemates\u0027 question during lecture in zoom chat."
      }
    ],
    "authorContributionMap": {
      "zhixiangteoh": 1,
      "wangwaynesg": 49,
      "-": 5
    }
  },
  {
    "path": "docs/team/zhixiangteoh.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "# Zhixiang Teoh - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "eCardnomics is a **desktop flashcard application to quickly create, manage, and access new flashcards via a Command"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": " Line Interface (CLI)**. eCardnomics is targeted at economics students in Junior College in Singapore, and aims to"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": " enhance students’ study experience as an efficient and handy aid for active recall. "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "The main goals of this application are to help students store and segment their economics subject syllabus into"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": " different decks, consolidate bite-sized information within each topic by way of flash cards, and offer a fun"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  way for students to study and revise."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "## Summary of Contributions"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "### Code contributed"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "Summary: [tP Code Dashboard](https://nus-cs2113-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dzhixiangteoh\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-09-27\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "In short, I did the following:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "**v1.0**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "* [Set up UG, write Introduction, Preliminaries](https://github.com/AY2021S1-CS2113-T14-2/tp/commit/a4eb7de173daddef27e3c76c7a58b62939063e0b), [Command Summary](https://github.com/AY2021S1-CS2113-T14-2/tp/commit/c9d16d286de7d1338ae8ec4dcaf224f45f8f0b78) "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "* UG for [Normal Mode, half of Deck Mode](https://github.com/AY2021S1-CS2113-T14-2/tp/commit/afd37e97d5f1fe4d585538d3b8973cf45dd75b51)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "* [Half of Deck Mode commands, for v1.0](https://github.com/AY2021S1-CS2113-T14-2/tp/commit/4f52a8d8aa29b3dbe61442f4eaf3117bf3f1c9ac)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "* [JUnit Tests for DeckParser, NormalParser](https://github.com/AY2021S1-CS2113-T14-2/tp/commit/768192db9fdb8e2064ca44348375dd7664faf855), Ui"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "**v2.0**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "* UG for [Game Mode](https://github.com/AY2021S1-CS2113-T14-2/tp/commit/207103b41966691a768502f899e1b6d4c23a3950), [Help commands](https://github.com/AY2021S1-CS2113-T14-2/tp/commit/15b51255ecde6085d941e0825180668e5d1a149d), [Command Summary](https://github.com/AY2021S1-CS2113-T14-2/tp/commit/4129639e2d6e3c6fc421e1e0ebec79148b967d96), FAQ"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "* DG for [Commands](https://github.com/AY2021S1-CS2113-T14-2/tp/commit/072d00d0e703b9d90d486f0c8ab35bc9f6bf7261) and [Game Mode](https://github.com/AY2021S1-CS2113-T14-2/tp/commit/ba39ebbb46ce52e55001857c0c8a65e57af053a3) sections, [Product Scope, User Stories](https://github.com/AY2021S1-CS2113-T14-2/tp/commit/b22e88ee875479db0b77ee021487ae6253afd3b0)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "* Implementation of [Game Mode](https://github.com/AY2021S1-CS2113-T14-2/tp/commit/f3975adca5c43c6172d4cc7d7d5a6452493368d5)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "* Refine Help commands"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "* JUnit Tests for Game Mode"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "### Enhancements implemented"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "In v1.0, I split the work with Wayne in implementing the Deck Mode commands. Specifically, I implemented:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "* [DeleteCommand](https://github.com/AY2021S1-CS2113-T14-2/tp/commit/4f52a8d8aa29b3dbe61442f4eaf3117bf3f1c9ac)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "* [HelpCommand](https://github.com/AY2021S1-CS2113-T14-2/tp/commit/622e584ff2847c15877375fd05a3c7db60bc9858)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "`DeleteCommand` required me to implement a `y/n` prompt method for the `Ui` class, to be used by `DeckParser`, which"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": " was later used by all commands in the application that utilise `y/n` prompts. [Example of the user-interface of the"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  `y/n` prompt](../UserGuide.md#examples-4)."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "In v2.0, I implemented the [Game Mode feature](https://github.com/AY2021S1-CS2113-T14-2/tp/pull/94). For this, our"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": " team originally thought it would be just another command implemented as part of Normal Mode or Deck Mode, but I felt"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  it deserved its own mode. I created a separate package, [`game`](), and parser class `GameParser` for Game Mode"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  , with the `game` package abstracting away the entire Game Mode implementation from the rest of the application."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "So the resulting `game` package is structured as such:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "```"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "game "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  | Game"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  | GameEngine"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "     | runGameLoop(), update()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  | GameStorage"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "     | originalDeck, deque, retestStore"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "```"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "Here, I tried as much as possible to incorporate the Single Responsibility Principle, both within the `game` classes"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": " and the SRP-ness of the existing classes."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "### Contributions to team-based tasks"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "Some examples:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "* Re-organised packages a few times"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "* [Released JAR v1.0 and v1.1](https://github.com/AY2021S1-CS2113-T14-2/tp/releases)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "* Maintained issue tracker - authored over 37 issues, closed and opened relevant issues, wrapped up Milestones"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "* [Created and started several Test classes](https://github.com/AY2021S1-CS2113-T14-2/tp/pull/55), e.g. `UiTest`, `NormalParserTest`, `DeckParserTest`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "* [Started and set up User Guide](https://github.com/AY2021S1-CS2113-T14-2/tp/pull/57)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "* Wrote some trivial aspects of User Guide (e.g. Introduction, Preliminaries, Command Summary) and Developer Guide"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": " (e.g. Product Scope, User Stories)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "* Formatted and arranged [team Google Docs](https://docs.google.com/document/d/1e6HD8JaxAlITihBmqEDQnyKyVa52FLcAWi3Im_7wS6g/edit)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "### Review/mentoring contributions"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "Some examples:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "* Reviewed and merged about 5-10 Pull Requests by other teammates"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "* [Authored](https://github.com/AY2021S1-CS2113-T14-2/tp/pulls?q\u003dis%3Apr+is%3Aclosed+author%3Azhixiangteoh+) over 30"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": " Pull Requests"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "### Contributions beyond the project team"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "Notable posts/responses posted in forum, and peer software testing:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "* [Generating markdown table of contents](https://github.com/nus-cs2113-AY2021S1/forum/issues/108)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "* [Comments on others\u0027 forum posts](https://github.com/nus-cs2113-AY2021S1/forum/issues?q\u003dis%3Aissue+is%3Aclosed+zhixiangteoh)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "* [Peer Evaluation-Dry Run on `Scheduler--;`](https://github.com/zhixiangteoh/ped/issues)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "### Contributions to the UG"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "Mainly [Introduction](https://ay2021s1-cs2113-t14-2.github.io/tp/UserGuide.html#introduction), v1.0 Normal Mode"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": " commands, [Features - Game Mode](https://ay2021s1-cs2113-t14-2.github.io/tp/UserGuide.html#features---game-mode), [Command Summary](https://ay2021s1-cs2113-t14-2.github.io/tp/UserGuide.html#command-summary)."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "* Introduction"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "* Contents"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "* [v1.0 Normal Mode commands](https://github.com/AY2021S1-CS2113-T14-2/tp/pull/57)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "* some v1.0 Deck Mode commands"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "* [`help` commands](https://github.com/AY2021S1-CS2113-T14-2/tp/pull/156)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "* `start` commands"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "* [Game Mode commands and gameplay description](https://github.com/AY2021S1-CS2113-T14-2/tp/pull/100)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "* Anywhere Mode"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "* FAQ"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "* Command Summary"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "### UG Extracts"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "#### Features - Game Mode"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "##### Gameplay"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "Questions are displayed in a randomised order. At each question, the user will:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "1. Try to attempt an answer at the question, by typing at the prompt; then"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "2. Press `\u003center\u003e` (optionally with an empty attempt)."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "Then, the correct answer is displayed, and our \u0027advanced\u0027 algorithm scores the user\u0027s attempt against the correct"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": " answer. Finally, the user is given the option to re-attempt the question later. See below for example gamplay."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": " "
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "##### Examples"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "* Start Game Mode (from within Deck Mode)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "```java"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "[Deck - Micro-Economics]"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  \u003e list"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// ------------------------------------------------------------"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// You are now viewing deck: Micro-Economics"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// 1. Question: What is the Law of demand?"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// "
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// 2. Question: What is the Law of supply?"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// 3. Question: What is price elasticity of demand?"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// 4. Question: What is price elasticity of supply?"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// ------------------------------------------------------------"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "[Deck - Micro-Economics]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  \u003e start"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "```"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "### Contributions to the DG"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "Mainly [Commands section](https://ay2021s1-cs2113-t14-2.github.io/tp/DeveloperGuide.html#commands) and "
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "[Exceptions section](https://ay2021s1-cs2113-t14-2.github.io/tp/DeveloperGuide.html#exceptions) under Design, "
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "and [Game Mode section](https://ay2021s1-cs2113-t14-2.github.io/tp/DeveloperGuide.html#game-mode) under Features. "
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "Relevant Pull Requests for DG:"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "* Commands [v2.0](https://github.com/AY2021S1-CS2113-T14-2/tp/pull/89), [v2.1](https://github.com/AY2021S1-CS2113-T14-2/tp/pull/166)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "* [Exceptions](https://github.com/AY2021S1-CS2113-T14-2/tp/pull/166)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "* Game Mode [v2.0](https://github.com/AY2021S1-CS2113-T14-2/tp/pull/104), [v2.1](https://github.com/AY2021S1-CS2113-T14-2/tp/pull/166)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "* [Trivial](https://github.com/AY2021S1-CS2113-T14-2/tp/pull/105)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "### DG Extracts"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "#### Design - Exceptions section"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "#### Feature Implementation - Game Mode"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "#### General Architecture"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  "
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "[DG-Implementation-Features-Game-Mode-Architecture](../images-dg/DG-Game-Mode-Architecture-Overview.png?raw\u003dtrue"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": " \"Game Mode"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": " Architecture Overview\")"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "[DG-Implementation-Features-Game-Storage-Game-Engine](../images-dg/DG-Game-Storage-Game-Engine.png?raw\u003dtrue \"Game"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": " Mode Game Storage Game Engine\")"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "#### Example Use Case"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "For a more contextual use case, consider the following scenario of Econs Wiz attempting the Game Mode for the first"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": " deck, `Demand-Supply`, in his deck list."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "\u003e Note: Focus on the biggest box in the diagram!"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "![DG-Implementation-Features-Game-Use-Case](../images-dg/DG-Game-Use-Case.png?raw\u003dtrue \"Game Mode Use Case\")"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "**API**: [seedu/ecardnomics/game](https://github.com/AY2021S1-CS2113-T14-2/tp/tree/master/src/main/java/seedu/ecardnomics/game)"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "Since there are quite a few things going on in this diagram, here are the key takeaways (the last of which arguably"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": " the most important):"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "- the retest question pool (`retestStore`) is updated upon the user\u0027s attempt at each question and response to the"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": " prompt to include or exclude the flash card to be displayed again—if `y` then the flash card is added to the"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  `retestStore`"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "- whenever the current question pool (`deque`) is emptied, i.e. all flash cards have been popped off and displayed to"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": " the user, the retest question pool (`retestStore`) is consulted from which to create a new question pool (`deque`)"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "- after a specific question is displayed, it does not appear again (even if the user has chosen to re-encounter the"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": " question) until after all other questions in the current question pool (`deque`) have been exhausted "
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "#### Sequential Flow"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "For a more formal sequential flow of the inner workings of Game Mode, the following elaborates the execution"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": " sequence of Game Mode, from after a `start` command has been parsed in Normal Mode:"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "![DG-Implementation-Features-Game-Mode-Sequence](../images-dg/DG-Game-Mode-Sequence.png?raw\u003dtrue \"Game Mode UML Sequence"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": " Diagram\")"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": " "
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": " In the above diagram the key takeaway is the existence of an *intermediary* `game:Game` object that holds"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  `GameEngine` and `GameStorage` together. In fact, this is the sole purpose of the `Game` class: to hold the"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "   current game instance, in a Single-Responsibility-Principle (SRP) and Object-Oriented Programming (OOP) manner. "
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "   This intermediary role of the `Game` class is also illustrated in the upper part of the earlier [use case"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    diagram](#example-use-case). Note how it is from this `game` object that the main game loop, run and managed by"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "     `GameEngine`, is started."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": " "
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "[DG-Implementation-Features-Game-Mode-Sequence-run-game-loop-sd](../images-dg/DG-run-game-loop-sd.png?raw\u003dtrue \"Game"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": " Mode UML Sequence Diagram run game loop sd\")"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": " "
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "The main game loop. As with all simple games, this flash card game mode is fundamentally built on the concept of a"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": " possibly never-ending game loop with specific end conditions. In this case, the main end condition is explicitly"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  that the `command` object that is parsed and returned upon the `getAttempt()` call (that prompts the user for an"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "   answer attempt) is either a `DoneGameCommand` or `ExitCommand`. "
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "\u003e This is not the *only* end condition, though, because the other important but implicit end scenario is when the"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "\u003e question pool is exhausted (i.e., `storage.deque` is empty) **and** the retest question pool (`storage.retestStore"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "\u003e`) is empty."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "Naturally, the other sequence of special note here is the whole `update()` sequence, and even more specifically the"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": " `updateDeque()` call within the `update()` sequence. Notice how `updateDeque()` calls `createRandomisedStack(storage"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": " .retestStore)` with the `retestStore` as argument. This essentially creates a new randomised question pool from the"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  retest question pool. "
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  "
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "Notice how this `updateDeque()` sequence is only called exactly when the `storage.deque` is empty (i.e., when all"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": " questions have been popped off the question pool). This is important because it ensures that the user encounters all"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  available questions in the `deque` at least once before the retest questions are later displayed. Cross-check this"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "   with the detailed descriptions of the inner workings of the game loop implementation shown in the earlier"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    [architecture](#general-architecture) and [use case](#example-use-case) diagrams."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  "
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "Lastly, notice how `refreshRetestStore()` is called at the end of `updateDeque()` to, as its name suggests, clear the"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": " retest question pool to get ready to store the next wave of retest questions. This is also covered in the bottom few"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  lines of the `GameEngine` portion of the use case diagram."
      }
    ],
    "authorContributionMap": {
      "zhixiangteoh": 233
    }
  },
  {
    "path": "src/main/java/seedu/ecardnomics/Main.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "package seedu.ecardnomics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "import seedu.ecardnomics.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.command.deck.DoneEditCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.command.game.DoneGameCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.command.game.GameStartCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.command.normal.EditCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.command.ExitCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.command.normal.StartCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.deck.Deck;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.deck.DeckList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.game.Game;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "import seedu.ecardnomics.parser.DeckParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "import seedu.ecardnomics.parser.NormalParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "import seedu.ecardnomics.storage.LogStorage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "import seedu.ecardnomics.storage.Storage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": " * Main Class for eCardnomics - Flash Card Manager Command Line Program."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public static final double VERSION_NUMBER \u003d 2.0;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public static DeckList deckList \u003d new DeckList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public static NormalParser normalParser \u003d new NormalParser(deckList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    public static Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     * Executes the command."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     * @param command command from parser"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    private static void executeCommand(Command command) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        command.execute();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     * Runs Deck Mode to edit a deck."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     * @param deck Deck to edit"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     * @return Command used to exit Deck Mode (either \u003ccode\u003edone\u003c/code\u003e or \u003ccode\u003eexit\u003c/code\u003e)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public static Command runDeckMode(Deck deck) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        DeckParser deckParser \u003d new DeckParser(deckList, deck);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        String userInput;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        Command command;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            Ui.printDeckPrompt(deck);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            userInput \u003d Ui.readUserInput();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            command \u003d deckParser.parse(userInput);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            executeCommand(command);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        } while (!DoneEditCommand.isDoneEdit(command)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "                \u0026\u0026 !ExitCommand.isExit(command)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "                \u0026\u0026 !StartCommand.isStart(command));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "     * Runs Game Mode for specified deck."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "     * @param deck to run Game Mode on"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "     * @return Command used to exit Game Mode (either \u003ccode\u003edone\u003c/code\u003e or \u003ccode\u003eexit\u003c/code\u003e)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public static Command runGameMode(Deck deck) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        GameStartCommand gameStartCommand \u003d new GameStartCommand(deck);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        executeCommand(gameStartCommand);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        Game game \u003d gameStartCommand.getGameInstance();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        return game.run();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     * Runs Normal Mode in a loop until \u003ccode\u003eexit\u003c/code\u003e in input."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     * Enters Deck Mode when \u003ccode\u003eedit\u003c/code\u003e is input."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public static void runNormalMode() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        Ui.printGreeting();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        String userInput;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        Command command;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            Ui.printNormalPrompt();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            userInput \u003d Ui.readUserInput();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            command \u003d normalParser.parse(userInput);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            executeCommand(command);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            if (EditCommand.isEdit(command)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "                EditCommand editCommand \u003d (EditCommand) command;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "                command \u003d runDeckMode(editCommand.getDeck());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "                if (command instanceof DoneEditCommand) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "                    Ui.printNormalWelcome();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "                }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            if (StartCommand.isStart(command)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "                StartCommand startCommand \u003d (StartCommand) command;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "                command \u003d runGameMode(startCommand.getDeck());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "                if (command instanceof DoneGameCommand) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "                    Ui.printNormalWelcome();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        } while (!ExitCommand.isExit(command));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        Ui.printExitLine();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     * Main method."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "     * @param args Arguments from command line when user starts the program"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        deckList \u003d storage.load(deckList);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        runNormalMode();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "            storage.write(Main.deckList);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            Ui.printMessage(\"Unable to write file...\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaijiel24": 76,
      "LiewWS": 6,
      "zhixiangteoh": 41,
      "wangwaynesg": 6,
      "-": 8
    }
  },
  {
    "path": "src/main/java/seedu/ecardnomics/Mode.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "package seedu.ecardnomics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "public enum Mode {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    NORMAL(\"Normal\"), DECK(\"Deck\");"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    private Mode(String name) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaijiel24": 17
    }
  },
  {
    "path": "src/main/java/seedu/ecardnomics/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "package seedu.ecardnomics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "import org.apache.commons.math3.analysis.function.Log;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "import seedu.ecardnomics.deck.Deck;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import seedu.ecardnomics.deck.DeckList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.deck.FlashCard;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.game.Game;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "import seedu.ecardnomics.storage.LogStorage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import static seedu.ecardnomics.Main.VERSION_NUMBER;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    // Output lines to users"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public static final String GREETING_LINES \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            \"Hello! Welcome to eCardnomics,\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "                    + \"your one stop Flash Cards solution\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public static final String NORMAL_WELCOME_LINE \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            \"You are back in Normal Mode\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public static final String DECK_WELCOME_LINE \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            \"You are now in Deck Mode, editing: \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public static final String BYE_LINE \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public static final String NOT_RECOGNISED_LINE \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            \"Command not recognised\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public static final String YN_LINE \u003d \"[y/n]\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    public static final String ADD_FLASHCARD_LINE \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "            \"You are now adding a FlashCard to: \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    public static final String ENTER_QUESTION_LINE \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "            \"Enter question:\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    public static final String ENTER_ANSWER_LINE \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "            \"Enter answer:\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    public static final String FLASHCARD_ADDED_LINE \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "            \"FlashCard successfully added!\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    public static final String LIST_FLASHCARDS_LINE \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "            \"You are now viewing deck: \";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public static final String DELETE_FLASHCARD_LINE \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            \"Do you want to delete the following flash card? [y/n] \";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public static final String FLASHCARD_DELETED_LINE \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            \"The following flash card has been deleted:\\n  \u0027\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public static final String NEW_DECK_CREATED_LINE \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            \"New deck created: \";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public static final String DECKS_AVAILABLE_LINE \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            \"The following decks are available:\\n\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public static final String DELETED_DECK_QUESTION_LINE \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            \"Do you want to delete %1$s deck? [y/n] \";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public static final String DELETED_DECK_LINE \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            \"%1$s has been deleted.\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public static final String PPTX_DECK_QUESTION_LINE \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            \"Do you want to print %1$s deck to PowerPoint? [y/n] \";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public static final String PPTX_DECK_LINE \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            \"%1$s has been created as PowerPoint.\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public static final String INVALID_YN_RESPONSE_LINE \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            \"Response should be \u0027y\u0027 or \u0027n\u0027\\n  \u003e \";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    private static final String EMPTY_DECK_LINE \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "            \"Deck is currently empty!\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    private static final String NEW_TAGS_LINE \u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            \"The deck %1$s has been tagged as: %2$s\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    private static final String REMOVED_TAGS_QUESTION_LINE \u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            \"Do you want to remove the tag(s) %1$s from %2$s? [y/n] \";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    private static final String REMOVED_TAGS_LINE \u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            \"The tag(s) %1$s have been removed from the deck %2$s.\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    private static final String NEW_QUESTION_LINE \u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            \"New Question: \";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    private static final String NEW_ANSWER_LINE \u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            \"New Answer: \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    private static final String QUESTION_UPDATED_LINE \u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            \"Question updated.\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    private static final String ANSWER_UPDATED_LINE \u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            \"Answer updated.\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    private static final String QNA_UPDATED_LINE \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            \"Question and answer updated.\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    private static final String NO_UPDATE_LINE \u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            \"Original question and answer retained\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    private static final String INCLUDE_EXCLUDE_LINE \u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            \"Do you want to re-attempt this question later? [y/n] \";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    private static final String ATTEMPT_FEEDBACK_LINE \u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            \"The score for your answer is:\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    private static final String ENTER_ATTEMPT_LINE \u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            \"  Enter your attempt below (or `done`, `exit`, `help`):\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    private static final String DONE_GAME_LINE \u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            \"You have completed all the flash cards in this deck!\\n\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "                    + \"Returning to Normal Mode...\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    private static final String GAME_EMPTY_DECK_LINE \u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            EMPTY_DECK_LINE + \" Please add some flash cards first.\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    private static final String INVALID_TAGS_LINE \u003d"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            \"You entered invalid tag(s)!\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    private static final String DECKS_HAVING_TAGS_LINE \u003d"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            \"The decks having tags you are searching for:\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    private static final String NO_DECKS_WITH_TAGS_LINE \u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            \"There is no decks having the tags you are looking for.\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public static final String QUESTION \u003d \"Question \";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public static final String ANSWER \u003d \"Answer\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public static final String CREATE_NEW_FILE_ERROR_LINE \u003d \"Error creating new file - \";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public static final String WRITE_TO_FILE_ERROR_LINE \u003d \"Error writing for file\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public static final String FILE_NOT_FOUND_ERROR_LINE \u003d \" not found or file currently open\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    // Commands"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public static final String EXIT \u003d \"exit\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public static final String EDIT \u003d \"edit\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public static final String START \u003d \"start\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public static final String DONE \u003d \"done\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    public static final String ADD \u003d \"add\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public static final String CREATE \u003d \"create\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    public static final String LIST \u003d \"list\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public static final String DECKS \u003d \"decks\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public static final String DELETE \u003d \"delete\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    public static final String UPDATE \u003d \"update\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public static final String HELP \u003d \"help\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public static final String TAG \u003d \"tag\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public static final String UNTAG \u003d \"untag\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public static final String PPTX \u003d \"pptx\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public static final String SEARCH \u003d \"search\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public static final String VERSION_CMD \u003d \"--version\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    // Options"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public static final String FORCE_YES_OPT \u003d \"-y\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public static final String COLOR_SCHEME_OPT \u003d \"-cs\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public static final String ORIGINAL_COLOR_OPT \u003d \"-oc\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    //Regex"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public static final String DIGITS_REGEX \u003d \"\\\\d+\";"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public static final String PUNC_REGEX \u003d \"\\\\p{Punct}\";"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public static final String ORIGINAL_COLORS_REGEX \u003d \"-oc\\\\s+(\\\\w+)\\\\s+(\\\\w+)\\\\s*(-|$)\";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public static final String COLOR_SCHEME_REGEX \u003d \"-cs\\\\s(\\\\S+)\\\\s*(-|$)\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public static final String Y \u003d \"y\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public static final String N \u003d \"n\";"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public static final String DASH_LINES \u003d \"------------------------------------------------------------\";"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public static final String LOGO1 \u003d \"        ___              _                       _\";"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public static final String LOGO2 \u003d \"  ___  / __\\\\__ _ _ __ __| |_ __   ___  _ __ ___ (_) ___ ___\";"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public static final String LOGO3 \u003d \" / _ \\\\/ /  / _` | \u0027__/ _` | \u0027_ \\\\ / _ \\\\| \u0027_ ` _ \\\\| |/ __/ __|\";"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public static final String LOGO4 \u003d \"|  __/ /__| (_| | | | (_| | | | | (_) | | | | | | | (__\\\\__ \\\\\";"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public static final String LOGO5 \u003d \" \\\\___\\\\____/\\\\__,_|_|  \\\\__,_|_| |_|\\\\___/|_| |_| |_|_|\\\\___|___/\";"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public static Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    private static LogStorage logger \u003d new LogStorage(\"UiLogger\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     * Reads user input from command line."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     *"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     * @return String containing userInput"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public static String readUserInput() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        return in.nextLine();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     * Displays dash line."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public static void printDashLines() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        System.out.println(DASH_LINES);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     * Displays the message given."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     *"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     * @param message message to be displayed to user"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public static void printMessage(String message) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        printDashLines();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        System.out.println(message);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        printDashLines();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public static void printLogo() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        System.out.println(LOGO1);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        System.out.println(LOGO2);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        System.out.println(LOGO3);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        System.out.println(LOGO4);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        System.out.println(LOGO5);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        System.out.println(\"\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     * Displays the prompt for user input in Normal Mode."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public static void printNormalPrompt() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        System.out.println(\"[Normal]\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        System.out.print(\"  \u003e \");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     * Displays the prompt for user input in Deck Mode."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public static void printDeckPrompt(Deck deck) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        System.out.println(\"[Deck - \" + deck.getName() + \"]\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        System.out.print(\"  \u003e \");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "     * Displays the prompt for user input in Game Mode."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public static void printGamePrompt(Deck deck) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        System.out.println(\"[Game - \" + deck.getName() + \"]\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        System.out.print(\"  \u003e \");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     * Displays the prompt for user input without specifying current mode."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public static void printPrompt() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        System.out.print(\"  \u003e \");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     * Displays the welcome message from Deck Mode to Normal Mode."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public static void printNormalWelcome() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        printMessage(NORMAL_WELCOME_LINE);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     * Displays the welcome message from Normal Mode to Deck Mode."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public static void printDeckWelcome(int index, Deck deck) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        printMessage(DECK_WELCOME_LINE + \"[\" + index + \"] \" + deck.getName());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "     * Displays the welcome message for Game Mode."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public static void printGameWelcome(int index, Deck deck) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        printMessage(Game.WELCOME_MESSAGE + \"[\" + index + \"] \" + deck.getName());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     * Displays the greeting message."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public static void printGreeting() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        printDashLines();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        printLogo();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        System.out.println(GREETING_LINES);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        printDashLines();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     * Displays the exit message."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public static void printExitLine() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        printMessage(BYE_LINE);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     * Displays the not recognised message."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public static void printNotRecognisedLine() {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        printMessage(NOT_RECOGNISED_LINE);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "     * Displays the add FlashCard line."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "     * @param deck current deck"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    public static void printAddFlashCardLine(Deck deck) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        printMessage(ADD_FLASHCARD_LINE + deck.getName());"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "     * Displays the enter question line."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    public static void printEnterQuestionLine() {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        System.out.println(ENTER_QUESTION_LINE);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        printPrompt();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "     * Displays the enter answer line."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    public static void printEnterAnswerLine() {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        System.out.println(ENTER_ANSWER_LINE);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        printPrompt();"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "     * Displays the FlashCard added line."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    public static void printFlashCardAddedLine() {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        System.out.println(FLASHCARD_ADDED_LINE);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "     * Displays an index list of FlashCards in the deck."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "     * @param deck           deck to display"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * @param isQuestionOnly print question only if true, question and answer otherwise"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    public static void printDeck(Deck deck, boolean isQuestionOnly) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        String deckMessage \u003d \"\";"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        if (deck.toString(isQuestionOnly).trim().equals(\"\")) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            deckMessage +\u003d EMPTY_DECK_LINE;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            deckMessage +\u003d LIST_FLASHCARDS_LINE + deck.getName() + System.lineSeparator()"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                    + deck.toString(isQuestionOnly);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        printMessage(deckMessage);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "     * Displays the delete FlashCard line."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * @param question The question of the FlashCard to delete"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    public static void printDeleteFlashCardLine(String question) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        System.out.print(DELETE_FLASHCARD_LINE + \"?\\n  \u0027\" + question + \"\u0027 \");"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "     * Displays the FlashCard deleted line."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * @param question The question of the FlashCard to delete"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    public static void printFlashCardDeletedLine(String question) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        System.out.println(FLASHCARD_DELETED_LINE + question + \"\u0027\");"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "     * Displays the help page of commands."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "     * \u003cp\u003eDisplays a different help page for Normal Mode and Deck Mode.\u003c/p\u003e"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "     * @param helpDisplay help text to display"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    public static void printHelp(String helpDisplay) {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        printMessage(helpDisplay);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * Prints new deck added in the Normal Mode."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * @param deck in new Deck added"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public static void printNewDeck(Deck deck) {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        String tagsOfNewDeck \u003d deck.getTagString();"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        if (!tagsOfNewDeck.isEmpty()) {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            tagsOfNewDeck \u003d \" | Tag(s): \" + tagsOfNewDeck;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        printMessage(NEW_DECK_CREATED_LINE + deck.getName() + tagsOfNewDeck);"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * Prints all decks available in the Normal Mode."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * @param decks all decks in the list"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public static void printDeckList(DeckList decks) {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        printMessage(DECKS_AVAILABLE_LINE + decks.toString());"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * Confirms the deck the user wants to delete."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * @param deletedDeckName name of the deleted deck"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public static void printDeletedDeckQuestion(String deletedDeckName) {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        System.out.print(String.format(DELETED_DECK_QUESTION_LINE, deletedDeckName));"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * Prints the name of the deleted deck."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * @param deletedDeckName name of the deleted deck"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    public static void printDeckDeletedLine(String deletedDeckName) {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        System.out.println(String.format(DELETED_DECK_LINE, deletedDeckName));"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     * Confirms the deck the user wants to print to PowerPoint."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     *"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     * @param pptxDeckName name of the pptx deck"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public static void printPptxDeckQuestion(String pptxDeckName) {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        System.out.print(String.format(PPTX_DECK_QUESTION_LINE, pptxDeckName));"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     * Prints the name of the deck to be printed to PowerPoint."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     *"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     * @param pptxDeckName name of the pptx deck"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public static void printDeckPptxLine(String pptxDeckName) {"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        printMessage(String.format(PPTX_DECK_LINE, pptxDeckName));"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * Prints the update question lines for a flashcard."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * @param flashCard for which the question should be updated."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    public static void printUpdateQuestionLine(FlashCard flashCard) {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        // No offset since printing from start of line."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        System.out.println(flashCard.toString(true, 0));"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        System.out.println(NEW_QUESTION_LINE);"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        printPrompt();"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * Prints the update answer lines for a flashcard."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * @param flashCard for which the answer should be updated."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    public static void printUpdateAnswerLine(FlashCard flashCard) {"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        // No offset since printing from start of line."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        System.out.println(flashCard.toString(false, 0));"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        System.out.println(NEW_ANSWER_LINE);"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        printPrompt();"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * Prints line informing updated flashcards."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * @param hasNewQ boolean parameter indicating new Question provided"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * @param hasNewA boolean parameter indicating new Answer providid"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    public static void printFlashCardUpdatedLine(boolean hasNewQ, boolean hasNewA) {"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        if (hasNewQ \u0026\u0026 hasNewA) {"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            System.out.println(QNA_UPDATED_LINE);"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        } else if (hasNewQ) {"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            // !hasNewA"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            System.out.println(QUESTION_UPDATED_LINE);"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        } else if (hasNewA) {"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            // !hasNewQ"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            System.out.println(ANSWER_UPDATED_LINE);"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            System.out.println(NO_UPDATE_LINE);"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "     * Prints a line prompting user to enter only \u0027y\u0027 or \u0027n\u0027."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public static void printInvalidYorNResponse() {"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        System.out.print(INVALID_YN_RESPONSE_LINE);"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public static void printVersionNumber() {"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        printMessage(\"Version: \" + VERSION_NUMBER);"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public static void printIncludeExcludeLine() {"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        System.out.print(INCLUDE_EXCLUDE_LINE);"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public static void printAttemptFeedback(double matchPercentage) {"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        System.out.println(String.format(\"%s %.2f\", ATTEMPT_FEEDBACK_LINE, matchPercentage));"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public static boolean getInclExclConfirmation() {"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        logger.log(Level.INFO, \"Logging method getInclExclConfirmation() in Ui.\");"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        Ui.printIncludeExcludeLine();"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        return checkYorNResponse();"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public static void printGameQuestion(String question) {"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        final String label \u003d \"Q: \";"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        System.out.println(label + prettyPrintFormatter(question, label.length()));"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        System.out.println(ENTER_ATTEMPT_LINE);"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        printPrompt();"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public static void printGameEmptyDeckLine() {"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        System.out.println(GAME_EMPTY_DECK_LINE);"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public static void printAnswerGameMode(String answer) {"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        final String label \u003d \"A: \";"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        System.out.println(label + prettyPrintFormatter(answer, label.length()));"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public static void printDoneGameMessage() {"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        System.out.println(DONE_GAME_LINE);"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * Prints the new tags added to the deck."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * @param name    the name of the deck"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * @param newTags the tag(s) will be added to the deck"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public static void printNewTags(String name, String[] newTags) {"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        String tagString \u003d formStringOfTags(newTags);"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        printMessage(String.format(NEW_TAGS_LINE, name, tagString));"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * Prints out warning about invalid tags provided."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public static void printInvalidTagsLine() {"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        logger.log(Level.WARNING, \"User did not supply valid tags.\");"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        printMessage(INVALID_TAGS_LINE);"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * Prints confirmation question before tag removal."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * @param deckName the name of the deck having tags being removed"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * @param tags     the tags will be removed"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public static void printRemovedTagsQuestion(String deckName, String[] tags) {"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        String removedTags \u003d formStringOfTags(tags);"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        System.out.print(String.format(REMOVED_TAGS_QUESTION_LINE, removedTags, deckName));"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * Prints the tags that are removed from the specified deck."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * @param deckName the name of the deck having removed tags"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * @param tags     tags were removed"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public static void printTagsRemovedLine(String deckName, String[] tags) {"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        String removedTags \u003d formStringOfTags(tags);"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        System.out.println(String.format(REMOVED_TAGS_LINE, removedTags, deckName));"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * Forms a String of provided tags."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * @param tags tags to be formed to String"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * @return a String of tags"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public static String formStringOfTags(String[] tags) {"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        String stringOfTags \u003d \"\";"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        for (int i \u003d 0; i \u003c tags.length; i++) {"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            stringOfTags +\u003d tags[i];"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            if (i \u003c tags.length - 1) {"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "                stringOfTags +\u003d \", \";"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        return stringOfTags;"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * Checks y or n response from user."
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * @return true if user enters confirms, otherwise false"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    private static boolean checkYorNResponse() {"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        logger.log(Level.INFO, \"Logging method checkYorNResponse() in Ui.\");"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        String response;"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            response \u003d readUserInput();"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            assert response !\u003d null : \"response should not be null\";"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            switch (response.trim()) {"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            case Y:"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "                response \u003d Y;"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            case N:"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "                response \u003d N;"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "                logger.log(Level.INFO, \"User entered response other than \u0027y\u0027 or \u0027n\u0027\");"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "                logger.log(Level.INFO, \"Re-prompting...\");"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "                printInvalidYorNResponse();"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        } while (!response.trim().equals(Y) \u0026\u0026 !response.trim().equals(N));"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        assert (response.equals(Y) || response.equals(N)) : \"Response should be y/n\";"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        return response.equals(Y);"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * Get confirmation for deleting a deck."
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * @param deckName String representing the index of the deck in deckList"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * @return true if delete is confirmed, otherwise false"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public static boolean getDeletedDeckConfirmation(String deckName) {"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        logger.log(Level.INFO, \"Logging method getDeletedDeckConfirmation() in Ui.\");"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        printDashLines();"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        printDeletedDeckQuestion(deckName);"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        boolean isConfirmed \u003d checkYorNResponse();"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        if (isConfirmed) {"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            printDeckDeletedLine(deckName);"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            printDashLines();"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        return isConfirmed;"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    public static boolean getDeletedFlashCardConfirmation(String question) {"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        logger.log(Level.INFO, \"Logging method getDeletedFlashCardConfirmation() in Ui.\");"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        printDashLines();"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        Ui.printDeleteFlashCardLine(question);"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        boolean isConfirmed \u003d checkYorNResponse();"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        if (isConfirmed) {"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            Ui.printFlashCardDeletedLine(question);"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            Ui.printDashLines();"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        return isConfirmed;"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * Checks whether the user want to remove the tags specified"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * from the deck specified."
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * @param tags     String[] representing the tags be removed"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * @param deckName String representing the index of the deck of the tags"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * @return true if the removal is confirmed, otherwise false"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public static boolean getRemovedTagsConfirmation(String[] tags, String deckName) {"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        printDashLines();"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        printRemovedTagsQuestion(deckName, tags);"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        boolean isConfirmed \u003d checkYorNResponse();"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        if (isConfirmed) {"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            printTagsRemovedLine(deckName, tags);"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            printDashLines();"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        return isConfirmed;"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public static void printSearchDecksLine(String decksHavingTags) {"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        if (decksHavingTags.isEmpty()) {"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            printMessage(NO_DECKS_WITH_TAGS_LINE);"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            printMessage(DECKS_HAVING_TAGS_LINE + decksHavingTags);"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * Get confirmation from user on whether to print deck to PowerPoint."
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * @param deckName name of deck to be printed to PowerPoint"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * @return true if delete is confirmed, otherwise false"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    public static boolean getPptxDeckConfirmation(String deckName) {"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        logger.log(Level.INFO, \"Logging method getPptxDeckConfirmation() in Ui.\");"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        Ui.printPptxDeckQuestion(deckName);"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        return checkYorNResponse();"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * Format the target string to properly wrap around the end"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * of each line. The response will occupy the area between offset and"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * Ui.DASH_LINES.length()."
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * @param target String to be formatted"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * @param offset Number of characters from the start of the line"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * @return String that stores the formatted question or answer"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    public static String prettyPrintFormatter(String target, int offset) {"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        String[] words \u003d target.split(\" \");"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        int lineLength \u003d Ui.DASH_LINES.length();"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        int usableLength \u003d lineLength - offset;"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        assert usableLength \u003e 0 : \"Otherwise we cannot print anything.\";"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        int currentLength \u003d 0;"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        for (String word : words) {"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            // Handle the case where a word is too long to print on one line"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            if (word.length() \u003e usableLength) {"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                // Find number of characters that can be printed on current line"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                int remainLength \u003d usableLength - currentLength;"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                result +\u003d word.substring(0, remainLength);"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                String leftover \u003d word.substring(remainLength);"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                // Separate the word into parts that can fit in a line"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                while (leftover.length() \u003e usableLength) {"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                    result +\u003d System.lineSeparator() + \" \".repeat(offset)"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                            + leftover.substring(0, usableLength);"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                    leftover \u003d leftover.substring(usableLength);"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                }"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                // Place remainder of word into line and continue"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                result +\u003d System.lineSeparator() + \" \".repeat(offset) + leftover + \" \";"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                currentLength \u003d leftover.length() + 1;"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            }"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            currentLength +\u003d word.length();"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            if (currentLength \u003e usableLength) {"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                // Repeat enough spaces so that text is aligned to usable area."
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                result +\u003d System.lineSeparator() + \" \".repeat(offset) + word;"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                currentLength \u003d word.length();"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                result +\u003d word;"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            }"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            result +\u003d \" \";"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            // Account for the \" \" after the word."
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            ++currentLength;"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        return result.trim();"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alwaysnacy": 194,
      "kaijiel24": 176,
      "LiewWS": 158,
      "zhixiangteoh": 118,
      "wangwaynesg": 47
    }
  },
  {
    "path": "src/main/java/seedu/ecardnomics/command/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "package seedu.ecardnomics.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public abstract void execute();"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaijiel24": 1,
      "zhixiangteoh": 4
    }
  },
  {
    "path": "src/main/java/seedu/ecardnomics/command/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "package seedu.ecardnomics.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public ExitCommand() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    /** Returns if command given is an instance of \u003ccode\u003eExitCommand\u003c/code\u003e.  */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public static boolean isExit(Command command) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        return command instanceof ExitCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alwaysnacy": 1,
      "kaijiel24": 13,
      "zhixiangteoh": 1
    }
  },
  {
    "path": "src/main/java/seedu/ecardnomics/command/VersionCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "package seedu.ecardnomics.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "public class VersionCommand extends Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public VersionCommand() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        Ui.printVersionNumber();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixiangteoh": 14
    }
  },
  {
    "path": "src/main/java/seedu/ecardnomics/command/VoidCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "package seedu.ecardnomics.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "import seedu.ecardnomics.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "public class VoidCommand extends Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    private String errorMessage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    /** Constructor without \u003ccode\u003eerrorMessage\u003c/code\u003e. */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public VoidCommand() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        errorMessage \u003d Ui.NOT_RECOGNISED_LINE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    /** Constructor with \u003ccode\u003eerrorMessage\u003c/code\u003e. */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public VoidCommand(String errorMessage) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        assert (errorMessage !\u003d null \u0026\u0026 !errorMessage.isEmpty()) : \"Must specify error message\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        this.errorMessage \u003d errorMessage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        Ui.printMessage(errorMessage);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaijiel24": 22,
      "LiewWS": 1
    }
  },
  {
    "path": "src/main/java/seedu/ecardnomics/command/deck/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "package seedu.ecardnomics.command.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "import seedu.ecardnomics.deck.Deck;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "import seedu.ecardnomics.deck.FlashCard;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "public class AddCommand extends DeckCommand {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    private final String question;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    private final String answer;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    /** Constructor. */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    public AddCommand(Deck deck, String question, String answer) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        super(deck);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        assert (question !\u003d null \u0026\u0026 !question.isEmpty()) : \"Flashcard must have one question.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        assert (answer !\u003d null \u0026\u0026 !answer.isEmpty()) : \"Flashcard must have one question.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        this.currentDeck.add(new FlashCard(this.question, this.answer));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LiewWS": 2,
      "zhixiangteoh": 1,
      "wangwaynesg": 20
    }
  },
  {
    "path": "src/main/java/seedu/ecardnomics/command/deck/DeckCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "package seedu.ecardnomics.command.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.deck.Deck;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "public abstract class DeckCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    protected Deck currentDeck;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public DeckCommand() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        currentDeck \u003d null;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public DeckCommand(Deck currentDeck) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        assert currentDeck !\u003d null : \"Command must operate on a deck.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        this.currentDeck \u003d currentDeck;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public abstract void execute();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaijiel24": 2,
      "LiewWS": 1,
      "zhixiangteoh": 16
    }
  },
  {
    "path": "src/main/java/seedu/ecardnomics/command/deck/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "package seedu.ecardnomics.command.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.deck.Deck;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "public class DeleteCommand extends DeckCommand {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    private int flashCardID;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    private boolean isFlashCardDeleted;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public DeleteCommand(Deck deck, int flashCardID, boolean isFlashCardDeleted) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        super(deck);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        assert (flashCardID \u003e\u003d 0 \u0026\u0026 flashCardID \u003c deck.size()) : \"Index must be within range.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        this.flashCardID \u003d flashCardID;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        this.isFlashCardDeleted \u003d isFlashCardDeleted;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        if (isFlashCardDeleted) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            currentDeck.delete(flashCardID);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LiewWS": 1,
      "zhixiangteoh": 21
    }
  },
  {
    "path": "src/main/java/seedu/ecardnomics/command/deck/DoneEditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "package seedu.ecardnomics.command.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "import seedu.ecardnomics.deck.Deck;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "public class DoneEditCommand extends DeckCommand {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    /** Constructor. */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public DoneEditCommand(Deck deck) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        super(deck);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    /** Returns if command given is an instance of \u003ccode\u003eDoneEditCommand\u003c/code\u003e.  */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public static boolean isDoneEdit(Command command) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        return command instanceof DoneEditCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaijiel24": 18,
      "zhixiangteoh": 3
    }
  },
  {
    "path": "src/main/java/seedu/ecardnomics/command/deck/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "package seedu.ecardnomics.command.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "public class HelpCommand extends DeckCommand {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public static final String DECK_HELP \u003d \"\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            + \"eCardnomics.\\n\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            + \"Deck Mode.\\n\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            + \"Usage:\\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            + \"  add         [\u003cqn\u003e /ans \u003cans\u003e]          Adds a new flash card to the current deck.\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            + \"  list        [/ans]                     Lists all flash cards in the current deck, optionally with\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            + \"answers.\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            + \"  delete \u003cix\u003e [-y]                       Deletes the flash card at list index \u003cix\u003e from the current\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            + \" deck.\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            + \"  pptx        [-y] [-cs \u003cindex\u003e |        Creates a PowerPoint slides based on the current deck.\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            + \"              -oc \u003cbg color\u003e \u003ctxt color\u003e]\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            + \"  start                                  Enter Game Mode for this deck! Do your best!\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            + \"  done                                   Exits from Deck Mode and returns to Normal Mode.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            + \"  exit                                   Exits the program.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            + \"  help                                   Show this output.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            + \"Options:\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            + \"  --version                        Show version.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public HelpCommand() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        Ui.printHelp(DECK_HELP);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaijiel24": 6,
      "LiewWS": 3,
      "zhixiangteoh": 25
    }
  },
  {
    "path": "src/main/java/seedu/ecardnomics/command/deck/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "package seedu.ecardnomics.command.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "import seedu.ecardnomics.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "import seedu.ecardnomics.deck.Deck;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "public class ListCommand extends DeckCommand {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    private final String arguments;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    /** Constructor. */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    public ListCommand(Deck deck, String arguments) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        super(deck);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        assert arguments !\u003d null : \"Arguments cannot be a null String.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        this.arguments \u003d arguments;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        Ui.printDeck(currentDeck, !arguments.contains(\"/ans\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LiewWS": 2,
      "zhixiangteoh": 1,
      "wangwaynesg": 17
    }
  },
  {
    "path": "src/main/java/seedu/ecardnomics/command/deck/UpdateCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "package seedu.ecardnomics.command.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "import seedu.ecardnomics.deck.Deck;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "public class UpdateCommand extends DeckCommand {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    private int flashCardID;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    private String newQuestion;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    private String newAnswer;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    public UpdateCommand(Deck deck, int flashCardID, String question, String answer) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        super(deck);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        this.flashCardID \u003d flashCardID;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        newQuestion \u003d question;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        newAnswer \u003d answer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        // Update question"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        currentDeck.get(flashCardID).setQuestion(newQuestion);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        // Update answer"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        currentDeck.get(flashCardID).setAnswer(newAnswer);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LiewWS": 24
    }
  },
  {
    "path": "src/main/java/seedu/ecardnomics/command/game/DoneGameCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "package seedu.ecardnomics.command.game;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.deck.Deck;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "public class DoneGameCommand extends GameCommand {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    /** Constructor. */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public DoneGameCommand(Deck deck) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        super(deck);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    /** Returns if command given is an instance of \u003ccode\u003eDoneEditCommand\u003c/code\u003e.  */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public static boolean isDoneGame(Command command) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        return command instanceof DoneGameCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixiangteoh": 20
    }
  },
  {
    "path": "src/main/java/seedu/ecardnomics/command/game/GameCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "package seedu.ecardnomics.command.game;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.deck.Deck;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "public abstract class GameCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    protected Deck currentDeck;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public GameCommand() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        currentDeck \u003d null;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public GameCommand(Deck currentDeck) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assert currentDeck !\u003d null : \"Command must operate on a deck.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        this.currentDeck \u003d currentDeck;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public abstract void execute();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixiangteoh": 19
    }
  },
  {
    "path": "src/main/java/seedu/ecardnomics/command/game/GameResponseCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "package seedu.ecardnomics.command.game;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "public class GameResponseCommand extends GameCommand {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    String attempt;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public GameResponseCommand(String userInput) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        attempt \u003d userInput;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        //"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public String getAttempt() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        return attempt;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixiangteoh": 19
    }
  },
  {
    "path": "src/main/java/seedu/ecardnomics/command/game/GameStartCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "package seedu.ecardnomics.command.game;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.deck.Deck;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.game.Game;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "public class GameStartCommand extends GameCommand {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    Game game;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    /** Constructor. */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public GameStartCommand(Deck deck) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        super(deck);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        game \u003d new Game(currentDeck);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public Game getGameInstance() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        return game;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixiangteoh": 22
    }
  },
  {
    "path": "src/main/java/seedu/ecardnomics/command/game/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "package seedu.ecardnomics.command.game;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.game.Game;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "public class HelpCommand extends GameCommand {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public static final String GAME_HELP \u003d \"\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            + \"eCardnomics.\\n\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            + \"Game Mode.\\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            + \"Usage:\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            + \"  done           Exits from Game Mode and returns to Normal Mode.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            + \"  exit           Exits the program.\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            + \"  help           Show this output.\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            + \"Options:\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            + \"  --version      Show version.\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            + \"Gameplay:\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            + Game.GAMEPLAY_MESSAGE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public HelpCommand() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        Ui.printHelp(GAME_HELP);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixiangteoh": 30
    }
  },
  {
    "path": "src/main/java/seedu/ecardnomics/command/normal/CreateCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "package seedu.ecardnomics.command.normal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import seedu.ecardnomics.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import seedu.ecardnomics.deck.Deck;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import seedu.ecardnomics.deck.DeckList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": " * Creates a deck adds it to the existing deck list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "public class CreateCommand extends NormalCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    Deck newDeck;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * Constructor."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * @param deckList reference to the existing list of decks"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * @param deck the new deck created"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public CreateCommand(DeckList deckList, Deck deck) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        super(deckList);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        assert deck !\u003d null : \"Do not add null objects to the list.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        newDeck \u003d deck;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        deckList.addDeck(newDeck);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        Ui.printNewDeck(newDeck);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alwaysnacy": 29,
      "LiewWS": 1
    }
  },
  {
    "path": "src/main/java/seedu/ecardnomics/command/normal/DecksCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "package seedu.ecardnomics.command.normal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import seedu.ecardnomics.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import seedu.ecardnomics.deck.DeckList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": " * Lists all the existing deck."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "public class DecksCommand extends NormalCommand {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    /** Constructor. */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public DecksCommand(DeckList deckList) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        super(deckList);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        Ui.printDeckList(deckList);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alwaysnacy": 19,
      "LiewWS": 1
    }
  },
  {
    "path": "src/main/java/seedu/ecardnomics/command/normal/DeleteDeckCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "package seedu.ecardnomics.command.normal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import seedu.ecardnomics.deck.DeckList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "public class DeleteDeckCommand extends NormalCommand {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    private boolean isDeckDeleted;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public DeleteDeckCommand(DeckList decks, int index, boolean isDeckDeleted) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        super(decks);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        assert (index \u003e\u003d 0 \u0026\u0026 index \u003c decks.size()) : \"Index must be within range.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        this.isDeckDeleted \u003d isDeckDeleted;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        if (isDeckDeleted) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            deckList.removeDeck(index);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alwaysnacy": 15,
      "LiewWS": 7
    }
  },
  {
    "path": "src/main/java/seedu/ecardnomics/command/normal/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "package seedu.ecardnomics.command.normal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "import seedu.ecardnomics.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "import seedu.ecardnomics.deck.Deck;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "import seedu.ecardnomics.deck.DeckList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "public class EditCommand extends NormalCommand {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    Deck deck;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    /** Constructor. */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public EditCommand(DeckList deckList, Deck deck) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        super(deckList);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        assert deck !\u003d null : \"Do not operate on a null reference.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        this.deck \u003d deck;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        Ui.printDeckWelcome(deckList.getIndexOf(deck) + 1, deck);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    /** Returns Deck which is to be edited. */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public Deck getDeck() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        return deck;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    /** Returns if command given is an instance of \u003ccode\u003eEditCommand\u003c/code\u003e. */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public static boolean isEdit(Command command) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        return command instanceof EditCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaijiel24": 28,
      "LiewWS": 1,
      "zhixiangteoh": 3
    }
  },
  {
    "path": "src/main/java/seedu/ecardnomics/command/normal/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "package seedu.ecardnomics.command.normal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "import seedu.ecardnomics.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "import seedu.ecardnomics.deck.DeckList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "public class HelpCommand extends NormalCommand {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    public static final String NORMAL_HELP \u003d \"\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            + \"eCardnomics.\\n\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            + \"Normal Mode.\\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            + \"Usage:\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            + \"  create \u003cnm\u003e   [/tag \u003ctag1\u003e [\u003ctag2\u003e ...]]    Creates a new deck of flash cards, named \u003cnm\u003e.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            + \"  decks                                       Lists all available decks.\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            + \"  edit   \u003cix\u003e                                 Enter Deck Mode for editing the deck at list index \u003cix\u003e\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            + \".\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            + \"  start  \u003cix\u003e                                 Enter Game Mode for deck at list index \u003cix\u003e! Do your \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            + \"best!\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            + \"  delete \u003cix\u003e   [-y]                          Deletes the deck at list index \u003cix\u003e from list of decks.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            + \"  pptx   \u003cix\u003e   [-y] [-cs \u003cindex\u003e |           Creates a PowerPoint slides based on the deck at list \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            + \"index \u003cix\u003e.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            + \"                -oc \u003cbg color\u003e \u003ctxt color\u003e]\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            + \"  tag    \u003cix\u003e   /tag \u003ctag1\u003e [\u003ctag2\u003e ...]      Tags the deck at list index \u003cix\u003e, with 1 or more tags.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            + \"  untag  \u003cix\u003e   /tag \u003ctag1\u003e [\u003ctag2\u003e ...]      Untags specified \u003ctag\u003es of the deck at list index \u003cix\u003e.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            + \"  search \u003ctag1\u003e [\u003ctag2\u003e ...]                  Search deck list for decks tagged with specified \u003ctag\u003es.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            + \"  exit                                        Exits the program.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            + \"  help                                        Show this output.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            + \"Options:\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            + \"  --version                                   Show version.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    public HelpCommand() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        Ui.printHelp(NORMAL_HELP);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaijiel24": 2,
      "LiewWS": 27,
      "zhixiangteoh": 10
    }
  },
  {
    "path": "src/main/java/seedu/ecardnomics/command/normal/NormalCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "package seedu.ecardnomics.command.normal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "import seedu.ecardnomics.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "import seedu.ecardnomics.deck.DeckList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": " * Parent Command in Normal Mode."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "public abstract class NormalCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    protected DeckList deckList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    public NormalCommand() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        deckList \u003d null;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public NormalCommand(DeckList deckList) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        assert deckList !\u003d null : \"Command must operate on a deck list\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        this.deckList \u003d deckList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    public abstract void execute();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alwaysnacy": 3,
      "kaijiel24": 6,
      "LiewWS": 8,
      "zhixiangteoh": 5
    }
  },
  {
    "path": "src/main/java/seedu/ecardnomics/command/normal/PowerPointCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "package seedu.ecardnomics.command.normal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "import seedu.ecardnomics.deck.Deck;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "import seedu.ecardnomics.deck.DeckList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "import seedu.ecardnomics.powerpoint.PowerPoint;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "import java.awt.Color;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "public class PowerPointCommand extends NormalCommand {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    Deck deck;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    PowerPoint pptx;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    boolean isPpptxCreated;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    /** Constructor. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public PowerPointCommand(DeckList deckList, Deck deck, boolean isPpptxCreated) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        super(deckList);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        assert deck !\u003d null : \"Do not operate on a null reference.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        this.deck \u003d deck;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        pptx \u003d new PowerPoint(deck);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        this.isPpptxCreated \u003d isPpptxCreated;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    /** Constructor. */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public PowerPointCommand(DeckList deckList, Deck deck, boolean isPpptxCreated, Color bgColor, Color txtColor) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        super(deckList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        assert deck !\u003d null : \"Do not operate on a null reference.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        this.deck \u003d deck;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        pptx \u003d new PowerPoint(deck, bgColor, txtColor);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        this.isPpptxCreated \u003d isPpptxCreated;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        if (isPpptxCreated) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            pptx.createNewPowerPoint();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaijiel24": 38
    }
  },
  {
    "path": "src/main/java/seedu/ecardnomics/command/normal/SearchCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "package seedu.ecardnomics.command.normal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import seedu.ecardnomics.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import seedu.ecardnomics.deck.Deck;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import seedu.ecardnomics.deck.DeckList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "public class SearchCommand extends NormalCommand {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    private String[] relevantTags;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    /** Constructor. */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public SearchCommand(DeckList decks, String[] relevantTags) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        super(decks);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        assert  (relevantTags.length !\u003d 0) : \"Relevant tags must be provided.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        this.relevantTags \u003d relevantTags;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        String decksHavingTags \u003d \"\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        ArrayList\u003cDeck\u003e allDecks \u003d deckList.getAllDecks();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        for (String tag: relevantTags) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            for (int i \u003d 0; i \u003c deckList.size(); i++) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "                if (allDecks.get(i).getTag().contains(tag)) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "                    decksHavingTags +\u003d \"\\n\" + (i + 1) + \". \" + allDecks.get(i).getName();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        Ui.printSearchDecksLine(decksHavingTags);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alwaysnacy": 32
    }
  },
  {
    "path": "src/main/java/seedu/ecardnomics/command/normal/StartCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "package seedu.ecardnomics.command.normal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.command.game.GameStartCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.deck.Deck;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.deck.DeckList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "public class StartCommand extends NormalCommand {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    Deck deck;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    /** Constructor. */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public StartCommand(DeckList deckList, Deck deck) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        super(deckList);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assert deck !\u003d null : \"Do not operate on a null reference.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        this.deck \u003d deck;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        Ui.printGameWelcome(deckList.getIndexOf(deck) + 1, deck);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        new GameStartCommand(deck);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    /** Returns Deck whose Game Mode is in progress. */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public Deck getDeck() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        return deck;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    /** Returns if command given is an instance of \u003ccode\u003eStartCommand\u003c/code\u003e. */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public static boolean isStart(Command command) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        return command instanceof StartCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixiangteoh": 34
    }
  },
  {
    "path": "src/main/java/seedu/ecardnomics/command/normal/TagCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "package seedu.ecardnomics.command.normal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import seedu.ecardnomics.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import seedu.ecardnomics.deck.DeckList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": " * Adds tags to existing deck."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "public class TagCommand extends NormalCommand {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    private String[] newTags;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    /** Constructor. */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public TagCommand(DeckList decks, int index, String[] newTags) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        super(decks);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        assert (index \u003e\u003d 0 \u0026\u0026 index \u003c decks.size()) : \"Index must be within range.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        assert  (newTags.length !\u003d 0) : \"Tags must be provided.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        this.newTags \u003d newTags;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        deckList.getDeck(index).addTag(newTags);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        Ui.printNewTags(deckList.getDeck(index).getName(), newTags);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alwaysnacy": 27
    }
  },
  {
    "path": "src/main/java/seedu/ecardnomics/command/normal/UntagCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "package seedu.ecardnomics.command.normal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import seedu.ecardnomics.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import seedu.ecardnomics.deck.DeckList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": " * Removes tags from the existing deck."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "public class UntagCommand extends NormalCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    private String[] removedTags;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    /** Constructor. */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public UntagCommand(DeckList decks, int index, String[] removedTags) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        super(decks);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        assert (index \u003e\u003d 0 \u0026\u0026 index \u003c decks.size()) : \"Index must be within range.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        assert  (removedTags.length !\u003d 0) : \"Remove tags must be provided.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        this.removedTags \u003d removedTags;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        String deckName \u003d deckList.getDeck(index).getName();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        boolean isTagsValid \u003d checkTagsExist(removedTags);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        if (isTagsValid) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            boolean isTagsRemoved \u003d Ui.getRemovedTagsConfirmation(removedTags, deckName);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            if (isTagsRemoved) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "                deckList.getDeck(index).removeTag(removedTags);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * Checks if the deck specified contains the removed tags."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * @param removedTags String[] list tags to be removed"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * @return a boolean value indicating if all the tags exist"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public boolean checkTagsExist(String[] removedTags) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        boolean isExist \u003d true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        ArrayList\u003cString\u003e availableTagList \u003d deckList.getDeck(index).getTag();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        for (String removedTag : removedTags) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            if (!availableTagList.contains(removedTag)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "                isExist \u003d false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "                Ui.printInvalidTagsLine();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        return isExist;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alwaysnacy": 56
    }
  },
  {
    "path": "src/main/java/seedu/ecardnomics/deck/Deck.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "package seedu.ecardnomics.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LiewWS"
        },
        "content": " * Deck of flashcards."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LiewWS"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "public class Deck {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    private ArrayList\u003cString\u003e tags;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    private ArrayList\u003cFlashCard\u003e deck;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    /** Constructor. */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public Deck(String name) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        assert (name !\u003d null \u0026\u0026 !name.isEmpty()) : \"A deck requires a name.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        deck \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * Constructors with tags parameter."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * @param name the name of the new deck"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * @param tags tags of the new deck"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public Deck(String name, ArrayList\u003cString\u003e tags) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        assert (name !\u003d null \u0026\u0026 !name.isEmpty()) : \"A deck requires a name.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        deck \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        this.tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * Gets the name of the deck."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * @return name of deck"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public String getTagString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        String tagString \u003d \"\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        for (int j \u003d 0; j \u003c tags.size(); j++) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            tagString +\u003d tags.get(j);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            tagString +\u003d \" \";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        return tagString;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public ArrayList\u003cString\u003e getTag() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        return tags;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public void addTag(String[] newTags) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        for (String tag: newTags) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            tags.add(tag);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public void removeTag(String[] deletedTags) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        for (String tag: deletedTags) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            tags.remove(tag);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * Sets the name of the deck."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * @param name new name of the deck"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public void setName(String name) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        assert (name !\u003d null \u0026\u0026 !name.isEmpty()) : \"A deck requires a name.\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "     * Retrieves the inherent ArrayList data structure of the deck."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "     * @return ArrayList of FlashCards"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public ArrayList\u003cFlashCard\u003e getDeck() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        return deck;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * Retrieves the flashcard at specified index."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * @param index Index of flashcard to be found"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "     * @return FlashCard at index"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public FlashCard get(int index) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        assert (index \u003e\u003d 0 \u0026\u0026 index \u003c deck.size()) : \"Index should be within range\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        return deck.get(index);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * Adds a flashcard to the deck."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * @param flashCard Reference to the flashcard to be added"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public void add(FlashCard flashCard) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        assert flashCard !\u003d null : \"Do not add null objects into deck\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        deck.add(flashCard);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * Returns size of current deck."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * @return size of current deck"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        return deck.size();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * Deletes the flashcard at specified index from the deck."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * @param index Index of flashcard to be deleted"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public void delete(int index) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        assert (index \u003e\u003d 0 \u0026\u0026 index \u003c deck.size()) : \"Index should be within range\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        deck.remove(index);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        String output \u003d name + \":\" + System.lineSeparator();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        output +\u003d this.toString(false);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    public String toString(boolean isQuestionOnly) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        if (this.deck.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "            return output;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        for (int i \u003d 0; i \u003c deck.size(); i++) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            String serialNumber \u003d (i + 1) + \". \";"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            // Always print the question."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            output +\u003d serialNumber + deck.get(i).toString(true, serialNumber.length());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            if (!isQuestionOnly) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                // Add in the answer"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                output +\u003d System.lineSeparator() + deck.get(i).toString(false, serialNumber.length());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            if (i !\u003d deck.size() - 1) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "                output +\u003d \"\\n\\n\";"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alwaysnacy": 42,
      "kaijiel24": 3,
      "LiewWS": 49,
      "zhixiangteoh": 54,
      "wangwaynesg": 7
    }
  },
  {
    "path": "src/main/java/seedu/ecardnomics/deck/DeckList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "package seedu.ecardnomics.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LiewWS"
        },
        "content": " * List for storing decks."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LiewWS"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "public class DeckList {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    private ArrayList\u003cDeck\u003e deckList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    /** Constructor. */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public DeckList() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        deckList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * Adds a deck to the list."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * @param deck reference to Deck to be added"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public void addDeck(Deck deck) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        assert deck !\u003d null : \"Do not add null object to list.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        deckList.add(deck);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * Removes a deck from the list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * @param index int representing index of deck to to be removed"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public void removeDeck(int index) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        assert (index \u003e\u003d 0 \u0026\u0026 index \u003c deckList.size()) : \"Index should be within range.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        deckList.remove(index);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * Returns size of current list."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * @return size of list"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        return deckList.size();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     * Returns a deck from deck list based on given index."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     * @param index Index of deck to be found"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     * @return Deck found at \u003ccode\u003eindex\u003c/code\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public Deck getDeck(int index) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        assert (index \u003e\u003d 0 \u0026\u0026 index \u003c deckList.size()) : \"Index should be within range.\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        return deckList.get(index);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public ArrayList\u003cDeck\u003e getAllDecks() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        return deckList;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     * Returns index of deck in deck list."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     * @param deck Deck which index is to be found"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     * @return Index found of \u003ccode\u003edeck\u003c/code\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public int getIndexOf(Deck deck) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        assert deck !\u003d null : \"Do not try to get index of a null reference.\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        return deckList.indexOf(deck);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        for (int i \u003d 0; i \u003c deckList.size(); i++) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            output +\u003d (i + 1) + \". \" + deckList.get(i).getName();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            if (i !\u003d deckList.size() - 1) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "                output +\u003d \"\\n\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alwaysnacy": 8,
      "kaijiel24": 33,
      "LiewWS": 20,
      "zhixiangteoh": 23
    }
  },
  {
    "path": "src/main/java/seedu/ecardnomics/deck/FlashCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "package seedu.ecardnomics.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "import seedu.ecardnomics.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LiewWS"
        },
        "content": " * Flashcards that contain a question and asnwer."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LiewWS"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "public class FlashCard {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    private String question;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    private String answer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    private static final String QN_LABEL \u003d \"Question: \";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    private static final String ANS_LABEL \u003d \"Answer:   \";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    /** Constructor. */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public FlashCard(String question, String answer) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        assert (question !\u003d null \u0026\u0026 !question.isEmpty()) : \"Flashcard must have one question.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        assert (answer !\u003d null \u0026\u0026 !answer.isEmpty()) : \"Flashcard must have one answer\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * Get the answer of the flashcard."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * @return String representing the answer on the flashcard"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public String getAnswer() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        return answer;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * Get the question of the flashcard."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * @return String representing the question on the flashcard"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public String getQuestion() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        return question;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * Set the answer of the flashcard."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * @param answer new answer on the flashcard"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public void setAnswer(String answer) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        assert (answer !\u003d null \u0026\u0026 !answer.isEmpty()) : \"Flashcard must have one answer\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * Set the question of the flashcard."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * @param question new answer on the flashcard"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public void setQuestion(String question) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        assert (question !\u003d null \u0026\u0026 !question.isEmpty()) : \"Flashcard must have one question.\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    /* Would not recommend using this method unless there is no offset to be printed before QN_LABEL */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        return QN_LABEL + Ui.prettyPrintFormatter(question, QN_LABEL.length()) + System.lineSeparator()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                + ANS_LABEL + Ui.prettyPrintFormatter(answer, ANS_LABEL.length());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * Returns a String that contains the requested details (question or answer)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * for the flashcard for printing. The String is formatted such that the"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * details will fit between offset characters from the start of the line and"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * Ui.DASH_LINES.length()."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * @param isQuestion indicates whether the required detail is question or answer"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * @param offset Number of characters from the start of the line"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * @return String for displaying question if isQuestion, answer otherwise"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    public String toString(boolean isQuestion, int offset) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        if (isQuestion) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            return QN_LABEL + Ui.prettyPrintFormatter(question, offset + QN_LABEL.length());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            return \" \".repeat(offset) + ANS_LABEL"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                    + Ui.prettyPrintFormatter(answer, offset + ANS_LABEL.length());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LiewWS": 54,
      "zhixiangteoh": 30,
      "wangwaynesg": 1
    }
  },
  {
    "path": "src/main/java/seedu/ecardnomics/exceptions/BothOcAndCsException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "package seedu.ecardnomics.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "public class BothOcAndCsException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public static final String BOTH_OC_AND_CS_LINE \u003d"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            \"Input should not have both -oc and -cs option.\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        return BOTH_OC_AND_CS_LINE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaijiel24": 11
    }
  },
  {
    "path": "src/main/java/seedu/ecardnomics/exceptions/ColorsNotAvailException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "package seedu.ecardnomics.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "public class ColorsNotAvailException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public static final String COLORS_NOT_AVAIL_LINE \u003d"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            \"Colors option is not available\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        return COLORS_NOT_AVAIL_LINE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaijiel24": 11
    }
  },
  {
    "path": "src/main/java/seedu/ecardnomics/exceptions/CsIndexFormatException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "package seedu.ecardnomics.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "public class CsIndexFormatException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public static final String CS_INDEX_FORMAT_LINE \u003d"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            \"-cs needs to be followed by a integer between 1 and 10 (inclusive)\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        return CS_INDEX_FORMAT_LINE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaijiel24": 12
    }
  },
  {
    "path": "src/main/java/seedu/ecardnomics/exceptions/CsIndexRangeException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "package seedu.ecardnomics.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "public class CsIndexRangeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public static final String CS_INDEX_RANGE_LINE \u003d"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            \"-cs index not within the correct range, [1,10]\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        return CS_INDEX_RANGE_LINE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaijiel24": 11
    }
  },
  {
    "path": "src/main/java/seedu/ecardnomics/exceptions/DeckRangeException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "package seedu.ecardnomics.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "public class DeckRangeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public static final String DECK_RANGE_LINE \u003d"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            \"Index should be within range of number of decks!\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        return DECK_RANGE_LINE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaijiel24": 10,
      "zhixiangteoh": 1
    }
  },
  {
    "path": "src/main/java/seedu/ecardnomics/exceptions/EmptyInputException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "package seedu.ecardnomics.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "public class EmptyInputException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    public static final String EMPTY_INPUT_LINE \u003d"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "            \"Input shouldn\u0027t be empty! Returning...\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        return EMPTY_INPUT_LINE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangwaynesg": 11
    }
  },
  {
    "path": "src/main/java/seedu/ecardnomics/exceptions/FlashCardRangeException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "package seedu.ecardnomics.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "public class FlashCardRangeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public static final String FLASHCARD_RANGE_LINE \u003d"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            \"Index should be within range of number of flash cards!\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        return FLASHCARD_RANGE_LINE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixiangteoh": 11
    }
  },
  {
    "path": "src/main/java/seedu/ecardnomics/exceptions/IndexFormatException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "package seedu.ecardnomics.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "public class IndexFormatException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public static final String INDEX_FORMAT_LINE \u003d"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            \"Command should be followed by a valid positive \u003cindex\u003e!\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        return INDEX_FORMAT_LINE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaijiel24": 11
    }
  },
  {
    "path": "src/main/java/seedu/ecardnomics/exceptions/InvalidOptionsException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "package seedu.ecardnomics.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "public class InvalidOptionsException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public static final String INVALID_OPTIONS_LINE \u003d"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            \"Invalid options in command\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        return INVALID_OPTIONS_LINE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaijiel24": 11
    }
  },
  {
    "path": "src/main/java/seedu/ecardnomics/exceptions/NoAlphaNumericInputException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "package seedu.ecardnomics.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "public class NoAlphaNumericInputException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public static final String NO_ALPHANUMERIC_LINE \u003d"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            \"Input should contain at least one alphanumeric character! Returning...\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        return NO_ALPHANUMERIC_LINE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixiangteoh": 11
    }
  },
  {
    "path": "src/main/java/seedu/ecardnomics/exceptions/NoSeparatorException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "package seedu.ecardnomics.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "public class NoSeparatorException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public static final String NO_SEPARATOR_LINE \u003d"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            \"\u003c/tag\u003e separator should be added before tags!\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        return NO_SEPARATOR_LINE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alwaysnacy": 11
    }
  },
  {
    "path": "src/main/java/seedu/ecardnomics/exceptions/NumberTooBigException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "package seedu.ecardnomics.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "public class NumberTooBigException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public static final String NUMBER_TOO_BIG_LINE \u003d \"Index is too large.\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        return NUMBER_TOO_BIG_LINE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaijiel24": 10
    }
  },
  {
    "path": "src/main/java/seedu/ecardnomics/game/Game.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "package seedu.ecardnomics.game;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.deck.Deck;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "public class Game {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    GameStorage storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    GameEngine engine;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public static final String GAMEPLAY_MESSAGE \u003d \"\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            + \"Questions will be displayed in a randomised order. At each question, you can\\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            + \"    1. Try to attempt an answer at the question, by typing at the prompt\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            + \"    2. Press \u003center\u003e (with an empty attempt if you want to do it in your head)\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            + System.lineSeparator()"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            + \"Then, our \u0027advanced\u0027 algorithms will check your answer and score your answer \\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            + \"(if any), and display the correct answer for you to check your answer against.\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            + \"Finally, we will ask if you think you got it right. If you did not, the\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            + \"question will be inserted back into the question pool, and you will get a \\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            + \"chance to attempt it again!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public static final String WELCOME_MESSAGE \u003d \"\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            + \"Welcome to Game Mode!\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            + System.lineSeparator()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            + \"In this mode, you test your knowledge against the flash cards in the deck.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            + System.lineSeparator()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            + GAMEPLAY_MESSAGE"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            + System.lineSeparator()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            + \"Type `done` to return to Normal Mode, `exit` to exit application.\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            + \"Type `help` to see a list of commands. Have fun!\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            + System.lineSeparator()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            + \"Game Mode is started for: \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public Game(Deck deck) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        storage \u003d new GameStorage(deck);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        engine \u003d new GameEngine(storage);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public Command run() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        return engine.runGameLoop();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixiangteoh": 41
    }
  },
  {
    "path": "src/main/java/seedu/ecardnomics/game/GameEngine.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "package seedu.ecardnomics.game;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.command.ExitCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.command.VersionCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.command.game.DoneGameCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.command.game.GameResponseCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.command.game.HelpCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.deck.FlashCard;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.parser.GameParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "public class GameEngine {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    GameStorage storage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    GameParser gameParser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    GameEngine(GameStorage storage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        gameParser \u003d new GameParser(storage.originalDeck);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    Command runGameLoop() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        Command command;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            if (isDeckInitiallyEmpty()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "                Ui.printGameEmptyDeckLine();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "                return forceDoneGame();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            FlashCard flashCard \u003d getQuestion();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            do {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "                poseQuestion(flashCard);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "                command \u003d getAttempt();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "                if (isHelpCommand(command) || isVersionCommand(command)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "                    command.execute();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            } while (isHelpCommand(command) || isVersionCommand(command));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            if (isTerminate(command)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            Ui.printAnswerGameMode(flashCard.getAnswer());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "                Ui.printAttemptFeedback(checkAttempt(command, flashCard));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "                e.getMessage();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            command \u003d update(Ui.getInclExclConfirmation(), flashCard);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        } while (!isTerminate(command) \u0026\u0026 !isNoMoreCards());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    Command update(boolean isResponseY, FlashCard flashCard) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        updateRetestStore(isResponseY, flashCard);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        if (storage.deque.isEmpty()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            if (storage.retestStore.isEmpty()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "                Ui.printDoneGameMessage();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "                return forceDoneGame();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "                updateDeque();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void updateDeque() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        storage.deque \u003d storage.createRandomisedStack(storage.retestStore);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        storage.refreshRetestStore();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void updateRetestStore(boolean response, FlashCard flashCard) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        if (response) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            storage.retestStore.add(flashCard);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    FlashCard getQuestion() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        return storage.deque.pop();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void poseQuestion(FlashCard flashCard) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        Ui.printGameQuestion(flashCard.getQuestion());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    Command getAttempt() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        String userInput \u003d Ui.readUserInput();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        Command command \u003d gameParser.parse(userInput);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    double checkAttempt(Command command, FlashCard flashCard) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assert command instanceof GameResponseCommand : \"command not instance of GameResponseCommand!\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        String attempt \u003d ((GameResponseCommand) command).getAttempt();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        String answer \u003d flashCard.getAnswer();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        return getMatchPercentage(attempt, answer);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    double getMatchPercentage(String attempt, String answer) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        String[] attemptArray \u003d attempt.replaceAll(Ui.PUNC_REGEX,\"\").split(\" \");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        String[] answerArray \u003d answer.replaceAll(Ui.PUNC_REGEX,\"\").split(\" \");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        int answerLength \u003d answerArray.length;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        if (answerLength \u003c\u003d 1 \u0026\u0026 !isValidAnswer(answerArray)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        int matchCount \u003d 0;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        for (String word1 : answerArray) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            for (String word2: attemptArray) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "                if (word2.trim().equalsIgnoreCase(word1.trim())) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "                    matchCount++;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assert matchCount \u003c\u003d answerLength : \"matchCount \u003e answerLength!\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        return (double) matchCount / answerLength * 100;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    boolean isValidAnswer(String[] answerArray) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        for (String word : answerArray) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            if (!word.isBlank()) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    Command forceDoneGame() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        return gameParser.parse(\"done\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    boolean isDeckInitiallyEmpty() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        return storage.originalDeck.size() \u003d\u003d 0;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    boolean isTerminate(Command command) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        return DoneGameCommand.isDoneGame(command) || ExitCommand.isExit(command);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    boolean isNoMoreCards() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        return storage.deque.isEmpty() \u0026\u0026 storage.retestStore.isEmpty();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    boolean isHelpCommand(Command command) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        return command instanceof HelpCommand;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    boolean isVersionCommand(Command command) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        return command instanceof VersionCommand;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixiangteoh": 156
    }
  },
  {
    "path": "src/main/java/seedu/ecardnomics/game/GameStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "package seedu.ecardnomics.game;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.deck.Deck;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.deck.FlashCard;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import java.util.ArrayDeque;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "public class GameStorage {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    Deck originalDeck;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    ArrayDeque\u003cFlashCard\u003e deque;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    ArrayList\u003cFlashCard\u003e retestStore;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    GameStorage(Deck deck) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        originalDeck \u003d deck;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        deque \u003d createRandomisedStack(deck);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        retestStore \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    ArrayDeque\u003cFlashCard\u003e createRandomisedStack(Deck deck) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        ArrayList\u003cFlashCard\u003e randomisedDeck \u003d new ArrayList\u003c\u003e(deck.getDeck());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        Collections.shuffle(randomisedDeck);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        return new ArrayDeque\u003c\u003e(randomisedDeck);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    ArrayDeque\u003cFlashCard\u003e createRandomisedStack(ArrayList\u003cFlashCard\u003e retestStore) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        Collections.shuffle(retestStore);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        return new ArrayDeque\u003c\u003e(retestStore);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void refreshRetestStore() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        retestStore \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixiangteoh": 35
    }
  },
  {
    "path": "src/main/java/seedu/ecardnomics/parser/DeckParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "package seedu.ecardnomics.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.Main;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "import seedu.ecardnomics.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "import seedu.ecardnomics.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.command.VersionCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import seedu.ecardnomics.command.deck.AddCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "import seedu.ecardnomics.command.deck.DeleteCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.command.deck.DoneEditCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.command.deck.HelpCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.command.deck.ListCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "import seedu.ecardnomics.command.deck.UpdateCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "import seedu.ecardnomics.command.ExitCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "import seedu.ecardnomics.command.VoidCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "import seedu.ecardnomics.deck.Deck;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.deck.DeckList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.exceptions.FlashCardRangeException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.exceptions.IndexFormatException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "import seedu.ecardnomics.exceptions.EmptyInputException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.exceptions.NoAlphaNumericInputException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "import seedu.ecardnomics.exceptions.NumberTooBigException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "import seedu.ecardnomics.storage.LogStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LiewWS"
        },
        "content": " * Parser for commands supplied in Deck Mode."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LiewWS"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "public class DeckParser extends Parser {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public Deck deck;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public DeckList deckList;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    private static LogStorage logger \u003d new LogStorage(\"DeckParserLogger\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "     * Constructor."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public DeckParser(DeckList deckList, Deck deck) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        this.deckList \u003d deckList;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        this.deck \u003d deck;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    protected Command prepareDeletedFlashCard(String arguments) throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        int flashCardID;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        boolean isFlashCardDeleted;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        if (arguments.contains(\"-y\")) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            arguments \u003d arguments.replaceAll(\"-y\", \"\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            flashCardID \u003d getIndex(arguments);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            isFlashCardDeleted \u003d true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            flashCardID \u003d getIndex(arguments);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            isFlashCardDeleted \u003d Ui.getDeletedFlashCardConfirmation(deck.get(flashCardID).getQuestion());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        logger.log(Level.INFO, \"returning DeleteCommand object\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        return new DeleteCommand(deck, flashCardID, isFlashCardDeleted);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    private boolean containsNoAlphaNumerics(String field) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        String puncRemovedField \u003d field.replaceAll(Ui.PUNC_REGEX, \"\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        return puncRemovedField.isBlank();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * Verify that a String is contains meaningful contents."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * @param field String to be verified"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * @throws EmptyInputException if string is empty after trim"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    private void verifyStringField(String field) throws EmptyInputException, NoAlphaNumericInputException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        if (field.trim().length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            logger.log(Level.WARNING, \"User entered nothing or a series of blank spaces for field\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            throw new EmptyInputException();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        if (containsNoAlphaNumerics(field.trim())) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            logger.log(Level.WARNING, \"User entered no alphanumeric characters as field!\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            throw new NoAlphaNumericInputException();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    protected Command prepareFlashCard(String arguments) throws EmptyInputException, NoAlphaNumericInputException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        String[] questionAndAnswer \u003d new String[2];"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        if (arguments.contains(\"/ans\")) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            // Split by the first /ans only"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            questionAndAnswer \u003d arguments.split(\"/ans\", 2);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            // Expect a qn and ans"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            if (questionAndAnswer.length !\u003d 2) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                throw new EmptyInputException();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            verifyStringField(questionAndAnswer[0]);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        } else if (!arguments.trim().isEmpty()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            questionAndAnswer[0] \u003d arguments.trim();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            // Valid question provided but not answer"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            Ui.printAddFlashCardLine(deck);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            Ui.printEnterAnswerLine();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            questionAndAnswer[1] \u003d Ui.readUserInput();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            logger.log(Level.INFO, \"Reading user input for answer\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            // Ask for both question and answer"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "            Ui.printAddFlashCardLine(deck);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "            Ui.printEnterQuestionLine();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "            questionAndAnswer[0] \u003d Ui.readUserInput();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            logger.log(Level.INFO, \"Reading user input for question\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            verifyStringField(questionAndAnswer[0]);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "            Ui.printEnterAnswerLine();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "            questionAndAnswer[1] \u003d Ui.readUserInput();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            logger.log(Level.INFO, \"Reading user input for answer\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        verifyStringField(questionAndAnswer[1]);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        assert questionAndAnswer[0].length() \u003e 0 : \"question field empty!\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        assert questionAndAnswer[1].length() \u003e 0 : \"answer field empty!\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assert !containsNoAlphaNumerics(questionAndAnswer[0]) : \"question field nonsensical!\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assert !containsNoAlphaNumerics(questionAndAnswer[1]) : \"question field nonsensical!\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        Ui.printDashLines();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        Ui.printFlashCardAddedLine();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        Ui.printDashLines();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        logger.log(Level.INFO, \"returning AddCommand object\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        return new AddCommand(deck, questionAndAnswer[0], questionAndAnswer[1]);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    protected Command prepareUpdate(int flashCardID) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        String[] newQnA \u003d new String[2];"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        Ui.printUpdateQuestionLine(deck.get(flashCardID));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        newQnA[0] \u003d Ui.readUserInput();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        logger.log(Level.INFO, \"Reading user input for question\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        boolean hasNewQ \u003d true;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        boolean hasNewA \u003d true;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        if (newQnA[0].trim().length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            logger.log(Level.INFO, \"User entered nothing or a series of blank spaces for question. \""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                    + \"Keep current question.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            newQnA[0] \u003d deck.get(flashCardID).getQuestion();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            hasNewQ \u003d false;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        Ui.printUpdateAnswerLine(deck.get(flashCardID));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        newQnA[1] \u003d Ui.readUserInput();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        logger.log(Level.INFO, \"Reading user input for answer\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        if (newQnA[1].trim().length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            logger.log(Level.INFO, \"User entered nothing or a series of blank spaces for answer. \""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                    + \"Keep current answer.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            newQnA[1] \u003d deck.get(flashCardID).getAnswer();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            hasNewA \u003d false;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        assert newQnA[0].length() \u003e 0 : \"question field empty!\";"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        assert newQnA[1].length() \u003e 0 : \"answer field empty!\";"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        Ui.printDashLines();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        Ui.printFlashCardUpdatedLine(hasNewQ, hasNewA);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        Ui.printDashLines();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        return new UpdateCommand(deck, flashCardID, newQnA[0], newQnA[1]);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    protected int getIndex(String arguments) throws IndexFormatException,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            FlashCardRangeException, NumberTooBigException {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        arguments \u003d arguments.trim();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        if (!arguments.matches(Ui.DIGITS_REGEX)) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            logger.log(Level.WARNING, \"User did not enter valid integer\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            throw new IndexFormatException();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assert arguments.length() \u003e 0 : \"arguments empty!\";"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        int index;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            index \u003d Integer.parseInt(arguments) - INDEX_OFFSET;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            throw new NumberTooBigException();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        if (index \u003e\u003d deck.size() || index \u003c LOWEST_POSSIBLE_INDEX) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            logger.log(Level.WARNING, \"Flash card index larger than total number of cards\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            throw new FlashCardRangeException();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    protected Command parseCommand(String commandWord, String arguments)"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            throws Exception {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        // Version"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        case Ui.VERSION_CMD:"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            return new VersionCommand();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        // Exit"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        case Ui.EXIT:"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            logger.log(Level.INFO, \"returning ExitCommand object\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        // Done with Edit Mode"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        case Ui.DONE:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            logger.log(Level.INFO, \"returning DoneEditCommand object\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            return new DoneEditCommand(deck);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        // Help"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        case Ui.HELP:"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            logger.log(Level.INFO, \"returning HelpCommand object\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        // Start"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        case Ui.START:"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            logger.log(Level.INFO, \"Starting Game Mode\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            return new NormalParser(Main.deckList).parseCommand(commandWord,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "                    String.valueOf(deckList.getIndexOf(deck) + 1));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        // Add a FlashCard"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        case Ui.ADD:"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            logger.log(Level.INFO, \"Preparing FlashCard to add\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            return prepareFlashCard(arguments);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        // List all FlashCards"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        case Ui.LIST:"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            logger.log(Level.INFO, \"returning ListCommand object\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "            return new ListCommand(deck, arguments);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        // Delete a FlashCard"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        case Ui.DELETE:"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            logger.log(Level.INFO, \"Preparing FlashCard to delete\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            return prepareDeletedFlashCard(arguments);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        // Update a FlashCard"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        case Ui.UPDATE:"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            logger.log(Level.INFO, \"Preparing FlashCard to update\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            int flashCardID \u003d getIndex(arguments);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            assert flashCardID \u003e\u003d LOWEST_POSSIBLE_INDEX : \"flash card ID less than lowest possible flash card index!\";"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            return prepareUpdate(flashCardID);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        // Create PowerPoint"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        case Ui.PPTX:"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            logger.log(Level.INFO, \"Printing to PowerPoint\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            return new NormalParser(Main.deckList).parseCommand(commandWord,"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "                    (deckList.getIndexOf(deck) + 1) + \" \" + arguments);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            logger.log(Level.WARNING, \"returning VoidCommand object\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            return new VoidCommand();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public Command parse(String userInput) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        logger.log(Level.INFO, \"Parsing user input string\");"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        String[] splitString \u003d userInput.split(\" \", 2);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        String commandWord \u003d splitString[0];"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        logger.log(Level.INFO, \"Parsed commandWord\");"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        String arguments \u003d \"\";"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        boolean argumentsExist \u003d splitString.length \u003e 1;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        if (argumentsExist) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            arguments \u003d splitString[1];"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            logger.log(Level.INFO, \"Parsed arguments\");"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            logger.log(Level.INFO, \"Parsing command\");"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            return parseCommand(commandWord, arguments);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            logger.log(Level.WARNING, \"Parsed void or invalid command\");"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            return new VoidCommand(e.getMessage());"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alwaysnacy": 1,
      "kaijiel24": 68,
      "LiewWS": 95,
      "zhixiangteoh": 74,
      "wangwaynesg": 18
    }
  },
  {
    "path": "src/main/java/seedu/ecardnomics/parser/GameParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "package seedu.ecardnomics.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.command.ExitCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.command.VersionCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.command.VoidCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.command.game.HelpCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.command.game.DoneGameCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.command.game.GameResponseCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.deck.Deck;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.exceptions.FlashCardRangeException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.exceptions.IndexFormatException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "import seedu.ecardnomics.exceptions.NumberTooBigException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "import seedu.ecardnomics.storage.LogStorage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "public class GameParser extends Parser {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public Deck deck;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    private static LogStorage logger \u003d new LogStorage(\"GameParserLogger\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "     * Constructor."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public GameParser(Deck deck) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        this.deck \u003d deck;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    protected int getIndex(String arguments) throws IndexFormatException,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            NumberTooBigException, FlashCardRangeException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        arguments \u003d arguments.trim();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        if (!arguments.matches(Ui.DIGITS_REGEX)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            logger.log(Level.WARNING, \"User did not enter valid integer\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            throw new IndexFormatException();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assert arguments.length() \u003e 0 : \"arguments empty!\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        int index;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            index \u003d Integer.parseInt(arguments) - INDEX_OFFSET;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            throw new NumberTooBigException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        if (index \u003e\u003d deck.size() || index \u003c LOWEST_POSSIBLE_INDEX) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            logger.log(Level.WARNING, \"Flash card index larger than total number of cards\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            throw new FlashCardRangeException();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    protected Command parseCommand(String commandWord, String arguments) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        // Version"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        case Ui.VERSION_CMD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            return new VersionCommand();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        // Exit"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        case Ui.EXIT:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            logger.log(Level.INFO, \"returning ExitCommand object\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        // Done with Game Mode"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        case Ui.DONE:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            logger.log(Level.INFO, \"returning DoneGameCommand object\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            return new DoneGameCommand(deck);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        // Help"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        case Ui.HELP:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            logger.log(Level.INFO, \"returning HelpCommand object\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            return new VoidCommand();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public Command parse(String userInput) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        Command command \u003d parseCommand(userInput.trim(), \"\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        if (command instanceof VoidCommand) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            return new GameResponseCommand(userInput.trim());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaijiel24": 9,
      "LiewWS": 2,
      "zhixiangteoh": 78
    }
  },
  {
    "path": "src/main/java/seedu/ecardnomics/parser/NormalParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "package seedu.ecardnomics.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "import seedu.ecardnomics.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import seedu.ecardnomics.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import seedu.ecardnomics.command.ExitCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.command.VersionCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "import seedu.ecardnomics.command.VoidCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import seedu.ecardnomics.command.normal.CreateCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import seedu.ecardnomics.command.normal.DecksCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "import seedu.ecardnomics.command.normal.DeleteDeckCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "import seedu.ecardnomics.command.normal.EditCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "import seedu.ecardnomics.command.normal.HelpCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "import seedu.ecardnomics.command.normal.PowerPointCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.command.normal.StartCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import seedu.ecardnomics.command.normal.TagCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import seedu.ecardnomics.command.normal.UntagCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "import seedu.ecardnomics.command.normal.SearchCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "import seedu.ecardnomics.deck.Deck;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "import seedu.ecardnomics.deck.DeckList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "import seedu.ecardnomics.exceptions.BothOcAndCsException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "import seedu.ecardnomics.exceptions.ColorsNotAvailException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "import seedu.ecardnomics.exceptions.CsIndexFormatException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "import seedu.ecardnomics.exceptions.CsIndexRangeException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "import seedu.ecardnomics.exceptions.DeckRangeException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.exceptions.EmptyInputException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "import seedu.ecardnomics.exceptions.IndexFormatException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "import seedu.ecardnomics.exceptions.InvalidOptionsException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import seedu.ecardnomics.exceptions.NoSeparatorException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "import seedu.ecardnomics.exceptions.NumberTooBigException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "import seedu.ecardnomics.powerpoint.PowerPoint;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "import seedu.ecardnomics.storage.LogStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "import java.awt.Color;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "import org.beryx.awt.color.ColorFactory;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "/**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LiewWS"
        },
        "content": " * Parser for commands supplied in Normal Mode."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LiewWS"
        },
        "content": " */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "public class NormalParser extends Parser {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    DeckList deckList;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    private static LogStorage logger \u003d new LogStorage(\"NormalParserLogger\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public static final int HIGHEST_CS_INDEX \u003d 9;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    /** Constructor. */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public NormalParser(DeckList deckList) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        this.deckList \u003d deckList;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    protected int getIndex(String arguments) throws IndexFormatException,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            DeckRangeException, NumberTooBigException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        arguments \u003d arguments.trim();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        logger.log(Level.INFO, \"Logging method getIndex() in NormalParser.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        if (!arguments.matches(Ui.DIGITS_REGEX)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            logger.log(Level.WARNING, \"User did not enter a valid integer index. string \u003d \" + arguments);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            throw new IndexFormatException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        int index;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            index \u003d Integer.parseInt(arguments) - INDEX_OFFSET;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            throw new NumberTooBigException();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        if ((index \u003e\u003d deckList.size()) || (index \u003c LOWEST_POSSIBLE_INDEX)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            logger.log(Level.WARNING, \"User did not enter an index in the valid range.\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            throw new DeckRangeException();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * Retrieves deck at index specified in arguments from deckList."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * getIndex() is used to convert arguments from String to an int index."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * @param arguments String that contains the ID number of the deck requested"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * @return Reference to requested deck"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * @throws IndexFormatException if arguments is not a digit"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * @throws DeckRangeException if index obtained from arguments is not in range"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    private Deck prepareDeck(String arguments) throws Exception {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        return deckList.getDeck(getIndex(arguments));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * Prepares an instance of DeleteDeckCommand from given arguments."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * @param arguments String that contains the user arguments for the delete command"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * @return DeleteDeckCommand that can be executed to delete the deck."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * @throws Exception if index is invalid or no index is supplied."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    private Command prepareDeleteDeck(String arguments) throws Exception {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        boolean isDeckDeleted;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        int deckID;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        if (arguments.contains(Ui.FORCE_YES_OPT)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            arguments \u003d arguments.replaceAll(Ui.FORCE_YES_OPT, \"\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            deckID \u003d getIndex(arguments);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            isDeckDeleted \u003d true;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            deckID \u003d getIndex(arguments);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            isDeckDeleted \u003d Ui.getDeletedDeckConfirmation(deckList.getDeck(deckID).getName());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        return new DeleteDeckCommand(deckList, deckID, isDeckDeleted);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     * Prepares new Tag Command from given arguments."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     * @param arguments arguments input from user"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     * @return a Tag Command"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     * @throws Exception if index is invalid or empty arguments"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    private Command prepareTagCommand(String arguments) throws Exception {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        String[] idAndNewTags \u003d arguments.split(\"/tag\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        if (idAndNewTags.length \u003c 2) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            logger.log(Level.WARNING, \"User did not provide /tag when adding tag.\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            throw new NoSeparatorException();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        assert (arguments.contains(\"/tag\")) :"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "                \"Tags to be added are after /tag label.\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        int deckID \u003d getIndex(idAndNewTags[0]);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        if (idAndNewTags[1].trim().isEmpty()) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            logger.log(Level.WARNING, \"User did not supply tags when adding tag.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            throw new EmptyInputException();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        String[] newTags \u003d idAndNewTags[1].trim().split(\" \");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        return new TagCommand(deckList, deckID, newTags);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     * Prepares new Tag Command from given arguments."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * @param arguments arguments input from user"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     * @return a Tag Command"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * @throws Exception if index is invalid or empty arguments"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    private Command prepareUntagCommand(String arguments) throws Exception {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        String[] idAndRemovedTags \u003d arguments.split(\"/tag\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        if (idAndRemovedTags.length \u003c 2) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            logger.log(Level.WARNING, \"User did not provide /tag when removing tags.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            throw new NoSeparatorException();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        assert (arguments.contains(\"/tag\")) :"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "                \"tags to be removed are after /tag label\";"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        int deckID \u003d getIndex(idAndRemovedTags[0]);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        if (idAndRemovedTags[1].trim().isEmpty()) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            logger.log(Level.WARNING, \"User did not supply tags when removing tags.\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            throw new EmptyInputException();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        String[] removedTags \u003d idAndRemovedTags[1].trim().split(\" \");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        return new UntagCommand(deckList, deckID, removedTags);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * Creates a new deck for adding to deckList."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     * @param arguments String that represents the name of deck to be created"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * @return Reference to the deck created"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * @throws EmptyInputException if no name is supplied for the deck"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    private Deck prepareNewDeck(String arguments) throws EmptyInputException {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        logger.log(Level.INFO, \"Logging method prepareNewDeck() in NormalParser.\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        if (arguments.trim().isEmpty()) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            logger.log(Level.WARNING, \"User did not supply name when creating a new deck.\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            throw new EmptyInputException();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        if (arguments.contains(\"/tag\")) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            ArrayList\u003cString\u003e tagsList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            String[] nameAndTags \u003d arguments.split(\"/tag\", 2);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            String name \u003d nameAndTags[0].trim();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            String[] tags \u003d nameAndTags[1].trim().split(\" \");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            for (String tag: tags) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "                tagsList.add(tag.trim());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            return new Deck(name, tagsList);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            return new Deck(arguments);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     * Gets the index for the -cs option in pptx command."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     * @param arguments String representing the user input for the index"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     * @return int representing the index for the the color scheme chosen"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     * @throws CsIndexFormatException when format of index is not an integer"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     * @throws CsIndexRangeException when the index integer is not within the range [1,10], number of cs available"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    protected int getCsIndex(String arguments) throws CsIndexFormatException,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            CsIndexRangeException {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        arguments \u003d arguments.trim();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        logger.log(Level.INFO, \"Logging method getIndex() in NormalParser.\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        if (!arguments.matches(Ui.DIGITS_REGEX)) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            logger.log(Level.WARNING, \"User did not enter a valid integer index. string \u003d \" + arguments);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            throw new CsIndexFormatException();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        int index;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            index \u003d Integer.parseInt(arguments) - INDEX_OFFSET;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            throw new CsIndexFormatException();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        if (index \u003e HIGHEST_CS_INDEX || index \u003c LOWEST_POSSIBLE_INDEX) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            logger.log(Level.WARNING, \"User did not enter an index in the valid range for -cs.\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            throw new CsIndexRangeException();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     * Prepares the PowerPoint command when the user input is pptx."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     * @param arguments String representing the arguments of user input"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     * @return PowerPointCommand to be executed in the Main"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     * @throws Exception when arguments (index and options) are not valid"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    private PowerPointCommand preparePptxDeck(String arguments) throws Exception {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        Color bgColor \u003d null;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        Color txtColor \u003d null;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        boolean isPptxCreated \u003d false;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        boolean bothOCandCS \u003d false;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        boolean colorInvalid \u003d false;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        boolean colorSchemeInvalid \u003d false;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        Exception csException \u003d null;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        if (arguments.contains(Ui.FORCE_YES_OPT)) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            arguments \u003d arguments.replaceAll(Ui.FORCE_YES_OPT, \"\").trim();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            isPptxCreated \u003d true;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        if (arguments.contains(Ui.ORIGINAL_COLOR_OPT) \u0026\u0026 arguments.contains(Ui.COLOR_SCHEME_OPT)) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            bothOCandCS \u003d true;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        if (arguments.contains(Ui.ORIGINAL_COLOR_OPT)) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            String dashOrEnd \u003d \"\";"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            Pattern pattern \u003d Pattern.compile(Ui.ORIGINAL_COLORS_REGEX);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            Matcher matcher \u003d pattern.matcher(arguments);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            if (matcher.find()) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "                String bgColorString \u003d matcher.group(1);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "                String txtColorString \u003d matcher.group(2);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "                dashOrEnd \u003d matcher.group(3);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "                    bgColor \u003d ColorFactory.valueOf(bgColorString);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "                    txtColor \u003d ColorFactory.valueOf(txtColorString);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "                } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "                    colorInvalid \u003d true;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "                }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            arguments \u003d arguments.replaceAll(Ui.ORIGINAL_COLORS_REGEX, dashOrEnd).trim();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        if (arguments.contains(Ui.COLOR_SCHEME_OPT)) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            String dashOrEnd \u003d \"\";"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            Pattern pattern \u003d Pattern.compile(Ui.COLOR_SCHEME_REGEX);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            Matcher matcher \u003d pattern.matcher(arguments);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            if (matcher.find()) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "                String numArg \u003d matcher.group(1);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "                dashOrEnd \u003d matcher.group(2);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "                int colorSchemeIndex \u003d 0;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "                    colorSchemeIndex \u003d getCsIndex(numArg);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "                } catch (Exception e) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "                    csException \u003d e;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "                    colorSchemeInvalid \u003d true;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "                }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "                int[] bgColorRgb \u003d PowerPoint.COLOR_SCHEMES[colorSchemeIndex][0];"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "                int[] txtColorRgb \u003d PowerPoint.COLOR_SCHEMES[colorSchemeIndex][1];"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "                bgColor \u003d new Color(bgColorRgb[0], bgColorRgb[1], bgColorRgb[2]);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "                txtColor \u003d new Color(txtColorRgb[0], txtColorRgb[1], txtColorRgb[2]);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "                arguments \u003d arguments.replaceAll(Ui.COLOR_SCHEME_REGEX, dashOrEnd).trim();"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        if (arguments.contains(\"-\")) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            throw new InvalidOptionsException();"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        int deckID \u003d getIndex(arguments);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        Deck deck \u003d deckList.getDeck(deckID);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        if (bothOCandCS) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            throw new BothOcAndCsException();"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        if (colorInvalid) {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            throw new ColorsNotAvailException();"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        if (colorSchemeInvalid) {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            throw csException;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        if (!isPptxCreated) {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            isPptxCreated \u003d Ui.getPptxDeckConfirmation(deck.getName());"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        if (bgColor !\u003d null \u0026\u0026 txtColor !\u003d null) {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            return new PowerPointCommand(deckList, deck, isPptxCreated, bgColor, txtColor);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        return new PowerPointCommand(deckList, deck, isPptxCreated);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    private Command prepareSearchCommand(String arguments) throws EmptyInputException {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        logger.log(Level.INFO, \"Logging method prepareSearchCommand() in NormalParser.\");"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        if (arguments.trim().isEmpty()) {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            logger.log(Level.WARNING, \"User did not supply tags when searching for decks.\");"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            throw new EmptyInputException();"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        String[] relevantTags \u003d arguments.trim().split(\" \");"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        return new SearchCommand(deckList, relevantTags);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * Prepare Command for execution in Main."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * @param commandWord String that corresponds to a command"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * @param arguments String that lists the arguments for the command"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * @return respective Command object"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * @throws Exception when something wrong with the argument"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    protected Command parseCommand(String commandWord, String arguments)"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            throws Exception {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        assert (commandWord !\u003d null \u0026\u0026 arguments !\u003d null) :"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                \"commandWord and arguments should not be null\";"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        logger.log(Level.INFO, \"Logging method parseCommand() in NormalParser.\");"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        // Version"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        case Ui.VERSION_CMD:"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            return new VersionCommand();"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        // Exit"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        case Ui.EXIT:"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            logger.log(Level.INFO, \"User issued command to terminate program.\");"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        // Help"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        case Ui.HELP:"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            logger.log(Level.INFO, \"User issued command to view help.\");"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        // Edit"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        case Ui.EDIT:"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            Deck deck \u003d prepareDeck(arguments);"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            logger.log(Level.INFO, \"User issued command to edit deck \" + deck.getName() + \".\");"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            return new EditCommand(deckList, deck);"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        // Start"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        case Ui.START:"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            Deck startDeck \u003d prepareDeck(arguments);"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            logger.log(Level.INFO, \"User issued command to start deck \" + startDeck.getName() + \".\");"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            return new StartCommand(deckList, startDeck);"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        // Create"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        case Ui.CREATE:"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            Deck newDeck \u003d prepareNewDeck(arguments);"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            logger.log(Level.INFO, \"User issued command to create deck \" + newDeck.getName() + \".\");"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            return new CreateCommand(deckList, newDeck);"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        // Decks"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        case Ui.DECKS:"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            logger.log(Level.INFO, \"User issued command to list decks.\");"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            return new DecksCommand(deckList);"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        // Delete"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        case Ui.DELETE:"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            logger.log(Level.INFO, \"User issued command to delete deck\");"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            return prepareDeleteDeck(arguments);"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        // Tag"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        case Ui.TAG:"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            logger.log(Level.INFO, \"User issued command to tag a deck.\");"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            return prepareTagCommand(arguments);"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        // Untag"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        case Ui.UNTAG:"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            logger.log(Level.INFO, \"User issued command to untag a deck.\");"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            return prepareUntagCommand(arguments);"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        // Create new PowerPoint"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        case Ui.PPTX:"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            logger.log(Level.INFO, \"User issued command to create a PowerPoint.\");"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            return preparePptxDeck(arguments);"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        // Search"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        case Ui.SEARCH:"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            logger.log(Level.INFO, \"User issued command to search for decks.\");"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            return prepareSearchCommand(arguments);"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            logger.log(Level.INFO, \"User issued an invalid command.\");"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            return new VoidCommand();"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * Parses User Input from Main."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * @param userInput Input from user, passed through Main"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     * @return Command to be executed"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public Command parse(String userInput) {"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        logger.log(Level.INFO, \"Logging method parse() in NormalParser.\");"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        String[] splitString \u003d userInput.split(\" \", 2);"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        String commandWord \u003d splitString[0];"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        logger.log(Level.INFO, \"Parsed commandWord\");"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        boolean argumentsExist \u003d  splitString.length \u003e 1;"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        String arguments \u003d \"\";"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        if (argumentsExist) {"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            arguments \u003d splitString[1];"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            logger.log(Level.INFO, \"Parsed arguments\");"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            logger.log(Level.INFO, \"Parsing command\");"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            return parseCommand(commandWord, arguments);"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            logger.log(Level.WARNING, \"Parsed void or invalid command\");"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            return new VoidCommand(e.getMessage());"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alwaysnacy": 120,
      "kaijiel24": 239,
      "LiewWS": 61,
      "zhixiangteoh": 33
    }
  },
  {
    "path": "src/main/java/seedu/ecardnomics/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "package seedu.ecardnomics.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "public abstract class Parser {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public static final int LOWEST_POSSIBLE_INDEX \u003d 0;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public static final int INDEX_OFFSET \u003d 1;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     * Checks whether argument from user is a number and whether the index given is a within the correct range of"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     * decks/ flash cards."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     * @param arguments Argument from user input"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     * @return int representing the index from the argument given"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    protected abstract int getIndex(String arguments)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            throws Exception;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * Determines the Command subclass to return based on the commandWord"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * and arguments provided."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * @param commandWord String that corresponds to a command"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * @param arguments String that lists the arguments for the command"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * @return Command representing the command to be executed"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * @throws Exception if arguments are inappropriate"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    protected abstract Command parseCommand(String commandWord, String arguments)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            throws Exception;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     * Parse user input to determine which \u003ccode\u003eCommand\u003c/code\u003e to output."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     * @param userInput Input from user"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     * @return Command representing command to be executed"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public abstract Command parse(String userInput);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaijiel24": 23,
      "LiewWS": 9,
      "zhixiangteoh": 7
    }
  },
  {
    "path": "src/main/java/seedu/ecardnomics/powerpoint/PowerPoint.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "package seedu.ecardnomics.powerpoint;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "import org.apache.poi.xslf.usermodel.SlideLayout;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "import org.apache.poi.xslf.usermodel.XMLSlideShow;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "import org.apache.poi.xslf.usermodel.XSLFSlide;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "import org.apache.poi.xslf.usermodel.XSLFSlideLayout;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "import org.apache.poi.xslf.usermodel.XSLFSlideMaster;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "import org.apache.poi.xslf.usermodel.XSLFTextParagraph;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "import org.apache.poi.xslf.usermodel.XSLFTextRun;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "import org.apache.poi.xslf.usermodel.XSLFTextShape;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "import seedu.ecardnomics.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "import seedu.ecardnomics.deck.Deck;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "import seedu.ecardnomics.deck.FlashCard;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "import java.awt.Color;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "public class PowerPoint {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    private Deck deck;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    private XMLSlideShow pptx \u003d new XMLSlideShow();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    private XSLFSlideMaster defaultMaster \u003d pptx.getSlideMasters().get(0);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    private Color bgColor;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    private Color textColor;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public static final int[][][] COLOR_SCHEMES \u003d {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            {{26,81,144}, {162, 162, 161}}, // Turkish Sea and Silver"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            {{161, 57, 66}, {189, 128, 56}}, // Gold and Scarlet"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            {{255, 231, 122}, {44, 95, 45}}, // Yellow and Green"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            {{4, 30, 66}, {175, 234, 220}}, // Sailor Blue and Mint"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            {{16, 24, 32}, {242, 170, 76}}, // Black and Orange"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            {{255, 214, 98}, {0, 83, 156}}, // Aspen Gold and Princess Blue"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            {{28, 28, 27}, {206, 74, 126}}, // Nebulosity and Pink Yarrow"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            {{110, 110, 109}, {250, 208, 201}}, // Charcoal Gray and Pink Salt"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            {{173, 223, 173}, {44, 95, 45}}, // Moss Green and Forest Green"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            {{250, 235, 239},{46, 62, 128}} // Pink and Navy"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    };"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public static final String PPTX_DIR \u003d \"pptx/\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public static final String PPTX_EXT \u003d \".pptx\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public PowerPoint(Deck deck) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        this.deck \u003d deck;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        bgColor \u003d Color.white;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        textColor \u003d Color.black;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public PowerPoint(Deck deck, Color bgColor, Color textColor) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        this.deck \u003d deck;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        this.bgColor \u003d bgColor;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        this.textColor \u003d textColor;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    private void newIntroSlide() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        XSLFSlideLayout layout \u003d defaultMaster.getLayout(SlideLayout.TITLE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        XSLFSlide slide \u003d pptx.createSlide(layout);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        slide.getBackground().setFillColor(bgColor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        XSLFTextShape title \u003d slide.getPlaceholder(0);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        XSLFTextShape subtitle \u003d slide.getPlaceholder(1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        slide.removeShape(subtitle);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        title.clearText();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        XSLFTextParagraph p \u003d title.addNewTextParagraph();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        XSLFTextRun r \u003d p.addNewTextRun();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        r.setText(deck.getName());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        r.setFontColor(textColor);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        r.setFontSize(60.);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    private void newSlide(String titleText, String text) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        XSLFSlideLayout layout \u003d defaultMaster.getLayout(SlideLayout.TITLE_AND_CONTENT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        XSLFSlide slide \u003d pptx.createSlide(layout);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        XSLFTextShape title \u003d slide.getPlaceholder(0);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        XSLFTextShape object \u003d slide.getPlaceholder(1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        title.clearText();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        object.clearText();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        XSLFTextParagraph p \u003d title.addNewTextParagraph();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        XSLFTextRun r \u003d p.addNewTextRun();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        r.setText(titleText);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        r.setFontColor(textColor);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        r.setFontSize(50.);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        p \u003d object.addNewTextParagraph();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        r \u003d p.addNewTextRun();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        r.setText(text);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        r.setFontColor(textColor);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        r.setFontSize(40.);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    private void createPowerPoint() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        newIntroSlide();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        for (int i \u003d 0; i \u003c deck.size(); ++i) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            FlashCard card \u003d deck.get(i);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            newSlide(Ui.QUESTION + (i + 1), card.getQuestion());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            newSlide(Ui.ANSWER, card.getAnswer());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    private void exportPowerPoint() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        String fileName \u003d PPTX_DIR + deck.getName() + PPTX_EXT;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        File folder \u003d new File(PPTX_DIR);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        if (!folder.exists()) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            folder.mkdir();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        assert (folder.exists());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        File file \u003d new File(fileName);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            file.createNewFile();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            Ui.printMessage(Ui.CREATE_NEW_FILE_ERROR_LINE + fileName);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        assert (file.exists());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            FileOutputStream out \u003d new FileOutputStream(fileName);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "                pptx.write(out);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "                out.close();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "                pptx.close();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "                Ui.printDeckPptxLine(deck.getName());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "                Ui.printMessage(Ui.WRITE_TO_FILE_ERROR_LINE);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            Ui.printMessage(fileName + Ui.FILE_NOT_FOUND_ERROR_LINE);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     * Creates a new PowerPoint Slide based on the current deck"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     * and saves it as pptx/deckName.pptx"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public void createNewPowerPoint() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        createPowerPoint();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        exportPowerPoint();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaijiel24": 147,
      "LiewWS": 8
    }
  },
  {
    "path": "src/main/java/seedu/ecardnomics/storage/LogStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "package seedu.ecardnomics.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "import seedu.ecardnomics.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LiewWS"
        },
        "content": " * Class for instantiating loggers that log to files instead of stdout."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LiewWS"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "public class LogStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    private boolean willLog;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    private Logger logger;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    private FileHandler handler;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    private static final String FOLDER_PATH \u003d \"./log/\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    private static final File DIRECTORY \u003d new File(FOLDER_PATH);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * Constructor to initialize a logger for logging to file."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * @param name of class being logged by logger"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    public LogStorage(String name) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        willLog \u003d true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        filePath \u003d FOLDER_PATH + this.name + \".log\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        if (!DIRECTORY.exists()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            DIRECTORY.mkdir();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            handler \u003d new FileHandler(filePath);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            logger.addHandler(handler);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            handler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        } catch (SecurityException se) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            Ui.printMessage(\"No permission to create file, log file will not be created.\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            willLog \u003d false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            Ui.printMessage(\"Unable to open log file. Will not be logging.\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            willLog \u003d false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * Create a log entry in the log file."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * @param level java.util.logging.Level object to indicate log level"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * @param message to be logged"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    public void log(Level level, String message) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        if (willLog) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            logger.log(level, message);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LiewWS": 64
    }
  },
  {
    "path": "src/main/java/seedu/ecardnomics/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "package seedu.ecardnomics.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "import seedu.ecardnomics.deck.Deck;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "import seedu.ecardnomics.deck.DeckList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "import seedu.ecardnomics.deck.FlashCard;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    public static final String FILE_PATH \u003d \"./data/deckList.txt\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    public static final String FOLDER_PATH \u003d \"./data\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    public static final String DIVIDER \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "            \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    public static final String DECK_INDEX_REGEX \u003d \"deck\\\\s\\\\|\\\\s\\\\d+\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    public static final String DECK_NAME_REGEX \u003d \"name\\\\s\\\\|\\\\s.+\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    public static final String TAGS_REGEX \u003d \"tags\\\\s\\\\|\\\\s.+\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    public static final String SIZE_REGEX \u003d \"size\\\\s\\\\|\\\\s\\\\d+\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    public static final String QUESTION_REGEX \u003d \"Q\\\\s\\\\|\\\\s.+\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    public static final String ANSWER_REGEX \u003d \"A\\\\s\\\\|\\\\s.+\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    public static final String DIVIDER_REGEX \u003d \"\u003d{10,}\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    public DeckList load(DeckList deckList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        File folder \u003d new File(FOLDER_PATH);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        if (!folder.exists()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "            folder.mkdir();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        File file \u003d new File(FILE_PATH);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        Scanner scanner \u003d null;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "            scanner \u003d new Scanner(file);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "            return deckList;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        String line;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        while (scanner.hasNext()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "            line \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "            if (line.matches(DECK_INDEX_REGEX)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "                int deckIndex \u003d Integer.parseInt(line.substring(7));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "            line \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "            String deckName \u003d null;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "            Deck deck \u003d null;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "            if (line.matches(DECK_NAME_REGEX)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "                deckName \u003d line.substring(7);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "                deck \u003d new Deck(deckName);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "            line \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "            if (line.matches(TAGS_REGEX)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "                line \u003d line.substring(line.indexOf(\"|\") + 2);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "                String[] tags \u003d line.split(\" | \");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "                deck.addTag(tags);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "            line \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "            int deckSize \u003d 0;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "            if (line.matches(SIZE_REGEX)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "                deckSize \u003d Integer.parseInt(line.substring(7));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "            for (int i \u003d 0; i \u003c deckSize; i++) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "                line \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "                String question \u003d null;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "                if (line.matches(QUESTION_REGEX)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "                    question \u003d line.substring(4);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "                } else if (line.matches(DIVIDER_REGEX)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "                line \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "                String answer \u003d null;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "                if (line.matches(ANSWER_REGEX)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "                    answer \u003d line.substring(4);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "                } else if (line.matches(DIVIDER_REGEX)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "                FlashCard flashCard \u003d new FlashCard(question, answer);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "                deck.add(flashCard);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "            deckList.addDeck(deck);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        return deckList;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    public void write(DeckList deckList) throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        FileWriter fw \u003d new FileWriter(FILE_PATH);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        fw.write(DIVIDER);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        fw.write(System.lineSeparator());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        for (int i \u003d 0; i \u003c deckList.size(); i++) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "            Deck deck \u003d deckList.getDeck(i);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "            fw.write(\"deck | \" + i);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "            fw.write(System.lineSeparator());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "            fw.write(\"name | \" + deck.getName());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "            fw.write(System.lineSeparator());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            fw.write(\"tags | \" + deck.getTagString());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "            fw.write(System.lineSeparator());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "            fw.write(\"size | \" + deck.size());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "            fw.write(System.lineSeparator());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "            for (int j \u003d 0; j \u003c deck.size(); j++) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "                fw.write(\"Q | \" + deck.get(j).getQuestion());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "                fw.write(System.lineSeparator());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "                fw.write(\"A | \" + deck.get(j).getAnswer());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "                fw.write(System.lineSeparator());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "            fw.write(DIVIDER);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "            fw.write(System.lineSeparator());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alwaysnacy": 1,
      "wangwaynesg": 125
    }
  },
  {
    "path": "src/test/java/seedu/ecardnomics/MainTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "package seedu.ecardnomics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "class MainTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public void sampleTest() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(true);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixiangteoh": 2,
      "-": 10
    }
  },
  {
    "path": "src/test/java/seedu/ecardnomics/UiTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "package seedu.ecardnomics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import seedu.ecardnomics.deck.Deck;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "import seedu.ecardnomics.deck.FlashCard;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import static seedu.ecardnomics.Ui.printTagsRemovedLine;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import static seedu.ecardnomics.Ui.printNewDeck;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import static seedu.ecardnomics.Ui.printNewTags;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import static seedu.ecardnomics.Ui.printDeletedDeckQuestion;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import static seedu.ecardnomics.Ui.printDeckDeletedLine;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import static seedu.ecardnomics.Ui.printInvalidTagsLine;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import static seedu.ecardnomics.Ui.printRemovedTagsQuestion;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import static seedu.ecardnomics.Ui.printUpdateAnswerLine;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import static seedu.ecardnomics.Ui.printUpdateQuestionLine;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import static seedu.ecardnomics.Ui.printSearchDecksLine;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import static seedu.ecardnomics.Ui.formStringOfTags;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "public class UiTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    private final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    private final ByteArrayOutputStream errContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    private final PrintStream originalOut \u003d System.out;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    private final PrintStream originalErr \u003d System.err;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public void setUpStreams() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        System.setErr(new PrintStream(errContent));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public void restoreStreams() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        System.setOut(originalOut);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        System.setErr(originalErr);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public void printMessage_singleLine_goodFormat() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        String singleLine \u003d \"Hello! Welcome to eCardnomics!\\t\\t\\tFlashCards Application.\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        String message \u003d Ui.DASH_LINES + System.lineSeparator() + singleLine + System.lineSeparator()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "                + Ui.DASH_LINES + System.lineSeparator();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        Ui.printMessage(singleLine);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertEquals(message, outContent.toString());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void printNormalPrompt() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void printDeckPrompt() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void printPrompt() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void printNormalWelcome() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void printDeckWelcome() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void printGreeting() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void printExitLine() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void printNotRecognisedLine() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void printAddFlashCardLine() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void printEnterQuestionLine() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void printEnterAnswerLine() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void printFlashCardAddedLine() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void printDeck() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void printDeleteFlashCardLine() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void printFlashCardDeletedLine() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void printHelp() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    void printNewDeck_newDeckName_deckName() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        String expectedOutput \u003d  \"------------------------------------------------------------\" + System.lineSeparator()"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "                + \"New deck created: Pokemon\" + System.lineSeparator()"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "                + \"------------------------------------------------------------\" + System.lineSeparator();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        printNewDeck(new Deck(\"Pokemon\"));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        assertEquals(expectedOutput, outContent.toString());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void printDeckList() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    void printDeletedDeckQuestion_deletedDeckName_questionLine() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        String expectedOutput \u003d \"Do you want to delete Pokemon deck? [y/n] \";"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        Ui.printDeletedDeckQuestion(\"Pokemon\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        assertEquals(expectedOutput, outContent.toString());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    void printDeletedDeck_deletedDeckName_confirmation() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        String expectedOutput \u003d \"Pokemon has been deleted.\" + System.lineSeparator();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        printDeckDeletedLine(\"Pokemon\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        assertEquals(expectedOutput, outContent.toString());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    void printNewTags_none_newTagsLine() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        String expectedOutput \u003d \"------------------------------------------------------------\" + System.lineSeparator()"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "                + \"The deck Pokemon has been tagged as: Anime, Unreal\" + System.lineSeparator()"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "                + \"------------------------------------------------------------\" + System.lineSeparator();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        String[] newTagsArray \u003d {\"Anime\", \"Unreal\"};"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        printNewTags(\"Pokemon\", newTagsArray);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        assertEquals(expectedOutput, outContent.toString());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    void printInvalidTagsLine_none_warning() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        String expectedOutput \u003d \"------------------------------------------------------------\" + System.lineSeparator()"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "                + \"You entered invalid tag(s)!\" + System.lineSeparator()"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "                + \"------------------------------------------------------------\" + System.lineSeparator();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        printInvalidTagsLine();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        assertEquals(expectedOutput, outContent.toString());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    void printRemovedTagsQuestion_StringArrayOfTagsAndDeckName_question() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        String expectedOutput \u003d \"Do you want to remove the tag(s) Beginner, Year2 from Micro-Economics? [y/n] \";"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        String[] removedTagsArray \u003d {\"Beginner\", \"Year2\"};"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        printRemovedTagsQuestion(\"Micro-Economics\", removedTagsArray);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        assertEquals(expectedOutput, outContent.toString());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    void printTagsRemovedLine_removedTagsAndDeckName_confirmation() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        String expectedOutput \u003d \"The tag(s) Beginner, Year2 have been removed from the deck Micro-Economics.\""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "                + System.lineSeparator();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        String[] removedTagsArray \u003d {\"Beginner\", \"Year2\"};"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        printTagsRemovedLine(\"Micro-Economics\", removedTagsArray);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        assertEquals(expectedOutput, outContent.toString());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    void formStringOfTags_StringArrayOfTags_aStringOfTags() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        String[] arrayStringOfTags \u003d {\"Advanced\", \"Year4\", \"Finance\"};"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        String expectedOutput \u003d \"Advanced, Year4, Finance\";"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        String actualOutput \u003d formStringOfTags(arrayStringOfTags);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        assertEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    void printUpdateQuestionLine_existingFlashCard_updateQuestionLine() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        String question \u003d \"Old question\";"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        String answer \u003d \"Old answer\";"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        FlashCard existingCard \u003d new FlashCard(question, answer);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        String expectedOutput \u003d existingCard.toString(true, 0) + System.lineSeparator()"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                + \"New Question: \" + System.lineSeparator() + \"  \u003e \";"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        printUpdateQuestionLine(existingCard);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        assertEquals(expectedOutput, outContent.toString());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    void printUpdateAnswerLine_existingFlashCard_updateAnswerLine() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        String question \u003d \"Old question\";"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        String answer \u003d \"Old answer\";"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        FlashCard existingCard \u003d new FlashCard(question, answer);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        String expectedOutput \u003d existingCard.toString(false, 0) + System.lineSeparator()"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                + \"New Answer: \" + System.lineSeparator() + \"  \u003e \";"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        printUpdateAnswerLine(existingCard);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        assertEquals(expectedOutput, outContent.toString());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    void printSearchDecksLine_emptyString_NoDecksLine() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        String expectedOutput \u003d \"------------------------------------------------------------\" + System.lineSeparator()"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "                + \"There is no decks having the tags you are looking for.\" + System.lineSeparator()"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "                + \"------------------------------------------------------------\" + System.lineSeparator();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        printSearchDecksLine(\"\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        assertEquals(expectedOutput, outContent.toString());"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    void printSearchDecksLine_stringOfMatchedDecks_decksListings() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        String expectedOutput \u003d \"------------------------------------------------------------\" + System.lineSeparator()"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "                + \"The decks having tags you are searching for:\""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "                + \"\\n1. Micro-Economics\""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "                + \"\\n3. Object-oriented Programming\" + System.lineSeparator()"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "                + \"------------------------------------------------------------\" + System.lineSeparator();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        String input \u003d \"\\n1. Micro-Economics\\n3. Object-oriented Programming\";"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        printSearchDecksLine(input);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        assertEquals(expectedOutput, outContent.toString());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alwaysnacy": 88,
      "kaijiel24": 3,
      "LiewWS": 25,
      "zhixiangteoh": 116
    }
  },
  {
    "path": "src/test/java/seedu/ecardnomics/command/deck/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "package seedu.ecardnomics.command.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "import seedu.ecardnomics.deck.Deck;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "class AddCommandTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    void execute_addNewFlashCard() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        Deck deck \u003d new Deck(\"Test\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        AddCommand cmd \u003d new AddCommand(deck, \"Test Question\", \"Test Amswer\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        cmd.execute();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        assertEquals(1, deck.size());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangwaynesg": 17
    }
  },
  {
    "path": "src/test/java/seedu/ecardnomics/command/deck/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "package seedu.ecardnomics.command.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "import seedu.ecardnomics.deck.Deck;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "import seedu.ecardnomics.deck.FlashCard;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "import seedu.ecardnomics.storage.LogStorage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "class ListCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    private final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    private final ByteArrayOutputStream errContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    private final PrintStream originalOut \u003d System.out;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    private final PrintStream originalErr \u003d System.err;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    public void setUpStreams() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        System.setErr(new PrintStream(errContent));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    public void restoreStreams() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        System.setOut(originalOut);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        System.setErr(originalErr);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    void execute_emptyDeck_listCommand() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        String expectedOutput \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "                \"------------------------------------------------------------\" + System.lineSeparator()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "                + \"Deck is currently empty!\" + System.lineSeparator()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "                + \"------------------------------------------------------------\" + System.lineSeparator();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        Deck deck \u003d new Deck(\"Test\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        ListCommand cmd \u003d new ListCommand(deck, \"/ans\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        cmd.execute();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        assertEquals(expectedOutput, outContent.toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    void execute_nonEmptyDeck_ansArgument_listCommand() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        String expectedOutput \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "                \"------------------------------------------------------------\" + System.lineSeparator()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                + \"You are now viewing deck: Test\" + System.lineSeparator()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                + \"1. Question: Test Question\" + System.lineSeparator()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "                + \"   Answer:   Test Answer\" + System.lineSeparator()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "                + \"------------------------------------------------------------\" + System.lineSeparator();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        Deck deck \u003d new Deck(\"Test\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        deck.add(new FlashCard(\"Test Question\", \"Test Answer\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        ListCommand cmd \u003d new ListCommand(deck, \"/ans\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        cmd.execute();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        assertEquals(expectedOutput, outContent.toString());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    void execute_nonEmptyDeck_noAnsArgument_listCommand() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        String expectedOutput \u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "                \"------------------------------------------------------------\" + System.lineSeparator()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                + \"You are now viewing deck: Test\" + System.lineSeparator()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "                + \"1. Question: Test Question\" + System.lineSeparator()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "                + \"------------------------------------------------------------\" + System.lineSeparator();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        Deck deck \u003d new Deck(\"Test\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        deck.add(new FlashCard(\"Test Question\", \"Test Answer\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        ListCommand cmd \u003d new ListCommand(deck, \"\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        cmd.execute();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        assertEquals(expectedOutput, outContent.toString());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaijiel24": 2,
      "LiewWS": 4,
      "wangwaynesg": 70
    }
  },
  {
    "path": "src/test/java/seedu/ecardnomics/command/deck/UpdateCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "package seedu.ecardnomics.command.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "import seedu.ecardnomics.deck.Deck;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "import seedu.ecardnomics.deck.FlashCard;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "class UpdateCommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    Deck currentDeck;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    int flashCardID;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    static final String OLD_Q \u003d \"Knock knock\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    static final String OLD_A \u003d \"No joke\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    void execute_update() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        String newQ \u003d \"newQ\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        String newA \u003d \"newA\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        UpdateCommand cmd \u003d new UpdateCommand(currentDeck, flashCardID, newQ, newA);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        cmd.execute();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        assertEquals(newQ, currentDeck.get(flashCardID).getQuestion());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        assertEquals(newA, currentDeck.get(flashCardID).getAnswer());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    void initializeDeck() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        currentDeck \u003d new Deck(\"test deck\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        currentDeck.add(new FlashCard(OLD_Q, OLD_A));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        flashCardID \u003d 0;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LiewWS": 32
    }
  },
  {
    "path": "src/test/java/seedu/ecardnomics/command/normal/CreateCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "package seedu.ecardnomics.command.normal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "import seedu.ecardnomics.deck.Deck;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "import seedu.ecardnomics.deck.DeckList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "class CreateCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    void execute_createNewDeck() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        DeckList deckList \u003d new DeckList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        assertEquals(0, deckList.size());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        CreateCommand cmd \u003d new CreateCommand(deckList, new Deck(\"Test\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        cmd.execute();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        assertEquals(1, deckList.size());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        assertEquals(\"Test\", deckList.getDeck(0).getName());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alwaysnacy": 4,
      "LiewWS": 19
    }
  },
  {
    "path": "src/test/java/seedu/ecardnomics/command/normal/DeleteDeckCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "package seedu.ecardnomics.command.normal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "import seedu.ecardnomics.deck.Deck;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "import seedu.ecardnomics.deck.DeckList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "class DeleteDeckCommandTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    void execute_confirmDeleteDeck() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        DeckList deckList \u003d new DeckList();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        deckList.addDeck(new Deck(\"Test\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        assertEquals(1, deckList.size());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        DeleteDeckCommand cmd \u003d new DeleteDeckCommand(deckList, 0, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        cmd.execute();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        assertEquals(0, deckList.size());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    void execute_notConfirmedDeleteDeck() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        DeckList deckList \u003d new DeckList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        deckList.addDeck(new Deck(\"Test\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        assertEquals(1, deckList.size());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        DeleteDeckCommand cmd \u003d new DeleteDeckCommand(deckList, 0, false);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        cmd.execute();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        assertEquals(1, deckList.size());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LiewWS": 30
    }
  },
  {
    "path": "src/test/java/seedu/ecardnomics/command/normal/TagCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "package seedu.ecardnomics.command.normal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import seedu.ecardnomics.deck.Deck;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import seedu.ecardnomics.deck.DeckList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "public class TagCommandTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    void execute_addNewTagsToExistingDeck() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        DeckList deckList \u003d new DeckList();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        Deck newDeck \u003d new Deck(\"Pokemon\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        deckList.addDeck(newDeck);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        String[] newTags \u003d {\"anime\", \"unreal\"};"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        TagCommand cmd \u003d new TagCommand(deckList, 0, newTags);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        cmd.execute();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        assertEquals(2, deckList.getDeck(0).getTag().size());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alwaysnacy": 21
    }
  },
  {
    "path": "src/test/java/seedu/ecardnomics/deck/DeckListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "package seedu.ecardnomics.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "class DeckListTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void size() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        DeckList deckList \u003d initialiseDeckList(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertEquals(2, deckList.size());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        deckList.removeDeck(1);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertEquals(1, deckList.size());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        deckList.removeDeck(0);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertEquals(0, deckList.size());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        deckList.addDeck(new Deck(\"deck 1\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertEquals(1, deckList.size());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        DeckList deckList \u003d initialiseDeckList(2);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        String deckListString \u003d \"1. deck 1\\n2. deck 2\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertEquals(deckListString, deckList.toString());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    DeckList initialiseDeckList(int size) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        DeckList deckList \u003d new DeckList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d size; i++) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            Deck deck \u003d new Deck(String.format(\"deck %d\", i));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            deckList.addDeck(deck);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        return deckList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaijiel24": 1,
      "zhixiangteoh": 34
    }
  },
  {
    "path": "src/test/java/seedu/ecardnomics/deck/DeckTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "package seedu.ecardnomics.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "class DeckTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void getName() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        Deck deck \u003d new Deck(\"Pokemon\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertEquals(\"Pokemon\", deck.getName());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void setName() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        Deck deck \u003d new Deck(\"Pokemon\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        deck.setName(\"Pokemon Go\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertEquals(\"Pokemon Go\", deck.getName());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    // void get_emptyDeck_exceptionThrown() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    //     Deck deck \u003d new Deck(\"Pokemon\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    //     try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    //         assertEquals(0, deck.get(0));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    //         fail();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    //     } catch (Exception e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    //         NullPointerException npe \u003d new NullPointerException();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    //         assertEquals(npe.getMessage(), e.getMessage());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    //     }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    // void get_invalidIndex_exceptionThrown() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    //     Deck deck \u003d initialiseDeck(2);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    //     try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    //         assertEquals(0, deck.get(-1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    //         assertEquals(0, deck.get(2));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    //         assertEquals(0, deck.get(3));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    //         fail(); // test should not reach this line"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    //     } catch (Exception e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    //         NullPointerException npe \u003d new NullPointerException();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    //         assertEquals(npe.getMessage(), e.getMessage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    //     }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void get_validIndex_success() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        Deck deck \u003d new Deck(\"Pokemon\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        FlashCard q1 \u003d new FlashCard(\"q 1\", \"a 1\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        FlashCard q2 \u003d new FlashCard(\"q 2\", \"a 2\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        deck.add(q1);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        deck.add(q2);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertEquals(q1, deck.get(0));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertEquals(q2, deck.get(1));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void size() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        Deck deck \u003d initialiseDeck(2, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertEquals(2, deck.size());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        deck.delete(1);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertEquals(1, deck.size());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        deck.delete(0);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertEquals(0, deck.size());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        deck.add(new FlashCard(\"q 1\", \"a 1\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertEquals(1, deck.size());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    void constructor_newDeckWithTags() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        ArrayList\u003cString\u003e tags \u003d  new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        tags.add(\"anime\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        tags.add(\"unreal\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        Deck deck \u003d initialiseDeck(2, tags);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        assertEquals(2, deck.getTag().size());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    void getTagString_StringOfTags() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        ArrayList\u003cString\u003e tags \u003d  new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        tags.add(\"anime\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        tags.add(\"unreal\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        Deck deck \u003d initialiseDeck(2, tags);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        String expectedOutput \u003d \"anime unreal \";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        assertEquals(expectedOutput, deck.getTagString());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    void addTag_newTags_void() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        ArrayList\u003cString\u003e tags \u003d  new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        tags.add(\"anime\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        tags.add(\"unreal\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        Deck deck \u003d initialiseDeck(2, tags);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        String[] newTags \u003d {\"for-kids\"};"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        deck.addTag(newTags);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        assertEquals(3, deck.getTag().size());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    void removeTag_newTags_void() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        ArrayList\u003cString\u003e tags \u003d  new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        tags.add(\"anime\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        tags.add(\"unreal\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        tags.add(\"for-kids\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        Deck deck \u003d initialiseDeck(2, tags);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        String[] removedTags \u003d {\"for-kids\"};"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        deck.removeTag(removedTags);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        assertEquals(2, deck.getTag().size());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    // void delete_emptyDeck_exceptionThrown() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    //     Deck deck \u003d initialiseDeck(0);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    //     try {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    //         deck.delete(0);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    //         fail(); // test should not reach this line"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    //     } catch (Exception e) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    //         NullPointerException npe \u003d new NullPointerException();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    //         assertEquals(npe.getMessage(), e.getMessage());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    //     }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    // void delete_invalidIndex_exceptionThrown() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    //     Deck deck \u003d initialiseDeck(2);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    //     try {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    //         deck.delete(-1);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    //         deck.delete(2);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    //         deck.delete(3);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    //         fail(); // test should not reach this line"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    //     } catch (Exception e) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    //         NullPointerException npe \u003d new NullPointerException();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    //         assertEquals(npe.getMessage(), e.getMessage());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    //     }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void delete_validIndex_success() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        Deck deck \u003d initialiseDeck(2, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        deck.delete(1);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertEquals(1, deck.size());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void testToString_default_goodFormat() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        Deck deck \u003d initialiseDeck(2, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        String deckString \u003d \"Pokemon:\" + System.lineSeparator() + \"1. Question: q 1\""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                + System.lineSeparator() + \"   Answer:   a 1\\n\\n2. Question: q 2\""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                + System.lineSeparator() + \"   Answer:   a 2\";"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertEquals(deckString, deck.toString());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void testToString_withType_goodFormat() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        Deck deck \u003d initialiseDeck(2, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        String deckString \u003d \"1. Question: q 1\\n\\n\" + \"2. Question: q 2\";"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        String deckStringAns \u003d \"1. Question: q 1\" + System.lineSeparator() + \"   Answer:   a 1\\n\\n\""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                + \"2. Question: q 2\" + System.lineSeparator() + \"   Answer:   a 2\";"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        assertEquals(deckString, deck.toString(true));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        assertEquals(deckStringAns, deck.toString(false));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    Deck initialiseDeck(int size, ArrayList\u003cString\u003e tags) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        Deck deck \u003d new Deck(\"Pokemon\", tags);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d size; i++) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            FlashCard flashCard \u003d new FlashCard(String.format(\"q %d\", i), String.format(\"a %d\", i));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            deck.add(flashCard);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        return deck;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alwaysnacy": 50,
      "kaijiel24": 1,
      "LiewWS": 7,
      "zhixiangteoh": 116
    }
  },
  {
    "path": "src/test/java/seedu/ecardnomics/deck/FlashCardTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "package seedu.ecardnomics.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "class FlashCardTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    static FlashCard flashCard;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    static FlashCard longFlashCard;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    static FlashCard longWordFlashCard;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    static final String LABEL_PAD \u003d \" \".repeat(\"Question: \".length());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void testToString_default_goodFormat() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        String flashCardString \u003d \"Question: Who\u0027s that Pokemon?\" + System.lineSeparator()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                + \"Answer:   It\u0027s Pikachu!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertEquals(flashCardString, flashCard.toString());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    void testToString_default_wrappedLine() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        String flashCardString \u003d \"Question: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                + \"Ok, long question let\u0027s goooooooo! Ahhhhhhhhhhhhh. \" + System.lineSeparator()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                + LABEL_PAD + \"Make this question veryyyyyy longggg!\" + System.lineSeparator()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                + \"Answer:   \" + \"Ahhhhhhhhhhhhhhhhhhhhhhhh!!!!!!!!!!!!!! Get an \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                + System.lineSeparator()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                + LABEL_PAD + \"even longer answer. How many lines will this \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                + System.lineSeparator()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                + LABEL_PAD + \"answer span? I do not know. Maybe we can get it to \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                + System.lineSeparator()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                + LABEL_PAD + \"three lines? Perhaps. Anyway span reminds me of \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                + System.lineSeparator()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                + LABEL_PAD + \"linear algebra.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        assertEquals(flashCardString, longFlashCard.toString());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    void testToString_default_wrapLongWord() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        String flashCardString \u003d \"Question: Do you have \" + System.lineSeparator()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                + LABEL_PAD + \"Pneumonoultramicroscopicsilicovolcanoconiosis?\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                + System.lineSeparator() + \"Answer:   Try to enter the loop so create an answer with \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                + System.lineSeparator() + LABEL_PAD + \"more than 2 lines: \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                + \"Aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\" + System.lineSeparator() + LABEL_PAD"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                + \"aaaaaaaaaaaaaaaaaaaaaaaahhhhhhhhhhhhhhhhhhhhhhhhhh\" + System.lineSeparator()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                + LABEL_PAD + \"hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                + System.lineSeparator() + LABEL_PAD + \"hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                + \"hhhhhhhhhhhhhhhhhhh\" + System.lineSeparator() + LABEL_PAD"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                + \"hhhhhhhhhhhhhSaveMeeeeeeeeeeeeeeee\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        assertEquals(flashCardString, longWordFlashCard.toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void testToString_withType_goodFormat() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        String flashCardQn \u003d \"Question: Who\u0027s that Pokemon?\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        String flashCardAns \u003d \"Answer:   It\u0027s Pikachu!\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        assertEquals(flashCardQn, flashCard.toString(true, 0));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        assertEquals(flashCardAns, flashCard.toString(false, 0));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    void testToString_withType_wrappedLine() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        String flashCardQn \u003d \"Question: \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                + \"Ok, long question let\u0027s goooooooo! Ahhhhhhhhhhhhh. \" + System.lineSeparator()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                + LABEL_PAD + \"Make this question veryyyyyy longggg!\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        String flashCardAns \u003d \"Answer:   \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                + \"Ahhhhhhhhhhhhhhhhhhhhhhhh!!!!!!!!!!!!!! Get an \" + System.lineSeparator()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                + LABEL_PAD + \"even longer answer. How many lines will this \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                + System.lineSeparator()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                + LABEL_PAD + \"answer span? I do not know. Maybe we can get it to \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                + System.lineSeparator()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                + LABEL_PAD + \"three lines? Perhaps. Anyway span reminds me of \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                + System.lineSeparator()"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                + LABEL_PAD + \"linear algebra.\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        assertEquals(flashCardQn, longFlashCard.toString(true, 0));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        assertEquals(flashCardAns, longFlashCard.toString(false, 0));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    void testToString_withType_wrapLongWord() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        String largeSerialNumber \u003d Integer.MAX_VALUE + \". \";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        String indexPad \u003d \" \".repeat(largeSerialNumber.length());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        String flashCardQn \u003d largeSerialNumber + \"Question: Do you have Pneumonoultramicroscopicsi\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                + System.lineSeparator() + indexPad + LABEL_PAD + \"licovolcanoconiosis?\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        String flashCardAns \u003d indexPad + \"Answer:   Try to enter the loop so create an \""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                + System.lineSeparator() + indexPad + LABEL_PAD + \"answer with more than 2 lines: Aaaaaaa\""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                + System.lineSeparator() + indexPad + LABEL_PAD + \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                + System.lineSeparator() + indexPad + LABEL_PAD + \"aaaaaaaaaahhhhhhhhhhhhhhhhhhhhhhhhhhhh\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                + System.lineSeparator() + indexPad + LABEL_PAD + \"hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                + System.lineSeparator() + indexPad + LABEL_PAD + \"hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh\""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                + System.lineSeparator() + indexPad + LABEL_PAD + \"hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhSav\""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                + System.lineSeparator() + indexPad + LABEL_PAD + \"eMeeeeeeeeeeeeeeee\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        assertEquals(flashCardQn, largeSerialNumber"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                + longWordFlashCard.toString(true, largeSerialNumber.length()));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        assertEquals(flashCardAns, longWordFlashCard.toString(false, largeSerialNumber.length()));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public static void createFlashCard() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        flashCard \u003d new FlashCard(\"Who\u0027s that Pokemon?\", \"It\u0027s Pikachu!\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        String longQuestion \u003d \"Ok, long question let\u0027s goooooooo! Ahhhhhhhhhhhhh.\""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                + \" Make this question veryyyyyy longggg!\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        String longAnswer \u003d \"Ahhhhhhhhhhhhhhhhhhhhhhhh!!!!!!!!!!!!!! \""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                + \"Get an even longer answer. How many lines will this answer span? \""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                + \"I do not know. Maybe we can get it to three lines? Perhaps. \""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                + \"Anyway span reminds me of linear algebra.\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        longFlashCard \u003d new FlashCard(longQuestion, longAnswer);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        String longWordQn \u003d \"Do you have Pneumonoultramicroscopicsilicovolcanoconiosis?\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        String longWordAns \u003d \"Try to enter the loop so create an answer with more than 2 lines: \""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                + \"Aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaahhhhhhhhhhhhhhhhhhhhhhhhhh\""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                + \"hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh\""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                + \"hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhSaveMeeeeeeeeeeeeeeee\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        longWordFlashCard \u003d new FlashCard(longWordQn, longWordAns);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LiewWS": 93,
      "zhixiangteoh": 24
    }
  },
  {
    "path": "src/test/java/seedu/ecardnomics/game/GameEngineTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "package seedu.ecardnomics.game;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.command.game.DoneGameCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.deck.Deck;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.deck.DeckList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.deck.FlashCard;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.parser.GameParser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import java.util.ArrayDeque;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "class GameEngineTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    Deck deck;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    DeckList deckList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    GameStorage storage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    GameParser gameParser;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    GameEngine engine;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    FlashCard[] createfcStubs(int number) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        FlashCard[] fcStubs \u003d new FlashCard[number];"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        for (int i \u003d 0; i \u003c number; i++) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            fcStubs[i] \u003d new FlashCard(String.format(\"ques-stub%d\", i), String.format(\"ans-stub%d\", i));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        return fcStubs;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "     * Checks if storage.deque is randomised enough by sequentially popping and ensuring there is some degree of"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "     * randomness."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "     * @return true if random \"enough\", otherwise false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    boolean checkRandomnessOfDequeFromReference(ArrayDeque\u003cFlashCard\u003e dequeFromRetestStubs,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "                                                  ArrayList\u003cFlashCard\u003e referenceList) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        int mismatchCount \u003d 0;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        while (!dequeFromRetestStubs.isEmpty()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            // flash cards follow strict format"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            int index \u003d 0;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            FlashCard fc \u003d dequeFromRetestStubs.pop();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            if (!fc.getQuestion().equals(referenceList.get(index))) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "                mismatchCount++;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        double mismatchRatio \u003d (double) referenceList.size() / mismatchCount;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        double threshold \u003d 0.25;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        if (mismatchRatio \u003e\u003d threshold) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void update_storageDequeAndRetestStoreEmptyUserEntersN_returnsDoneGameCommand() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        storage.deque.clear();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        storage.retestStore.clear();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        FlashCard fcStub \u003d createfcStubs(1)[0];"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertTrue(engine.update(false, fcStub) instanceof DoneGameCommand);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void update_storageDequeNotEmpty_returnsNull() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        FlashCard fcStub \u003d createfcStubs(1)[0];"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertTrue(engine.update(true, fcStub) \u003d\u003d null);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertTrue(engine.update(false, fcStub) \u003d\u003d null);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void updateDeque_storageDequeEmptyAndUpdateFromRetestStore_success() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        storage.deque.clear();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        FlashCard[] fcStubs \u003d createfcStubs(5);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        for (FlashCard fc : fcStubs) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            storage.retestStore.add(fc);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        ArrayList\u003cFlashCard\u003e retestStoreRef \u003d storage.retestStore;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        storage.createRandomisedStack(storage.retestStore);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        engine.updateDeque();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertTrue(checkRandomnessOfDequeFromReference(storage.deque, retestStoreRef));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertEquals(0, storage.retestStore.size());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void updateRetestStore_responseY_addsFlashCard() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        storage.retestStore.clear();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        FlashCard fcStub \u003d createfcStubs(1)[0];"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        engine.updateRetestStore(true, fcStub);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertTrue(storage.retestStore.contains(fcStub));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void updateRetestStore_responseN_doNothing() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        storage.retestStore.clear();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        FlashCard fcStub \u003d createfcStubs(1)[0];"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        engine.updateRetestStore(false, fcStub);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertFalse(storage.retestStore.contains(fcStub));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void checkAttempt_validCommand_success() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        Command attempt \u003d gameParser.parse(\"ans-stub0\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        FlashCard fcStub \u003d createfcStubs(1)[0];"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertEquals(100.0, engine.checkAttempt(attempt, fcStub));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void getMatchPercentage_completeMatchSpacePunctuationPadded_success() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        double match \u003d engine.getMatchPercentage(\"this is an answer.!` -_+\u003d)(*\u0026^%$#@!\", \"this is an answer   .\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertEquals(100.0, match);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void getMatchPercentage_completeMatchSpacePaddedMatchedWords_success() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        double match \u003d engine.getMatchPercentage(\"this  \\t\\t is   an    answer.\", \"this is an answer\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertEquals(100.0, match);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void getMatchPercentage_zeroMatchSpacePunctuationPadded_success() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        double match \u003d engine.getMatchPercentage(\"completely wrong.!` -_+\u003d)(*\u0026^%$#@!\", \"this is an answer   .\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertEquals(0.0, match);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void getMatchPercentage_punctuationAnswerZeroMatch_success() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        double match \u003d engine.getMatchPercentage(\"!@#//...    . %^*()\", \"!@#//...    . %^*()\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertEquals(0.0, match);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void preliminaries() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        deckList \u003d initialiseDeckList(2);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        deck \u003d initialiseDeck(deckList, 2);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        storage \u003d new GameStorage(deck);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        gameParser \u003d new GameParser(deck);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        engine \u003d new GameEngine(storage);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    DeckList initialiseDeckList(int size) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        DeckList deckList \u003d new DeckList();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d size; i++) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            Deck deck \u003d new Deck(String.format(\"deck %d\", i));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            deckList.addDeck(deck);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        return deckList;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    Deck initialiseDeck(DeckList deckList, int size) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        deckList.addDeck(new Deck(\"Pokemon\"));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        Deck deck \u003d deckList.getDeck(2);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d size; i++) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            FlashCard flashCard \u003d new FlashCard(String.format(\"q %d\", i), String.format(\"a %d\", i));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            deck.add(flashCard);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        return deck;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixiangteoh": 166
    }
  },
  {
    "path": "src/test/java/seedu/ecardnomics/game/GameStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "package seedu.ecardnomics.game;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.deck.Deck;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.deck.DeckList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.deck.FlashCard;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "class GameStorageTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    GameStorage storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    Deck originalDeck;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void createRandomisedStack_takesDeck_originalDeckUnchanged() throws Exception {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        Deck deckCopy \u003d new Deck(\"Pokemon\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        copyDeck(originalDeck, deckCopy);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        storage.createRandomisedStack(originalDeck);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        checkDeckEquality(originalDeck, deckCopy);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void checkDeckEquality(Deck original, Deck copy) throws Exception {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        boolean isEqual \u003d true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        for (int i \u003d 0; i \u003c original.size(); i++) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            if (!original.get(i).equals(copy.get(i))) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "                isEqual \u003d false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        if (!isEqual) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            throw new Exception(\"Decks not equal!\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void copyDeck(Deck originalDeck, Deck deckCopy) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        for (FlashCard fc : originalDeck.getDeck()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            deckCopy.add(fc);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void preliminaries() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        DeckList deckList \u003d initialiseDeckList(2);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        originalDeck \u003d initialiseDeck(deckList, 2);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        storage \u003d new GameStorage(originalDeck);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    DeckList initialiseDeckList(int size) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        DeckList deckList \u003d new DeckList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d size; i++) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            Deck deck \u003d new Deck(String.format(\"deck %d\", i));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            deckList.addDeck(deck);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        return deckList;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    Deck initialiseDeck(DeckList deckList, int size) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        deckList.addDeck(new Deck(\"Pokemon\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        Deck deck \u003d deckList.getDeck(2);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d size; i++) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            FlashCard flashCard \u003d new FlashCard(String.format(\"q %d\", i), String.format(\"a %d\", i));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            deck.add(flashCard);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        return deck;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixiangteoh": 66
    }
  },
  {
    "path": "src/test/java/seedu/ecardnomics/parser/DeckParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "package seedu.ecardnomics.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.command.VersionCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.command.VoidCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "import seedu.ecardnomics.command.deck.DoneEditCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "import seedu.ecardnomics.command.deck.AddCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "import seedu.ecardnomics.command.deck.DeleteCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "import seedu.ecardnomics.command.deck.ListCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "import seedu.ecardnomics.command.deck.HelpCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.command.ExitCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "import seedu.ecardnomics.command.normal.PowerPointCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.command.normal.StartCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.deck.Deck;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "import seedu.ecardnomics.deck.DeckList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.deck.FlashCard;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.exceptions.EmptyInputException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.exceptions.FlashCardRangeException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.exceptions.IndexFormatException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.exceptions.NoAlphaNumericInputException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "class DeckParserTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    DeckParser deckParser;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    void getIndex_validIndex_success() throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertEquals(0, deckParser.getIndex(\"1\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertEquals(1, deckParser.getIndex(\"2\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    void getIndex_validIndexSpacePadded_success() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        assertEquals(0, deckParser.getIndex(\" 1\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        assertEquals(0, deckParser.getIndex(\"\\t1\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        assertEquals(1, deckParser.getIndex(\"2\\t\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        assertEquals(1, deckParser.getIndex(\"     2 \"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void getIndex_outOfRangeIndex_exceptionThrown() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            assertEquals(1, deckParser.getIndex(\"3\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            assertEquals(1, deckParser.getIndex(\"0\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            assertEquals((new FlashCardRangeException()).getMessage(), e.getMessage());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void getIndex_noIndex_exceptionThrown() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            assertEquals(1, deckParser.getIndex(\"\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            assertEquals(1, deckParser.getIndex(\"   \"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            assertEquals(1, deckParser.getIndex(\"something\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            assertEquals(1, deckParser.getIndex(\" something\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            assertEquals((new IndexFormatException()).getMessage(), e.getMessage());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void prepareFlashCard_oneLinerEmptyInputQuestion_EmptyInputExceptionThrown() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            assertEquals(1, deckParser.prepareFlashCard(\"      /ans some answer\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            // question input checked first"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            assertEquals(1, deckParser.prepareFlashCard(\"      /ans !@#\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            assertEquals(new EmptyInputException().getMessage(), e.getMessage());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void prepareFlashCard_oneLinerEmptyInputAnswerValidQuestion_EmptyInputExceptionThrown() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            // question input checked first"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            assertEquals(1, deckParser.prepareFlashCard(\"some question /ans     \"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            assertEquals(new EmptyInputException().getMessage(), e.getMessage());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void prepareFlashCard_oneLinerNoAlphaNumericQuestion_NoAlphaNumericExceptionThrown() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            assertEquals(1, deckParser.prepareFlashCard(\"!@#.. /ans some answer\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            // question input checked first"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            assertEquals(1, deckParser.prepareFlashCard(\"!@#.. /      \"));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            assertEquals(new NoAlphaNumericInputException().getMessage(), e.getMessage());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void prepareFlashCard_oneLinerNoAlphaNumericAnswerValidQuestion_NoAlphaNumericExceptionThrown() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            // question input checked first"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            assertEquals(1, deckParser.prepareFlashCard(\"some question /ans !@#..\"));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            assertEquals(new NoAlphaNumericInputException().getMessage(), e.getMessage());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void prepareFlashCard_oneLinerInValidAnswerInvalidQuestion_questionDependentExceptionsThrown() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            // question input checked first"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            // throws EmptyInputException"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            assertEquals(1, deckParser.prepareFlashCard(\"     /ans !@#..\"));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            // throws NoAlphaNumericException"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            assertEquals(1, deckParser.prepareFlashCard(\"!@#. /ans      \"));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        } catch (EmptyInputException eie) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            assertEquals(new EmptyInputException().getMessage(), eie.getMessage());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        } catch (NoAlphaNumericInputException nae) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            assertEquals(new NoAlphaNumericInputException().getMessage(), nae.getMessage());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void parseCommand_ExitCommand_success() throws Exception {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertTrue(deckParser.parseCommand(\"exit\", \"\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void parseCommand_DoneEditCommand_success() throws Exception {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertTrue(deckParser.parseCommand(\"done\", \"\") instanceof DoneEditCommand);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    void parseCommand_AddCommand_oneLine_success() throws Exception {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        assertTrue(deckParser.parseCommand(\"add\", \"qn /ans ans\") instanceof AddCommand);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void parseCommand_ListCommand_success() throws Exception {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertTrue(deckParser.parseCommand(\"list\", \"\") instanceof ListCommand);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    void parseCommand_DeleteCommand_success() throws Exception {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        assertTrue(deckParser.parseCommand(\"delete\", \"1 -y\") instanceof DeleteCommand);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    void parseCommand_DeleteCommandNoIndex_exceptionThrown() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            deckParser.parseCommand(\"delete\", \"\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            assertTrue(e instanceof IndexFormatException);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    void parseCommand_DeleteCommandOutOfRangeIndex_exceptionThrown() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            deckParser.parseCommand(\"delete\", \"3\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            assertTrue(e instanceof FlashCardRangeException);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    void parseCommand_UpdateCommandNoIndex_exceptionThrown() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            deckParser.parseCommand(\"update\", \"\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            assertTrue(e instanceof IndexFormatException);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    void parseCommand_UpdateCommandOutOfRangeIndex_exceptionThrown() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            deckParser.parseCommand(\"update\", \"3\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            assertTrue(e instanceof FlashCardRangeException);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    void parseCommand_PptxCommandForceYes_success() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            assertTrue(deckParser.parseCommand(\"pptx\", \"-y\") instanceof PowerPointCommand);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            System.out.println(\" error\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    void parseCommand_PptxCommandExtraArguments_exceptionThrown() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            deckParser.parseCommand(\"pptx\", \"1\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            deckParser.parseCommand(\"pptx\", \"1 -y\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            deckParser.parseCommand(\"pptx\", \"-y 1\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            assertTrue(e instanceof IndexFormatException);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void parseCommand_HelpCommand_success() throws Exception {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertTrue(deckParser.parseCommand(\"help\", \"\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void parseCommand_StartCommandArgumentsSpacePadded_success() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            assertTrue(deckParser.parseCommand(\"start\", \"\") instanceof StartCommand);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            assertTrue(deckParser.parseCommand(\"start\", \"\\t\") instanceof StartCommand);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            assertTrue(deckParser.parseCommand(\"start\", \"\\n\") instanceof StartCommand);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            System.out.println(\" error\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void parseCommand_StartCommandRandomArguments_success() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            assertTrue(deckParser.parseCommand(\"start\", \"1\") instanceof StartCommand);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            assertTrue(deckParser.parseCommand(\"start\", \"\\t1\") instanceof StartCommand);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            assertTrue(deckParser.parseCommand(\"start\", \"\\n1\") instanceof StartCommand);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            System.out.println(\" error\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void parseCommand_VersionCommandAnyArguments_success() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            assertTrue(deckParser.parseCommand(\"--version\", \"1\") instanceof VersionCommand);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            assertTrue(deckParser.parseCommand(\"--version\", \"\\t1\") instanceof VersionCommand);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            assertTrue(deckParser.parseCommand(\"--version\", \"\\n hdkljfashdfs\\t\\t\") instanceof VersionCommand);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            System.out.println(\" error\");"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void parse_invalidCommand_returnsVoidCommand() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertTrue(deckParser.parse(\"something random\") instanceof VoidCommand);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertTrue(deckParser.parse(\"\") instanceof VoidCommand);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertTrue(deckParser.parse(\"   \") instanceof VoidCommand);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertTrue(deckParser.parse(\"\\t\") instanceof VoidCommand);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertTrue(deckParser.parse(\"blah\") instanceof VoidCommand);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    //@BeforeAll"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    //public static void addUserInput() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    //String userInputs \u003d \"q1\" + System.getProperty(\"line.separator\") + \"a1\" + System.getProperty(\"line.separator\")"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    //+ \"y\" + System.getProperty(\"line.separator\") + \"y\";"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    //ByteArrayInputStream input \u003d new ByteArrayInputStream(userInputs.getBytes());"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    //System.setIn(input);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void initialiseDeckParser() {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        DeckList deckList \u003d initialiseDeckList(2);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        Deck deck \u003d initialiseDeck(deckList, 2);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        deckParser \u003d new DeckParser(deckList, deck);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    DeckList initialiseDeckList(int size) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        DeckList deckList \u003d new DeckList();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d size; i++) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            Deck deck \u003d new Deck(String.format(\"deck %d\", i));"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            deckList.addDeck(deck);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        return deckList;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    Deck initialiseDeck(DeckList deckList, int size) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        deckList.addDeck(new Deck(\"Pokemon\"));"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        Deck deck \u003d deckList.getDeck(2);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d size; i++) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            FlashCard flashCard \u003d new FlashCard(String.format(\"q %d\", i), String.format(\"a %d\", i));"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            deck.add(flashCard);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        return deck;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaijiel24": 77,
      "LiewWS": 28,
      "zhixiangteoh": 184
    }
  },
  {
    "path": "src/test/java/seedu/ecardnomics/parser/GameParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "package seedu.ecardnomics.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.command.ExitCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.command.VersionCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.command.VoidCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.command.game.DoneGameCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.command.game.GameResponseCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.command.game.HelpCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.deck.Deck;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.deck.DeckList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.deck.FlashCard;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "class GameParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    GameParser gameParser;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void parseCommand_ExitCommand_success() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertTrue(gameParser.parseCommand(\"exit\", \"\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void parseCommand_DoneGameCommand_success() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertTrue(gameParser.parseCommand(\"done\", \"\") instanceof DoneGameCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void parseCommand_HelpCommandAnyArguments_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertTrue(gameParser.parseCommand(\"help\", \"\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertTrue(gameParser.parseCommand(\"help\", \"gibberish\\t\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertTrue(gameParser.parseCommand(\"help\", \"\\n   12gibberish\\t\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void parseCommand_VersionCommandAnyArguments_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertTrue(gameParser.parseCommand(\"--version\", \"\") instanceof VersionCommand);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertTrue(gameParser.parseCommand(\"--version\", \"\\t1\") instanceof VersionCommand);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertTrue(gameParser.parseCommand(\"--version\", \"\\n hdkljfashdfs\\t\\t\") instanceof VersionCommand);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void parseCommand_AnythingElse_returnsVoidCommand() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertTrue(gameParser.parseCommand(\"random\", \"\") instanceof VoidCommand);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertTrue(gameParser.parseCommand(\"lmaoo sdalkfe we\", \"\") instanceof VoidCommand);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void parse_someGameModeCommandPermissibleFormat_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertTrue(gameParser.parse(\"--version\") instanceof VersionCommand);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertTrue(gameParser.parse(\"--version   \") instanceof VersionCommand);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertTrue(gameParser.parse(\"done\") instanceof DoneGameCommand);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertTrue(gameParser.parse(\"done   \") instanceof DoneGameCommand);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertTrue(gameParser.parse(\"exit\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertTrue(gameParser.parse(\"help\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void parse_commandWordWithOtherWords_returnsGameResponseCommand() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertTrue(gameParser.parse(\"--version s df\") instanceof GameResponseCommand);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertTrue(gameParser.parse(\"--version  22 \") instanceof GameResponseCommand);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertTrue(gameParser.parse(\"done sdsd\") instanceof GameResponseCommand);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertTrue(gameParser.parse(\"done   22\") instanceof GameResponseCommand);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertTrue(gameParser.parse(\"exit sd2\") instanceof GameResponseCommand);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertTrue(gameParser.parse(\"help sde 2\") instanceof GameResponseCommand);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void parse_AnythingElseGivesGameResponseCommand_responseRecordedTrimmed() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        GameResponseCommand response \u003d (GameResponseCommand) gameParser.parse(\"Some answer here\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertEquals(response.getAttempt(), \"Some answer here\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        response \u003d (GameResponseCommand) gameParser.parse(\"     Some answer here      \");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertEquals(response.getAttempt(), \"Some answer here\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void initialiseGameParser() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        DeckList deckList \u003d initialiseDeckList(2);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        Deck deck \u003d initialiseDeck(deckList, 2);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        gameParser \u003d new GameParser(deck);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    DeckList initialiseDeckList(int size) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        DeckList deckList \u003d new DeckList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d size; i++) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            Deck deck \u003d new Deck(String.format(\"deck %d\", i));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            deckList.addDeck(deck);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        return deckList;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    Deck initialiseDeck(DeckList deckList, int size) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        deckList.addDeck(new Deck(\"Pokemon\"));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        Deck deck \u003d deckList.getDeck(2);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d size; i++) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            FlashCard flashCard \u003d new FlashCard(String.format(\"q %d\", i), String.format(\"a %d\", i));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            deck.add(flashCard);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        return deck;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixiangteoh": 106
    }
  },
  {
    "path": "src/test/java/seedu/ecardnomics/parser/NormalParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "package seedu.ecardnomics.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "import seedu.ecardnomics.command.VersionCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.command.VoidCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.command.ExitCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "import seedu.ecardnomics.command.normal.DeleteDeckCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "import seedu.ecardnomics.command.normal.EditCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "import seedu.ecardnomics.command.normal.CreateCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "import seedu.ecardnomics.command.normal.DecksCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "import seedu.ecardnomics.command.normal.PowerPointCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "import seedu.ecardnomics.command.normal.HelpCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.command.normal.StartCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.deck.Deck;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.deck.DeckList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.exceptions.DeckRangeException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "import seedu.ecardnomics.exceptions.EmptyInputException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.exceptions.IndexFormatException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "class NormalParserTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    NormalParser normalParser;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    void getIndex_validIndex_success() throws Exception {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertEquals(0, normalParser.getIndex(\"1\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertEquals(1, normalParser.getIndex(\"2\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    void getIndex_validIndexSpacePadded_success() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        assertEquals(0, normalParser.getIndex(\" 1\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        assertEquals(0, normalParser.getIndex(\"\\t1\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        assertEquals(1, normalParser.getIndex(\"2\\t\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        assertEquals(1, normalParser.getIndex(\"     2 \"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void getIndex_outOfRangeIndex_exceptionThrown() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            assertEquals(1, normalParser.getIndex(\"3\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            assertEquals(1, normalParser.getIndex(\"-1\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            assertEquals(1, normalParser.getIndex(\"0\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            assertEquals((new DeckRangeException()).getMessage(), e.getMessage());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void getIndex_noIndex_exceptionThrown() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            assertEquals(1, normalParser.getIndex(\"\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            assertEquals(1, normalParser.getIndex(\"   \"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            assertEquals(1, normalParser.getIndex(\"something\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            assertEquals(1, normalParser.getIndex(\" something\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            assertEquals((new IndexFormatException()).getMessage(), e.getMessage());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    void parseCommand_VersionCommand_success() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        assertTrue(normalParser.parseCommand(\"--version\", \"\") instanceof VersionCommand);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void parseCommand_ExitCommand_success() throws Exception {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertTrue(normalParser.parseCommand(\"exit\", \"\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void parseCommand_EditCommand_success() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertTrue(normalParser.parseCommand(\"edit\", \"1\") instanceof EditCommand);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertTrue(normalParser.parseCommand(\"edit\", \"2\") instanceof EditCommand);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void parseCommand_EditCommandNoIndex_exceptionThrown() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            assertTrue(normalParser.parseCommand(\"edit\", \"\") instanceof EditCommand);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            assertTrue(e instanceof IndexFormatException);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void parseCommand_EditCommandOutOfRangeIndex_exceptionThrown() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            normalParser.parseCommand(\"edit\", \"0\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            normalParser.parseCommand(\"edit\", \"3\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            assertTrue(e instanceof DeckRangeException);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    void parseCommand_CreateCommand_success() throws Exception {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        assertTrue(normalParser.parseCommand(\"create\", \"Deck 3\") instanceof CreateCommand);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    void parseCommand_CreateCommandEmptyInput_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            normalParser.parseCommand(\"create\", \"\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            assertTrue(e instanceof EmptyInputException);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void parseCommand_DecksCommand_success() throws Exception {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertTrue(normalParser.parseCommand(\"decks\", \"\") instanceof DecksCommand);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    void parseCommand_DeleteDeckCommand_force_success() throws Exception {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        assertTrue(normalParser.parseCommand(\"delete\", \"1 -y\") instanceof DeleteDeckCommand);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    void parseCommand_DeleteDeckCommandNoIndex_exceptionThrown() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            normalParser.parseCommand(\"delete\", \"\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            assertTrue(e instanceof IndexFormatException);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    void parseCommand_DeleteDeckCommandOutOfRangeIndex_exceptionThrown() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            normalParser.parseCommand(\"delete\", \"3\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            assertTrue(e instanceof DeckRangeException);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    void parseCommand_PptxCommand_forceYes_success() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            assertTrue(normalParser.parseCommand(\"pptx\", \"1 -y\") instanceof PowerPointCommand);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            assertTrue(normalParser.parseCommand(\"pptx\", \"-y 1\") instanceof PowerPointCommand);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            System.out.println(\" error\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    void parseCommand_PptxCommandNoIndex_exceptionThrown() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            normalParser.parseCommand(\"pptx\", \"\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            assertTrue(e instanceof IndexFormatException);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    void parseCommand_PptxCommandOutOfRangeIndex_exceptionThrown() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            normalParser.parseCommand(\"pptx\", \"3\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            assertTrue(e instanceof DeckRangeException);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void parseCommand_StartCommandValidArgumentsSpacePadded_success() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            assertTrue(normalParser.parseCommand(\"start\", \"1\") instanceof StartCommand);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            assertTrue(normalParser.parseCommand(\"start\", \"     1  \") instanceof StartCommand);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            assertTrue(normalParser.parseCommand(\"start\", \"\\t1\\n\") instanceof StartCommand);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            System.out.println(\" error\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void parseCommand_StartCommandNoIndex_exceptionThrown() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            normalParser.parseCommand(\"start\", \"\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            assertTrue(e instanceof IndexFormatException);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void parseCommand_StartCommandTooHighRangeIndex_exceptionThrown() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            normalParser.parseCommand(\"start\", \"3\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            assertTrue(e instanceof DeckRangeException);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    // void parseCommand_StartCommandTooLowRangeIndex_exceptionThrown() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    //     try {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    //         normalParser.parseCommand(\"start\", \"-1\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    //         fail();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    //     } catch (Exception e) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    //         assertTrue(e instanceof DeckRangeException);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    //     }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void parseCommand_HelpCommand_success() throws Exception {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertTrue(normalParser.parseCommand(\"help\", \"\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void parseCommand_VersionCommandAnyArguments_success() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            assertTrue(normalParser.parseCommand(\"--version\", \"1\") instanceof VersionCommand);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            assertTrue(normalParser.parseCommand(\"--version\", \"\\t1\") instanceof VersionCommand);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            assertTrue(normalParser.parseCommand(\"--version\", \"\\n hdkljfashdfs\\t\\t\") instanceof VersionCommand);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            System.out.println(\" error\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void parse_invalidCommand_returnsVoidCommand() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertTrue(normalParser.parse(\"something random\") instanceof VoidCommand);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertTrue(normalParser.parse(\"\") instanceof VoidCommand);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertTrue(normalParser.parse(\"   \") instanceof VoidCommand);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertTrue(normalParser.parse(\"\\t\") instanceof VoidCommand);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertTrue(normalParser.parse(\"blah\") instanceof VoidCommand);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    void initialiseNormalParser() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        DeckList deckList \u003d initialiseDeckList(2);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        normalParser \u003d new NormalParser(deckList);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    DeckList initialiseDeckList(int size) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        DeckList deckList \u003d new DeckList();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d size; i++) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            Deck deck \u003d new Deck(String.format(\"deck %d\", i));"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            deckList.addDeck(deck);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        return deckList;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaijiel24": 86,
      "LiewWS": 7,
      "zhixiangteoh": 168
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "exit"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "kaijiel24": 2
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@echo off"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "setlocal enableextensions"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "pushd %~dp0"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "cd .."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "call gradlew clean shadowJar"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "cd build\\libs"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "for /f \"tokens\u003d*\" %%a in ("
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027dir /b *.jar\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ") do ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    set jarloc\u003d%%a"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "java -jar %jarloc% \u003c ..\\..\\text-ui-test\\input.txt \u003e ..\\..\\text-ui-test\\ACTUAL.TXT"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "cd ..\\..\\text-ui-test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT \u0026\u0026 ECHO Test passed! || Echo Test failed!"
      }
    ],
    "authorContributionMap": {
      "kaijiel24": 1,
      "-": 18
    }
  }
]
