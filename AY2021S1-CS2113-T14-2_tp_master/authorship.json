[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    mainClassName \u003d \"seedu.ecardnomics.Main\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    archiveBaseName \u003d \"ecardnomics\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaijiel24": 1,
      "LiewWS": 2,
      "zhixiangteoh": 2,
      "-": 44
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Liew Wei Siew | [Github](https://github.com/LiewWS) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "![](https://drive.google.com/file/d/1fQ9JzgtHyf3kMaUv22z2-oRKUuYSsPse/view?usp\u003dsharing) | Zhixiang Teoh | [Github](https://github.com/zhixiangteoh) | [Portfolio](docs/team/zhixiangteoh.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Trang | [Github](https://github.com/alwaysnacy/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Kai Jie | [Github](https://github.com/kaijiel24) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Wang Wayne | [Github](https://github.com/wangwaynesg/) | [Portfolio](docs/team/johndoe.md)"
      }
    ],
    "authorContributionMap": {
      "alwaysnacy": 1,
      "kaijiel24": 1,
      "LiewWS": 1,
      "zhixiangteoh": 1,
      "wangwaynesg": 1,
      "-": 4
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "## Design"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "### Application Architecture"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "![Architecture](images-dg/Architecture.png)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "The **Architecture Diagram** given above explains the high-level design of the Flash Card Manager Application."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "`Main` is responsible for initializing the other components in the program and linking them up correctly."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "* `Ui` Takes in instructions from user and displays the output to the user"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "* `Logic` Consists of the `Parsers` and the `Commands`. The `Parser` decipher the user input and executes the specific `Command` that affects the change the user wishes."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "* `Model` Holds the data that is in memory as the program runs. It consists of the 3 components:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    * `Flash Card` : A single question and answer pair."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    * `Deck` : A list of `Flash Card`s under a common topic."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    * `Deck List` : A complete list of all the `Deck`s in memory."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "* `Storage` Reads and writes data from and to a text file."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "#### How to **components** interact with one another"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "![Sequence Diagram](images-dg/Sequence%20Diagram.png)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "The **Sequence Diagram** above shows how the components interact for a basic `create \u003cdeck name\u003e` command where a new deck is created and added in to the `Deck List`."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "### User Interface"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "**API**: [seedu/ecardnomics/Ui.java](https://github.com/AY2021S1-CS2113-T14-2/tp/tree/master/src/main/java/seedu/ecardnomics/Ui.java)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "The UI contains String constants that represent the outputs"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "that the application is defined to produce."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "The `UI` component has two main purposes:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "* Reading user input from the console."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "* Printing program output to the console."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "Reading of user input is done using the method `readUserInput()`"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "which reads one line of user input. The other methods within `UI` are"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "called when a specific output needs to be printed."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "The `UI` component passes the user input to the `NormalParser` and"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "`DeckParser` components that will extract the relevant information."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "The `UI` component provides its printing methods to `NormalParser`"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "and `DeckParser` for printing the appropriate output when required."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "### Logic"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "#### Overall Logic"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "![DG-Overall Logic UML](./images-dg/Logic-DG.png?raw\u003dtrue \"Overall Logic Diagram\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "1. The overall logic component consists of the Parser class and Command class."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "2. The Parser parses the user input and creates the respective Command object."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "3. This command will be executed by the Main class."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "4. The command execution then can affect the Model (e.g. creating a new deck)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "#### Parsers"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "#### Commands"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "![DG-Design Commands UML](./images-dg/DG-Design-Commands.png?raw\u003dtrue \"Commands UML Class Diagram\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "API: [seedu.ecardnomics/command](https://github.com/AY2021S1-CS2113-T14-2/tp/tree/master/src/main/java/seedu/ecardnomics/command)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "Commands are primarily classified into two categories, `NormalCommand` and `DeckCommand`, corresponding to the"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": " application\u0027s Normal and Deck Modes, respectively. `NormalCommand` and `DeckCommand` are both abstract children derived"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  from the overarching abstract class `Command`. The basis `Command` class is defined as such:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "   "
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "```java"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public abstract void execute();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "```"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "It only requires that all derived children implement the `execute()` method. The only two classes not belonging to"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": " either Normal or Deck Mode are `ExitCommand` and `VoidCommand`. The former is so that users can call the command"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  `exit` from anywhere in the application, while the latter is a catch-all \"command\" for all erroneous commands a"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "   user enters. "
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "   "
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "`NormalParser` and `DeckParser` play important roles in execution of specific commands, e.g. `CreateCommand`, because"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": " they define methods that check and ensure the conformity of user input to the commands\u0027 expected input. Below is a"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  sequence diagram showcasing this interaction, for execution of a `CreateCommand`, e.g. `create"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "   microeconomics`:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  "
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "![DG-Design CreateCommand Sequence UML](./images-dg/DG-Design-Sequence-Diagram.png?raw\u003dtrue \"CreateCommand UML"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": " Sequence Diagram\")"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "### Deck Model"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "![DG-Design Model UML](./images-dg/DG-Design-Model.png?raw\u003dtrue \"Model UML Class Diagram\")"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "**API**: [seedu/ecardnomics/deck](https://github.com/AY2021S1-CS2113-T14-2/tp/tree/master/src/main/java/seedu/ecardnomics/deck)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "The Deck Model component is made up of three parts:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "* `DeckList`"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "* `Deck`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "* `FlashCard`"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "The `FlashCard` component represents a flashcard, storing question"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "and answer data. The `Deck` represents a collection of flashcards"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "related by a common topic. The `DeckList` represents the collection"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "of all the `Deck` objects that the user has."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "Only the `Command` components can modify the `DeckList`, `Deck` and"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "`FlashCard` components. However, `Ui`, `DeckParser` and `NormalParser`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "are able to read data from the `DeckList`, `Deck` and `FlashCard`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "components."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "### Storage"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "## Implementation - Basic"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "## Implementation - Features"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "### Save to PPT (Kai Jie)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "### Pretty Printing (Wei Siew)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "### Tags and Filtering (Trang)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "### Saving to text file (Wayne)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "### Game Mode (Zhixiang)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "## Product scope"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "### Target user profile"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "{Describe the target user profile}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "### Value proposition"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "{Describe the value proposition: what problem does it solve?}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "## User Stories"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "|Version| As a ... | I want to ... | So that I can ...|"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "|--------|----------|---------------|------------------|"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "|v1.0|new user|see usage instructions|refer to them when I forget how to use the application|"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "|v2.0|user|find a to-do item by name|locate a to-do without having to go through the entire list|"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "## Non-Functional Requirements"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "{Give non-functional requirements}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "## Glossary"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "* *glossary item* - Definition"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "## Instructions for manual testing"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "{Give instructions on how to do a manual product testing e.g., how to load sample data to be used for testing}"
      }
    ],
    "authorContributionMap": {
      "alwaysnacy": 10,
      "kaijiel24": 16,
      "LiewWS": 38,
      "zhixiangteoh": 49,
      "-": 33
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "# eCardnomics"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "eCardnomics is a **desktop flashcard application to quickly create, manage, and access new flashcards via a Command"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": " Line Interface (CLI)**."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Useful links:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "* [User Guide](UserGuide.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "* [Developer Guide](DeveloperGuide.md)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "* [About Us](AboutUs.md)"
      }
    ],
    "authorContributionMap": {
      "zhixiangteoh": 3,
      "-": 6
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "eCardnomics is a **desktop flashcard application to quickly create, manage, and access new flashcards via a Command"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": " Line Interface (CLI)**. eCardnomics is targeted at economics students in Junior College in Singapore, and aims to"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": " enhance students’ study experience as an efficient and handy aid for active recall. Through the ability to create"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": " multiple decks of flashcards and tag them independently, students can segment the subject syllabus into topics when"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": " managing flashcards, yet consolidate flashcards by topic when accessing them to study."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "## Preliminaries"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "### Installation"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure that you have Java 11 or above installed."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "2. Download the latest _jar_ release of `eCardnomics` from [here](https://github.com/AY2021S1-CS2113-T14"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "-2/tp/releases)."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "\u003e Java 11 and above is highly recommended, although eCardnomics might run on a lower version."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "### Running the program"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "Open your command line or terminal and navigate to the folder (e.g., `~/downloads`) where you downloaded the jar file"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ". Then simply run the command `java -jar tp.jar`:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "```batch"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "$ cd ~/downloads"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "$ ls "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "tp.jar"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "$ java -jar tp.jar"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "```"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "\u003e Note: You can also run eCardnomics by double clicking the `tp.jar` file directly."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "### Guide format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "Words in `\u003c\u003e` are parameters or additional input to be supplied by the user. "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "\u003e Example: `edit \u003cindex\u003e`"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "\u003e "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "\u003e Here, `index` is a parameter supplied by the user, in this case to specify a deck index to enter edit mode for."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "Commented-out lines `//` represent system output by the program."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "\u003e Example:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "\u003e ```java "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "\u003e add"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "\u003e // Enter question: \u003cquestion description\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "\u003e // Enter answer: \u003cquestion answer or explanation\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "\u003e ```"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "\u003e Notice how `\u003cquestion description\u003e` is still commented out but still represents user input. In other words"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "\u003e, `\u003c\u003e` can be thought of as being delimiters in output representation across this guide."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "Words in square brackets `[]` represent optional input parameters."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "\u003e Example: list [/ans]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "## Features - Normal Mode"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "\u003e `[Normal]` is displayed at every command prompt, to indicate that the program is in Normal Mode."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "### Create a new deck: `create`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "Creates a new deck of flashcards. The `create` command expects one argument specifying the name of the deck to be"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": " created."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "#### Format"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "```java"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "create \u003cname of deck\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "```"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "#### Examples"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "```java"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "[Normal]"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  \u003e create market-failure"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// New deck created: market-failure"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "```"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "### Display all decks: `decks`"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "Displays an enumerated list of all the decks available to the user. The `decks` command does not expect any arguments."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "#### Format"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "```java"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "decks"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "```"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "#### Examples"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "```java"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "[Normal]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  \u003e decks"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// The following decks are available:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// Decks:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// 1. market-failure"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// 2. perfect competition"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// 3. externalities"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "```"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "### Delete an existing deck: `delete`"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "Deletes an existing deck of flashcards. The `delete` command expects one argument specifying the index of the deck to"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": " be deleted. User is then further prompted for an input of only either `y` or `n`."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": " "
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "#### Format"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "```java"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "[Normal]"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  \u003e delete \u003cindex of deck\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// Do you want to delete `name of deck`? [y/n] \u003cy/n\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// `name of deck` has been deleted."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "```"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "\u003e Note: `name of deck` is a placeholder for the actual name of the deck corresponding to the index entered. The second"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "\u003e line will only be displayed if the user entered y at the prompt for \u003cy/n\u003e."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "#### Examples"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "```java"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "[Normal]"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  \u003e delete 1"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// Do you want to delete market-failure? [y/n] n"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "[Normal]"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  \u003e "
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "```"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "```java"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "[Normal]"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  \u003e delete 2"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// Do you want to delete perfect competition? [y/n] y"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// perfect competition has been deleted."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "[Normal]"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  \u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "```"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "```java"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "[Normal]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  \u003e delete 1"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// Do you want to delete market-failure? [y/n] not_y_or_n"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// Response should be \u0027y\u0027 or \u0027n\u0027!"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// Do you want to delete market-failure? [y/n] y"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// market-failure has been deleted."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "[Normal]"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  \u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "```"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "### Deck Mode: `edit`"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "Enters the Deck Mode to edit an existing deck. The `edit` command expects one argument specifying the deck index for"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": " which to enter Deck Mode."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": " "
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "#### Format"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "```java"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "[Normal]"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  \u003e edit \u003cindex of deck\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "```"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "#### Examples"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "```java"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "[Normal]"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  \u003e edit 1"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// ------------------------------------------------------------"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// You are now in Deck Mode, editing: [1] market-failure"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// ------------------------------------------------------------"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "[Deck - market-failure]"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  \u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "```"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "\u003e Notice how the prompt mode identifier `[Normal]` changed to `[Deck - market-failure]`."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "### Viewing help in Normal Mode: `help`"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "Displays the list of all commands in Normal Mode."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "#### Examples"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "```java"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "[Normal]"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "  \u003e help"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// ------------------------------------------------------------"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// eCardnomics."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// Normal Mode."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// "
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// Usage:"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "//  create         Creates a new deck of flash cards."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "//  decks          Lists all available decks."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "//  edit \u003cix\u003e      Enter Deck Mode for editing the deck at list index \u003cix\u003e."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "//  delete \u003cix\u003e    Deletes the deck at list index \u003cix\u003e from list of decks."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "//  exit           Exits the program."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "//  help           Show this output."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "//"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// Options:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "//  --version      Show version."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "// ------------------------------------------------------------"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "```"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "## Features - Deck Mode"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "### Add a flashcard: `add`"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "Adds a flashcard to the end of the current deck. The `add` command expects no initial arguments. Instructions and "
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "format of card entry is displayed. Then, the user is prompted to specify the details of the flashcard to be added."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "#### Format"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "```java"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "add"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "// Enter question: \u003cquestion description\u003e"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "// Enter answer: \u003cquestion answer or explanation\u003e"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "```"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": " "
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "#### Examples"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "```java"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "// [Deck - market failure]"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     \u003e add "
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "// Enter question: \u003cquestion description\u003e"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "// ------------------------------------------------------------"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "// You are now adding a FlashCard to: market failure"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "// ------------------------------------------------------------"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "// Enter question:"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     \u003e define market failure"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "// Enter answer:"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     \u003e Market failure is the economic situation defined by an inefficient distribution of goods "
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "and services in the free market"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "// FlashCard successfully added! "
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "// ------------------------------------------------------------ "
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "```"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "### Delete an existing Flash Card: `delete`"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "Deletes an existing flashcard from deck. The `delete` command expects one argument specifying the index of the flash card to"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": " be deleted. User is then further prompted for an input of only either `y` or `n`."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": " "
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "#### Format"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "```java"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "[Deck - `name of deck`]"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "  \u003e delete 1"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "//Do you want to delete the following flash card? [y/n]"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "//  \u0027\u003cquestion 1\u003e\u0027"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "//  \u003e n"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "//------------------------------------------------------------"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "```"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "```java"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "[Deck - `name of deck`]"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "  \u003e delete 2"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "//Do you want to delete the following flash card? [y/n]?"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "//  \u0027\u003cquestion 2\u003e\u0027? "
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "//  \u003e y"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "//------------------------------------------------------------"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "//The following flash card has been deleted:"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "//  \u0027\u003cquestion 2\u003e\u0027"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "//------------------------------------------------------------"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "```"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "\u003e Note: `name of deck` is a placeholder for the name of the current deck. The second"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "\u003e line will only be displayed if the user entered y at the prompt for \u003cy/n\u003e."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "#### Examples"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "```java"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "[Deck - market-failure]"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "  \u003e delete 1"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "//Do you want to delete the following flash card? [y/n]"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "//  `define market failure?`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "//  \u003e n"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "//------------------------------------------------------------"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "```"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "```java"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "[Deck - market-failure]"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "  \u003e delete 2"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "//Do you want to delete the following flash card? [y/n]?"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "//  \u0027What is a public good?\u0027? "
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "//  \u003e y"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "//------------------------------------------------------------"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "//The following flash card has been deleted:"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "//  \u0027What is a public good?\u0027"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "//------------------------------------------------------------"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "```"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "``"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "### List all the flashcards in the deck `list`"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "Lists all the existing flash cards within the current deck. You can add the option `\\ans` after the `list` command "
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "to show all the questions, and their respective answers."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "#### Format"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "```java"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "[Deck - `name of deck`]"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "  \u003e list"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "//------------------------------------------------------------"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "//You are now viewing deck: `name of deck`"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "//------------------------------------------------------------"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "//1. Question: \u003cquestion 1\u003e"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "//"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "//2. Question: \u003cquestion 2\u003e"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "//"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "//3. Question: \u003cquestion 3\u003e"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "//------------------------------------------------------------"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "```"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "```java"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "[Deck - `name of deck`]"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "  \u003e list /ans"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "//------------------------------------------------------------"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "//You are now viewing deck: `name of deck`"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "//------------------------------------------------------------"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "//1. Question: \u003cquestion 1\u003e"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "//   Answer:   \u003canswer 1\u003e"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "//"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "//2. Question: \u003cquestion 2\u003e"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "//   Answer:   \u003canswer 2\u003e"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "//"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "//3. Question: \u003cquestion 3\u003e"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "//   Answer:   \u003canswer 3\u003e"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "//------------------------------------------------------------"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "```"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "#### Examples"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "```java"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "[Deck - market-failure]"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "  \u003e list"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "//------------------------------------------------------------"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "//You are now viewing deck: market-failure"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "//------------------------------------------------------------"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "//1. Question: define market failure"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "//"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "//2. Question: What is a public good?"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "//"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "//3. Question: What is a merit good?"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "//------------------------------------------------------------"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "```"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "```java"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "[Deck - market-failure]"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "  \u003e list /ans"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "//------------------------------------------------------------"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "//You are now viewing deck: market-failure"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "//------------------------------------------------------------"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "//1. Question: define market failure"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "//   Answer:   Market failure is the economic situation defined by an inefficient distribution of goods and services in the free market"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "//"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "//2. Question: What is a public good?"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "//   Answer:   A good which are non-rival and non-excludable"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "//"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "//3. Question: What is a merit good?"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "//   Answer:   A good that people underestimates the benefits of"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "//------------------------------------------------------------"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "```"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "## Features - Anywhere"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "**Q**: How do I transfer my data to another computer? "
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "**A**: {your answer here}"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "## Command Summary"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "### Normal Mode"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "|Action|Format|Example|"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "|------|------|-------|"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "|Create deck|`create `|`create market-failure`|"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "|Display decks|`decks`||"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "|Delete deck|`delete `|`delete 1`|"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "|Enter Deck Mode|`edit `|`edit 1`|"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "|Help|`help`||"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "### Deck Mode"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "|Action|Format|Example|"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "|------|------|-------|"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "|Add flash card|`add`||"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "|List flash cards|`list [/ans]`||"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "|Delete flash card|`delete `|`delete 1`|"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "|Exit Deck Mode|`done`||"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "|Help|`help`||"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "### Anywhere"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "|Action|Format|Example|"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "|------|------|-------|"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "|Exit program|`exit`||"
      }
    ],
    "authorContributionMap": {
      "alwaysnacy": 23,
      "kaijiel24": 128,
      "zhixiangteoh": 214,
      "-": 29
    }
  },
  {
    "path": "docs/team/zhixiangteoh.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "# Zhixiang Teoh - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "### Summary of Contributions"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "Slacking so far."
      }
    ],
    "authorContributionMap": {
      "zhixiangteoh": 7
    }
  },
  {
    "path": "src/main/java/seedu/ecardnomics/Main.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "package seedu.ecardnomics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "import seedu.ecardnomics.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.command.deck.DoneEditCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.command.normal.EditCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.command.ExitCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.deck.Deck;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.deck.DeckList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "import seedu.ecardnomics.parser.DeckParser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "import seedu.ecardnomics.parser.NormalParser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": " * Main Class for eCardnomics - Flash Card Manager Command Line Program."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public static final double VERSION_NUMBER \u003d 1.0;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public static DeckList deckList \u003d new DeckList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public static NormalParser normalParser \u003d new NormalParser(deckList);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     * Executes the command."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     * @param command command from parser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    private static void executeCommand(Command command) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        command.execute();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     * Runs Deck Mode to edit a deck."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     * @param deck Deck to edit"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     * @return Command used to exit Deck Mode (either \u003ccode\u003edone\u003c/code\u003e or \u003ccode\u003eexit\u003c/code\u003e)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public static Command runDeckMode(Deck deck) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        DeckParser deckParser \u003d new DeckParser(deck);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        String userInput;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        Command command;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            Ui.printDeckPrompt(deck);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            userInput \u003d Ui.readUserInput();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            command \u003d deckParser.parse(userInput);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            executeCommand(command);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        } while (!DoneEditCommand.isDoneEdit(command)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "                \u0026\u0026 !ExitCommand.isExit(command));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     * Runs Normal Mode in a loop until \u003ccode\u003eexit\u003c/code\u003e in input."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     * Enters Deck Mode when \u003ccode\u003eedit\u003c/code\u003e is input."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public static void runNormalMode() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        Ui.printGreeting();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        String userInput;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        Command command;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            Ui.printNormalPrompt();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            userInput \u003d Ui.readUserInput();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            command \u003d normalParser.parse(userInput);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            executeCommand(command);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            if (EditCommand.isEdit(command)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "                EditCommand editCommand \u003d (EditCommand) command;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "                command \u003d runDeckMode(editCommand.getDeck());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "                if (command instanceof DoneEditCommand) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "                    Ui.printNormalWelcome();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "                }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        } while (!ExitCommand.isExit(command));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        Ui.printExitLine();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     * Main method."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "     * @param args Arguments from command line when user starts the program"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        // TEMP FOR TESTING"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        Deck pokemon \u003d new Deck(\"Pokemon\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        deckList.addDeck(pokemon);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        runNormalMode();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        // runDeckMode(pokemon);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaijiel24": 78,
      "zhixiangteoh": 14,
      "-": 8
    }
  },
  {
    "path": "src/main/java/seedu/ecardnomics/Mode.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "package seedu.ecardnomics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "public enum Mode {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    NORMAL(\"Normal\"), DECK(\"Deck\");"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    private Mode(String name) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaijiel24": 17
    }
  },
  {
    "path": "src/main/java/seedu/ecardnomics/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "package seedu.ecardnomics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "import seedu.ecardnomics.deck.Deck;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import seedu.ecardnomics.deck.DeckList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.deck.FlashCard;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import static seedu.ecardnomics.Main.VERSION_NUMBER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public static final String GREETING_LINES \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            \"Hello! Welcome to eCardnomics,\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "                    + \"your one stop Flash Cards solution\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public static final String NORMAL_WELCOME_LINE \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            \"You are back in Normal Mode\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public static final String DECK_WELCOME_LINE \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            \"You are now in Deck Mode, editing: \";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public static final String BYE_LINE \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public static final String NOT_RECOGNISED_LINE \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            \"Command not recognised\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public static final String YN_LINE \u003d \"[y/n]\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    public static final String ADD_FLASHCARD_LINE \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "            \"You are now adding a FlashCard to: \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    public static final String ENTER_QUESTION_LINE \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "            \"Enter question:\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    public static final String ENTER_ANSWER_LINE \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "            \"Enter answer:\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    public static final String FLASHCARD_ADDED_LINE \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "            \"FlashCard successfully added!\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    public static final String LIST_FLASHCARDS_LINE \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "            \"You are now viewing deck: \";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public static final String DELETE_FLASHCARD_LINE \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            \"Do you want to delete the following flash card? \";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public static final String FLASHCARD_DELETED_LINE \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            \"The following flash card has been deleted:\\n  \u0027\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public static final String NEW_DECK_CREATED_LINE \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            \"New deck created: \";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public static final String DECKS_AVAILABLE_LINE \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            \"The following decks are available:\\n\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public static final String DELETED_DECK_QUESTION_LINE \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            \"Do you want to delete %1$s deck? [y/n]\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public static final String DELETED_DECK_LINE \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            \"%1$s has been deleted.\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public static final String INVALID_YN_RESPONSE_LINE \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            \"Response should be \u0027y\u0027 or \u0027n\u0027!\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    private static final String EMPTY_DECK_LINE \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "            \"Deck is currently empty!\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    private static final String ALL_TAGS_LINE \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            \"The deck %1$s has been tagged as %2$s \";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    private static final String REMOVED_TAGS_QUESTION_LINE \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            \"Do you want to remove the tag(s) %1$s from %2$s? [y/n]\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    private static final String REMOVED_TAGS_LINE \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            \"The tag(s) %1$s have been removed from the deck %2$s.\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    private static final String NEW_QUESTION_LINE \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            \"New Question: \";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    private static final String NEW_ANSWER_LINE \u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            \"New Answer: \";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    private static final String QUESTION_UPDATED_LINE \u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            \"Question updated.\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    private static final String ANSWER_UPDATED_LINE \u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            \"Answer updated.\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    private static final String QNA_UPDATED_LINE \u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            \"Question and answer updated.\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    private static final String NO_UPDATE_LINE \u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            \"Original question and answer retained\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public static final String EXIT \u003d \"exit\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public static final String EDIT \u003d \"edit\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public static final String DONE \u003d \"done\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    public static final String ADD \u003d \"add\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public static final String CREATE \u003d \"create\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    public static final String LIST \u003d \"list\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public static final String DECKS \u003d \"decks\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public static final String DELETE \u003d \"delete\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    public static final String UPDATE \u003d \"update\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public static final String HELP \u003d \"help\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public static final String TAG \u003d \"tag\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public static final String UNTAG \u003d \"untag\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public static final String VERSION_CMD \u003d \"--version\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    //Regex"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public static final String DIGITS_REGEX \u003d \"\\\\d+\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public static final String Y \u003d \"y\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public static final String N \u003d \"n\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public static final String DASH_LINES \u003d \"------------------------------------------------------------\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public static Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     * Reads user input from command line."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     * @return String containing userInput"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public static String readUserInput() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        return in.nextLine();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    /** Displays dash line. */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public static void printDashLines() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        System.out.println(DASH_LINES);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     * Displays the message given."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     * @param message message to be displayed to user"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public static void printMessage(String message) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        printDashLines();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        System.out.println(message);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        printDashLines();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     * Displays the prompt for user input in Normal Mode."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public static void printNormalPrompt() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        System.out.println(\"[Normal]\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        System.out.print(\"  \u003e \");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     * Displays the prompt for user input in Deck Mode."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public static void printDeckPrompt(Deck deck) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        System.out.println(\"[Deck - \" + deck.getName() + \"]\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        System.out.print(\"  \u003e \");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     * Displays the prompt for user input without specifying current mode."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public static void printPrompt() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        System.out.print(\"  \u003e \");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     * Displays the welcome message from Deck Mode to Normal Mode."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public static void printNormalWelcome() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        printMessage(NORMAL_WELCOME_LINE);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     * Displays the welcome message from Normal Mode to Deck Mode."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public static void printDeckWelcome(int index, Deck deck) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        printMessage(DECK_WELCOME_LINE + \"[\" + index + \"] \" + deck.getName());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     * Displays the greeting message."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public static void printGreeting() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        printMessage(GREETING_LINES);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     * Displays the exit message."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public static void printExitLine() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        printMessage(BYE_LINE);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     * Displays the not recognised message."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public static void printNotRecognisedLine() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        printMessage(NOT_RECOGNISED_LINE);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "     * Displays the add FlashCard line."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "     * @param deck current deck"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    public static void printAddFlashCardLine(Deck deck) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        printMessage(ADD_FLASHCARD_LINE + deck.getName());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "     * Displays the enter question line."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    public static void printEnterQuestionLine() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        System.out.println(ENTER_QUESTION_LINE);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        printPrompt();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "     * Displays the enter answer line."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    public static void printEnterAnswerLine() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        System.out.println(ENTER_ANSWER_LINE);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        printPrompt();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "     * Displays the FlashCard added line."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    public static void printFlashCardAddedLine() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        System.out.println(FLASHCARD_ADDED_LINE);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "     * Displays an index list of FlashCards in the deck."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "     * @param deck deck to display"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "     * @param type optional \u003ccode\u003e/ans\u003c/code\u003e to display answers"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    public static void printDeck(Deck deck, String type) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        String deckMessage \u003d \"\";"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        if (deck.toString(type).trim().equals(\"\")) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            deckMessage +\u003d EMPTY_DECK_LINE;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            deckMessage +\u003d LIST_FLASHCARDS_LINE + deck.getName() + \"\\n\""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "                    + deck.toString(type);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        printMessage(deckMessage);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "     * Displays the delete FlashCard line."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "     * @param flashCard FlashCard to delete"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public static void printDeleteFlashCardLine(FlashCard flashCard) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        System.out.print(DELETE_FLASHCARD_LINE + YN_LINE + \"\\n  \u0027\" + flashCard.getQuestion() + \"`\\n\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        printPrompt();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "     * Displays the FlashCard deleted line."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "     * @param flashCard deleted FlashCard"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public static void printFlashCardDeletedLine(FlashCard flashCard) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        System.out.println(FLASHCARD_DELETED_LINE + flashCard.getQuestion() + \"\u0027\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "     * Displays the help page of commands."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "     * \u003cp\u003eDisplays a different help page for Normal Mode and Deck Mode.\u003c/p\u003e"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "     * @param helpDisplay help text to display"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    public static void printHelp(String helpDisplay) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        printMessage(helpDisplay);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * Prints new deck added in the Normal Mode."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * @param deck in new Deck added"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public static void printNewDeck(Deck deck) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        printMessage(NEW_DECK_CREATED_LINE + deck.getName()"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "                + deck.getTag());"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * Prints all decks available in the Normal Mode."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * @param decks all decks in the list"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public static void printDeckList(DeckList decks) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        printMessage(DECKS_AVAILABLE_LINE + decks.toString());"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * Confirms the deck the user wants to delete."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * @param deletedDeckName name of the deleted deck"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public static void printDeletedDeckQuestion(String deletedDeckName) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        System.out.print(String.format(DELETED_DECK_QUESTION_LINE, deletedDeckName));"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * Prints the name of the deleted deck."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * @param deletedDeckName name of the deleted deck"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    public static void printDeckDeletedLine(String deletedDeckName) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        System.out.println(String.format(DELETED_DECK_LINE, deletedDeckName));"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * Prints the update question lines for a flashcard."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * @param flashCard for which the question should be updated."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    public static void printUpdateQuestionLine(FlashCard flashCard) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        System.out.println(flashCard.toString(\"question\"));"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        System.out.println(NEW_QUESTION_LINE);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        printPrompt();"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * Prints the update answer lines for a flashcard."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * @param flashCard for which the answer should be updated."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    public static void printUpdateAnswerLine(FlashCard flashCard) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        System.out.println(flashCard.toString(\"answer\"));"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        System.out.println(NEW_ANSWER_LINE);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        printPrompt();"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    public static void printFlashCardUpdatedLine(boolean hasNewQ, boolean hasNewA) {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        if (hasNewQ \u0026\u0026 hasNewA) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            System.out.println(QNA_UPDATED_LINE);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        } else if (hasNewQ) {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            // !hasNewA"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            System.out.println(QUESTION_UPDATED_LINE);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        } else if (hasNewA) {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            // !hasNewQ"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            System.out.println(ANSWER_UPDATED_LINE);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            System.out.println(NO_UPDATE_LINE);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "     * Prints a line prompting user to enter only \u0027y\u0027 or \u0027n\u0027."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public static void printInvalidYorNResponse() {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        System.out.println(INVALID_YN_RESPONSE_LINE);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public static void printVersionNumber() {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        printMessage(\"Version: \" + VERSION_NUMBER);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public  static void printTags(String name, String tags) {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        System.out.println(String.format(ALL_TAGS_LINE, name, tags));"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public static void printRemovedTagsQuestion(String deckName, String[] tags) {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        String removedTags \u003d formStringOfTags(tags);"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        System.out.println(String.format(REMOVED_TAGS_QUESTION_LINE, removedTags, deckName));"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public static void printTagsRemovedLine(String deckName, String[] tags) {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        String removedTags \u003d formStringOfTags(tags);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        System.out.println(String.format(REMOVED_TAGS_LINE, removedTags, deckName));"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public static String formStringOfTags(String[] tags) {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        String stringOfTags \u003d \"\";"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        for (int i \u003d 0; i \u003c tags.length; i++) {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            stringOfTags +\u003d tags[i];"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            if (i \u003c tags.length - 1) {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "                stringOfTags +\u003d \", \";"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        return stringOfTags;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alwaysnacy": 81,
      "kaijiel24": 120,
      "LiewWS": 53,
      "zhixiangteoh": 64,
      "wangwaynesg": 49
    }
  },
  {
    "path": "src/main/java/seedu/ecardnomics/command/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "package seedu.ecardnomics.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public abstract void execute();"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaijiel24": 1,
      "zhixiangteoh": 4
    }
  },
  {
    "path": "src/main/java/seedu/ecardnomics/command/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "package seedu.ecardnomics.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public ExitCommand() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    /** Returns if command given is an instance of \u003ccode\u003eExitCommand\u003c/code\u003e.  */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public static boolean isExit(Command command) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        return command instanceof ExitCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alwaysnacy": 1,
      "kaijiel24": 13,
      "zhixiangteoh": 1
    }
  },
  {
    "path": "src/main/java/seedu/ecardnomics/command/VersionCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "package seedu.ecardnomics.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "public class VersionCommand extends Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public VersionCommand() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        Ui.printVersionNumber();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixiangteoh": 14
    }
  },
  {
    "path": "src/main/java/seedu/ecardnomics/command/VoidCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "package seedu.ecardnomics.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "import seedu.ecardnomics.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "public class VoidCommand extends Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    private String errorMessage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    /** Constructor without \u003ccode\u003eerrorMessage\u003c/code\u003e. */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public VoidCommand() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        errorMessage \u003d Ui.NOT_RECOGNISED_LINE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    /** Constructor with \u003ccode\u003eerrorMessage\u003c/code\u003e. */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public VoidCommand(String errorMessage) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        assert (errorMessage !\u003d null \u0026\u0026 !errorMessage.isEmpty()) : \"Must specify error message\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        this.errorMessage \u003d errorMessage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        Ui.printMessage(errorMessage);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaijiel24": 22,
      "LiewWS": 1
    }
  },
  {
    "path": "src/main/java/seedu/ecardnomics/command/deck/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "package seedu.ecardnomics.command.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "import seedu.ecardnomics.deck.Deck;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "import seedu.ecardnomics.deck.FlashCard;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "public class AddCommand extends DeckCommand {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    private final String question;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    private final String answer;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    /** Constructor. */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    public AddCommand(Deck deck, String question, String answer) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        super(deck);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        assert (question !\u003d null \u0026\u0026 !question.isEmpty()) : \"Flashcard must have one question.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        assert (answer !\u003d null \u0026\u0026 !answer.isEmpty()) : \"Flashcard must have one question.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        this.currentDeck.add(new FlashCard(this.question, this.answer));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LiewWS": 2,
      "zhixiangteoh": 1,
      "wangwaynesg": 20
    }
  },
  {
    "path": "src/main/java/seedu/ecardnomics/command/deck/DeckCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "package seedu.ecardnomics.command.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.deck.Deck;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "public abstract class DeckCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    protected Deck currentDeck;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public DeckCommand() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        currentDeck \u003d null;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public DeckCommand(Deck currentDeck) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        assert currentDeck !\u003d null : \"Command must operate on a deck.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        this.currentDeck \u003d currentDeck;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public abstract void execute();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaijiel24": 2,
      "LiewWS": 1,
      "zhixiangteoh": 16
    }
  },
  {
    "path": "src/main/java/seedu/ecardnomics/command/deck/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "package seedu.ecardnomics.command.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.deck.Deck;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "public class DeleteCommand extends DeckCommand {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    private int flashCardID;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    private boolean isFlashCardDeleted;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public DeleteCommand(Deck deck, int flashCardID, boolean isFlashCardDeleted) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        super(deck);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        assert (flashCardID \u003e\u003d 0 \u0026\u0026 flashCardID \u003c deck.size()) : \"Index must be within range.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        this.flashCardID \u003d flashCardID;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        this.isFlashCardDeleted \u003d isFlashCardDeleted;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        if (isFlashCardDeleted) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            currentDeck.delete(flashCardID);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LiewWS": 1,
      "zhixiangteoh": 21
    }
  },
  {
    "path": "src/main/java/seedu/ecardnomics/command/deck/DoneEditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "package seedu.ecardnomics.command.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "import seedu.ecardnomics.deck.Deck;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "public class DoneEditCommand extends DeckCommand {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    /** Constructor. */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public DoneEditCommand(Deck deck) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        super(deck);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    /** Returns if command given is an instance of \u003ccode\u003eDoneEditCommand\u003c/code\u003e.  */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public static boolean isDoneEdit(Command command) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        return command instanceof DoneEditCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaijiel24": 18,
      "zhixiangteoh": 3
    }
  },
  {
    "path": "src/main/java/seedu/ecardnomics/command/deck/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "package seedu.ecardnomics.command.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "public class HelpCommand extends DeckCommand {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public static final String DECK_HELP \u003d \"\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            + \"eCardnomics.\\n\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            + \"Deck Mode.\\n\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            + \"Usage:\\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            + \"  add            Adds a new flash card to the current deck.\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            + \"  list [/ans]    Lists all flash cards in the current deck, optionally with answers.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            + \"  delete \u003cix\u003e    Deletes the flash card at list index \u003cix\u003e from the current deck.\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            + \"  done           Exits from Deck Mode and returns to Normal Mode.\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            + \"  exit           Exits the program.\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            + \"  help           Show this output.\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            + \"Options:\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            + \"  --version      Show version.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public HelpCommand() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        Ui.printHelp(DECK_HELP);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LiewWS": 3,
      "zhixiangteoh": 26
    }
  },
  {
    "path": "src/main/java/seedu/ecardnomics/command/deck/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "package seedu.ecardnomics.command.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "import seedu.ecardnomics.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "import seedu.ecardnomics.deck.Deck;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "public class ListCommand extends DeckCommand {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    private final String arguments;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    public static final String TYPE_ANSWER \u003d \"answer\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    public static final String TYPE_QUESTION \u003d \"question\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    /** Constructor. */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    public ListCommand(Deck deck, String arguments) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        super(deck);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        assert arguments !\u003d null : \"Arguments cannot be a null String.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        this.arguments \u003d arguments;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        if (arguments.contains(\"/ans\")) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "            Ui.printDeck(currentDeck, TYPE_ANSWER);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "            Ui.printDeck(currentDeck, TYPE_QUESTION);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LiewWS": 1,
      "zhixiangteoh": 1,
      "wangwaynesg": 25
    }
  },
  {
    "path": "src/main/java/seedu/ecardnomics/command/deck/UpdateCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "package seedu.ecardnomics.command.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "import seedu.ecardnomics.deck.Deck;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "public class UpdateCommand extends DeckCommand {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    private int flashCardID;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    private String newQuestion;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    private String newAnswer;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    public UpdateCommand(Deck deck, int flashCardID, String question, String answer) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        super(deck);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        this.flashCardID \u003d flashCardID;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        newQuestion \u003d question;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        newAnswer \u003d answer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        // Update question"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        currentDeck.get(flashCardID).setQuestion(newQuestion);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        // Update answer"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        currentDeck.get(flashCardID).setAnswer(newAnswer);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LiewWS": 24
    }
  },
  {
    "path": "src/main/java/seedu/ecardnomics/command/normal/CreateCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "package seedu.ecardnomics.command.normal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import seedu.ecardnomics.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import seedu.ecardnomics.deck.Deck;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import seedu.ecardnomics.deck.DeckList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": " * Creates a deck adds it to the existing deck list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "public class CreateCommand extends NormalCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    Deck newDeck;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * Constructor."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * @param deckList reference to the existing list of decks"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * @param deck the new deck created"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public CreateCommand(DeckList deckList, Deck deck) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        super(deckList);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        assert deck !\u003d null : \"Do not add null objects to the list.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        newDeck \u003d deck;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        deckList.addDeck(newDeck);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        Ui.printNewDeck(newDeck);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alwaysnacy": 29,
      "LiewWS": 1
    }
  },
  {
    "path": "src/main/java/seedu/ecardnomics/command/normal/DecksCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "package seedu.ecardnomics.command.normal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import seedu.ecardnomics.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import seedu.ecardnomics.deck.DeckList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": " * Lists all the existing deck."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "public class DecksCommand extends NormalCommand {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    /** Constructor. */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public DecksCommand(DeckList deckList) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        super(deckList);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        Ui.printDeckList(deckList);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alwaysnacy": 19,
      "LiewWS": 1
    }
  },
  {
    "path": "src/main/java/seedu/ecardnomics/command/normal/DeleteDeckCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "package seedu.ecardnomics.command.normal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import seedu.ecardnomics.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import seedu.ecardnomics.deck.DeckList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "public class DeleteDeckCommand extends NormalCommand {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    private boolean isDeckDeleted;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    public DeleteDeckCommand(DeckList decks, int index, boolean isDeckDeleted) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        super(decks);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        assert (index \u003e\u003d 0 \u0026\u0026 index \u003c decks.size()) : \"Index must be within range.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        this.isDeckDeleted \u003d isDeckDeleted;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        if (isDeckDeleted) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            deckList.removeDeck(index);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alwaysnacy": 14,
      "LiewWS": 10
    }
  },
  {
    "path": "src/main/java/seedu/ecardnomics/command/normal/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "package seedu.ecardnomics.command.normal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "import seedu.ecardnomics.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "import seedu.ecardnomics.deck.Deck;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "import seedu.ecardnomics.deck.DeckList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "public class EditCommand extends NormalCommand {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    Deck deck;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    /** Constructor. */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public EditCommand(DeckList deckList, Deck deck) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        super(deckList);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        assert deck !\u003d null : \"Do not operate on a null reference.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        this.deck \u003d deck;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        Ui.printDeckWelcome(deckList.getIndexOf(deck) + 1, deck);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    /** Returns Deck which is to be edited. */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public Deck getDeck() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        return deck;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    /** Returns if command given is an instance of \u003ccode\u003eEditCommand\u003c/code\u003e. */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public static boolean isEdit(Command command) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        return command instanceof EditCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaijiel24": 28,
      "LiewWS": 1,
      "zhixiangteoh": 3
    }
  },
  {
    "path": "src/main/java/seedu/ecardnomics/command/normal/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "package seedu.ecardnomics.command.normal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "import seedu.ecardnomics.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "import seedu.ecardnomics.deck.DeckList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "public class HelpCommand extends NormalCommand {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    public static final String NORMAL_HELP \u003d \"\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            + \"eCardnomics.\\n\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            + \"Normal Mode.\\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            + \"Usage:\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            + \"  create \u003cnm\u003e    Creates a new deck of flash cards, named \u003cnm\u003e.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            + \"  decks          Lists all available decks.\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            + \"  edit \u003cix\u003e      Enter Deck Mode for editing the deck at list index \u003cix\u003e.\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            + \"  delete \u003cix\u003e    Deletes the deck at list index \u003cix\u003e from list of decks.\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            + \"  exit           Exits the program.\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            + \"  help           Show this output.\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            + \"Options:\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            + \"  --version      Show version.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    public HelpCommand() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        Ui.printHelp(NORMAL_HELP);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LiewWS": 29,
      "zhixiangteoh": 1
    }
  },
  {
    "path": "src/main/java/seedu/ecardnomics/command/normal/NormalCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "package seedu.ecardnomics.command.normal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "import seedu.ecardnomics.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "import seedu.ecardnomics.deck.DeckList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": " * Parent Command in Normal Mode."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "public abstract class NormalCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    protected DeckList deckList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    public NormalCommand() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        deckList \u003d null;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public NormalCommand(DeckList deckList) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        assert deckList !\u003d null : \"Command must operate on a deck list\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        this.deckList \u003d deckList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    public abstract void execute();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alwaysnacy": 3,
      "kaijiel24": 6,
      "LiewWS": 8,
      "zhixiangteoh": 5
    }
  },
  {
    "path": "src/main/java/seedu/ecardnomics/command/normal/TagCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "package seedu.ecardnomics.command.normal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import seedu.ecardnomics.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import seedu.ecardnomics.deck.DeckList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": " * Adds tags to existing deck."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "public class TagCommand extends NormalCommand {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    private String[] newTags;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    /** Constructor. */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public TagCommand(DeckList decks, int index, String[] newTags) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        super(decks);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        assert (index \u003e\u003d 0 \u0026\u0026 index \u003c decks.size()) : \"Index must be within range.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        this.newTags \u003d newTags;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        deckList.getDeck(index).addTag(newTags);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        Ui.printTags(deckList.getDeck(index).getName(), deckList.getDeck(index).getTag());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alwaysnacy": 26
    }
  },
  {
    "path": "src/main/java/seedu/ecardnomics/command/normal/UntagCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "package seedu.ecardnomics.command.normal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import seedu.ecardnomics.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import seedu.ecardnomics.deck.DeckList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": " * Removes tags from the existing deck."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "public class UntagCommand extends NormalCommand {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    private String[] removedTags;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    private boolean isTagsRemoved;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    /** Constructor. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public UntagCommand(DeckList decks, int index, String[] removedTags, boolean isTagsRemoved) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        super(decks);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        assert (index \u003e\u003d 0 \u0026\u0026 index \u003c decks.size()) : \"Index must be within range.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        this.removedTags \u003d removedTags;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        this.isTagsRemoved \u003d isTagsRemoved;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        if (isTagsRemoved) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            deckList.getDeck(index).removeTag(removedTags);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alwaysnacy": 29
    }
  },
  {
    "path": "src/main/java/seedu/ecardnomics/deck/Deck.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "package seedu.ecardnomics.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LiewWS"
        },
        "content": " * Deck of flashcards."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LiewWS"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "public class Deck {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    private ArrayList\u003cString\u003e tags;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    private ArrayList\u003cFlashCard\u003e deck;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    /** Constructor. */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public Deck(String name) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        assert (name !\u003d null \u0026\u0026 !name.isEmpty()) : \"A deck requires a name.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        deck \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public Deck(String name, ArrayList\u003cString\u003e tags) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        assert (name !\u003d null \u0026\u0026 !name.isEmpty()) : \"A deck requires a name.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        deck \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        this.tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * Gets the name of the deck."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * @return name of deck"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public String getTag() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        String tagString \u003d \"\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        for (int j \u003d 0; j \u003c tags.size(); j++) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            tagString +\u003d tags.get(j);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            tagString +\u003d \" \";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        return tagString;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public void addTag(String[] newTags) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        for (String tag: newTags) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            tags.add(tag);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public void removeTag(String[] deletedTags) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        for (String tag: deletedTags) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            tags.remove(tag);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * Sets the name of the deck."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * @param name new name of the deck"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public void setName(String name) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        assert (name !\u003d null \u0026\u0026 !name.isEmpty()) : \"A deck requires a name.\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * Retrieves the flashcard at specified index."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * @param index Index of flashcard to be found"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public FlashCard get(int index) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        assert (index \u003e\u003d 0 \u0026\u0026 index \u003c deck.size()) : \"Index should be within range\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        return deck.get(index);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * Adds a flashcard to the deck."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * @param flashCard Reference to the flashcard to be added"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public void add(FlashCard flashCard) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        assert flashCard !\u003d null : \"Do not add null objects into deck\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        deck.add(flashCard);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * Returns size of current deck."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * @return size of current deck"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        return deck.size();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * Deletes the flashcard at specified index from the deck."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * @param index Index of flashcard to be deleted"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public void delete(int index) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        assert (index \u003e\u003d 0 \u0026\u0026 index \u003c deck.size()) : \"Index should be within range\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        deck.remove(index);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        String output \u003d name + \":\\n\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        for (int i \u003d 0; i \u003c deck.size(); i++) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            output +\u003d (i + 1) + \". \" + deck.get(i).toString();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            if (i !\u003d deck.size() - 1) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "                output +\u003d \"\\n\\n\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    public String toString(String type) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        if (this.deck.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "            return output;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        for (int i \u003d 0; i \u003c deck.size(); i++) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            output +\u003d (i + 1) + \". \" + deck.get(i).toString(type);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            if (i !\u003d deck.size() - 1) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "                output +\u003d \"\\n\\n\";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alwaysnacy": 31,
      "kaijiel24": 9,
      "LiewWS": 40,
      "zhixiangteoh": 45,
      "wangwaynesg": 9
    }
  },
  {
    "path": "src/main/java/seedu/ecardnomics/deck/DeckList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "package seedu.ecardnomics.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LiewWS"
        },
        "content": " * List for storing decks."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LiewWS"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "public class DeckList {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    private ArrayList\u003cDeck\u003e deckList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    /** Constructor. */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public DeckList() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        deckList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * Adds a deck to the list."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * @param deck reference to Deck to be added"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public void addDeck(Deck deck) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        assert deck !\u003d null : \"Do not add null object to list.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        deckList.add(deck);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * Removes a deck from the list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * @param index int representing index of deck to to be removed"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    public void removeDeck(int index) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        assert (index \u003e\u003d 0 \u0026\u0026 index \u003c deckList.size()) : \"Index should be within range.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        deckList.remove(index);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * Returns size of current list."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * @return size of list"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        return deckList.size();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     * Returns a deck from deck list based on given index."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     * @param index Index of deck to be found"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     * @return Deck found at \u003ccode\u003eindex\u003c/code\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public Deck getDeck(int index) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        assert (index \u003e\u003d 0 \u0026\u0026 index \u003c deckList.size()) : \"Index should be within range.\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        return deckList.get(index);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     * Returns index of deck in deck list."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     * @param deck Deck which index is to be found"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     * @return Index found of \u003ccode\u003edeck\u003c/code\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public int getIndexOf(Deck deck) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        assert deck !\u003d null : \"Do not try to get index of a null reference.\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        return deckList.indexOf(deck);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        for (int i \u003d 0; i \u003c deckList.size(); i++) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            output +\u003d (i + 1) + \". \" + deckList.get(i).getName();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            if (i !\u003d deckList.size() - 1) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "                output +\u003d \"\\n\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alwaysnacy": 4,
      "kaijiel24": 33,
      "LiewWS": 20,
      "zhixiangteoh": 23
    }
  },
  {
    "path": "src/main/java/seedu/ecardnomics/deck/FlashCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "package seedu.ecardnomics.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "import seedu.ecardnomics.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LiewWS"
        },
        "content": " * Flashcards that contain a question and asnwer."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LiewWS"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "public class FlashCard {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    private String question;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    private String answer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    /** Constructor. */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public FlashCard(String question, String answer) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        assert (question !\u003d null \u0026\u0026 !question.isEmpty()) : \"Flashcard must have one question.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        assert (answer !\u003d null \u0026\u0026 !answer.isEmpty()) : \"Flashcard must have one answer\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * Get the answer of the flashcard."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * @return String representing the answer on the flashcard"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public String getAnswer() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        return answer;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * Get the question of the flashcard."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * @return String representing the question on the flashcard"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public String getQuestion() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        return question;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * Set the answer of the flashcard."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * @param answer new answer on the flashcard"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public void setAnswer(String answer) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        assert (answer !\u003d null \u0026\u0026 !answer.isEmpty()) : \"Flashcard must have one answer\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * Set the question of the flashcard."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * @param question new answer on the flashcard"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public void setQuestion(String question) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        assert (question !\u003d null \u0026\u0026 !question.isEmpty()) : \"Flashcard must have one question.\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        return \"Question: \" + formatResponse(\"question\") + \"\\n\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                + \"   Answer:   \" + formatResponse(\"answer\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    public String toString(String type) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        assert type.equals(\"question\") || type.equals(\"answer\") : \"Only two cases here\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        case \"question\":"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            return \"Question: \" + formatResponse(\"question\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        case \"answer\":"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            return \"Question: \" + formatResponse(\"question\") + \"\\n\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                    + \"   Answer:   \" + formatResponse(\"answer\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * Format the question and answer response string to properly"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * wrap around the end of each line."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * IMPORTANT: We assume the following format for printing"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * Questions: \"n. Question: [qn]\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * Answers: \"   Answer:   [ans]\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * @param type String that should only have value \"question\" or \"answer\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * @return String that stores the formatted question or answer"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    private String formatResponse(String type) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        assert type.equals(\"question\") || type.equals(\"answer\") : \"Only two cases here\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        int startLength;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        String[] words;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        int lineLength \u003d Ui.DASH_LINES.length();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        // We rely on the printing format \"n. Question: [qn]\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        // or \"   Answer:   [ans]\""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        if (type.equals(\"question\")) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            startLength \u003d \"n. Question: \".length();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            words \u003d question.split(\" \");;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            startLength \u003d \"n. Answer:   \".length();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            words \u003d answer.split(\" \");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        int usableLength \u003d lineLength - startLength;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        int currentLength \u003d 0;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        for (String word : words) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            currentLength +\u003d word.length();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            if (currentLength \u003e usableLength) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                // Repeat enough spaces so that text is aligned to usable area."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                result +\u003d System.lineSeparator() + \" \".repeat(startLength) + word;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                currentLength \u003d word.length();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                result +\u003d word;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            result +\u003d \" \";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            // Account for the \" \" after the word."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            ++currentLength;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        return result.trim();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LiewWS": 81,
      "zhixiangteoh": 31,
      "wangwaynesg": 9
    }
  },
  {
    "path": "src/main/java/seedu/ecardnomics/exceptions/DeckRangeException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "package seedu.ecardnomics.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "public class DeckRangeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public static final String DECK_RANGE_LINE \u003d"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            \"Index should be within range of number of decks!\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        return DECK_RANGE_LINE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaijiel24": 10,
      "zhixiangteoh": 1
    }
  },
  {
    "path": "src/main/java/seedu/ecardnomics/exceptions/EmptyInputException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "package seedu.ecardnomics.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "public class EmptyInputException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    public static final String EMPTY_INPUT_LINE \u003d"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "            \"Input shouldn\u0027t be empty! Returning...\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        return EMPTY_INPUT_LINE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangwaynesg": 11
    }
  },
  {
    "path": "src/main/java/seedu/ecardnomics/exceptions/FlashCardRangeException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "package seedu.ecardnomics.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "public class FlashCardRangeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public static final String FLASHCARD_RANGE_LINE \u003d"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            \"Index should be within range of number of flash cards!\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        return FLASHCARD_RANGE_LINE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixiangteoh": 11
    }
  },
  {
    "path": "src/main/java/seedu/ecardnomics/exceptions/IndexFormatException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "package seedu.ecardnomics.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "public class IndexFormatException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public static final String INDEX_FORMAT_LINE \u003d"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            \"Command should be followed by \u003cindex\u003e\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        return INDEX_FORMAT_LINE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaijiel24": 11
    }
  },
  {
    "path": "src/main/java/seedu/ecardnomics/parser/DeckParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "package seedu.ecardnomics.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "import seedu.ecardnomics.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "import seedu.ecardnomics.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.command.VersionCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import seedu.ecardnomics.command.deck.AddCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "import seedu.ecardnomics.command.deck.DeleteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.command.deck.DoneEditCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.command.deck.HelpCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.command.deck.ListCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "import seedu.ecardnomics.command.deck.UpdateCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "import seedu.ecardnomics.command.ExitCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "import seedu.ecardnomics.command.VoidCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "import seedu.ecardnomics.deck.Deck;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.exceptions.FlashCardRangeException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.exceptions.IndexFormatException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.deck.FlashCard;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "import seedu.ecardnomics.exceptions.EmptyInputException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LiewWS"
        },
        "content": " * Parser for commands supplied in Deck Mode."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LiewWS"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "public class DeckParser extends Parser {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public Deck deck;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    private static Logger logger \u003d Logger.getLogger(\"DeckParserLogger\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "     * Constructor."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public DeckParser(Deck deck) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        this.deck \u003d deck;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    protected boolean prepareDeletedFlashCard(int flashCardID) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        logger.log(Level.INFO, \"Retrieving flash card at flash card index\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        FlashCard flashCard \u003d deck.get(flashCardID);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assert flashCard !\u003d null : \"flash card does not exist!\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        String response \u003d getDeleteYorNResponse(flashCard);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assert response.equals(Ui.Y) || response.equals(Ui.N) : \"response not \u0027Y\u0027 or \u0027N\u0027!\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        switch (response) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        case Ui.Y:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            Ui.printFlashCardDeletedLine(flashCard);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            Ui.printDashLines();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        case Ui.N:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            //"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            logger.log(Level.SEVERE, \"Response should only be either \u0027Y\u0027 or \u0027N\u0027 here\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            //"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    protected String[] prepareFlashCard() throws EmptyInputException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        String[] questionAndAnswer \u003d new String[2];"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        Ui.printAddFlashCardLine(deck);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        Ui.printEnterQuestionLine();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        questionAndAnswer[0] \u003d Ui.readUserInput();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        logger.log(Level.INFO, \"Reading user input for question\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        if (questionAndAnswer[0].trim().length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            logger.log(Level.WARNING, \"User entered nothing or a series of blank spaces for question\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "            throw new EmptyInputException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        Ui.printEnterAnswerLine();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        questionAndAnswer[1] \u003d Ui.readUserInput();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        logger.log(Level.INFO, \"Reading user input for answer\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        if (questionAndAnswer[1].trim().length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            logger.log(Level.WARNING, \"User entered nothing or a series of blank spaces for answer\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "            throw new EmptyInputException();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        assert questionAndAnswer[0].length() \u003e 0 : \"question field empty!\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        assert questionAndAnswer[1].length() \u003e 0 : \"answer field empty!\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        Ui.printFlashCardAddedLine();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        Ui.printDashLines();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        return questionAndAnswer;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    protected String[] prepareUpdate(int flashCardID) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        String[] newQnA \u003d new String[2];"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        Ui.printUpdateQuestionLine(deck.get(flashCardID));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        newQnA[0] \u003d Ui.readUserInput();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        logger.log(Level.INFO, \"Reading user input for question\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        boolean hasNewQ \u003d true;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        boolean hasNewA \u003d true;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        if (newQnA[0].trim().length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            logger.log(Level.INFO, \"User entered nothing or a series of blank spaces for question. \""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                    + \"Keep current question.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            newQnA[0] \u003d deck.get(flashCardID).getQuestion();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            hasNewQ \u003d false;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        Ui.printUpdateAnswerLine(deck.get(flashCardID));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        newQnA[1] \u003d Ui.readUserInput();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        logger.log(Level.INFO, \"Reading user input for answer\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        if (newQnA[1].trim().length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            logger.log(Level.INFO, \"User entered nothing or a series of blank spaces for answer. \""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                    + \"Keep current answer.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            newQnA[1] \u003d deck.get(flashCardID).getAnswer();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            hasNewA \u003d false;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        assert newQnA[0].length() \u003e 0 : \"question field empty!\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        assert newQnA[1].length() \u003e 0 : \"answer field empty!\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        Ui.printFlashCardUpdatedLine(hasNewQ, hasNewA);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        Ui.printDashLines();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        return newQnA;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    protected int getIndex(String arguments) throws IndexFormatException, FlashCardRangeException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        arguments \u003d arguments.trim();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        if (!arguments.matches(Ui.DIGITS_REGEX)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            logger.log(Level.WARNING, \"User did not enter valid integer\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            throw new IndexFormatException();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assert arguments.length() \u003e 0 : \"arguments empty!\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        int index \u003d Integer.parseInt(arguments) - INDEX_OFFSET;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        if (index \u003e\u003d deck.size() || index \u003c LOWEST_POSSIBLE_INDEX) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            logger.log(Level.WARNING, \"Flash card index larger than total number of cards\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            throw new FlashCardRangeException();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    protected String getDeleteYorNResponse(FlashCard flashCard) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        logger.log(Level.INFO, \"Prompting user for \u0027Y\u0027 or \u0027N\u0027 response\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        String response \u003d \"\";"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        Ui.printDashLines();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            Ui.printDeleteFlashCardLine(flashCard);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            response \u003d Ui.readUserInput();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            switch (response.trim()) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            case Ui.Y:"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "                response \u003d Ui.Y;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            case Ui.N:"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "                response \u003d Ui.N;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "                logger.log(Level.INFO, \"User entered response other than \u0027Y\u0027 or \u0027N\u0027\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "                Ui.printInvalidYorNResponse();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "                logger.log(Level.INFO, \"Re-prompting...\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        } while (!response.trim().equals(Ui.Y) \u0026\u0026 !response.trim().equals(Ui.N));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assert response.length() \u003d\u003d 1 : \"response is not \u0027Y\u0027 or \u0027N\u0027!\";"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        return response;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    protected Command parseCommand(String commandWord, String arguments)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            throws Exception {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        // Version"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        case Ui.VERSION_CMD:"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            return new VersionCommand();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        // Exit"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        case Ui.EXIT:"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            logger.log(Level.INFO, \"returning ExitCommand object\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        // Done with Edit Mode"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        case Ui.DONE:"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            logger.log(Level.INFO, \"returning DoneEditCommand object\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            return new DoneEditCommand(deck);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        // Add a FlashCard"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        case Ui.ADD:"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            logger.log(Level.INFO, \"Preparing FlashCard to add\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "            String[] questionAndAnswer \u003d prepareFlashCard();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            logger.log(Level.INFO, \"returning AddCommand object\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "            return new AddCommand(deck, questionAndAnswer[0], questionAndAnswer[1]);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        // List all FlashCards"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        case Ui.LIST:"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            logger.log(Level.INFO, \"returning ListCommand object\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "            return new ListCommand(deck, arguments);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        // Delete a FlashCard"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        case Ui.DELETE:"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            logger.log(Level.INFO, \"Preparing FlashCard to delete\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            int flashCardID \u003d getIndex(arguments);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            assert flashCardID \u003e\u003d LOWEST_POSSIBLE_INDEX : \"flash card ID less than lowest possible flash card index!\";"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            boolean isFlashCardDeleted \u003d prepareDeletedFlashCard(flashCardID);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            logger.log(Level.INFO, \"returning DeleteCommand object\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            return new DeleteCommand(deck, flashCardID, isFlashCardDeleted);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        // Update a FlashCard"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        case Ui.UPDATE:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            logger.log(Level.INFO, \"Preparing FlashCard to update\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            flashCardID \u003d getIndex(arguments);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            assert flashCardID \u003e\u003d LOWEST_POSSIBLE_INDEX : \"flash card ID less than lowest possible flash card index!\";"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            String[] newQnA \u003d prepareUpdate(flashCardID);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            return new UpdateCommand(deck, flashCardID, newQnA[0], newQnA[1]);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        // Help"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        case Ui.HELP:"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            logger.log(Level.INFO, \"returning HelpCommand object\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            logger.log(Level.WARNING, \"returning VoidCommand object\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            return new VoidCommand();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public Command parse(String userInput) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        logger.log(Level.INFO, \"Parsing user input string\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        String[] splitString \u003d userInput.split(\" \", 2);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        String commandWord \u003d splitString[0];"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        logger.log(Level.INFO, \"Parsed commandWord\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        String arguments \u003d \"\";"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        boolean argumentsExist \u003d splitString.length \u003e 1;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        if (argumentsExist) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            arguments \u003d splitString[1];"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            logger.log(Level.INFO, \"Parsed arguments\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            logger.log(Level.INFO, \"Parsing command\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            return parseCommand(commandWord, arguments);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            logger.log(Level.WARNING, \"Parsed void or invalid command\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            return new VoidCommand(e.getMessage());"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alwaysnacy": 1,
      "kaijiel24": 55,
      "LiewWS": 42,
      "zhixiangteoh": 107,
      "wangwaynesg": 26
    }
  },
  {
    "path": "src/main/java/seedu/ecardnomics/parser/NormalParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "package seedu.ecardnomics.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "import seedu.ecardnomics.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import seedu.ecardnomics.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import seedu.ecardnomics.command.ExitCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.command.VersionCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import seedu.ecardnomics.command.normal.EditCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import seedu.ecardnomics.command.normal.CreateCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import seedu.ecardnomics.command.normal.DeleteDeckCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import seedu.ecardnomics.command.normal.DecksCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import seedu.ecardnomics.command.normal.HelpCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import seedu.ecardnomics.command.normal.TagCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import seedu.ecardnomics.command.normal.UntagCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import seedu.ecardnomics.command.VoidCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "import seedu.ecardnomics.deck.Deck;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "import seedu.ecardnomics.deck.DeckList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "import seedu.ecardnomics.exceptions.DeckRangeException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.exceptions.EmptyInputException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "import seedu.ecardnomics.exceptions.IndexFormatException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LiewWS"
        },
        "content": " * Parser for commands supplied in Normal Mode."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LiewWS"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "public class NormalParser extends Parser {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    DeckList deckList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    private static Logger logger \u003d Logger.getLogger(\"NormalParserLogger\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    /** Constructor. */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public NormalParser(DeckList deckList) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        this.deckList \u003d deckList;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    protected int getIndex(String arguments)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            throws IndexFormatException, DeckRangeException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        String indexString \u003d arguments.trim();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        logger.log(Level.INFO, \"Logging method getIndex() in NormalParser.\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        if (!indexString.matches(Ui.DIGITS_REGEX)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            logger.log(Level.WARNING, \"User did not enter a valid integer index.\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            throw new IndexFormatException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        int index \u003d Integer.parseInt(indexString) - INDEX_OFFSET;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        if ((index \u003e\u003d deckList.size()) || (index \u003c LOWEST_POSSIBLE_INDEX)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            logger.log(Level.WARNING, \"User did not enter an index in the valid range.\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            throw new DeckRangeException();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * Retrieves deck at index specified in arguments from deckList."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * getIndex() is used to convert arguments from String to an int index."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * @param arguments String that contains the ID number of the deck requested"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * @return Reference to requested deck"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * @throws IndexFormatException if arguments is not a digit"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * @throws DeckRangeException if index obtained from arguments is not in range"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    private Deck prepareDeck(String arguments)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            throws IndexFormatException, DeckRangeException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        return deckList.getDeck(getIndex(arguments));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * Prepares a deck for being deleted."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * @param index int representing the index of the deck in deckList"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * @return true if delete is confirmed, otherwise false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    protected boolean getDeletedDeckConfirmation(int index) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        Deck deck \u003d deckList.getDeck(index);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        logger.log(Level.INFO, \"Logging method getDeletedDeckConfirmation() in NormalParser.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        Ui.printDeletedDeckQuestion(deck.getName());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        String userConfirmation \u003d Ui.readUserInput();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        String response \u003d checkYorNResponse(userConfirmation);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        assert (response.equals(Ui.Y) || response.equals(Ui.N)) : \"response should be y/n\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        switch (response) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        case Ui.Y:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            Ui.printDeckDeletedLine(deck.getName());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            Ui.printDashLines();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        case Ui.N:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            //"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            logger.log(Level.SEVERE, \"Response should only be either \u0027Y\u0027 or \u0027N\u0027 here\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            //"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * Checks whether the user want to remove the tags specified"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * from the deck specified."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * @param tags String[] representing the tags be removed"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * @param id int representing the index of the deck of the tags"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * @return true if the removal is confimred, otherwise false"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    protected boolean getRemovedTagsConfirmation(String[] tags, int id) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        Deck deck \u003d deckList.getDeck(id);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        Ui.printRemovedTagsQuestion(deck.getName(), tags);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        String userConfirmation \u003d Ui.readUserInput();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        String response \u003d checkYorNResponse(userConfirmation);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        switch (response) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        case Ui.Y:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            Ui.printTagsRemovedLine(deck.getName(), tags);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            Ui.printDashLines();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        case Ui.N:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            //"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            logger.log(Level.SEVERE, \"Response should only be either \u0027Y\u0027 or \u0027N\u0027 here\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            //"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * Creates a new deck for adding to deckList."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * @param arguments String that represents the nae of deck to be created"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * @return Reference to the deck created"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * @throws EmptyInputException if no name is supplied for the deck"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    protected Deck prepareNewDeck(String arguments) throws EmptyInputException {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        logger.log(Level.INFO, \"Logging method prepareNewDeck() in NormalParser.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        if (arguments.trim().isEmpty()) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            logger.log(Level.WARNING, \"User did not supply name when creating a new deck.\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            throw new EmptyInputException();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        if (arguments.contains(\"/tag\")) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            ArrayList\u003cString\u003e tagsList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            String[] nameAndTags \u003d arguments.split(\"/tag\", 2);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            String name \u003d nameAndTags[0].trim();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            String[] tags \u003d nameAndTags[1].trim().split(\" \");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            for (String tag: tags) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "                tagsList.add(tag);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            return new Deck(name, tagsList);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            return new Deck(arguments);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * Checks y or n response from user."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "     * @param response Reference to the input from user"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * @return Ui.Y if user enters confirms, otherwise Ui.N"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    private String checkYorNResponse(String response) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        logger.log(Level.INFO, \"Logging method checkYorNResponse() in NormalParser.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        Ui.printDashLines();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            assert response !\u003d null : \"response should not be null\";"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            switch (response.trim()) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            case Ui.Y:"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                response \u003d Ui.Y;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            case Ui.N:"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                response \u003d Ui.N;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                logger.log(Level.INFO, \"User entered response other than \u0027y\u0027 or \u0027n\u0027\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                Ui.printInvalidYorNResponse();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                logger.log(Level.INFO, \"Re-prompting...\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        } while (!response.trim().equals(Ui.Y) \u0026\u0026 !response.trim().equals(Ui.N));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        assert (response.equals(Ui.Y) || response.equals(Ui.N)) : \"Response should be y/n\";"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        return response;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    protected Command parseCommand(String commandWord, String arguments)"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            throws Exception {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        assert (commandWord !\u003d null \u0026\u0026 arguments !\u003d null) :"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                \"commandWord and arguments should not be null\";"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        logger.log(Level.INFO, \"Logging method parseCommand() in NormalParser.\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        // Version"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        case Ui.VERSION_CMD:"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            return new VersionCommand();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        // Exit"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        case Ui.EXIT:"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            logger.log(Level.INFO, \"User issued command to terminate program.\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        // Edit"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        case Ui.EDIT:"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            Deck deck \u003d prepareDeck(arguments);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            logger.log(Level.INFO, \"User issued command to edit deck \" + deck.getName() + \".\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            return new EditCommand(deckList, deck);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        // Create"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        case Ui.CREATE:"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            Deck newDeck \u003d prepareNewDeck(arguments);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            logger.log(Level.INFO, \"User issued command to create deck \" + newDeck.getName() + \".\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            return new CreateCommand(deckList, newDeck);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        // Decks"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        case Ui.DECKS:"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            logger.log(Level.INFO, \"User issued command to list decks.\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            return new DecksCommand(deckList);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        // Delete"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        case Ui.DELETE:"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            int deckID \u003d getIndex(arguments);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            logger.log(Level.INFO, \"User issued command to delete deck at index \" + deckID);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            boolean isDeckDeleted \u003d getDeletedDeckConfirmation(deckID);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            return new DeleteDeckCommand(deckList, deckID, isDeckDeleted);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        // Help"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        case Ui.HELP:"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            logger.log(Level.INFO, \"User issued command to view help.\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        // Tag"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        case Ui.TAG:"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            logger.log(Level.INFO, \"User issued command to tag a deck.\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            assert (arguments.contains(\"/tag\")) :"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "                    \"tags to be added are after /tag label\";"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            String[] idAndNewTags \u003d arguments.split(\"/tag\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            deckID \u003d getIndex(idAndNewTags[0]);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            String[] newTags \u003d idAndNewTags[1].trim().split(\" \");"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            return new TagCommand(deckList, deckID, newTags);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        case Ui.UNTAG:"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            logger.log(Level.INFO, \"User issued command to untag a deck.\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            assert (arguments.contains(\"/tag\")) :"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "                    \"tags to be removed are after /tag label\";"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            String[] idAndDeletedTags \u003d arguments.split(\"/tag\");"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            deckID \u003d getIndex(idAndDeletedTags[0]);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            String[] deletedTags \u003d idAndDeletedTags[1].trim().split(\" \");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            boolean isTagsRemoved \u003d getRemovedTagsConfirmation(deletedTags, deckID);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "            return new UntagCommand(deckList, deckID, deletedTags, isTagsRemoved);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            logger.log(Level.INFO, \"User issued an invalid command.\");"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            return new VoidCommand();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public Command parse(String userInput) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        logger.log(Level.INFO, \"Logging method parse() in NormalParser.\");"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        String[] splitString \u003d userInput.split(\" \", 2);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        String commandWord \u003d splitString[0];"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        logger.log(Level.INFO, \"Parsed commandWord\");"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        boolean argumentsExist \u003d  splitString.length \u003e 1;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        String arguments \u003d \"\";"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        if (argumentsExist) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            arguments \u003d splitString[1];"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            logger.log(Level.INFO, \"Parsed arguments\");"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            logger.log(Level.INFO, \"Parsing command\");"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            return parseCommand(commandWord, arguments);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            logger.log(Level.WARNING, \"Parsed void or invalid command\");"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            return new VoidCommand(e.getMessage());"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alwaysnacy": 111,
      "kaijiel24": 57,
      "LiewWS": 88,
      "zhixiangteoh": 25
    }
  },
  {
    "path": "src/main/java/seedu/ecardnomics/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "package seedu.ecardnomics.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "public abstract class Parser {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public static final int LOWEST_POSSIBLE_INDEX \u003d 0;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    public static final int INDEX_OFFSET \u003d 1;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     * Checks whether argument from user is a number and whether the index given is a within the correct range of"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     * decks/ flash cards."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     * @param arguments Argument from user input"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     * @return int representing the index from the argument given"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    protected abstract int getIndex(String arguments)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            throws Exception;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * Determines the Command subclass to return based on the commandWord"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * and arguments provided."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * @param commandWord String that corresponds to a command"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * @param arguments String that lists the arguments for the command"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * @return Command representing the command to be executed"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     * @throws Exception if arguments are inappropriate"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    protected abstract Command parseCommand(String commandWord, String arguments)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            throws Exception;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     * Parse user input to determine which \u003ccode\u003eCommand\u003c/code\u003e to output."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     * @param userInput Input from user"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     * @return Command representing command to be executed"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public abstract Command parse(String userInput);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaijiel24": 23,
      "LiewWS": 9,
      "zhixiangteoh": 7
    }
  },
  {
    "path": "src/test/java/seedu/ecardnomics/MainTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "package seedu.ecardnomics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "class MainTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public void sampleTest() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(true);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixiangteoh": 2,
      "-": 10
    }
  },
  {
    "path": "src/test/java/seedu/ecardnomics/UiTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "package seedu.ecardnomics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "import seedu.ecardnomics.deck.Deck;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "import seedu.ecardnomics.deck.FlashCard;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "import static seedu.ecardnomics.Ui.printNewDeck;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "import static seedu.ecardnomics.Ui.printDeletedDeckQuestion;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "import static seedu.ecardnomics.Ui.printDeckDeletedLine;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "import static seedu.ecardnomics.Ui.printUpdateQuestionLine;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "import static seedu.ecardnomics.Ui.printUpdateAnswerLine;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "public class UiTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    private final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    private final ByteArrayOutputStream errContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    private final PrintStream originalOut \u003d System.out;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    private final PrintStream originalErr \u003d System.err;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public void setUpStreams() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        System.setErr(new PrintStream(errContent));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public void restoreStreams() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        System.setOut(originalOut);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        System.setErr(originalErr);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public void printMessage_singleLine_goodFormat() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        String singleLine \u003d \"Hello! Welcome to eCardnomics!\\t\\t\\tFlashCards Application.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        String message \u003d Ui.DASH_LINES + System.lineSeparator() + singleLine + System.lineSeparator()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "                + Ui.DASH_LINES + System.lineSeparator();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        Ui.printMessage(singleLine);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertEquals(message, outContent.toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void printNormalPrompt() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void printDeckPrompt() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void printPrompt() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void printNormalWelcome() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void printDeckWelcome() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void printGreeting() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void printExitLine() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void printNotRecognisedLine() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void printAddFlashCardLine() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void printEnterQuestionLine() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void printEnterAnswerLine() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void printFlashCardAddedLine() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void printDeck() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void printDeleteFlashCardLine() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void printFlashCardDeletedLine() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void printHelp() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    void printNewDeck_newDeckName_deckName() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        String expectedOutput \u003d  \"------------------------------------------------------------\" + System.lineSeparator()"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "                + \"New deck created: Pokemon\" + System.lineSeparator()"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "                + \"------------------------------------------------------------\" + System.lineSeparator();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        printNewDeck(new Deck(\"Pokemon\"));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        assertEquals(expectedOutput, outContent.toString());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void printDeckList() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    void printDeletedDeckQuestion_deletedDeckName_questionLine() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        String expectedOutput \u003d \"Do you want to delete Pokemon deck? [y/n]\";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        Ui.printDeletedDeckQuestion(\"Pokemon\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        assertEquals(expectedOutput, outContent.toString());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "    void printDeletedDeck_deletedDeckName_confirmation() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        String expectedOutput \u003d \"Pokemon has been deleted.\" + System.lineSeparator();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        printDeckDeletedLine(\"Pokemon\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "alwaysnacy"
        },
        "content": "        assertEquals(expectedOutput, outContent.toString());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    void printUpdateQuestionLine_existingFlashCard_updateQuestionLine() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        String question \u003d \"Old question\";"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        String answer \u003d \"Old answer\";"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        FlashCard existingCard \u003d new FlashCard(question, answer);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        String expectedOutput \u003d existingCard.toString(\"question\") + System.lineSeparator()"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                + \"New Question: \" + System.lineSeparator() + \"  \u003e \";"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        printUpdateQuestionLine(existingCard);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        assertEquals(expectedOutput, outContent.toString());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    void printUpdateAnswerLine_existingFlashCard_updateAnswerLine() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        String question \u003d \"Old question\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        String answer \u003d \"Old answer\";"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        FlashCard existingCard \u003d new FlashCard(question, answer);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        String expectedOutput \u003d existingCard.toString(\"answer\") + System.lineSeparator()"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                + \"New Answer: \" + System.lineSeparator() + \"  \u003e \";"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        printUpdateAnswerLine(existingCard);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        assertEquals(expectedOutput, outContent.toString());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alwaysnacy": 11,
      "kaijiel24": 3,
      "LiewWS": 30,
      "zhixiangteoh": 115
    }
  },
  {
    "path": "src/test/java/seedu/ecardnomics/command/deck/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "package seedu.ecardnomics.command.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "import seedu.ecardnomics.deck.Deck;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "class AddCommandTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    void execute_addNewFlashCard() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        Deck deck \u003d new Deck(\"Test\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        AddCommand cmd \u003d new AddCommand(deck, \"Test Question\", \"Test Amswer\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        cmd.execute();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        assertEquals(1, deck.size());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wangwaynesg": 17
    }
  },
  {
    "path": "src/test/java/seedu/ecardnomics/command/deck/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "package seedu.ecardnomics.command.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "import seedu.ecardnomics.deck.Deck;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "import seedu.ecardnomics.deck.FlashCard;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "class ListCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    private final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    private final ByteArrayOutputStream errContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    private final PrintStream originalOut \u003d System.out;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    private final PrintStream originalErr \u003d System.err;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    public void setUpStreams() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        System.setErr(new PrintStream(errContent));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    public void restoreStreams() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        System.setOut(originalOut);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        System.setErr(originalErr);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    void execute_emptyDeck_listCommand() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        String expectedOutput \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "                \"------------------------------------------------------------\" + System.lineSeparator()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "                + \"Deck is currently empty!\" + System.lineSeparator()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "                + \"------------------------------------------------------------\" + System.lineSeparator();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        Deck deck \u003d new Deck(\"Test\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        ListCommand cmd \u003d new ListCommand(deck, \"/ans\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        cmd.execute();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        assertEquals(expectedOutput, outContent.toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    void execute_nonEmptyDeck_ansArgument_listCommand() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        String expectedOutput \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "                \"------------------------------------------------------------\" + System.lineSeparator()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "                + \"You are now viewing deck: Test\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "                + \"1. Question: Test Question\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "                + \"   Answer:   Test Answer\" + System.lineSeparator()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "                + \"------------------------------------------------------------\" + System.lineSeparator();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        Deck deck \u003d new Deck(\"Test\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        deck.add(new FlashCard(\"Test Question\", \"Test Answer\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        ListCommand cmd \u003d new ListCommand(deck, \"/ans\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        cmd.execute();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        assertEquals(expectedOutput, outContent.toString());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    void execute_nonEmptyDeck_noAnsArgument_listCommand() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        String expectedOutput \u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "                \"------------------------------------------------------------\" + System.lineSeparator()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "                + \"You are now viewing deck: Test\\n\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "                + \"1. Question: Test Question\" + System.lineSeparator()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "                + \"------------------------------------------------------------\" + System.lineSeparator();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        Deck deck \u003d new Deck(\"Test\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        deck.add(new FlashCard(\"Test Question\", \"Test Answer\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        ListCommand cmd \u003d new ListCommand(deck, \"\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        cmd.execute();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "        assertEquals(expectedOutput, outContent.toString());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wangwaynesg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaijiel24": 4,
      "wangwaynesg": 71
    }
  },
  {
    "path": "src/test/java/seedu/ecardnomics/command/deck/UpdateCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "package seedu.ecardnomics.command.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "import seedu.ecardnomics.deck.Deck;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "import seedu.ecardnomics.deck.FlashCard;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "class UpdateCommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    Deck currentDeck;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    int flashCardID;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    static final String OLD_Q \u003d \"Knock knock\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    static final String OLD_A \u003d \"No joke\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    void execute_update() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        String newQ \u003d \"newQ\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        String newA \u003d \"newA\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        UpdateCommand cmd \u003d new UpdateCommand(currentDeck, flashCardID, newQ, newA);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        cmd.execute();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        assertEquals(newQ, currentDeck.get(flashCardID).getQuestion());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        assertEquals(newA, currentDeck.get(flashCardID).getAnswer());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    void initializeDeck() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        currentDeck \u003d new Deck(\"test deck\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        currentDeck.add(new FlashCard(OLD_Q, OLD_A));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        flashCardID \u003d 0;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LiewWS": 32
    }
  },
  {
    "path": "src/test/java/seedu/ecardnomics/command/normal/CreateCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "package seedu.ecardnomics.command.normal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "import seedu.ecardnomics.deck.Deck;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "import seedu.ecardnomics.deck.DeckList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "class CreateCommandTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    void execute_createNewDeck() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        DeckList deckList \u003d new DeckList();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        assertEquals(0, deckList.size());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        CreateCommand cmd \u003d new CreateCommand(deckList, new Deck(\"Test\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        cmd.execute();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        assertEquals(1, deckList.size());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LiewWS": 19
    }
  },
  {
    "path": "src/test/java/seedu/ecardnomics/command/normal/DeleteDeckCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "package seedu.ecardnomics.command.normal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "import seedu.ecardnomics.deck.Deck;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "import seedu.ecardnomics.deck.DeckList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "class DeleteDeckCommandTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    void execute_confirmDeleteDeck() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        DeckList deckList \u003d new DeckList();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        deckList.addDeck(new Deck(\"Test\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        assertEquals(1, deckList.size());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        DeleteDeckCommand cmd \u003d new DeleteDeckCommand(deckList, 0, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        cmd.execute();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        assertEquals(0, deckList.size());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    void execute_notConfirmedDeleteDeck() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        DeckList deckList \u003d new DeckList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        deckList.addDeck(new Deck(\"Test\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        assertEquals(1, deckList.size());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        DeleteDeckCommand cmd \u003d new DeleteDeckCommand(deckList, 0, false);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        cmd.execute();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        assertEquals(1, deckList.size());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LiewWS": 30
    }
  },
  {
    "path": "src/test/java/seedu/ecardnomics/deck/DeckListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "package seedu.ecardnomics.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "class DeckListTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void size() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        DeckList deckList \u003d initialiseDeckList(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertEquals(2, deckList.size());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        deckList.removeDeck(1);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertEquals(1, deckList.size());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        deckList.removeDeck(0);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertEquals(0, deckList.size());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        deckList.addDeck(new Deck(\"deck 1\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertEquals(1, deckList.size());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        DeckList deckList \u003d initialiseDeckList(2);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        String deckListString \u003d \"1. deck 1\\n2. deck 2\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertEquals(deckListString, deckList.toString());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    DeckList initialiseDeckList(int size) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        DeckList deckList \u003d new DeckList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d size; i++) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            Deck deck \u003d new Deck(String.format(\"deck %d\", i));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            deckList.addDeck(deck);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        return deckList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaijiel24": 1,
      "zhixiangteoh": 34
    }
  },
  {
    "path": "src/test/java/seedu/ecardnomics/deck/DeckTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "package seedu.ecardnomics.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "class DeckTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void getName() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        Deck deck \u003d new Deck(\"Pokemon\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertEquals(\"Pokemon\", deck.getName());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void setName() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        Deck deck \u003d new Deck(\"Pokemon\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        deck.setName(\"Pokemon Go\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertEquals(\"Pokemon Go\", deck.getName());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    // void get_emptyDeck_exceptionThrown() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    //     Deck deck \u003d new Deck(\"Pokemon\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    //     try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    //         assertEquals(0, deck.get(0));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    //         fail();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    //     } catch (Exception e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    //         NullPointerException npe \u003d new NullPointerException();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    //         assertEquals(npe.getMessage(), e.getMessage());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    //     }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    // void get_invalidIndex_exceptionThrown() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    //     Deck deck \u003d initialiseDeck(2);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    //     try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    //         assertEquals(0, deck.get(-1));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    //         assertEquals(0, deck.get(2));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    //         assertEquals(0, deck.get(3));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    //         fail(); // test should not reach this line"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    //     } catch (Exception e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    //         NullPointerException npe \u003d new NullPointerException();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    //         assertEquals(npe.getMessage(), e.getMessage());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    //     }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void get_validIndex_success() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        Deck deck \u003d new Deck(\"Pokemon\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        FlashCard q1 \u003d new FlashCard(\"q 1\", \"a 1\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        FlashCard q2 \u003d new FlashCard(\"q 2\", \"a 2\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        deck.add(q1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        deck.add(q2);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertEquals(q1, deck.get(0));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertEquals(q2, deck.get(1));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void size() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        Deck deck \u003d initialiseDeck(2);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertEquals(2, deck.size());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        deck.delete(1);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertEquals(1, deck.size());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        deck.delete(0);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertEquals(0, deck.size());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        deck.add(new FlashCard(\"q 1\", \"a 1\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertEquals(1, deck.size());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    // void delete_emptyDeck_exceptionThrown() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    //     Deck deck \u003d initialiseDeck(0);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    //     try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    //         deck.delete(0);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    //         fail(); // test should not reach this line"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    //     } catch (Exception e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    //         NullPointerException npe \u003d new NullPointerException();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    //         assertEquals(npe.getMessage(), e.getMessage());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    //     }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    // void delete_invalidIndex_exceptionThrown() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    //     Deck deck \u003d initialiseDeck(2);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    //     try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    //         deck.delete(-1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    //         deck.delete(2);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    //         deck.delete(3);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    //         fail(); // test should not reach this line"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    //     } catch (Exception e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    //         NullPointerException npe \u003d new NullPointerException();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    //         assertEquals(npe.getMessage(), e.getMessage());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    //     }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void delete_validIndex_success() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        Deck deck \u003d initialiseDeck(2);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        deck.delete(1);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertEquals(1, deck.size());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void testToString_default_goodFormat() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        Deck deck \u003d initialiseDeck(2);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        String deckString \u003d \"Pokemon:\\n1. Question: q 1\\n   Answer:   a 1\\n\\n2. Question: q 2\\n   Answer:   a 2\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertEquals(deckString, deck.toString());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void testToString_withType_goodFormat() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        Deck deck \u003d initialiseDeck(2);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        String deckString \u003d \"1. Question: q 1\\n\\n\" + \"2. Question: q 2\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        String deckStringAns \u003d \"1. Question: q 1\\n   Answer:   a 1\\n\\n\""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "                + \"2. Question: q 2\\n   Answer:   a 2\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertEquals(deckString, deck.toString(\"question\"));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertEquals(deckStringAns, deck.toString(\"answer\"));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    Deck initialiseDeck(int size) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        Deck deck \u003d new Deck(\"Pokemon\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d size; i++) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            FlashCard flashCard \u003d new FlashCard(String.format(\"q %d\", i), String.format(\"a %d\", i));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            deck.add(flashCard);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        return deck;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaijiel24": 4,
      "zhixiangteoh": 124
    }
  },
  {
    "path": "src/test/java/seedu/ecardnomics/deck/FlashCardTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "package seedu.ecardnomics.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "class FlashCardTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    static FlashCard flashCard;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void testToString_default_goodFormat() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        String flashCardString \u003d \"Question: Who\u0027s that Pokemon?\\n   Answer:   It\u0027s Pikachu!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertEquals(flashCardString, flashCard.toString());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    void testToString_default_wrappedLine() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        String question \u003d \"Ok, long question let\u0027s goooooooo! Ahhhhhhhhhhhhh.\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                + \" Make this question veryyyyyy longggg!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        String answer \u003d \"Ahhhhhhhhhhhhhhhhhhhhhhhh!!!!!!!!!!!!!! \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                + \"Get an even longer answer. How many lines will this answer span? \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                + \"I do not know. Maybe we can get it to three lines? Perhaps. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                + \"Anyway span reminds me of linear algebra.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        FlashCard longFlashCard \u003d new FlashCard(question, answer);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        String flashCardString \u003d \"Question: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                + \"Ok, long question let\u0027s goooooooo! \" + System.lineSeparator()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                + \"             \" + \"Ahhhhhhhhhhhhh. Make this question veryyyyyy \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                + System.lineSeparator()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                + \"             \" + \"longggg!\" + \"\\n\" + \"   Answer:   \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                + \"Ahhhhhhhhhhhhhhhhhhhhhhhh!!!!!!!!!!!!!! Get an \" + System.lineSeparator()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                + \"             \" + \"even longer answer. How many lines will this \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                + System.lineSeparator()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                + \"             \" + \"answer span? I do not know. Maybe we can get it \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                + System.lineSeparator()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                + \"             \" + \"to three lines? Perhaps. Anyway span reminds me \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                + System.lineSeparator()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                + \"             \" + \"of linear algebra.\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        assertEquals(flashCardString, longFlashCard.toString());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void testToString_withType_goodFormat() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        String flashCardString \u003d \"Question: Who\u0027s that Pokemon?\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        String flashCardStringWithAns \u003d \"Question: Who\u0027s that Pokemon?\\n   Answer:   It\u0027s Pikachu!\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertEquals(flashCardString, flashCard.toString(\"question\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertEquals(flashCardStringWithAns, flashCard.toString(\"answer\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    void testToString_withType_wrappedLine() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        String question \u003d \"Ok, long question let\u0027s goooooooo! Ahhhhhhhhhhhhh.\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                + \" Make this question veryyyyyy longggg!\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        String answer \u003d \"Ahhhhhhhhhhhhhhhhhhhhhhhh!!!!!!!!!!!!!! \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                + \"Get an even longer answer. How many lines will this answer span? \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                + \"I do not know. Maybe we can get it to three lines? Perhaps. \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                + \"Anyway span reminds me of linear algebra.\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        FlashCard longFlashCard \u003d new FlashCard(question, answer);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        String flashCardString \u003d \"Question: \""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                + \"Ok, long question let\u0027s goooooooo! \" + System.lineSeparator()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                + \"             \" + \"Ahhhhhhhhhhhhh. Make this question veryyyyyy \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                + System.lineSeparator()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                + \"             \" + \"longggg!\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        String flashCardStringWithAns \u003d flashCardString + \"\\n\" + \"   Answer:   \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                + \"Ahhhhhhhhhhhhhhhhhhhhhhhh!!!!!!!!!!!!!! Get an \" + System.lineSeparator()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                + \"             \" + \"even longer answer. How many lines will this \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                + System.lineSeparator()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                + \"             \" + \"answer span? I do not know. Maybe we can get it \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                + System.lineSeparator()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                + \"             \" + \"to three lines? Perhaps. Anyway span reminds me \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                + System.lineSeparator()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "                + \"             \" + \"of linear algebra.\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        assertEquals(flashCardString, longFlashCard.toString(\"question\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        assertEquals(flashCardStringWithAns, longFlashCard.toString(\"answer\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    public static void createFlashCard() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        flashCard \u003d new FlashCard(\"Who\u0027s that Pokemon?\", \"It\u0027s Pikachu!\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LiewWS": 52,
      "zhixiangteoh": 29
    }
  },
  {
    "path": "src/test/java/seedu/ecardnomics/parser/DeckParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "package seedu.ecardnomics.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.command.VoidCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "import seedu.ecardnomics.command.deck.AddCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "import seedu.ecardnomics.command.deck.DeleteCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "import seedu.ecardnomics.command.deck.DoneEditCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "import seedu.ecardnomics.command.deck.ListCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "import seedu.ecardnomics.command.deck.HelpCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.command.ExitCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.deck.Deck;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.deck.FlashCard;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.exceptions.FlashCardRangeException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.exceptions.IndexFormatException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "import java.io.ByteArrayInputStream;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "class DeckParserTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    DeckParser deckParser;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void getIndex_validIndex_success() throws IndexFormatException, FlashCardRangeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertEquals(0, deckParser.getIndex(\"1\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertEquals(1, deckParser.getIndex(\"2\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    void getIndex_validIndexSpacePadded_success() throws IndexFormatException, FlashCardRangeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        assertEquals(0, deckParser.getIndex(\" 1\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        assertEquals(0, deckParser.getIndex(\"\\t1\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        assertEquals(1, deckParser.getIndex(\"2\\t\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        assertEquals(1, deckParser.getIndex(\"     2 \"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void getIndex_outOfRangeIndex_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            assertEquals(1, deckParser.getIndex(\"3\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            assertEquals(1, deckParser.getIndex(\"0\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            assertEquals((new FlashCardRangeException()).getMessage(), e.getMessage());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void getIndex_noIndex_exceptionThrown() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            assertEquals(1, deckParser.getIndex(\"\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            assertEquals(1, deckParser.getIndex(\"   \"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            assertEquals(1, deckParser.getIndex(\"something\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            assertEquals(1, deckParser.getIndex(\" something\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            assertEquals((new IndexFormatException()).getMessage(), e.getMessage());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void parseCommand_ExitCommand_success() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertTrue(deckParser.parseCommand(\"exit\", \"\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void parseCommand_DoneEditCommand_success() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertTrue(deckParser.parseCommand(\"done\", \"\") instanceof DoneEditCommand);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    //void parseCommand_AddCommand_success() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    //assertTrue(deckParser.parseCommand(\"add\", \"\") instanceof AddCommand);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void parseCommand_ListCommand_success() throws Exception {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertTrue(deckParser.parseCommand(\"list\", \"\") instanceof ListCommand);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    //@Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    //void parseCommand_DeleteCommand_success() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    //assertTrue(deckParser.parseCommand(\"delete\", \"1\") instanceof DeleteCommand);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    void parseCommand_DeleteCommandNoIndex_exceptionThrown() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            deckParser.parseCommand(\"delete\", \"\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            assertTrue(e instanceof IndexFormatException);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    void parseCommand_DeleteCommandOutOfRangeIndex_exceptionThrown() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            deckParser.parseCommand(\"delete\", \"3\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            assertTrue(e instanceof FlashCardRangeException);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    void parseCommand_UpdateCommandNoIndex_exceptionThrown() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            deckParser.parseCommand(\"update\", \"\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            assertTrue(e instanceof IndexFormatException);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    void parseCommand_UpdateCommandOutOfRangeIndex_exceptionThrown() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            deckParser.parseCommand(\"update\", \"3\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "            assertTrue(e instanceof FlashCardRangeException);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LiewWS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LiewWS"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void parseCommand_HelpCommand_success() throws Exception {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertTrue(deckParser.parseCommand(\"help\", \"\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void parse_invalidCommand_returnsVoidCommand() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertTrue(deckParser.parse(\"something random\") instanceof VoidCommand);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertTrue(deckParser.parse(\"\") instanceof VoidCommand);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertTrue(deckParser.parse(\"   \") instanceof VoidCommand);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertTrue(deckParser.parse(\"\\t\") instanceof VoidCommand);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertTrue(deckParser.parse(\"blah\") instanceof VoidCommand);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    //@BeforeAll"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    //public static void addUserInput() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    //String userInputs \u003d \"q1\" + System.getProperty(\"line.separator\") + \"a1\" + System.getProperty(\"line.separator\")"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    //+ \"y\" + System.getProperty(\"line.separator\") + \"y\";"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    //ByteArrayInputStream input \u003d new ByteArrayInputStream(userInputs.getBytes());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    //System.setIn(input);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void initialiseDeckParser() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        Deck deck \u003d initialiseDeck(2);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        deckParser \u003d new DeckParser(deck);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    Deck initialiseDeck(int size) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        Deck deck \u003d new Deck(\"Pokemon\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d size; i++) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            FlashCard flashCard \u003d new FlashCard(String.format(\"q %d\", i), String.format(\"a %d\", i));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            deck.add(flashCard);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        return deck;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaijiel24": 51,
      "LiewWS": 18,
      "zhixiangteoh": 95
    }
  },
  {
    "path": "src/test/java/seedu/ecardnomics/parser/NormalParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "package seedu.ecardnomics.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "import seedu.ecardnomics.command.VersionCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.command.VoidCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.command.ExitCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "import seedu.ecardnomics.command.normal.CreateCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "import seedu.ecardnomics.command.normal.DecksCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "import seedu.ecardnomics.command.normal.DeleteDeckCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "import seedu.ecardnomics.command.normal.EditCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "import seedu.ecardnomics.command.normal.HelpCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.deck.Deck;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.deck.DeckList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.exceptions.DeckRangeException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "import seedu.ecardnomics.exceptions.EmptyInputException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import seedu.ecardnomics.exceptions.IndexFormatException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "class NormalParserTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    NormalParser normalParser;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void getIndex_validIndex_success() throws IndexFormatException, DeckRangeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertEquals(0, normalParser.getIndex(\"1\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertEquals(1, normalParser.getIndex(\"2\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    void getIndex_validIndexSpacePadded_success() throws IndexFormatException, DeckRangeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        assertEquals(0, normalParser.getIndex(\" 1\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        assertEquals(0, normalParser.getIndex(\"\\t1\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        assertEquals(1, normalParser.getIndex(\"2\\t\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        assertEquals(1, normalParser.getIndex(\"     2 \"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void getIndex_outOfRangeIndex_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            assertEquals(1, normalParser.getIndex(\"3\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            assertEquals(1, normalParser.getIndex(\"-1\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            assertEquals(1, normalParser.getIndex(\"0\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            assertEquals((new DeckRangeException()).getMessage(), e.getMessage());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void getIndex_noIndex_exceptionThrown() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            assertEquals(1, normalParser.getIndex(\"\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            assertEquals(1, normalParser.getIndex(\"   \"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            assertEquals(1, normalParser.getIndex(\"something\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            assertEquals(1, normalParser.getIndex(\" something\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            assertEquals((new IndexFormatException()).getMessage(), e.getMessage());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    void parseCommand_VersionCommand_success() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        assertTrue(normalParser.parseCommand(\"--version\", \"\") instanceof VersionCommand);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void parseCommand_ExitCommand_success() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertTrue(normalParser.parseCommand(\"exit\", \"\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void parseCommand_EditCommand_success() throws Exception {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertTrue(normalParser.parseCommand(\"edit\", \"1\") instanceof EditCommand);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertTrue(normalParser.parseCommand(\"edit\", \"2\") instanceof EditCommand);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void parseCommand_EditCommandNoIndex_exceptionThrown() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            assertTrue(normalParser.parseCommand(\"edit\", \"\") instanceof EditCommand);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            assertTrue(e instanceof IndexFormatException);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void parseCommand_EditCommandOutOfRangeIndex_exceptionThrown() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            normalParser.parseCommand(\"edit\", \"0\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            normalParser.parseCommand(\"edit\", \"3\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            assertTrue(e instanceof DeckRangeException);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    void parseCommand_CreateCommand_success() throws Exception {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        assertTrue(normalParser.parseCommand(\"create\", \"Deck 3\") instanceof CreateCommand);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    void parseCommand_CreateCommandEmptyInput_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            normalParser.parseCommand(\"create\", \"\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            assertTrue(e instanceof EmptyInputException);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void parseCommand_DecksCommand_success() throws Exception {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertTrue(normalParser.parseCommand(\"decks\", \"\") instanceof DecksCommand);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    //@Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    //void parseCommand_DeleteDeckCommand_success() throws Exception {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    //assertTrue(normalParser.parseCommand(\"delete\", \"1\") instanceof DeleteDeckCommand);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    void parseCommand_DeleteDeckCommandNoIndex_exceptionThrown() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            normalParser.parseCommand(\"delete\", \"\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            assertTrue(e instanceof IndexFormatException);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    void parseCommand_DeleteDeckCommandOutOfRangeIndex_exceptionThrown() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            normalParser.parseCommand(\"delete\", \"3\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "            assertTrue(e instanceof DeckRangeException);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void parseCommand_HelpCommand_success() throws Exception {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertTrue(normalParser.parseCommand(\"help\", \"\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    void parse_invalidCommand_returnsVoidCommand() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertTrue(normalParser.parse(\"something random\") instanceof VoidCommand);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertTrue(normalParser.parse(\"\") instanceof VoidCommand);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertTrue(normalParser.parse(\"   \") instanceof VoidCommand);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertTrue(normalParser.parse(\"\\t\") instanceof VoidCommand);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        assertTrue(normalParser.parse(\"blah\") instanceof VoidCommand);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    //@BeforeAll"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    //public static void addUserInput() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    //String userInputs \u003d \"y\";"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    //ByteArrayInputStream input \u003d new ByteArrayInputStream(userInputs.getBytes());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    //System.setIn(input);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "    void initialiseNormalParser() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        DeckList deckList \u003d initialiseDeckList(2);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        normalParser \u003d new NormalParser(deckList);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    DeckList initialiseDeckList(int size) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        DeckList deckList \u003d new DeckList();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d size; i++) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            Deck deck \u003d new Deck(String.format(\"deck %d\", i));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "            deckList.addDeck(deck);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "        return deckList;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zhixiangteoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaijiel24": 68,
      "zhixiangteoh": 117
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "exit"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "kaijiel24": 2
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@echo off"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "setlocal enableextensions"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "pushd %~dp0"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "cd .."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "call gradlew clean shadowJar"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "cd build\\libs"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "for /f \"tokens\u003d*\" %%a in ("
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027dir /b *.jar\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ") do ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    set jarloc\u003d%%a"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "java -jar %jarloc% \u003c ..\\..\\text-ui-test\\input.txt \u003e ..\\..\\text-ui-test\\ACTUAL.TXT"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "cd ..\\..\\text-ui-test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaijiel24"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT \u0026\u0026 ECHO Test passed! || Echo Test failed!"
      }
    ],
    "authorContributionMap": {
      "kaijiel24": 1,
      "-": 18
    }
  }
]
