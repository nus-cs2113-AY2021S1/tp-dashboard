[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11 (use the exact version), update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Configure Intellij for JDK 11**, as described [here](https://se-education.org/guides/tutorials/intellijJdk.html)."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Import the project _as a Gradle project_**, as described [here](https://se-education.org/guides/tutorials/intellijImportGradleProject.html)."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Verify the set up**: After the importing is complete, locate the `src/main/java/seedu/duke/Duke.java` file, right-click it, and choose `Run Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003e Task :compileJava"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003e Task :processResources NO-SOURCE"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003e Task :classes"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003e Task :Duke.main()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "                  / ____| |    |_   _|              (_) |       /\\\\           (_)   | |            | |"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "                  | |    | |      | |  _ __ ___ _   _ _| |_     /  \\\\   ___ ___ _ ___| |_ __ _ _ __ | |_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "                  | |    | |      | | | \u0027__/ __| | | | | __|   / /\\\\ \\\\ / __/ __| / __| __/ _` | \u0027_ \\\\| __|"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "                  | |____| |____ _| |_| | | (__| |_| | | |_   / ____ \\\\\\\\__ \\\\__ \\\\ \\\\__ \\\\ || (_| | | | | |_"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "                  \\\\_____|______|_____|_|  \\\\___|\\\\__,_|_|\\\\__| /_/    \\\\_\\\\___/___/_|___/\\\\__\\\\__,_|_| |_|\\\\__|"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   What is your name?"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "   Type some word and press enter to let the execution proceed to the end."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "## Build automation using Gradle"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* This project uses Gradle for build automation and dependency management. It includes a basic build script as well (i.e. the `build.gradle` file)."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* If you are new to Gradle, refer to the [Gradle Tutorial at se-education.org/guides](https://se-education.org/guides/tutorials/gradle.html)."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "## Testing"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "### I/O redirection tests"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* To run _I/O redirection_ tests (aka _Text UI tests_), navigate to the `text-ui-test` and run the `runtest(.bat/.sh)` script."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "### JUnit tests"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* A skeleton JUnit test (`src/test/java/seedu/duke/DukeTest.java`) is provided with this project template. "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "* If you are new to JUnit, refer to the [JUnit Tutorial at se-education.org/guides](https://se-education.org/guides/tutorials/junit.html)."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "## Checkstyle"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "* A sample CheckStyle rule configuration is provided in this project."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* If you are new to Checkstyle, refer to the [Checkstyle Tutorial at se-education.org/guides](https://se-education.org/guides/tutorials/checkstyle.html)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "## CI using GitHub Actions"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "The project uses [GitHub actions](https://github.com/features/actions) for CI. When you push a commit to this repo or PR against it, GitHub actions will run automatically to build and verify the code as updated by the commit/PR."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "## Documentation"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "`/docs` folder contains a skeleton version of the project documentation."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "Steps for publishing documentation to the public: "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "1. If you are using this project template for an individual project, go your fork on GitHub.\u003cbr\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "   If you are using this project template for a team project, go to the team fork on GitHub."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "1. Click on the `settings` tab."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "1. Scroll down to the `GitHub Pages` section."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set the `source` as `master branch /docs folder`."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "1. Optionally, use the `choose a theme` button to choose a theme for your documentation."
      }
    ],
    "authorContributionMap": {
      "dorianfong98": 5,
      "-": 59
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    mainClassName \u003d \"seedu.duke.Duke\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "tasks.withType(JavaCompile) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    options.encoding \u003d \u0027UTF-8\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hughjazzman": 4,
      "sevenseasofbri": 1,
      "-": 46
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "layout : page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "title : About Us"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "![](https://avatars3.githubusercontent.com/u/57522870?s\u003d460\u0026u\u003d8dd180701edf230c1bd905ff0d49b81d40785e1a\u0026v\u003d4) | Vishruti Ranjan | [Github](https://github.com/sevenseasofbri) | [Portfolio](team/sevenseasofbri.md)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "![](https://avatars2.githubusercontent.com/u/53231968?s\u003d460\u0026u\u003d43fad5fee043173a5c65db833d39c9c00c04549c\u0026v\u003d4) | Wira Azmoon | [Github](https://github.com/hughjazzman) | [Portfolio](team/hughjazzman.md)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "![](https://avatars1.githubusercontent.com/u/37036833?s\u003d400\u0026u\u003d2c0e2ed51f01d354f32fb3efd9e51a56aa273e8f\u0026v\u003d4) | Praveen Elango | [Github](https://github.com/PraveenElango) | [Portfolio](team/praveenelango.md)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "![](https://avatars2.githubusercontent.com/u/47025155?s\u003d400\u0026u\u003dce782a0a69f128f7fb409598101baeef34fd201e\u0026v\u003d4) | Dorian Fong | [Github](https://github.com/dorianfong98) | [Portfolio](team/dorianfong98.md)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "![](https://avatars3.githubusercontent.com/u/60434719?v\u003d4) | Dash Abhishek | [Github](https://github.com/oasisbeatle) | [Portfolio](team/oasisbeatle.md)"
      }
    ],
    "authorContributionMap": {
      "dorianfong98": 1,
      "oasisbeatle": 1,
      "hughjazzman": 5,
      "sevenseasofbri": 1,
      "-": 3,
      "PraveenElango": 1
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "layout : page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "title : Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003cstyle\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ".alert {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    position:relative;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    padding:.75rem 1.25rem;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    margin-bottom:1rem;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    border:1px solid transparent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    order-radius:.25rem"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ".alert-primary {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    color:#073984;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    background-image:linear-gradient(180deg, #d6e6ff, #cfe2ff);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    border-color:#bbd6fe"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ".alert-warning {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\tcolor: #856404;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\tbackground-image: linear-gradient(180deg, #fff5d5, #fff3cd);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\tborder-color: #ffeeba"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003c/style\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "## How To Use This Guide"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "This **Developer Guide** aims to get developers familiarised with the design and implementation of **CLIrcuit Assistant**. The following table indicates the symbols used to aid the understanding of the guide. This guide also assumes that the reader has basic understanding of *UML Diagrams*. [To access the **User Guide** instead, click here.](UserGuide.md)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "| Symbol/Format | Meaning |"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "|:---------------:|:--------|"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "|:information_source:|An informational source.|"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "|:exclamation:|A warning.|"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "|**Bolded**|A keyword.|"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "|*Italicised*|Technical word.|"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "|[Hyperlinked](#)|Leads to the appropriate section.|"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "|`Code`|Text that appears on the CLI / in code.|"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "## Setting up, getting started"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "Refer to the guide [*Setting up and getting started*](SettingUp.md)."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "## Design Architecture (Wira) \u003ca name\u003d\"design\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "![ArchitectureDiagram](diagrams/ArchitectureDiagram.png)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "\u003csmall\u003e\u003ci\u003eFigure 1\u003c/i\u003e\u003c/small\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "The **Architecture Design** given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "**`Duke`** is the main class of the application, and handles the app launch, initializing the appropriate classes to be used."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "The rest of the app consists of three components."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "* [**`UI`**](#ui-component): The User Interface of the App."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "* [**`Logic`**](#logic-component): The command executor."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "* [**`Model`**](#model-component): Holds the data of the App in memory."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "### UI component"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "![UiDiagram](diagrams/UiClassDiagram.png)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "\u003csmall\u003e\u003ci\u003eFigure 2\u003c/i\u003e\u003c/small\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "The `Ui` component"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "* Reads user input as lines using `readLine()`."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "* Prints every `Command` object that is parsed using `printMessage()`."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "* Prints any user input error that might occur using `showError()`."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "* Does not depend on any of the other components."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "![UiSequence](diagrams/UiSequenceDiagram.png)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "\u003csmall\u003e\u003ci\u003eFigure 3\u003c/i\u003e\u003c/small\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "### Logic component"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "![LogicDiagram](diagrams/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "\u003csmall\u003e\u003ci\u003eFigure 4\u003c/i\u003e\u003c/small\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "1. `Logic` stores a current `Template` object in [`Model`](#model-component) that represents the current circuit configuration."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "1. `Logic` uses the `Parser` class to parse the user command."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "1. This results in a `Command` object which is executed in `Duke`."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "1. The command execution can affect the `Model` (e.g. setting a value)."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "In general, the creation of `Command` objects via `Parser` can be explained by the following sequence diagram, which acts as a reference frame for `getCommand`:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "![getCommand](diagrams/GetCommand.png)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003csmall\u003e\u003ci\u003eFigure 5\u003c/i\u003e\u003c/small\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "If the command does not use the reference frame, they would have their own sequence diagram to showcase the difference."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "### Model component"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "![ModelDiagram](diagrams/ModelClassDiagram.png)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003csmall\u003e\u003ci\u003eFigure 6\u003c/i\u003e\u003c/small\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "* includes `CircuitTemplate` and `BooleanTemplate` that can represent the current `template` in [`Logic`](#logic-component)."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "* has `Component` and `Gate` within the templates."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "* does not depend on any of the other two components."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "## Implementation of Circuit Commands (Dash) \u003ca name\u003d\"circ-comd\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "This section provides details on the implementation of the various electronic circuit commands."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "There are 4 different types of components of electronic circuits that can be instantiated in the program:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "* `Resistor` - A _resistor_ component."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "* `Capacitor` - A _capacitor_ component."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "* `Inductor` - An _inductor_ component."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "* `VoltageSource` - An _Alternating Current_ Voltage Source."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "Each component is used within a circuit template, based on the kind of circuit instantiated."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ":information_source: **Note:** The `VoltageSource` is instantiated in all Circuit Templates."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "There are four different circuit templates that can be instantiated in the program:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "* `LcTemplate` - Inductor-Capacitor Circuit Template"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "* `RTemplate` - Resistor Circuit Template"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "* `RcTemplate` - Resistor-Capacitor Template (extends `RTemplate`)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "* `LrTemplate` - Inductor-Resistor Template (extends `RTemplate`)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "![CircuitModelClass](diagrams/CircuitModelClassDiagram.png)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003csmall\u003e\u003ci\u003eFigure 7\u003c/i\u003e\u003c/small\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "The diagram above showcases the relationships between the various `Component` and `Template` objects."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "![CircuitCommandClass](diagrams/CircuitCommandClassDiagram.png)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003csmall\u003e\u003ci\u003eFigure 8\u003c/i\u003e\u003c/small\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "The diagram above demonstrates the relationship between the various `CircuitCommand` objects. The various commands to be parsed are as explained in this section. While the **User Guide** explains the commands used on the CLI, this section goes into detail the classes used to execute the commands. The command classes also make use of the classes in the [**`Model`**](#model-component) shown in the diagram below when executing the commands."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "For commands excluding `TemplateCircuitCommand`, the following sequence diagram will showcase how the `getComponent` reference frame occurs:"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "![getComponent](diagrams/GetComponent.png)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003csmall\u003e\u003ci\u003eFigure 9\u003c/i\u003e\u003c/small\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "### `TemplateCircuitCommand`  \u003ca name\u003d\"temp-circ\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "Given below is the sequence diagram for interactions within the `logic` and `template` components for the "
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "`parse(template rl)` API call that implements the `template` command to create templates."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "![TemplateSequence](diagrams/TemplateSequenceDiagram.png)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003csmall\u003e\u003ci\u003eFigure 10\u003c/i\u003e\u003c/small\u003e"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "### `SetCircuitCommand` \u003ca name\u003d\"set-circ\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `parse(\"set r 500\")` API call which implements the `set` command to set values of components."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "![SetSequence](diagrams/SetSequenceDiagram.png)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003csmall\u003e\u003ci\u003eFigure 11\u003c/i\u003e\u003c/small\u003e  "
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "### `AddCircuitCommand` \u003ca name\u003d\"add-circ\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "Given below is the detailed Sequence diagram for interactions within the `logic`, `template` and `component` components "
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "for the `parse(\"add parallel c 20\")` API call that implements the `add` command to add components."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "![AddSequence](diagrams/AddSequenceDiagram.png)"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003csmall\u003e\u003ci\u003eFigure 12\u003c/i\u003e\u003c/small\u003e  "
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "### `CalculateCircuitCommand` \u003ca name\u003d\"calc-circ\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "The calculate command can be split into two distinct sequence diagrams. Given below is the sequence diagram for the"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "calculate command that does not show the access of the `component` component and shows the interactions for the"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "`parse(\"calc power\")` API call that implements this version of the `calculate` command to calculate power.  "
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "![CalcPowerSequence](diagrams/CalcPowerSequenceDiagram.png)"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003csmall\u003e\u003ci\u003eFigure 13\u003c/i\u003e\u003c/small\u003e  "
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "The second sequence diagram given below shows the detailed interaction that accesses the `component` class through the"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "`parse(\"calc reff\")` API call that implements this version of the `calculate` command to calculate effective resistance."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "![CalcReffSequence](diagrams/CalcReffSequenceDiagram.png)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003csmall\u003e\u003ci\u003eFigure 14\u003c/i\u003e\u003c/small\u003e  "
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "### Implementation Considerations For Circuit Commands (Dash) \u003ca name\u003d\"impl-cons-dash\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "This section describes the methods taken into consideration while implementing the Circuit Commands."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "#### Rationale Behind The Implementation of Circuit Template \u003ca name\u003d\"rationale-circuit-dash\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "This section details the rationale for implementing the circuit template as described in the prior sections. Selecting a way to build circuits is the primary purpose of the system and hence a way to design the circuit is required. Since the system is designed primarily as a command line interface, creating complex customizable circuits using a graphical interface is beyond the scope of this system. To implement a circuit, four different `template` classes are used, which inherit from a superclass `template`. The four different templates are also presented as simple logos to show how the templates would look like as real life circuits. Furthermore, the function to add components to the circuit calculates the effective value with the components that are already present. For example when a resistor is added in parallel, the effective resistance of the aforementioned resistor is added to the effective resistance of the resistor already present in the circuit template. The two resistors are then replaced by one resistor with the same effective resistance. Similarly, other components are also added and abstracted into a single component of the matching component type."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "#### Alternatives Considered \u003ca name\u003d\"alt-circuit-dash\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "This section illustrates the alternatives considered for implementing the Circuit Template."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "* Linked List: A linked list implementation involves using each circuit component as a node and the connections between "
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "the nodes as wires. The head of the linked list is the voltage source and the a loop is present from the tail node "
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "number 2 (i.e index 1). However, such an approach does not allow users to simulate the circuit effectively so this "
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "approach is not followed. The circuit templates on the other hand not only allow the user to distinguish between "
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "different types of circuits but they also provide an efficient way of storing the various parameters related to a circuit."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "* Adjacency Matrix: The Adjacency matrix representation of a graph data structure is also considered as it allows connections between nodes."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": " Each node is a component and a matrix is derived where a 1 represents a connection between the row of that element and"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": " the column of the same element. This approach is rejected due to the GUI constraints required to print the adjacency matrix as a circuit"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": " and so templates are used to simplify this process."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "## Implementation of Boolean Commands (Praveen) \u003ca name\u003d\"bool-comd\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "![BooleanCommandClass](diagrams/BooleanCommandClassDiagram.png)"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003csmall\u003e\u003ci\u003eFigure 15\u003c/i\u003e\u003c/small\u003e"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "The second major feature of the application is the implementation of Boolean logic commands, of which various noteworthy implementation details are explained in this section. The above diagram demonstrates the relationships between the various `Command` objects. Notice the similarities to the [Circuit Commands in the earlier section](#implementation-of-circuit-commands-dash-)."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "There are six different logic gates that can be instantiated in the program, which can be seen in the diagram below:"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "![GateClass](diagrams/GateClassDiagram.png)"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003csmall\u003e\u003ci\u003eFigure 16\u003c/i\u003e\u003c/small\u003e"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "The next diagram then showcases the methods involved in the `BooleanTemplate` and `Gate` classes to work together:"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "![BooleanTemplateClass](diagrams/BooleanTemplateClassDiagram.png)"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003csmall\u003e\u003ci\u003eFigure 17\u003c/i\u003e\u003c/small\u003e"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "All gates can be first instantiated using the `Gate` class which has one `int input` and one `int output` as its attributes. "
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "It has `setInput(int input)` and `getOutput()` as its methods, which are used to set the input of the logic gate and get the output of the gate respectively. "
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "The six different logic gates take in two different inputs, which necessitates the need for a logic gate class to take in one more input."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "This can be achieved by instantiating the `TwoInputGate` class which inherits from the `Gate` class. It has an additional attribute `int secondInput`"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "to take in the additional input and a method `setSecondInput(int input)` to set the Boolean value of either `0 or 1` to the additional input."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "The six different logic gates then individually inherit from the `TwoInputGate` class where the return value of their `getOutput()` function depends"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "on the logic function of the gate itself. For instance, the `OrGate` which inherits from the `TwoInputGate` class has its `getOutput()` function set to `{return input | secondInput}`, "
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "which represents the `or` operation."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "An instance of an `OrGate` can be visualised as such in the following object diagram:"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "![InsertObjectDiagram](diagrams/OrGateObjectDiagram.png)"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003csmall\u003e\u003ci\u003eFigure 18\u003c/i\u003e\u003c/small\u003e"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "### `TemplateBooleanCommand` \u003ca name\u003d\"temp-bool\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "The `TemplateBooleanCommand` creates a Boolean template of any one of the six available logic gates. "
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "The sequence by which the `TemplateBooleanCommand` is instantiated is as follows using the user input `template and` who wants to instantiate an `and` logic template."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "1. The `Parser` object takes in a String that specifies the template type: in this case, it is an `and` Boolean template."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "2. The `and` Boolean template is then prepared through the `BooleanParser` object."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "3. The `and` Boolean template is instantiated using the `TemplateBooleanCommand`."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "The aforementioned sequence of events can be represented in the following sequence diagram:"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "![InsertClassDiagram](diagrams/TemplateBooleanCommand.png)"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003csmall\u003e\u003ci\u003eFigure 19\u003c/i\u003e\u003c/small\u003e"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "### `SetBooleanCommand` \u003ca name\u003d\"set-bool\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "The sequence of object interactions through the `SetBooleanCommand` can be represented in the following sequence diagram:"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "![InsertSequenceDiagram](diagrams/SetBooleanCommand.png)"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003csmall\u003e\u003ci\u003eFigure 20\u003c/i\u003e\u003c/small\u003e"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "### `AddBooleanCommand` \u003ca name\u003d\"add-bool\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "The `AddBooleanCommand` is used to combine multiple logic gate templates to produce advanced Boolean logic gate configurations."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "For instance, an `OrGate` can be combined with an `AndGate` to produce a new logic configuration where its final output will depend on the"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "Boolean values assigned to the `OrGate` and `AndGate`. This gate configuration can undergo further addition operations by `AddBooleanCommand` to "
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "combine another logic gate, such as `XorGate`. "
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "The sequence by which the `AddBooleanCommand` is instantiated to combine the logic gates is as follows:"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "1. The `AddBooleanCommand` object calls on the `addGate` method in the instantiated `BooleanTemplate`."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "2. This will access the index of the `BinaryTree` object in the `BooleanTemplate` to store the newly added gate to the configuration."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "The aforementioned sequence of events can be represented in the following sequence diagram:"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "![InsertSequeunceDiagram](diagrams/AddBooleanCommand.png)"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003csmall\u003e\u003ci\u003eFigure 21\u003c/i\u003e\u003c/small\u003e"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "### `CalculateBooleanCommand` \u003ca name\u003d\"calc-bool\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "The `CalculateBooleanCommand` is used to calculate the effective output of the configured logic gates stored in the `BinaryTree`, which requires that all inputs be set."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "For instance, in a `BinaryTree` object with just two gates - `OrGate` and `AndGate` - all the inputs of the gates have to be assigned before the effective output of both the logic gates (`Input C`) can "
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "be calculated."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "The sequence by which the `CalcBooleanCommand` is instantiated is as follows:"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "![InsertSequenceDiagram](diagrams/CalcBooleanCommand.png)"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003csmall\u003e\u003ci\u003eFigure 22\u003c/i\u003e\u003c/small\u003e"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "The `checkIndex` and `setIndex` reference frames are also shown below. Note that `setIndex` possibly contains recursive `calculateOutput()` calls."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "![CheckIndex](diagrams/CheckIndexSequence.png)"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003csmall\u003e\u003ci\u003eFigure 23 (Wira)\u003c/i\u003e\u003c/small\u003e"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "![SetIndex](diagrams/SetIndexSequence.png)"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003csmall\u003e\u003ci\u003eFigure 24 (Wira)\u003c/i\u003e\u003c/small\u003e"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "### Implementation Considerations For Boolean Commands (Vishruti) \u003ca name \u003d \"impl-cons\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "This section describes the methods taken into consideration whilst implementing the Boolean Commands."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "#### Rationale Behind Using Binary Heap-Like Data Structure \u003ca name\u003d\"rationale-bool\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "Selecting the appropriate data structure for emulating a logic circuit is an important aspect to consider whilst"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "building such a system. The following table depicts the properties of a Binary Heap-Like structure mapped to the "
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "application\u0027s requirements."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "| Requirements | Property of Binary Heap |"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "|:----------:|:-------------:|"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "| Connects different gates together | A binary-heap, being a type of binary tree, is a _connected graph_. |"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "| Easily stored | Can be stored in simple contiguous memory like an Array/ArrayList |"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "| Easy to print | Nodes stored in an array, rather than a graph-like structure |"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "| Inputs can be easily manipulated | Manipulating augmented values involves a simple _O(1)_ operation. |"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "| Emulate 2-input logic circuit | Being a binary tree, each node can have atmost 2 children, thus recreating a 2-Input Logic Gate |"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "Therefore, since the Binary Heap-Like data structure best-fits the requirements for the system, the data structure was selected to"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "implement the logic circuit."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "#### Alternatives Considered"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "The preceding section detailed on the rationale behind choosing the data structure used to emulate the Logic Circuit. "
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "This section details on the alternative mechanisms considered for the system and why they would not be viable:"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "* Simple Binary Tree: In essence, a Binary-Heap is a special kind of Binary Tree. However, it is not efficient to store"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "a Binary Tree in a contiguous memory location such as an Array/ArrayList. Thereby,"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    1. Increasing complexity of storage."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    2. Increasing difficulty of manipulating circuit at certain position."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "* Graph With Depth First Search: Using a graph means dealing with a more complex structure due to the lack of"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "restrictions on the number of child-nodes a node can have. Thereby,"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    1. Extra considerations/checks for emulating 2-input logic circuit."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    2. Extra checks to test if graph is connected and circuit is complete."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "Due to the limitations mentioned above, the Binary Heap-Like data structure was considered to be the best method of approach."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "### Binary Tree"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "The previous section described the rationale behind using a special Binary Tree-like structure (Heap) for implementing the"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "Boolean Commands. This section provides details on *how* the logic circuit is modeled using the selected data structure. "
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "The Boolean `add`, `set` and `calculate` features are modeled using a generic `BinaryTree\u003cT\u003e` class. The `BooleanTemplate` imports this class to store and evaluate the logic circuit. "
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "The elements of the tree are stored in a fixed `ArrayList` (size \u003d 15) indexed in a _heap-like_ manner. That is, a left to right _level-order traversal_ will map to the indexes of the array. The following diagram represents the indexes each node in the tree corresponds to in the `ArrayList`."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "```"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "                  [0]"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "                   |     "
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "       [1]                    [2]"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "                     "
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "  [3]       [4]         [5]         [6]"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "                      "
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "[7] [8]   [9] [10]   [11] [12]   [13] [14]"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "```"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "The operations exposed to the `Logic` in this `Model` include: "
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "* `BinaryTree#isNullAtIndex(int)` - Checks whether the value at specified index in tree is `null` or not."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "* `BinaryTree#getParentIndex(int)` - Returns index of parent node."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "* `BinaryTree#insert(int, T)` - Inserts value at position specified in the tree, if valid."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "* `BinaryTree#isLeaf(int)` - Returns Boolean based on whether node at specified index is a _leaf node_ or not."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "* `BinaryTree#isEmpty()` - Checks if the tree has no elements in it."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "When an object of the `BinaryTree\u003cT\u003e` class is created, it initialises the `ArrayList\u003cT\u003e` instance to 15 `null` values. This will be further discussed in the section detailing the `insert()` function."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "#### Initialising A `BinaryTree\u003cT\u003e` Object"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "The `Logic` initialises the `BinaryTree\u003cGate\u003e` object using the parameterised constructor, thus specifying the `Gate` class type root. The object diagram below depicts the initial state of the `Model` when a `BinaryTree\u003cGate\u003e` object is created."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "![InitialBinaryTree](diagrams/BinaryTreeInitialObjectDiagram.png)"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003csmall\u003e\u003ci\u003eFigure 25\u003c/i\u003e\u003c/small\u003e"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "The Logic uses the parameterised constructor of `BinaryTree\u003cT\u003e` to create the object since it requires initialisation of"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "the root. Such an object is created as follows: `BinaryTree\u003cGate\u003e obj \u003d new BinaryTree(new OrGate(1,1))`. This sets the root of the Binary Tree to the object specified."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "#### Using `BinaryTree#isNullAtIndex(int)`"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "`BooleanTemplate` uses this function to render the current configuration of the circuit in a String format. The method"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "is also extensively used in other internal operations in `BinaryTree\u003cT\u003e` for checking whether a position in the tree has been set or not."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "#### Using `BinaryTree#getParentIndex(int, T)`"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "Similar to `isNullAtIndex(int)`, this method is used in rendering the current configuration of the circuit in String format."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "#### Using `BinaryTree#insert(int, T)`"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "In order to enable the ability to populate the `ArrayList\u003cT\u003e` at any node which has a non-null parent node"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "the `ArrayList\u003cT\u003e arrayList` attribute is pre-populated with 15 `null` values. The same attribute is modified in the insert()"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "operation in the list. Since `insert(int, T)` makes use of `ArrayList\u003cT\u003e.set(int, T)`, values in `arrayList` can be overwritten with this function."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "The following sequence diagram is a depiction of the events succeeding a call to `insert(1, new AndGate(1,1))`. "
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "![InsertSequenceDiagram](diagrams/BinaryTreeInsertSequenceDiagram.png)"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003csmall\u003e\u003ci\u003eFigure 26\u003c/i\u003e\u003c/small\u003e"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "Post calling this function, the second element in the `arrayList` will be the `AndGate(1,1)` object."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "#### Using `BinaryTree#isLeaf(int)`"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "This function is used by the Logic class `BooleanTemplate` to calculate output values in the digital circuit. It "
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "returns whether the node at the input index is a leaf node or not."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "The following sequence diagram is a depiction of the events succeeding a call to `isLeaf(1)`on the current `arrayList`:"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "![IsLeafSequenceDiagram](diagrams/BinaryTreeIsLeafSequence.png)"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003csmall\u003e\u003ci\u003eFigure 27\u003c/i\u003e\u003c/small\u003e"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "#### Using `BinaryTree#isEmpty`"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "This is used by `BooleanTemplate` to ensure no calculations are being performed on an empty tree."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "The following sequence diagram showcases the events succeeding a call to `isEmpty()` on the current object of the `BinaryTree\u003cGate\u003e` "
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "![IsEmptySequenceDiagram](diagrams/BinaryTreeIsEmptySequenceDiagram.png)"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003csmall\u003e\u003ci\u003eFigure 28\u003c/i\u003e\u003c/small\u003e"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": " "
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "### Rendering Current Boolean Circuit State"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "Using a _standard I/O operation_ (Like _Sopln()_) on an object of the `BooleanTemplate` class yields the current configuration"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "of the system."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "Each node of the system is represented by a signal ranging from B to O (OUT being the root). All nodes with `null` parent nodes are"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "not shown in the diagram. The following diagram depicts a tree wherein no parent nodes are `null`:"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "```"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "              0UT"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "               |     "
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "      B                  C"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "                     "
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "  D       E         F         G"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "                      "
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "H  I     J  K      L  M      N  O"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "```"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "## Appendix: Requirements (Dorian)"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "This section details the various requirements that the project needs to fulfil."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "### Product scope"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "#### Target user profile"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "  "
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "New Computer/Electrical Engineering (CEG/EE) students who are looking for a quick way to check calculations for simple circuit configurations can use this App as an aid."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "#### Value proposition"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "**CLIrcuit Assistant** solves three problems:"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "1. Lack of access to simple circuit computation - the App quickly computes the required circuit\u0027s values."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "1. Doing labs at home because of remote learning - the App provides a quick visualisation tool for the student."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "1. Online alternatives require internet access, and some sites are slow to load with many resources needed - the App is an offline desktop application with minimal resources."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "### User Stories (Wira)"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": "|Version| As a ... | I want to ... | So that I can ...|"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "|--------|----------|---------------|------------------|"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "|v1.0|new CEG/EE Student |solve electronic/logic circuits through an Interactive Tutorial|get used to using a command line whilst simultaneously learning about circuits and apply the concepts in modules such as CG1111|"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "|v1.0|new CEG/EE Student|create template circuits using common components such as Resistors, Capacitors, Inductors|visualise and calculate values for common circuit configurations |"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "|v1.0|new CEG/EE Student | change values assigned to the components| obtain different calculations quickly|"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "|v1.0|new CEG/EE Student|add components arranged in either series or parallel|obtain my configuration for analysis|"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "|v1.0|new CEG/EE Student |calculate/verify my calculations of effective resistance, total capacitance, etc.|quickly and accurately do so via CLI, and not 3rd party software that I have to install/load online|"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "|v2.0|CEG/EE Student|compute a Boolean logical expression|familiarise myself with logical computation used in digital circuits|"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "|v2.0|CEG/EE Student|create a template Boolean logic gate to connect more gates to|build a logical circuit|"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "|v2.0|CEG/EE Student|add logic gates to configure a Boolean logic circuit|create my own configuration of logic gates"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "|v2.0|CEG/EE Student|set input values to the logic gate configuration|analyse inputs and outputs of a configuration"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "|v3.0|CEG/EE Student|print the current template I am working on|find out my current configuration and make a decision"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "### Storage (Wira)"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "While many other applications under CS2113 implement a storage feature, our app does not include one in the current implementation at v2.1 with the following rationale:"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "* The focus is on the representation of template circuits and how the users would interact with them. Obtaining the circuit configuration from the user\u0027s side is an easy process and therefore it would not be necessary for a user to store the circuits for future reference."
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "* The application is, in a sense, equivalent to a calculator. It aims to assist the user in performing quick circuit calculations."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "* [Constraints involved](https://nus-cs2113-ay2021s1.github.io/website/admin/tp-constraints.html) include requiring the storage file to be human editable. Since there is no data file to break the constraint, the constraint is fulfiled."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "It is perhaps possible for a future iteration (v3.0 onwards) to implement the feature, but it was not considered an important feature according to our **User Stories**."
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "### Non-Functional Requirements (Dorian)"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "1. Should work on any *mainstream OS* as long as it has Java 11 or above installed."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "2. The average user profile is assumed to be someone who possesses *at least a basic understanding of the fundamental concepts of digital circuits, its components, and Boolean logic computation* (concepts covered in CG1111, CS1231 and EE2026)."
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "3. A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "## Glossary (Vishruti)"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "The terms listed in this glossary are in alphabetical order."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "Term | Explanation"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "-|-"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": " *Alternating Current* | Alternating current (AC) is an electric current which periodically reverses direction and changes its magnitude continuously with time."
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": " *AND* | Also known as conjunction, AND is a basic operation in boolean algebra which may be denoted as x AND y. \u003cbr\u003eThe truth value of the operation will result in 1 (TRUE) if both x \u003d\u003d 1 and y \u003d\u003d 1, and 0 for other combinations of values. "
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": " *Average Typing Speed* | An average typing speed is [40 words per minute](https://www.livechat.com/typing-speed-test/#/)."
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": " *Binary Tree* | A data structure wherein each node has maximum 2 child nodes, which are called the left and right node."
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": " *Capacitor* | A passive electronic device with 2 terminals that stores electrical energy in an electric field."
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": " *CG1111* | Engineering Principles and Practices I, a core module generally taken by Year 1 Computer Engineering students at NUS."
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": " *Connected Graph* | A graph in which it is possible to get to every node in the graph through a series of edges."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": " *CS1231* | Discrete Mathematics, a core module generally taken by Year 1 School of Computing students at NUS."
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": " *Digital Circuits* | A circuit wherein the signal must be one of 2 discrete logic levels - 1 or 0."
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": " *EE2026* | Digital Design, a core module generally taken by Year 1 students in Electrical and Computer Engineering at NUS."
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": " *Graph* | A data structure which consists of a finite set of nodes and a finite set of edges connecting them."
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": " *Heap* | A tree based data structure where all the nodes are stored in a certain order."
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": " *Inductor* | A passive electronic device with 2 terminals that stores electrical energy in a magnetic field."
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": " *Leaf Node* | A node in a binary tree data structure whose left and right children are null."
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": " Term | Explanation"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "-|-"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": " *Level Order Traversal* | A method of processing all nodes in a tree data structure by depth (level-by-level)."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": " *Logic Gate* | A virtual/physical electronic device which performs a boolean function. Usually has 2 inputs and 1 output."
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": " *Mainstream OS* | For example Microsoft Windows, macOS, Unix, Linux etc."
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": " *NAND* | An inverse of the AND operation. Outputs are the opposite of what an AND gate would output for a set of input values."
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": " *Node* | A binary tree is made up of nodes, each which have a left and right reference, as well as hold data."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": " *NOR* | An inverse of the OR operation. Outputs the opposite truth value of what an OR gate would output. "
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": " *O(1)* | An algorithm or a computational operation that is said to take constant time, irrespective of the size of input."
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": " *OR* | Also known as disjunction, OR is a basic operation in boolean algebra which may be denoted as x OR y. \u003cbr\u003e The truth value of the operation will result in 1 (TRUE) if either x \u003d\u003d 1 or y \u003d\u003d 1, and 0 if both x and y are 0. "
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": " *Parent Node* | A node in a binary tree data structure which has one or more child nodes."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": " *Resistor* | A passive electronic device which implements electrical resistance in an electronic circuit."
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": " *Sopln()* | Abbreviation for java out operation \"`System.out.println()`\", from package `java.lang`."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": " *Standard I/O Operation* | Common java I/O streams include `System.in`, `System.out` and `System.err`."
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": " *XNOR* | An inverse of the XOR operation. Outputs the opposite truth value of what a XOR gate would output."
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": " *XOR* | Also known as exclusive OR, XOR is a secondary operation in boolean algebra which may be denoted as x XOR y. \u003cbr\u003e The truth value of the operation will result in 1 (TRUE) if only one of x \u003d\u003d 1 or y \u003d\u003d 1, and 0  for other combinations of values."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": " -------------------------------------------------------------------------------------------------------------------- "
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "## Appendix: Instructions for manual testing (Dorian)"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "### Initial launch  "
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "1. Download the jar file and copy it into an empty folder"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "2. Open a new terminal window and navigate to the same directory where your `CS2113T-W13-3.CLIRCUIT_ASSISTANT.jar` is located"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "3. Enter the command `java -jar CS2113T-W13-3.CLIRCUIT_ASSISTANT.jar` into the terminal window to launch the application"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "4. Enter `tutorial circuit` or `tutorial boolean` to go through an [interactive tutorial](UserGuide.md/#52-interactive-tutorial) or `summary` to generate a summary of all the commands"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "### Creating a digital circuit  "
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "1. Enter `template` followed by the template type, e.g.: `template rc`"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "There are four templates to choose from: `r`,`rc`,`rl`,`lc`. "
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "2. Enter `set` followed by the component type to set the component value, e.g.: `set r 500`"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "The four types of components are: `r`,`c`,`l`,`v`. Note that the value inputted can be an integer or float"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "3. Enter `add` followed by the configuration, component , and component value to add a component e.g.:`add parallel c 500`"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "### Creating a logic gate "
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "Similar to the creation of a digital circuit, we create a `template`, `set` values, and can `add` values."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "For the detailed steps, visit [Boolean Action Commands](https://ay2021s1-cs2113t-w13-3.github.io/tp/UserGuide.html#7-boolean-action-commands)."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "### Calculating values"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "For calculation of values, the `calc` command is used."
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "The following links provide detailed steps for calculations for the respective section:"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "* [Circuits](https://ay2021s1-cs2113t-w13-3.github.io/tp/UserGuide.html#64-calculating-effective-value-)"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "* [Boolean](https://ay2021s1-cs2113t-w13-3.github.io/tp/UserGuide.html#74-calculating-output-) "
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "### Exiting the program"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "Simply enter `bye` to exit the program and bid farewell to your loyal **CLIrcuit Assistant**."
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "### Logging"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "When the application is run, a log file `appLog.txt` is created in the same directory the application was run from. This file can be used to keep track of the events that are taking place in the application. This can be useful when trying to troubleshoot any system errors, crashes, or bugs and can possibly be attached to any bug report that may be submitted for the application."
      }
    ],
    "authorContributionMap": {
      "dorianfong98": 24,
      "oasisbeatle": 36,
      "hughjazzman": 382,
      "sevenseasofbri": 158,
      "-": 28,
      "PraveenElango": 3
    }
  },
  {
    "path": "docs/SettingUp.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "layout : page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "title : Duke Project Template"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "Prerequisites: JDK 11 (use the exact version), update Intellij to the most recent version."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "1. **Configure Intellij for JDK 11**, as described [here](https://se-education.org/guides/tutorials/intellijJdk.html)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "1. **Import the project _as a Gradle project_**, as described [here](https://se-education.org/guides/tutorials/intellijImportGradleProject.html)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "1. **Verify the set up**: After the importing is complete, locate the `src/main/java/seedu/duke/Duke.java` file, right-click it, and choose `Run Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "   \u003e Task :compileJava"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "   \u003e Task :processResources NO-SOURCE"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "   \u003e Task :classes"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "   "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "   \u003e Task :Duke.main()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "   Hello! Type \u0027start\u0027 to start the CLIrcuit Assistant"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "   Type `start` and press enter to let the execution proceed to the end."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "## Build automation using Gradle"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "* This project uses Gradle for build automation and dependency management. It includes a basic build script as well (i.e. the `build.gradle` file)."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "* If you are new to Gradle, refer to the [Gradle Tutorial at se-education.org/guides](https://se-education.org/guides/tutorials/gradle.html)."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "## Testing"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "### I/O redirection tests"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "* To run _I/O redirection_ tests (aka _Text UI tests_), navigate to the `text-ui-test` and run the `runtest(.bat/.sh)` script."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "### JUnit tests"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "* A skeleton JUnit test (`src/test/java/seedu/duke/DukeTest.java`) is provided with this project template. "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "* If you are new to JUnit, refer to the [JUnit Tutorial at se-education.org/guides](https://se-education.org/guides/tutorials/junit.html)."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "## Checkstyle"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "* A sample CheckStyle rule configuration is provided in this project."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "* If you are new to Checkstyle, refer to the [Checkstyle Tutorial at se-education.org/guides](https://se-education.org/guides/tutorials/checkstyle.html)."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "## CI using GitHub Actions"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "The project uses [GitHub actions](https://github.com/features/actions) for CI. When you push a commit to this repo or PR against it, GitHub actions will run automatically to build and verify the code as updated by the commit/PR."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "## Documentation"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "`/docs` folder contains a skeleton version of the project documentation."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "Steps for publishing documentation to the public: "
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "1. If you are using this project template for an individual project, go your fork on GitHub.\u003cbr\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "   If you are using this project template for a team project, go to the team fork on GitHub."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "1. Click on the `settings` tab."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "1. Scroll down to the `GitHub Pages` section."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "1. Set the `source` as `master branch /docs folder`."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "1. Optionally, use the `choose a theme` button to choose a theme for your documentation."
      }
    ],
    "authorContributionMap": {
      "dorianfong98": 54,
      "hughjazzman": 6
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "layout : page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "title : User Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003cstyle\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ".alert {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    position:relative;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    padding:.75rem 1.25rem;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    margin-bottom:1rem;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    border:1px solid transparent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    order-radius:.25rem"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ".alert-primary {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    color:#073984;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    background-image:linear-gradient(180deg, #d6e6ff, #cfe2ff);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    border-color:#bbd6fe"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ".alert-warning {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\tcolor: #856404;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\tbackground-image: linear-gradient(180deg, #fff5d5, #fff3cd);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\tborder-color: #ffeeba"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ".alert-tip {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    color: #000000;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\tbackground-image: linear-gradient(180deg, #DCECDC, #DCECDC);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\tborder-color: #DCDCDC"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003c/style\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "## 1. How To Use This Guide"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "This **User Guide** aims to help you get familiarised with the commands used in this *Command Line Interface* (CLI) application. The following table indicates the symbols used to aid the understanding of the guide. The end of this **User Guide** also gives a [summary of commands](#9-command-summary) used in the application."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "| Symbol/Format | Meaning |"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "|:---------------:|:--------|"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "|:information_source:|An informational source.|"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "|:exclamation:|A warning.|"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "|:bulb:|A tip.|"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "|**Bolded**|A keyword.|"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "|*Italicised*|Technical word.|"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "|[Hyperlinked](#)|Leads to the appropriate section.|"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "|`Code`|Text that appears on the CLI / in code.|"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "## 2. Introduction"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "**CLIrcuit Assistant** is a desktop app designed to implement and solve simple **circuits** and **logic gate configurations**, optimized for use via the *CLI*. The application is targeted at those who would prefer using a resource-light and offline program to aid in analysing circuits. "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "In its current implementation, this application has no storage feature. More information on this can be found in the [**Developer Guide**](DeveloperGuide.md#storage-wira)."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ":information_source: **Note:**  This application has no storage feature."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "## 3. Quick Start"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "The following section will explain the steps taken to get **CLIrcuit Assistant** running on your computer."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure that you have Java 11 or above installed."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "1. Download the latest version of `CLIrcuit Assistant` from [the releases](https://github.com/AY2021S1-CS2113T-W13-3/tp/releases)."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "1. Double click the `jar` file to start the application. "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    1. If the above step does not open the app, then open your *terminal* and make sure you are in the folder with the `jar` file. "
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    1. Type the following command: "
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        ```"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        java -jar CS2113T-W13-3.CLIRCUIT_ASSISTANT.jar"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        ```"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "1. Once the app starts, type a command in the command line and press enter to execute it."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "1. Use the command `tutorial circuit` or `tutorial boolean` to go through an [interactive tutorial](#52-interactive-tutorial) before using the application."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "1. Alternatively, you can use the command [`summary`](#51-summary-of-commands-) to get a list of all commands used in the application."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "1. Note that a *logging* file `appLog.txt` will be created in the same directory that `CS2113T-W13-3.CLIRCUIT_ASSISTANT.jar` is run from. For further information regarding *logging*, you can refer to the [**Developer Guide**](DeveloperGuide.md#logging)."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "## 4. Command Preface"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "![Command](diagrams/CommandUserDiagram.png)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003ccenter\u003e\u003csmall\u003e\u003ci\u003eFigure 1\u003c/i\u003e\u003c/small\u003e\u003c/center\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "The diagram above shows the hierarchy of the types of commands in the application. [If you are looking for the summary of commands used within the CLI app, it can be found at the end of this guide](#9-command-summary). In this **User Guide**, you can find the following sections as listed below:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "* [General Commands](#5-general-commands)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "* [Circuit Action Commands](#6-circuit-action-commands)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "* [Boolean Action Commands](#7-boolean-action-commands)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "General commands are commands which are not specific to features available using the action commands."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "Action commands are split into **two categories** - `circuit` and `boolean`. They may use the same *syntax* for some commands, but the application will continuously track the current `template` that is being worked on and automatically use the correct command to execute. Thus, if there is no current `template`, then the other commands used will not be available to run."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ":information_source: **Note:** The `template` command is essential."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "The commands usable in both categories are:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "* `template`"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "* `set`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "* `add`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "* `calc`"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "The format required for the commands are as follows:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ":information_source: **Note:**  Words in `UPPER_CASE` are parameters."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ":information_source: **Note:**  Given a command parsed to require *n* arguments, any argument after the *n*th argument will be ignored."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "## 5. General Commands"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "This section details the generic commands that can be used. These commands assist you in finding out **generic information** regarding the application."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "### 5.1 Summary of Commands \u003ca name\u003d\"summary\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "This command prints a summary of all commands in the application as shown in [Command Summary](#9-command-summary)."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "| Command Format | "
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "|:-:|"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "|`summary`|"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "The image below shows the expected summary tables where the first table lists the commands and the second table"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "lists all the parameters for the commands. This is as shown with the command `summary`."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "![Summary](diagrams/SummaryCommand.png)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003csmall\u003e\u003ci\u003eFigure 2\u003c/i\u003e\u003c/small\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "### 5.2 Interactive Tutorial"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "To aid the user, this command starts the interactive tutorial for either the [Circuit Action Commands](#6-circuit-action-commands) or [Boolean Action Commands](#7-boolean-action-commands) based on the parameter specified. "
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "| Command Format | "
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "|:-:|"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "|`tutorial TYPE`|"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "* `TYPE` can be either `circuit` or `boolean`."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "Once you have entered the interactive tutorial, you are to follow the instructions provided to you as follows:"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "![InsertImage](diagrams/TutorialMode.png)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003csmall\u003e\u003ci\u003eFigure 3\u003c/i\u003e\u003c/small\u003e"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "The proceeding instructions will depend on whether you have chosen `tutorial circuit` or `tutorial boolean`."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "When you have entered the tutorial, you will be required to type in the commands in the terminal"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "for each step of the tutorial as per the instructions given to them. "
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "You will be required to do this until you have"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "reached the end of the tutorial."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "When you have typed in a command that is inconsistent with what is required as per the tutorial\u0027s"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "instruction for that particular step, an invalid command message will be returned until you type "
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "in the correct command in the terminal line as shown below."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "![InsertImage](diagrams/BadCommand.png)"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003csmall\u003e\u003ci\u003eFigure 4\u003c/i\u003e\u003c/small\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "You may also choose to exit the tutorial at that point of "
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "time instead by entering `exit`. However, it is recommended that you go through the entire tutorial"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "for both circuit and boolean tutorials at least once to familiarize yourself with the basic commands and how they work."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "### 5.3 Exiting the Application"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "This command can be used to exit the application."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "| Command Format | "
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "|:-:|"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "|`bye`|"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ":exclamation: **Warning:** You **cannot** use this command to exit from the app when in interactive tutorial mode. For notes on how to exit tutorial mode, please refer to [5.2 Interactive Tutorial](#52-interactive-tutorial)."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "The following diagram shows the expected behaviour when using the `bye` command."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "![ByeCommand](diagrams/ByeCommand.png)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003csmall\u003e\u003ci\u003eFigure 5\u003c/i\u003e\u003c/small\u003e"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "## 6. Circuit Action Commands "
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "This section details how the commands are used with a **circuit template**. You can use this section to build simple template circuits which may have a *voltage source* with *load components* such as *resistors*, *capacitors*, or *inductors*. "
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "It may be important to note that the circuit diagrams shown in the expected outputs are simplified circuits, even when [adding components](#63-adding-a-component-). For example, adding a resistor in parallel to a template that contains a resistor will change the effective resistance in the circuit, but it will not dynamically update the visualised diagram to show a second resistor. This can be seen more clearly once you [create a circuit template](#61-creating-a-circuit-template-)."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ":information_source: **Note:**  With the limited time and GUI constraints, there is no dynamic visualisation update for the circuits."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "### 6.1 Creating a circuit template \u003ca name\u003d\"template-circ\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "This command creates a circuit template. This command must be used to be able to use the `set`, `add`, `calc` commands since those commands must be done on an existing `template`."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "| Command Format | "
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "|:-:|"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "|`template TEMPLATE`|"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "* The `TEMPLATE` can be chosen from the following 4:"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    * `r` only consists of the resistor."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    * `rc` consists of the resistor and capacitor."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    * `rl` consists of the resistor and inductor."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    * `lc` consists of the inductor and capacitor."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "The diagram below shows an example when using the `template rc` command."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "![Simplified](diagrams/SimplifiedCircuit.png)"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003csmall\u003e\u003ci\u003eFigure 6\u003c/i\u003e\u003c/small\u003e"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "### 6.2 Setting a component value \u003ca name\u003d\u0027set-comp\u0027\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "This command sets the value of a component. The component must be part of the current circuit template. Units correspond to the component involved - *resistors* in *ohms*, *capacitors* in *microfarads*, and *inductors* in *microhenries*. The values would need to be set to perform calculations or analysis such as in the [`calc` command](#64-calculating-effective-value-)."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ":exclamation: **Warning:** You cannot set a component not present in the current working template."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "| Command Format | "
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "|:-:|"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "|`set COMPONENT VALUE`|"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "* The `COMPONENT` can be chosen from the following 4, but only if they are part of the template:"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    * `r` represents a resistor"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    * `c` represents a capacitor"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    * `l` represents an inductor"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    * `v` represents a voltage source"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "* The `VALUE` can be an integer of a float, of which the units depends on the component being set."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "The image below shows an example of using the command `set r 500` on the template shown."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "![SetCircuit](diagrams/SetCircuitLabel.png)"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003csmall\u003e\u003ci\u003eFigure 7\u003c/i\u003e\u003c/small\u003e"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "### 6.3 Adding a component \u003ca name\u003d\"add-comp\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "This command adds a component in a specific configuration - either *in parallel* or *in series* - to the current circuit template. This allows you to quickly obtain calculations to your chosen configurations. Only *load components* can be added - you cannot add a *voltage source*. You should only add a component after it has already been set."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-tip\"\u003e"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ":bulb: **Tip:**  You can add components as long as there is already a value set using the [`set` command](#62-setting-a-component-value-)."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ":exclamation: **Warning:** You cannot add a component not present in the current working template."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ":exclamation: **Warning:** You cannot add a new *voltage source* `v` to any template."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "| Command Format | "
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "|:-:|"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "|`add CONFIG COMPONENT VALUE`|"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "* The `CONFIG` can be chosen from the 2 - `series` and `parallel`."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "* The `COMPONENT` and `VALUE` are as explained above under [Set component value](#62-setting-a-component-value-), except that `COMPONENT` cannot be the voltage source `v`."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "The image below shows an example of using the command `add parallel r 500` on a template."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "![AddCircuit](diagrams/AddCircuitLabel.png)"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003csmall\u003e\u003ci\u003eFigure 8\u003c/i\u003e\u003c/small\u003e"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "### 6.4 Calculating Effective Value \u003ca name\u003d\"calc-circ\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "This command calculates the various effective values based on the `template` configuration. While calculating `reff`, `ceff`, or `leff`, the component must be part of the current circuit template. You can quickly obtain the various values detailed below after setting the necessary components."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ":exclamation: **Warning:** You cannot calculate the value of a component not present in the current working template."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ":information_source: **Note:**  If a component is not yet set, its effective value, as well as the *current* and *power* flowing through the power supply, will default to 0."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "| Command Format | "
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "|:-:|"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "|`calc EFF_VALUE`|"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "* The `EFF_VALUE` can be chosen from the following 5:"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    * `reff` is the effective resistance"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    * `ceff` is the effective capacitance"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    * `leff` is the effective inductance"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    * `current` is the current flowing through the power supply"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    * `power` is the power supplied by the power supply"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "The image below is an example of when the `calc power` command is entered."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "![CalcCircuit](diagrams/CircutiCalc.png)"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003csmall\u003e\u003ci\u003eFigure 9\u003c/i\u003e\u003c/small\u003e"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "## 7. Boolean Action Commands"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "This section details how the commands are used with a **boolean template**. You can use this section to build simple logic circuits which may be made up of various *gates* such as `AND`, `OR`, and `XOR` *gates*."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "### 7.1 Creating a boolean template \u003ca name\u003d\u0027template-logic\u0027\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "This command creates a boolean template. Similar to the [circuit template](#6-circuit-action-commands), this command must be used to be able to use the `set`, `add`, `calc` commands since those commands must be done on an existing `template`."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ":information_source: **Note:**  In all expected outcomes, `?` denotes an input that is not yet set."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "| Command Format | "
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "|:-:|"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "|`template GATE`|"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "* The `GATE` can be chosen from the following:"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    * `and`, `or`, `xor`, `nand`, `nor`, `xnor`"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "The image below shows an example when using the `template and` command."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "![Simplified](diagrams/TemplateBooleanAnd.png)"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003csmall\u003e\u003ci\u003eFigure 10\u003c/i\u003e\u003c/small\u003e"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "Here, `OUT` represents the output of the boolean template. The letters `B` and `C` can correspond to `INPUT` which is used in the following section. `?` represents an `INPUT` which is not yet set."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "### 7.2 Setting an input value \u003ca name\u003d\u0027set-input\u0027\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "This command sets the value of an input. The inputs will then be used in the [`calc` command](#74-calculating-output-) to give the output of the boolean template. The input must not have already been set as a `Gate` and must be part of the diagram."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-tip\"\u003e"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ":bulb: **Tip:**  You don\u0027t need to worry whether your inputs are lower case or upper case - both are recognised by the application."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ":exclamation: **Warning:** The `INPUT` must exist in the diagram, and must not have already been set as a `Gate`."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "| Command Format | "
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "|:-:|"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "|`set INPUT VALUE`|"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "* The `INPUT` can be chosen only from letters seen in the current `template`."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "* The `VALUE` can be any *integer*, but any valid non-zero *integer* will be treated as `1`, while 0 is treated as `0`. Valid *integers* are defined as the *Java* `int` type."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "The image below shows an example of using the command `set B 0` on the template shown."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "![SetBoolean](diagrams/SetBooleanLabel.png)"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003csmall\u003e\u003ci\u003eFigure 11\u003c/i\u003e\u003c/small\u003e"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "### 7.3 Adding a Gate \u003ca name\u003d\"add-gate\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "The application has the ability to combine multiple `Gate` objects to generate more complicated boolean *logic gate* configurations. This command allows you to set an input to a boolean logic `Gate`. You can also change an existing gate if needed, except for the *root* `Gate`, which would require a new template. However, the depth of the deepest logic `Gate` from the *root* logic `Gate` (at the top) cannot exceed 2."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-tip\"\u003e"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ":bulb: **Tip:**  You can use this command to change an existing `Gate`, except for the *root* `Gate`."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ":exclamation: **Warning:** The `Gate` depth cannot exceed 2."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ":information_source: **Note:**  The current implementation only allows the `Gate` objects to be 2 levels deep, counting from 0 at the top. This means you may see inputs up to the 3rd level, up to the letter `O`."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "| Command Format | "
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "|:-:|"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "|`add INPUT GATE`|"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "* The `INPUT` is as explained above in [Set](#72-setting-an-input-value-)."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "* The `GATE` is as explained above in [Template](#71-creating-a-boolean-template-)."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "The image below shows an example of using the command `add C or` on the template shown."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "![AddBoolean](diagrams/AddBooleanLabel.png)"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003csmall\u003e\u003ci\u003eFigure 12\u003c/i\u003e\u003c/small\u003e"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "### 7.4 Calculating Output \u003ca name\u003d\"calc-output\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "This command calculates the output of the configured logic *gates*, and requires that all inputs of the circuit are set. The output is represented by `OUT` in the printed `template`."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ":exclamation: **Warning:** The output cannot be calculated if any input is not set yet."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "| Command Format | "
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "|:-:|"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "|`calc`|"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "The following image shows an example of using the `calc` command. "
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "![CalcBoolean](diagrams/BooleanCalc.png)"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003csmall\u003e\u003ci\u003eFigure 13\u003c/i\u003e\u003c/small\u003e"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "## 8. FAQ"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "This section details the **frequently asked questions (FAQ)** regarding the use of the application."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "**Q**: How do I know what each component does?"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "**A**: The components are derived from basic circuit theory that is covered in detail in the module "
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "CG1111: Engineering Principles and Practice I. Basic understanding of this module is enough to familiarise you"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "with each of the components and what they do."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "**Q**: How do I know what each logic gate does?"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "**A**: Logic Gates are basic elements of electrical design that can be read and understood easily through various "
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "online resources. This is covered in detail in the module EE2026: Digital Design. Basic understanding of this module"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "is enough to familiarize you with each of the logic gates and how they operate."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "**Q**: Why is the interactive tutorial so restrictive?"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "**A**: Given that this is a tutorial, the goal here is to make sure that you know how to use each and every feature of"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "this application. However, you are allowed to exit the tutorial at any point of time and be able to use the full"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "functionality of this application."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "**Q**: Why does using the `add` command for the circuit template give me a \"Component not yet set\" error?"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "**A**: You have to first set the component involved using the [`set` command](#62-setting-a-component-value-)."
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "**Q**: Why can\u0027t I calculate the output from the logic circuit I created?"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "**A**: You have to make sure all inputs to the gate have been set. "
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "## 9. Command Summary"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "This section summarises the commands used in the application."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "Action | Format, Examples"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "**Tutorial** | `tutorial TYPE` \u003cbr\u003e e.g., `tutorial circuit`"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "**Summary** | `summary`"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "**Template Circuit/Logic Gate** | `template TEMPLATE/GATE` \u003cbr\u003e e.g., `template rc` \u003cbr\u003e e.g., `template and`"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "**Set Circuit/Logic Gate** | `set COMPONENT/INPUT VALUE` \u003cbr\u003e e.g., `set r 500` \u003cbr\u003e e.g., `set B 0`"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "**Add Circuit** | `add CONFIG COMPONENT VALUE`\u003cbr\u003e e.g., `add parallel c 500`"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "**Add Logic Gate** | `add INPUT GATE`\u003cbr\u003e e.g., `add C or`"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "**Calculate Circuit/Logic Gate** | `calc EFF_VALUE/[]` \u003cbr\u003e e.g., `calc ceff` \u003cbr\u003e e.g., `calc`"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "## 10. Glossary"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "This section explains certain technical terms used in the guide which may require more detail."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "Term | Explanation"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "-|-"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "*capacitors* | A component which stores electrical energy in an electrical field"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "*Command Line Interface (CLI)* | Text-based user interface which the application uses to interact with the user"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "*current* | Flow of electric charge in a circuit"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "*inductors* | A component which stores energy in a magnetic field when electric *current* flows throw it"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "*Java `int`* | Defined as an *integer* in the programming language *Java* which can store numbers from -2147483648 to 2147483647"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "*integer* | A whole number "
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "*load components* | A component which consumes electric power"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "*logging* | Keeping a record of information about events which take place, specific to the application"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "*logic gate* | Physical electronic device implementing a Boolean function"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "*power* | Rate at which electrical energy is transferred by a circuit"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "*resistors* | A component which provides electrical resistance"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "*root* | A point of reference for which other points can be traced back to"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "*syntax* | Rules in which a command must be run"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "*voltage source* | A device which can maintain a fixed voltage"
      }
    ],
    "authorContributionMap": {
      "oasisbeatle": 16,
      "dorianfong98": 4,
      "hughjazzman": 431,
      "sevenseasofbri": 32,
      "-": 33,
      "PraveenElango": 34
    }
  },
  {
    "path": "docs/index.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "layout : page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "title : CLIrcuit Assistant"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "![Circuit](diagrams/CircuitCLI.png)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "![Boolean](diagrams/BooleanCLI.png)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "**CLIrcuit Assistant** is a desktop app to implement and solve simple circuits, optimized for use via the Command Line Interface (CLI)."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Useful links:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "* If you are interested in using **CLIrcuit Assistant**, head over to the [**User Guide**](UserGuide.md)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "* If you are interested about developing **CLIrcuit Assistant**, the [**Developer Guide**](DeveloperGuide.md) is a good place to start."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "* [About Us](AboutUs.md) lets you know more about the team behind this project."
      }
    ],
    "authorContributionMap": {
      "hughjazzman": 13,
      "-": 2
    }
  },
  {
    "path": "docs/team/dorianfong98.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "layout : page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "title : Dorian Fong - Project Portfolio Page  "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "\u003cimg src\u003d\"https://avatars2.githubusercontent.com/u/47025155?s\u003d400\u0026u\u003dce782a0a69f128f7fb409598101baeef34fd201e\u0026v\u003d4\" width\u003d\"200\" height\u003d\"200\" /\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "\u003cstyle\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ".alert {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "    position:relative;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "    padding:.75rem 1.25rem;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "    margin-bottom:1rem;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "    border:1px solid transparent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "    order-radius:.25rem"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ".alert-primary {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "    color:#073984;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "    background-image:linear-gradient(180deg, #d6e6ff, #cfe2ff);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "    border-color:#bbd6fe"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ".alert-warning {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "\tcolor: #856404;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "\tbackground-image: linear-gradient(180deg, #fff5d5, #fff3cd);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "\tborder-color: #ffeeba"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ".alert-tip {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "    color: #000000;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "\tbackground-image: linear-gradient(180deg, #DCECDC, #DCECDC);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "\tborder-color: #DCDCDC"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "\u003c/style\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "* **Deliverables and Deadlines**: Responsible for keeping track of submission deadlines for the project team and planning of timeline for the preparation of the respective deliverables."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "* **Git Expert**: Helps other team members with matters related to Git and Github, including running various Git commands on the command line. "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "* **Writing of `Command`, `Exceptions`, and `tests` of the code**: Assists in the writing of the code that deals with different commands, as well as the execution of said commands based on user input. Also responsible for writing exception handlers and JUnit tests to improve defensiveness and code testability of the program.  "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "## Summary of Contributions"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "### Code Contributed"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "[This is the RepoSense report of the code contributed.](https://nus-cs2113-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003ddorianfong98\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-09-27\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "### Enhancements Implemented"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "#### Circuit Components"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "* **PR**: [#21](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/21), [#27](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/27), [#31](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/31)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "Wrote the code for the following circuit components:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "* `VoltageSource`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "* `RTemplate` (The base class for circuit templates with Resistors)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "Added the classes to the component package and template package respectively."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "Introduced the getImpedance() feature for RTemplates, refactored the code for `LrTemplate`(Resistor+Inductor) circuit template to inherit from RTemplate, updated the `Template` classes accordingly. JavaDoc was also added to the methods afterwards."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "#### Unit Testing \u0026 Assertions"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "* **PR**: [#44](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/44), [#102](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/102)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "Updated the abovementioned classes. Added JUnit Tests `BinaryTreeTest` and `ExitCommandTest`."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "#### Circuit Commands Enhancements"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "* **PR**: [#93](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/93)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "Added/Updated classes in the `commands.circuit`, `model.template`, `ui` packages, as well as updated the `ParserTest` to handle new commands."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "#### JavaDoc Comprehensiveness"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "* **PR**: [#167](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/167)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "Added/Updated documentation comments for most, if not all, of the files in the program (especially classes) in accordance with the Java Coding Standard guidelines and conventions for the final release. "
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "### Extract: Product Website, User Guide, Developer Guide"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "* **PRs**: "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "[#63](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/63), "
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "[#74](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/74), "
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "[#76](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/76), "
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "[#77](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/77), "
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "[#78](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/78),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "[#170](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/170)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "[#63](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/63): "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "Drafted Non-Functional Requirements in Developer Guide, Getting Started, as well as the instructions for manual testing of CLIrcuit Assistant."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "[#74](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/74), [#77](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/77): "
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "Squashed bugs found in Table of Contents for Developer Guide."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "[#76](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/76), [#78](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/78): "
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "Made minor but long overdue modifications to naming, ASCII art, etc."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "### Extract: Contributions to User Guide"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "* **PRs**: [#170](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/170)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "[#170](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/170):"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "Addressing feedback from PE dry run, constructed and added an annotated diagram to the User Guide in an attempt to improve readability for the average user by assuming little to no experience or technical knowledge in either the field of Digital/Boolean Circuits or just in running CLI applications."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "\u003eThe image below shows an example when using the `template and` command."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "\u003e![Simplified](../diagrams/TemplateBooleanAnd.png)"
      }
    ],
    "authorContributionMap": {
      "dorianfong98": 111
    }
  },
  {
    "path": "docs/team/hughjazzman.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "layout : page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "title : Wira Azmoon - Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "\u003cimg src\u003d\"https://avatars2.githubusercontent.com/u/53231968?s\u003d460\u0026u\u003d43fad5fee043173a5c65db833d39c9c00c04549c\u0026v\u003d4\" width\u003d\"200\" height\u003d\"200\" /\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003cstyle\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ".alert {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    position:relative;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    padding:.75rem 1.25rem;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    margin-bottom:1rem;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    border:1px solid transparent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    order-radius:.25rem"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ".alert-primary {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    color:#073984;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    background-image:linear-gradient(180deg, #d6e6ff, #cfe2ff);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    border-color:#bbd6fe"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ".alert-warning {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\tcolor: #856404;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\tbackground-image: linear-gradient(180deg, #fff5d5, #fff3cd);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\tborder-color: #ffeeba"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ".alert-tip {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    color: #000000;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\tbackground-image: linear-gradient(180deg, #DCECDC, #DCECDC);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\tborder-color: #DCDCDC"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003c/style\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "* **Team lead**: Responsible for overall project coordination."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "* **Documentation**: Responsible for the quality of various project documents."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "* **PlantUML expert**: Helps other team members with matters related to PlantUML."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "* **In charge of `Parser`,`Ui` of the code**: In charge of the code that deals with parsing and UI."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "## Summary of Contributions"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "### Code Contributed"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "[This is the RepoSense report of the code contributed.](https://nus-cs2113-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dhughjazzman\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-09-27\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "### Enhancements Implemented"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "#### Code, Packages Setup"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "* **PR**: [#8](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/8), [#24](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/24), [#25](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/25)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "Set up the skeleton code used in the project, including the following classes:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "* `Parser`"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "* `Ui`"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "* `Command`"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "* `Component`"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "Introduced the Add Component feature, refactored the `Component` classes, added the classes within the `command` package, updated the `Parser` class, and update some `Template` classes, as well as `Ui` and `Duke`. JavaDoc was also added to `Command.execute()` methods."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "#### Unit Testing \u0026 Assertions"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "* **PR**: [#36](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/36), [#39](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/39), [#106](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/106), [#49](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/49)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "Updated various classes mentioned [above](#add-components-and-command-classes-). Added classes `AddCommand` and `SetCommand` and JUnit Tests `ParserTest`."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "Refactored code according to updated Design Architecture - reduced coupling between `Ui` and `Command` to follow Architecture in updated [**Developer Guide**](../DeveloperGuide.md). Added assertions to make the code more defensive."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "#### Boolean Commands Setup"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "* **PR**: [#53](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/53), [#71](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/71), [#82](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/82), [#83](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/83)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "Added/Updated classes in the `commands.gates`, `model.component`, `model.binarytree` packages, as well as updated the `BooleanParser` to handle new commands."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "Added functionalities for `BooleanCommand` and its subclasses."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "#### PED Bugs"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "* **PR**: [#156](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/156)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "Squashed bugs found in the PE Dry Run. These included high severity bugs such as [#148](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/148), [#151](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/151), with some other medium and low severity bugs as well."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "### User Guide"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "* **PRs**: [#9](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/9), [#45](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/45), [#59](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/59), [#61](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/61), [#91](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/91), [#109](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/109), [#158](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/158), [#159](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/159), [#163](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/163), [#173](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/173)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "Set up the first draft of User Guide for the project, starting with all commands discussed in the initial group meeting in [#9](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/9), [#45](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/45). Updated User Guide with v2.0 commands in [#59](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/59), and updated their expected outcomes in [#61](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/61). Numerous PED Bugs were also squashed in [#158](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/158), with many of them being high severity, as can be seen in [#154](https://github.com/AY2021S1-CS2113T-W13-3/tp/issues/154). Finished up the final submission in [#173](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/173)."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "### Developer Guide"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "* **PR**: [#45](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/45), [#50](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/50), [#59](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/59), [#61](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/61), [#91](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/91), [#109](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/109), [#113](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/113), [#119](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/119), [#121](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/121)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "Created structure of Developer Guide, starting with Architecture in [#45](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/45). Created UML Diagrams with the help of PlantUML, including Class Diagrams found in the Architecture and Sequence Diagram for `SetCircuitCommand`. As the IC for documentation, improvements were also made to diagrams made by other group members, such as the Class Diagrams found under the Implementation of Boolean Commands. User Stories discussed by the group were also added into its own section."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "### Review/Mentoring"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "Almost all PRs were reviewed, with the notable ones listed below:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "* [#19](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/19), [#21](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/21), [#27](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/27), [#34](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/32), [#35](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/35): Spotted minor fixes"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "* [#23](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/23), [#26](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/26), [#38](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/38), [#41](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/41), [#43](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/43), [#51](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/51), [#56](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/56), [#62](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/62), [#63](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/63), [#90](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/90), [#93](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/93), [#100](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/100), [#116](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/161), [#160](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/160), [#161](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/161), [#169](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/169): Gave minor suggestions accepted by teammate"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "* [#42](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/42), [#54](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/54), [#92](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/92): Gave a number of suggestions accepted by teammate"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "* [#75](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/75): Gave many suggestions accepted by teammate, taking the role of **PlantUML expert**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "### Beyond Project Team"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "#### Forum Posts"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "* [Special Characters in CLI](https://github.com/nus-cs2113-AY2021S1/forum/issues/22)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "* [Using Tables and Emojis on Github pages](https://github.com/nus-cs2113-AY2021S1/forum/issues/61)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "* [Question on Assertion and Exception](https://github.com/nus-cs2113-AY2021S1/forum/issues/87)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "#### Forum Comments"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "* [Use of `this` keyword](https://github.com/nus-cs2113-AY2021S1/forum/issues/27#issuecomment-683380238)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "* [Wildcard Imports](https://github.com/nus-cs2113-AY2021S1/forum/issues/36#issuecomment-687758900)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "* [Static vs Instance Classes](https://github.com/nus-cs2113-AY2021S1/forum/issues/88#issuecomment-708482154)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "### Extract: User Guide - Adding a Gate"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "To aid the user in understanding the User Guide, informational boxes such as below are put in the appropriate commands. The example is from [7.3 Adding a Gate](../UserGuide.md#73-adding-a-gate-)."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003e The application has the ability to combine multiple `Gate` objects to generate more complicated boolean *logic gate* configurations. This command allows you to set an input to a boolean logic `Gate`. You can also change an existing gate if needed. However, the depth of the deepest logic `Gate` from the *root* logic `Gate` (at the top) cannot exceed 2."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-tip\"\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ":bulb: **Tip:**  You can use this command to change an existing `Gate`."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ":exclamation: **Warning:** The `Gate` depth cannot exceed 2."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ":information_source: **Note:**  The current implementation only allows the `Gate` objects to be 2 levels deep, counting from 0 at the top. This means you may see inputs up to the 3rd level, up to the letter `O`."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "| Command Format | "
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "|:-:|"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "|`add INPUT GATE`|"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "### Extract: Developer Guide - Logic Class and Sequence Diagrams"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "To better showcase the relationships between the various classes used in the project, the following UML diagrams were used to explain the Architecture of the application. A reference frame was also used so that the diagrams explained in the later section could be more concise. The following example is from [Logic Component](../DeveloperGuide.md#logic-component)."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "![LogicDiagram](../diagrams/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003csmall\u003e\u003ci\u003eFigure 4\u003c/i\u003e\u003c/small\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003e 1. `Logic` stores a current `Template` object in [`Model`](../DeveloperGuide.md#model-component) that represents the current circuit configuration."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003e 1. `Logic` uses the `Parser` class to parse the user command."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003e 1. This results in a `Command` object which is executed in `Duke`."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003e 1. The command execution can affect the `Model` (e.g. setting a value)."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003e In general, the creation of `Command` objects via `Parser` can be explained by the following sequence diagram, which acts as a reference frame for `getCommand`:"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "![getCommand](../diagrams/GetCommand.png)"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003e \u003csmall\u003e\u003ci\u003eFigure 5\u003c/i\u003e\u003c/small\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "\u003e If the command does not use the reference frame, they would have their own sequence diagram to showcase the difference."
      }
    ],
    "authorContributionMap": {
      "dorianfong98": 1,
      "hughjazzman": 174
    }
  },
  {
    "path": "docs/team/oasisbeatle.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "# Dash Abhishek - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "* **Code Quality**: Responsible for the overall code quality for the project "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "* **Component Code**: Responsible for maintenance of component code"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "## Summary of Contributions"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "### Code Contributed"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "[The RepoSense report of the code contributed to this project can be found here.](https://nus-cs2113-ay2021s1.github.io/tp-dashboard/#search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-09-27\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026zFR\u003dfalse\u0026tabAuthor\u003doasisbeatle\u0026tabRepo\u003dAY2021S1-CS2113T-W13-3%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code~other)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "### Project Contributions"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "#### Code Contributions"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "The list of code contributions with links to the PRs includes the following:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "* Capacitor Object Class [#16](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/16)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "* LcTemplate (Inductor-Capacitor) Object Class [#28](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/28)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "* getImpedance() function for LcTemplate Class [#34](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/34)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "* NAND, NOR and XOR Logic Gate Classes [#60](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/60)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "* Updated Summary Command [#94](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/94)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "* Boolean Tutorial Command [#103](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/103)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "#### Testing, Assertions and Logging "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "The list of contributions for testing, assertions and logging include the following:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "* JUnit Tests for all component classes inlcuding resistor, inductor, capacitor and voltage source classes [#43](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/43)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "* Assertions and exception for the component class functions including the setValue() and getValue() functions [#48](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/48)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "* Logging in the Boolean Tutorial Command [#103](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/103)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "#### Developer Guide"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "The list of the contributions to the developer guide include:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": " * UML Diagrams for Circuit Commands inlcuding the Add, Set, Calculate and Template commands with explanation on how each of these commands are implimented [#62](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/62)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": " * Implimentation consideration for Boolean Commands [#116](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/116) "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": " "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "#### User Guide"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "The list of contributions to user guide include:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "* FAQs [#180](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/180) "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "* Editing command information [#180](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/180) "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "* Formattting [#180](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/180) "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "oasisbeatle": 50
    }
  },
  {
    "path": "docs/team/praveenelango.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "layout : page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "title : Praveen Elango - Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "\u003cimg src\u003d \"https://avatars1.githubusercontent.com/u/37036833?s\u003d460\u0026u\u003d2c0e2ed51f01d354f32fb3efd9e51a56aa273e8f\u0026v\u003d4\" width\u003d\"200\" height\u003d\"200\" /\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "\u003cstyle\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ".alert {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    position:relative;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    padding:.75rem 1.25rem;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    margin-bottom:1rem;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    border:1px solid transparent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    order-radius:.25rem"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ".alert-primary {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    color:#073984;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    background-image:linear-gradient(180deg, #d6e6ff, #cfe2ff);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    border-color:#bbd6fe"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ".alert-warning {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "\tcolor: #856404;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "\tbackground-image: linear-gradient(180deg, #fff5d5, #fff3cd);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "\tborder-color: #ffeeba"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ".alert-tip {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    color: #000000;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "\tbackground-image: linear-gradient(180deg, #DCECDC, #DCECDC);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "\tborder-color: #DCDCDC"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "\u003c/style\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "## Project: CLIrcuit Assistant "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "* **Testing**: Responsible for overall testing."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "* **Scheduling and Tracking**: Responsible for tracking the project."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "* **Template code in-charge**: In-charge of handling issues related to code of the templates."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "## Summary of Contributions"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "### Code Contributed"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "[This is the RepoSense report of the code contributed.](https://nus-cs2113-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-09-27\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dPraveenElango\u0026tabRepo\u003dAY2021S1-CS2113T-W13-3%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code~other)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "### Project Contributions"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "#### Code Contributions"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "The list of code contributions with links to the PRs includes the following:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "* `Resistor` Object Class [#19](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/19)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    * The `Resistor` object stores the value of the resistance of the component"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    "
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "* `RcTemplate` Object Class [#26](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/26)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    * The `RcTemplate` object represents the Resistor-Capacitor template"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    "
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "* `getImpedance()` function for `RcTemplate` Class [#32](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/32)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    * The `getImpedance()` function is used to return the impedance of the circuit"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    "
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "* `or`, `not`, and `xor` Logic Gate Classes [#56](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/56)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    * The `or`, `not`, and `xor` logic gates are three out of the six logic gates used in this assistant, with the other three being `and`, `nor`, and `nand`."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    "
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "* Updated `Ui` by including prompts and a Command-Template table [#100](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/100)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    * The prompt was included for user to start using the assistant"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "* Updated `Ui` for Boolean Tutorial [#161](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/161)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    * Minor changes made to user interface design"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "#### Unit Testing \u0026 Assertions"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "The list of contributions for testing and assertions include the following:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "* Added unit testing to Template tests including `RTemplate`, `RcTemplate`, `LrTemplate`, `LcTemplate` [#42](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/42)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "* Added assertions to all circuit templates including `RTemplate`, `RcTemplate`, `LrTemplate`, `LcTemplate` [#52](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/52)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "* Included JUnit tests for remaining commands including `SetCommandTest` [#58](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/58)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "### User Guide"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "The list of contributions for the User Guide include the following:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "* Included explanation for why interactive tutorial enters infinite loop by design [#162](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/162)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "* Included labeled diagrams for both setting of circuit and boolean commands [#169](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/169)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "* Made grammatical changes to entire User Guide document [#179](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/179)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "### Developer Guide"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "The list of contributions for the Developer Guide include the following:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "* Documented entire section for boolean commands by including UML diagrams (class, object, and sequence diagrams) and corresponding explanations for"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "`TemplateBooleanCommand`,`AddBooleanCommand`, `SetBooleanCommand`, `CalcBooleanCommand` [#75](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/75)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "* Made grammatical changes to entire Developer Guide document [#179](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/179)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "### Extract: User Guide"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "The image below shows an example of using the command `set r 500` on the template shown."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "![SetCircuit](../diagrams/SetCircuitLabel.png)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "### Extract: Developer Guide"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "### `CalculateBooleanCommand` \u003ca name\u003d\"calc-bool\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "The `CalculateBooleanCommand` is used to calculate the effective output of the configured logic gates stored in the `BinaryTree`, which requires that all inputs be set."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "For instance, in a `BinaryTree` object with just two gates - `OrGate` and `AndGate` - all the inputs of the gates have to be assigned before the effective output of both the logic gates (`Input C`) can "
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "be calculated."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "The sequence by which the `CalcBooleanCommand` is instantiated is as follows:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "![InsertSequenceDiagram](../diagrams/CalcBooleanCommand.png)"
      }
    ],
    "authorContributionMap": {
      "PraveenElango": 116
    }
  },
  {
    "path": "docs/team/sevenseasofbri.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "layout : page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "title : Vishruti Ranjan - Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "\u003cimg src\u003d\"https://avatars3.githubusercontent.com/u/57522870?s\u003d460\u0026u\u003d8dd180701edf230c1bd905ff0d49b81d40785e1a\u0026v\u003d4\" width\u003d\"200\" height\u003d\"200\" /\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "\u003cstyle\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ".alert {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    position:relative;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    padding:.75rem 1.25rem;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    margin-bottom:1rem;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    border:1px solid transparent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    order-radius:.25rem"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ".alert-primary {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    color:#073984;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    background-image:linear-gradient(180deg, #d6e6ff, #cfe2ff);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    border-color:#bbd6fe"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ".alert-warning {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "\tcolor: #856404;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "\tbackground-image: linear-gradient(180deg, #fff5d5, #fff3cd);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "\tborder-color: #ffeeba"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ".alert-tip {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    color: #000000;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "\tbackground-image: linear-gradient(180deg, #DCECDC, #DCECDC);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "\tborder-color: #DCDCDC"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "\u003c/style\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "* **Integration**: Responsible for overseeing integration of project scripts written by different members."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "* **IntelliJ expert** : Helps other team members in matters related to IntelliJ."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "* **In charge of `Command` code**: In charge of the code that deals with different commands, and their execution based on user input."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "## Summary of Contributions"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "### Code Contributed"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "[This is the Reposense report of the code contributed](https://nus-cs2113-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dsevenseasofbri\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-09-27\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "### Enhancements Implemented"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "#### Basic Template Code Setup"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "* **PR**: [#23](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/23)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "Set up the code for circuit templates, beginning with class Template and LrTemplate (Inductor-Resistor Circuit Template). "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "#### Calculate Command for Circuit Template"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "* **PR**: [#38](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/38)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "Added the effective calculation command for the circuit template to be able to calculate and print:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "* effective resistance"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "* effective capacitance"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "* effective inductance"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "* total current"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "* total power "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "In the current circuit template chosen."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "#### Interactive Tutorial for Circuit Commands and Initial Summary Command"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "* **PR**: [#41](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/41), [#160](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/160) "
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "Added the interactive tutorial feature for circuit commands to the application as well as the initial command summary table."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "Based on feedback from the PE-D made the tutorial more user-friendly."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "#### Calculate Command and Binary Tree for Boolean Template"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "* **PR**: [#54](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/54), [#73](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/73), [#92](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/92)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "Added the effective calculation command for the boolean template to be able to calculate and print the total output of the current logic gate configuration."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "Also updated classes in `model.binarytree` and class `BooleanTemplate` to create a simple visual representation of the boolean logic circuit and added binary tree implementation for the logic circuits. "
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "#### Unit Testing, Assertions and Logging"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "* **PR**: [#38](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/38), [#41](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/41), [#51](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/51), [#105](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/105)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "Added unit testing for `CalculateBooleanCommand`, `Ui` and `CalculateCircuitCommand`."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "Added assertions to `AddCircuitCommand`."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "Set up logging in `Duke.java` and added logging to `TutorialCircuitCommand`, `Command`, `ExitCommand`, `TemplateCommand` and `Parser`."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "#### PE-D Bugs"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "* **PR**: [#160](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/160), [#165](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/165)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "Squashed PE-D bugs related to [Interactive Tutorial for Circuit Commands](#interactive-tutorial-for-circuit-commands-and-initial-summary-command) and added exception customisation for `model."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "### User Guide"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "* **PR**: [#168](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/168)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "Added annotated images for `calc` command sections and `bye` command."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "### Developer Guide"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "* **PR**: [#73](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/73), [#79](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/79), [#101](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/101), [#111](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/111), [#122](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/122)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "Added the section on implementation considerations describing the rationale behind implementing a logic circuit using a binary tree-like data structure."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "Also, added section describing the `BinaryTree\u003cT\u003e` class and all its noteworthy public methods employing the use of object and sequence diagrams to aid the reader in understanding how the functions work."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "Added the glossary of the guide."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "### Review/Mentoring"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "* [#18](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/18), [#36](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/36), [#52](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/52), [#56](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/56), [#86](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/86): Suggestions, some minor and some major."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "* [#39](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/39), [#157](https://github.com/AY2021S1-CS2113T-W13-3/tp/pull/157): Minor suggestions accepted by team-mate. (Co-Authored)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "### Beyond Project Team"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "#### Forum Contribution"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "* [Printing UG and DG Splits the Images/Text At Page Break](https://github.com/nus-cs2113-AY2021S1/forum/issues/120)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "### Extract: User Guide"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "### 5.3 Exiting the Application"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "This command can be used to exit the application."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "| Command Format | "
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "|:-:|"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "|`bye`|"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ":exclamation: **Warning:** You **cannot** use this command to exit from the app when in interactive tutorial mode. For notes on how to exit tutorial mode, please refer to [5.2 Interactive Tutorial](#52-interactive-tutorial)."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "The following diagram shows the expected behaviour when using the `bye` command."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "![ByeCommand](../diagrams/ByeCommand.png)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "### Extract: Developer Guide"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "#### Rationale Behind Using Binary Heap-Like Data Structure \u003ca name\u003d\"rationale-bool\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "Selecting the appropriate data structure for emulating a logic circuit is an important aspect to consider whilst"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "building such a system. The following table depicts the properties of a Binary Heap-Like structure mapped to the "
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "application\u0027s requirements."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "| Requirements | Property of Binary Heap |"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "|:----------:|:-------------:|"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "| Connects different gates together | A binary-heap, being a type of binary tree, is a _connected graph_. |"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "| Easily stored | Can be stored in simple contiguous memory like an Array/ArrayList |"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "| Easy to print | Nodes stored in an array, rather than a graph-like structure |"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "| Inputs can be easily manipulated | Manipulating augmented values involves a simple _O(1)_ operation. |"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "| Emulate 2-input logic circuit | Being a binary tree, each node can have atmost 2 children, thus recreating a 2-Input Logic Gate |"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "Therefore, since the Binary Heap-Like data structure best-fits the requirements for the system, the data structure was selected to"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "implement the logic circuit."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "#### Sequence Diagram Example"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "The following image is one of the sequence diagrams added to the Developer Guide under the `BinaryTree\u003cT\u003e` section. "
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "![DeveloperGuideSequenceDiagramExample](../diagrams/BinaryTreeInsertSequenceDiagram.png)"
      }
    ],
    "authorContributionMap": {
      "dorianfong98": 2,
      "sevenseasofbri": 159
    }
  },
  {
    "path": "gradlew.bat",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Copyright 2015 the original author or authors."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Licensed under the Apache License, Version 2.0 (the \"License\");"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "@rem you may not use this file except in compliance with the License."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "@rem You may obtain a copy of the License at"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "@rem      https://www.apache.org/licenses/LICENSE-2.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Unless required by applicable law or agreed to in writing, software"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "@rem distributed under the License is distributed on an \"AS IS\" BASIS,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "@rem See the License for the specific language governing permissions and"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "@rem limitations under the License."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@rem  Gradle startup script for Windows"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Set local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "set DIRNAME\u003d%~dp0"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_BASE_NAME\u003d%~n0"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_HOME\u003d%DIRNAME%"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "for %%i in (\"%APP_HOME%\") do set APP_HOME\u003d%%~fi"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Find java.exe"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "if defined JAVA_HOME goto findJavaFromJavaHome"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003djava.exe"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ":findJavaFromJavaHome"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "if exist \"%JAVA_EXE%\" goto init"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ":init"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Get command-line arguments, handling Windows variants"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Slurp the command line arguments."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "set _SKIP\u003d2"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args_slurp"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "if \"x%~1\" \u003d\u003d \"x\" goto execute"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d%*"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ":execute"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Setup the command line"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Execute Gradle"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ":end"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "@rem End local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ":fail"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "rem the _cmd.exe /c_ return code!"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "exit /b 1"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ":mainEnd"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ":omega"
      }
    ],
    "authorContributionMap": {
      "-": 103,
      "PraveenElango": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/Duke.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.logic.parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import java.util.logging.LogManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * Duke is the is the main class of the application, and handles the app launch,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * initializing the appropriate classes to be used."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    private static final Logger LOGGER \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    /** Instances of class objects for UI. **/"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private final Ui ui;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private final Parser parser;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private Duke() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        parser \u003d new Parser();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        setUpLogger();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        LOGGER.info(\"Execution is beginning.\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        ui.promptForIntro();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "                String line \u003d ui.readLine();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "                Command c \u003d parser.parse(line);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "                c.execute();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "                ui.printMessage(c.toString());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "                LOGGER.log(Level.WARNING, \"Bad command\", e);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "                ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        LOGGER.info(\"Execution has ended\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Main entry-point for the java.duke.Duke application."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        new Duke().run();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    private void setUpLogger() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        LogManager.getLogManager().reset();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        LOGGER.setLevel(Level.ALL);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        ConsoleHandler ch \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        ch.setLevel(Level.SEVERE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        LOGGER.addHandler(ch);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            FileHandler fh \u003d new FileHandler(\"appLog.txt\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            fh.setLevel(Level.FINE);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            LOGGER.addHandler(fh);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            LOGGER.log(Level.SEVERE, \"File logger not working\", e);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorianfong98": 4,
      "hughjazzman": 27,
      "sevenseasofbri": 28,
      "-": 11,
      "PraveenElango": 2
    }
  },
  {
    "path": "src/main/java/seedu/duke/DukeException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * DukeException is the exception class for exceptions specific to Duke."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private final String message;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public DukeException(String s) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        this.message \u003d s;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * Returns message in Exception as a String."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @return String message for the Exception."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorianfong98": 3,
      "hughjazzman": 20
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/commands/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " *  The Command class is used to create Command objects."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " *  It is the abstract base class for all commands."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    protected static final Logger LOGGER \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    /** Boolean whether the command is to exit. **/"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    protected boolean isExit;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * Executes appropriate methods based on the given command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public abstract void execute() throws DukeException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * Returns boolean isExit."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @return boolean isExit whether the command is to exit."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return isExit;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorianfong98": 4,
      "hughjazzman": 23,
      "sevenseasofbri": 3
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " *  The ExitCommand class inherits from the Command class"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " *  and is used to exit the program."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"bye\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * Executes the exit command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        isExit \u003d true;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        LOGGER.info(\"Changed flag to exit program.\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * String representation of the Command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @return String representation."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return \" Bye. See you next time!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorianfong98": 4,
      "hughjazzman": 21,
      "sevenseasofbri": 3
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/commands/SummaryCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " *  The SummaryCommand class inherits from the Command class"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " *  and is used to to generate a summary of all the commands."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "public class SummaryCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"summary\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    private static final String COMMAND_SUMMARY \u003d \"\\tHere\u0027s a summary of available commands: \\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            + \"\\t+-----------+----------------------------+------------------------+\\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            + \"\\t|  Command  |         Circuit            |          Boolean       |\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            + \"\\t+-----------+----------------------------+------------------------+\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            + \"\\t| Tutorial  | tutorial circuit           | tutorial boolean       |\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            + \"\\t| Template  | template TEMPLATE          | template TEMPLATE      |\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            + \"\\t| Summary   | summary                    | summary                |\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            + \"\\t| Set       | set COMPONENT VALUE        | set INPUT_CH BOOLVALUE |\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            + \"\\t| Add       | add CONFIG COMPONENT VALUE | add INPUT GATE         |\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            + \"\\t| Calculate | calc EFF_VALUE             | calc                   |\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            + \"\\t| Exit      | bye                        | bye                    |\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            + \"\\t+-----------+----------------------------+------------------------+\\n\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    private static final String PARAMETER_SUMMARY \u003d \"\\tHere\u0027s a summary of the command parameters: \\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            + \"\\t+-----------+----------------------------------+-------------------------------+\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            + \"\\t| Parameter |       Circuit Params             |        Boolean Params         |\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            + \"\\t+-----------+----------------------------------+-------------------------------+\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            + \"\\t| TEMPLATE  | rc, rl, r, cl                    | or, and, nor, nand, xor, xnor |\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            + \"\\t| COMPONENT | r, c, l, v                       | N.A.                          |\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            + \"\\t| CONFIG    | parallel, series                 | N.A                           |\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            + \"\\t| EFF_VALUE | reff, ceff, leff, current, power | N.A                           |\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            + \"\\t| VALUE     | +ve real number                  | N.A                           |\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            + \"\\t| INPUT_CH  | N.A                              | B, C, D, E...L, M, N, O.      |\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            + \"\\t| INPUT     | N.A                              | B, C, D, E, F, G              |\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            + \"\\t| GATE      | N.A                              | or, and, nor, nand, xor, xnor |\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            + \"\\t| BOOLVALUE | N.A                              | 0, 1                          |\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            + \"\\t+-----------+----------------------------------+-------------------------------+\\n\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    public SummaryCommand() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * String representation of the Command."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @return String representation."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        return COMMAND_SUMMARY + \"\\n\" + PARAMETER_SUMMARY;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorianfong98": 4,
      "oasisbeatle": 1,
      "hughjazzman": 10,
      "sevenseasofbri": 38
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/commands/TutorialCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "package seedu.duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " *  The TutorialCommand class is used to enter the specified"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " *  interactive tutorial modes of either circuit or boolean."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "public interface TutorialCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    String COMMAND_WORD \u003d \"tutorial\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    boolean continueTutorial(String command, Ui ui) throws DukeException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorianfong98": 4,
      "hughjazzman": 2,
      "sevenseasofbri": 7
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/commands/circuit/AddCircuitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.logic.commands.circuit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.logic.commands.exceptions.ComponentNotSetException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.model.component.Capacitor;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.model.component.Inductor;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.model.component.LoadComponent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.model.component.Resistor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.model.template.CircuitTemplate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * The AddCircuitCommand class inherits from the SetCircuitCommand class"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * and is used to add components to the current circuit."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "public class AddCircuitCommand extends SetCircuitCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private final String config;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private LoadComponent loadComponent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private LoadComponent oldLoadComponent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private double oldValue;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public AddCircuitCommand(CircuitTemplate template, String config, String component, double value) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        super(template, component, value);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        this.config \u003d config;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * Executes appropriate methods based on the given command."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public void execute() throws DukeException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        loadComponent \u003d template.getComponent(component);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        if (loadComponent.getValue() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            throw new ComponentNotSetException();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        oldValue \u003d value;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        oldLoadComponent \u003d createCopyComponent();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        value \u003d getNewValue();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        super.execute();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private LoadComponent createCopyComponent() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        if (loadComponent instanceof Resistor) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            return new Resistor(oldValue);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        } else if (loadComponent instanceof Inductor) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            return new Inductor(oldValue);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            return new Capacitor(oldValue);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private double getNewValue() throws DukeException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        assert config.equals(\"series\") || config.equals(\"parallel\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        if (config.equals(\"series\")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            return loadComponent.addSeries(value);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            return loadComponent.addParallel(value);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * String representation of the Command."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @return String representation."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        return \"Nice, added a \" + oldLoadComponent + \" \" + getComponentString(oldLoadComponent) + \"\\n\\t\" + template;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorianfong98": 4,
      "hughjazzman": 65,
      "sevenseasofbri": 2
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/commands/circuit/CalculateCircuitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.logic.commands.circuit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.model.template.CircuitTemplate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * The CalculateCircuitCommand class inherits from the CircuitCommand class,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * and is used to calculate values of current, effective resistance, capacitance, inductance, and power."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "public class CalculateCircuitCommand extends CircuitCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"calc\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private final String calculationType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private String value;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public CalculateCircuitCommand(CircuitTemplate template, String calculationType) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        super(template);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        this.calculationType \u003d calculationType;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * Executes calculate command."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * @throws DukeException If execution error occurs."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public void execute() throws DukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        value \u003d getValue();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private String getValue() throws DukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        switch (calculationType) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        case \"power\":"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            return template.getPower() + \"W\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        case \"current\":"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            return template.getCurrent() + \"A\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        case \"reff\":"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            return template.getComponent(\"r\").toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        case \"ceff\":"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            return template.getComponent(\"c\").toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        case \"leff\":"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            return template.getComponent(\"l\").toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            throw new DukeException(\"No such value\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * String representation of the Command."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @return String representation."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        switch (calculationType) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        case \"power\":"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            return \"The power dissipated in the circuit is \" + value;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        case \"current\":"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            return \"The total rms current flowing through the circuit is \" + value;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        case \"reff\":"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            return \"The effective resistance calculated is \" + value;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        case \"ceff\":"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            return \"The effective capacitance calculated is \" + value;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        case \"leff\":"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            return \"The effective inductance calculated is \" + value;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            return \"Unknown calculation type!\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorianfong98": 4,
      "hughjazzman": 36,
      "sevenseasofbri": 29
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/commands/circuit/CircuitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.logic.commands.circuit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.model.template.CircuitTemplate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * The CircuitCommand class inherits from the Command class and is used to create CircuitCommand objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "public abstract class CircuitCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    protected CircuitTemplate template;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    protected CircuitCommand(CircuitTemplate template) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        this.template \u003d template;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorianfong98": 3,
      "hughjazzman": 13
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/commands/circuit/SetCircuitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.logic.commands.circuit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.model.component.Capacitor;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.model.component.Component;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.model.component.Inductor;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.model.component.Resistor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.model.component.VoltageSource;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.model.template.CircuitTemplate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * The SetCircuitCommand class inherits from the CircuitCommand class"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * and allows the user to set values of the circuit components."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "public class SetCircuitCommand extends CircuitCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"set\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    protected final String component;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    protected double value;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    protected Component componentObject;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public SetCircuitCommand(CircuitTemplate template, String component, double value) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        super(template);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        this.component \u003d component;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * Executes set command."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @throws DukeException If execution error occurs."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public void execute() throws DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        if (component.equals(\"v\")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            template.setInitialPowerSupply(value);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            componentObject \u003d template.getInitialPowerSupply();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        componentObject \u003d template.getComponent(component);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        componentObject.setValue(value);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * String representation of the Command."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @return String representation."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        String componentName \u003d getComponentString(componentObject);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        return \"The \" + componentName + \" was set to \" + componentObject + \"\\n\\t\" + template;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * Returns the componentObject as a String."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * @return String type representation of the componentObject"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    protected String getComponentString(Component componentObject) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        String componentName \u003d \"\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        if (componentObject instanceof VoltageSource) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            componentName \u003d \"voltage source\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        } else if (componentObject instanceof Resistor) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            componentName \u003d \"resistor\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        } else if (componentObject instanceof Capacitor) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            componentName \u003d \"capacitor\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        } else if (componentObject instanceof Inductor) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            componentName \u003d \"inductor\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        return componentName;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorianfong98": 4,
      "hughjazzman": 53,
      "sevenseasofbri": 17
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/commands/circuit/TemplateCircuitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.logic.commands.circuit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.model.template.CircuitTemplate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " *  The TemplateCircuitCommand class inherits from the CircuitCommand class"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " *  and is used to choose a circuit template."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "public class TemplateCircuitCommand extends CircuitCommand {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"template\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public TemplateCircuitCommand(CircuitTemplate template) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        super(template);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        LOGGER.info(\"Template was chosen\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return template.toString();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorianfong98": 4,
      "hughjazzman": 19,
      "sevenseasofbri": 2
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/commands/circuit/TutorialCircuitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.logic.commands.circuit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "import seedu.duke.logic.commands.SummaryCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import seedu.duke.logic.commands.TutorialCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.logic.commands.exceptions.IncorrectCommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * The TutorialCircuitCommand class inherits from the SummaryCommand class"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * and implements the TutorialCommand interface."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * It is used to go through the full interactive tutorial on electronic circuits."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "public class TutorialCircuitCommand extends SummaryCommand implements TutorialCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private final Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    private static final String[] orderOfInstructions \u003d {\"template rc\", \"set v\", \"set r\", \"set c\", \"add parallel c\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        \"calc power\"};"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private int numOfCommandsDone \u003d 0;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private final Ui ui;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    public TutorialCircuitCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        ui \u003d new Ui(); // Create its own Ui instance, can be a Ui subclass later on"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * Begins execution of the interactive tutorial."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        ui.printWelcomeTutorial();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        String command;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        String readCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        boolean isNotDone \u003d true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        while (isNotDone) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "            assert numOfCommandsDone \u003c Ui.CIRCUIT_INSTRUCTIONS.length;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "            ui.printCircuitInstruction(numOfCommandsDone);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            readCommand \u003d ui.readLine();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            command \u003d readCommand.toLowerCase();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "                isNotDone \u003d continueTutorial(command, ui);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "                LOGGER.log(Level.FINE, \"Bad Command DukeException thrown.\", e);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "                ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        LOGGER.info(\"Exiting help mode\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * Continues or terminates tutorial based on user input."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * @param command String type command input by the user."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * @param ui Ui type to perform User Interface interactions."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * @return boolean type true to continue tutorial, false otherwise."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * @throws DukeException If the command is invalid."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    public boolean continueTutorial(String command, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        if (command.equals(\"exit\")) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        if (numOfCommandsDone \u003e\u003d 6 || !command.matches(orderOfInstructions[numOfCommandsDone] + \"(.*)\")) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            throw new IncorrectCommandException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        CircuitCommand c \u003d (CircuitCommand) parser.parse(command);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        c.execute();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        ui.printMessage(c.toString());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        numOfCommandsDone++;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * String representation of the Command."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @return String representation."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        return \"You have exited Tutorial Mode!\\n\" + super.toString() + \"\\t:) Have fun using CLIrcuit Assistant!\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorianfong98": 7,
      "oasisbeatle": 2,
      "hughjazzman": 21,
      "sevenseasofbri": 57
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/commands/exceptions/CommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * The CommandException class inherits from the DukeException class and"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * is the exception class for handling exceptions concerning the Command class."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "public abstract class CommandException extends DukeException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public CommandException(String s) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        super(s);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorianfong98": 4,
      "hughjazzman": 9
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/commands/exceptions/ComponentNotSetException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * The ComponentNotSetException class inherits from CommandException"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * and is thrown if the component has yet to be set."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "public class ComponentNotSetException extends CommandException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public ComponentNotSetException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        super(\"Component not yet set! Use the \u0027set\u0027 command to set the value of components.\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorianfong98": 4,
      "hughjazzman": 7
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/commands/exceptions/IncorrectCommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * The IncorrectCommandException class inherits from CommandException"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * and is thrown if the command entered is invalid."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "public class IncorrectCommandException extends CommandException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public IncorrectCommandException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        super(\"Bad Command! Please follow the instructions carefully.\\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "                + \"\\tTo exit Tutorial Mode, simply type \u0027exit\u0027 and press Enter.\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorianfong98": 4,
      "hughjazzman": 7,
      "sevenseasofbri": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/commands/gates/AddBooleanCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.logic.commands.gates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.model.gates.Gate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.model.template.BooleanTemplate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * The AddBooleanCommand class inherits from the BooleanCommand class"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * and is used to combine multiple logic gate templates."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "public class AddBooleanCommand extends BooleanCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private final Gate gate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private final int index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public AddBooleanCommand(BooleanTemplate template, Gate gate, int index) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        super(template);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        this.gate \u003d gate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * Executes the adding of gate in BooleanTemplate."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @throws DukeException If setInput throws DukeException."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public void execute() throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        template.addGate(gate, index);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * Returns the String representation of the AddBooleanCommand."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @return String representation."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return \"Nice, added \" + gate + \" at \" + (char)(index + \u0027A\u0027) + System.lineSeparator() + \u0027\\t\u0027 + super.toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorianfong98": 4,
      "hughjazzman": 37
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/commands/gates/BooleanCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.logic.commands.gates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.model.template.BooleanTemplate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * The BooleanCommand class inherits from the Command class"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * and is used to create BooleanCommand objects."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "public abstract class BooleanCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    protected final BooleanTemplate template;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    protected BooleanCommand(BooleanTemplate template) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        this.template \u003d template;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return template.toString();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorianfong98": 5,
      "hughjazzman": 17
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/commands/gates/CalculateBooleanCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.logic.commands.gates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.model.template.BooleanTemplate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * The CalculateBooleanCommand class inherits from the BooleanCommand class,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * and is used to calculate the effective output of the configured logic gates stored in the BinaryTree."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "public class CalculateBooleanCommand extends BooleanCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"calc\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private boolean output;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public CalculateBooleanCommand(BooleanTemplate template) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        super(template);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public void execute() throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        output \u003d template.calculateOutput();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return super.toString() + System.lineSeparator()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "                + \"\\tThe output of the above configuration is \" + (output ? \"1\" : \"0\") + \".\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorianfong98": 4,
      "hughjazzman": 18,
      "sevenseasofbri": 6
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/commands/gates/SetBooleanCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.logic.commands.gates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.model.template.BooleanTemplate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * * The SetBooleanCommand class inherits from the BooleanCommand class"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * and is used to set the boolean values in the current boolean template."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "public class SetBooleanCommand extends BooleanCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"set\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private final boolean value;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private final int index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public SetBooleanCommand(BooleanTemplate booleanTemplate, boolean value, int index) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        super(booleanTemplate);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * Executes the setting of value in BooleanTemplate."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @throws DukeException If setInput throws DukeException."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public void execute() throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        template.setInput(value, index);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * Returns String representation of SetBooleanCommand."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @return String representation."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return \"Successfully set \" + (char)(index + \u0027A\u0027) + \" to \" + (value ? \"1\" : \"0\") + System.lineSeparator()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "                + \u0027\\t\u0027 + super.toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorianfong98": 4,
      "hughjazzman": 37
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/commands/gates/TemplateBooleanCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.logic.commands.gates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.model.template.BooleanTemplate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * The BooleanCircuitCommand class inherits from the BooleanCommand class"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " *  and is used to instantiate a boolean template."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "public class TemplateBooleanCommand extends BooleanCommand {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"template\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public TemplateBooleanCommand(BooleanTemplate template) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        super(template);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return \"New Boolean template chosen with \" + template.getCircuit().getRoot() + \" gate at the root.\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "                + System.lineSeparator() + \u0027\\t\u0027 + super.toString();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorianfong98": 4,
      "hughjazzman": 22
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/commands/gates/TutorialBooleanCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "package seedu.duke.logic.commands.gates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "import seedu.duke.logic.commands.SummaryCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import seedu.duke.logic.commands.TutorialCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.logic.commands.exceptions.IncorrectCommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import seedu.duke.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * The TutorialCircuitCommand class inherits from the SummaryCommand and implements the TutorialCommand interface"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * It is used to go through the full interactive tutorial on boolean logic gates."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "public class TutorialBooleanCommand extends SummaryCommand implements TutorialCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    private static final Parser PARSER \u003d new Parser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    private int numberOfCommandsDone \u003d 0;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    private static final String[] orderOfInstructions \u003d {\"template and\", \"set b\", \"set c\", \"calc\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        \"add c\", \"set f\", \"set g\", \"calc\"};"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    private final Ui ui;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    public TutorialBooleanCommand() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        ui.printWelcomeTutorial();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        String command;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        String readCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        boolean isNotDone \u003d true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        while (isNotDone) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "            assert numberOfCommandsDone \u003c Ui.BOOLEAN_INSTRUCTIONS.length;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "            ui.printBooleanInstruction(numberOfCommandsDone);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            readCommand \u003d ui.readLine();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            command \u003d readCommand.toLowerCase();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "                isNotDone \u003d continueTutorial(command, ui);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "                LOGGER.log(Level.FINE, \"Bad Command DukeException thrown\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "                ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        LOGGER.info(\"Exiting help mode\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    public boolean continueTutorial(String command, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        if (command.equals(\"exit\")) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        if (numberOfCommandsDone \u003e\u003d 8 || !command.matches(orderOfInstructions[numberOfCommandsDone] + \"(.*)\")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            throw new IncorrectCommandException();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        BooleanCommand b \u003d (BooleanCommand) PARSER.parse(command);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        b.execute();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        ui.printMessage(b.toString());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        numberOfCommandsDone++;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        return \"You have exited Tutorial Mode!\\n\" + super.toString() + \"\\t:) Have fun using CLIrcuit Assistant!\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oasisbeatle": 31,
      "dorianfong98": 4,
      "hughjazzman": 4,
      "sevenseasofbri": 30
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/parser/BooleanParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.logic.commands.gates.AddBooleanCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.logic.commands.gates.BooleanCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.logic.commands.gates.CalculateBooleanCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.logic.commands.gates.SetBooleanCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.logic.commands.gates.TemplateBooleanCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.logic.parser.exceptions.InvalidCommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.logic.parser.exceptions.InvalidGateException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.logic.parser.exceptions.InvalidInputException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.logic.parser.exceptions.InvalidPositionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.logic.parser.exceptions.NoTemplateException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.logic.parser.exceptions.NotEnoughArgumentsException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.logic.parser.exceptions.ParserException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import seedu.duke.model.gates.AndGate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import seedu.duke.model.gates.Gate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import seedu.duke.model.gates.NandGate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import seedu.duke.model.gates.NorGate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import seedu.duke.model.gates.OrGate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import seedu.duke.model.gates.XnorGate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import seedu.duke.model.gates.XorGate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.model.template.BooleanTemplate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * The BooleanParser class implements the LogicParser interface and is used to prepare"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * the respective boolean templates."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "public class BooleanParser implements LogicParser {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private BooleanTemplate booleanTemplate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * Returns a BooleanCommand object based on the input line."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @param args Array of arguments."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @param command Command as String."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @return BooleanCommand object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @throws DukeException If given line is blank."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public BooleanCommand parse(String[] args, String command) throws DukeException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        case SetBooleanCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            return prepareBooleanSet(args);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        case AddBooleanCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            return prepareBooleanAdd(args);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        case CalculateBooleanCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            return prepareBooleanCalculate();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            throw new InvalidCommandException();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * Prepares arguments for template command with BooleanTemplate."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @param args Template chosen."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @return TemplateBooleanCommand object."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @throws DukeException If parsing error occurs."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public TemplateBooleanCommand prepareBooleanTemplate(String[] args) throws DukeException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        booleanTemplate \u003d getBooleanTemplate(args[1]);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return new TemplateBooleanCommand(booleanTemplate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private boolean hasNoTemplate() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return booleanTemplate \u003d\u003d null;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private boolean isValidInput(String arg) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            Integer.parseInt(arg);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private boolean hasMinArguments(String[] args, int i) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return args.length \u003c i;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * Returns the SetBooleanCommand after parsing the input arguments."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @param args User Input arguments."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @return SetBooleanCommand object to be executed."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @throws ParserException If input parsed incorrectly, or no template set yet."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private SetBooleanCommand prepareBooleanSet(String[] args) throws ParserException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        if (hasMinArguments(args, 3)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            throw new NotEnoughArgumentsException(3);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        if (!isValidInput(args[2])) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            throw new InvalidInputException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        if (hasNoTemplate()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            throw new NoTemplateException();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        int index \u003d getIndex(args[1]);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        boolean input \u003d Integer.parseInt(args[2]) !\u003d 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return new SetBooleanCommand(booleanTemplate, input, index);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * Extracts index number the command passed."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * @param arg String type command input."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * @return int type index."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @throws InvalidPositionException If the index passed is invalid."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private int getIndex(String arg) throws InvalidPositionException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        String capsArg \u003d arg.toUpperCase();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        int index \u003d capsArg.charAt(0) - \u0027A\u0027;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d 16 || arg.length() \u003e 1) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            throw new InvalidPositionException();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * Returns an instance of AddBooleanCommand after parsing the user input."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * @param args String type user input."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * @return AddBooleanCommand instance to be executed."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @throws ParserException If input parsed is incorrect or no template is set yet."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private AddBooleanCommand prepareBooleanAdd(String[] args) throws ParserException {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        if (hasMinArguments(args, 3)) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            throw new NotEnoughArgumentsException(3);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        if (hasNoTemplate()) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            throw new NoTemplateException();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        int index \u003d getIndex(args[1]);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        Gate gate \u003d getGate(args[2]);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return new AddBooleanCommand(booleanTemplate, gate, index);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * Returns new instance of CalculateBooleanCommand after parsing user input."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * @return CalculateBooleanCommand instance to be executed."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @throws NoTemplateException If the template hasn\u0027t been set yet."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private CalculateBooleanCommand prepareBooleanCalculate() throws NoTemplateException {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        if (hasNoTemplate()) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            throw new NoTemplateException();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        return new CalculateBooleanCommand(booleanTemplate);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * Parses user command to determine and return the gate instance specified."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     *"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * @param arg String type user input."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * @return Gate type object."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @throws InvalidGateException If gate specified is invalid."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private Gate getGate(String arg) throws InvalidGateException {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        switch (arg.toLowerCase()) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        case \"and\":"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            return new AndGate();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        case \"or\":"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            return new OrGate();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        case \"xor\":"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            return new XorGate();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        case \"nand\":"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            return new NandGate();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        case \"nor\":"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            return new NorGate();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        case \"xnor\":"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            return new XnorGate();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            throw new InvalidGateException();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * Returns new instance of BooleanTemplate class."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     *"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * @param arg String type user input."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * @return BooleanTemplate type instance."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @throws DukeException If the gate processed is invalid or BooleanTemplate cannot be created."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private BooleanTemplate getBooleanTemplate(String arg) throws DukeException {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        Gate gate \u003d getGate(arg);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return new BooleanTemplate(gate);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorianfong98": 4,
      "hughjazzman": 144,
      "sevenseasofbri": 46
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/parser/CircuitParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.logic.commands.circuit.AddCircuitCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.logic.commands.circuit.CalculateCircuitCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.logic.commands.circuit.CircuitCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.logic.commands.circuit.SetCircuitCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.logic.commands.circuit.TemplateCircuitCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.logic.parser.exceptions.InvalidArgumentException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.logic.parser.exceptions.InvalidCommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.logic.parser.exceptions.InvalidNumberException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.logic.parser.exceptions.InvalidTemplateException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.logic.parser.exceptions.NoTemplateException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.logic.parser.exceptions.NotEnoughArgumentsException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.model.template.CircuitTemplate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.model.template.LcTemplate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.model.template.LrTemplate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.model.template.RTemplate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.model.template.RcTemplate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * The CircuitParser class implements the LogicParser interface and is used to prepare"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * the respective circuit templates."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "public class CircuitParser implements LogicParser {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private CircuitTemplate circuitTemplate \u003d null;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * Returns a CircuitCommand object based on the input line."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @param args Array of arguments."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @param command Command as String."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @return CircuitCommand object."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @throws DukeException If given line is blank."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public CircuitCommand parse(String[] args, String command) throws DukeException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        case SetCircuitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            return prepareCircuitSet(args);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        case AddCircuitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            return prepareCircuitAdd(args);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        case CalculateCircuitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            return prepareCircuitCalc(args);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            throw new InvalidCommandException();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * Prepares arguments for template command with BooleanTemplate."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @param args Template chosen."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @return TemplateBooleanCommand object."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @throws DukeException If parsing error occurs."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public TemplateCircuitCommand prepareCircuitTemplate(String[] args) throws DukeException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        circuitTemplate \u003d getCircuitTemplate(args[1]);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return new TemplateCircuitCommand(circuitTemplate);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private boolean isComponent(String arg) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return arg.equals(\"r\") || arg.equals(\"c\") || arg.equals(\"l\") || arg.equals(\"v\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author hughjazzman-reused"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    //Reused from https://stackoverflow.com/a/1102916 with minor modifications"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean isNotNumeric(String str) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return !(Double.parseDouble(str) \u003e 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private boolean hasNoTemplate() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return circuitTemplate \u003d\u003d null;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private CircuitTemplate getCircuitTemplate(String arg) throws DukeException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        switch (arg) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        case \"rl\":"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            return new LrTemplate();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        case \"rc\":"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            return new RcTemplate();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        case \"r\":"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            return new RTemplate();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        case \"lc\":"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            return new LcTemplate();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            throw new InvalidTemplateException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private CircuitCommand prepareCircuitSet(String[] args) throws DukeException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        if (hasMinArguments(args, 3)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            throw new NotEnoughArgumentsException(3);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        if (hasNoTemplate()) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            throw new NoTemplateException();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        if (!isComponent(args[1])) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            throw new InvalidArgumentException();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        if (isNotNumeric(args[2])) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            throw new InvalidNumberException();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        double value \u003d Double.parseDouble(args[2]);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        assert value \u003e 0;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return new SetCircuitCommand(circuitTemplate, args[1], value);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private boolean hasMinArguments(String[] args, int i) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return args.length \u003c i;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private CircuitCommand prepareCircuitAdd(String[] args) throws DukeException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        if (hasMinArguments(args, 4)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            throw new NotEnoughArgumentsException(4);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        if (hasNoTemplate()) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            throw new NoTemplateException();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        boolean isConfig \u003d args[1].equals(\"parallel\") || args[1].equals(\"series\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        boolean isValid \u003d isConfig \u0026\u0026 isComponent(args[2]);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        if (!isValid) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            throw new InvalidArgumentException();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        if (isNotNumeric(args[3])) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            throw new InvalidNumberException();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        double value \u003d Double.parseDouble(args[3]);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        assert value \u003e 0;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return new AddCircuitCommand(circuitTemplate, args[1], args[2], value);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private CircuitCommand prepareCircuitCalc(String[] args) throws DukeException {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        if (hasMinArguments(args, 2)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            throw new NotEnoughArgumentsException(2);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        if (hasNoTemplate()) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            throw new NoTemplateException();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        boolean isCalc \u003d args[1].equals(\"reff\") || args[1].equals(\"ceff\") || args[1].equals(\"leff\")"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "                || args[1].equals(\"current\") || args[1].equals(\"power\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        if (!isCalc) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            throw new InvalidArgumentException();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return new CalculateCircuitCommand(circuitTemplate, args[1]);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorianfong98": 4,
      "hughjazzman": 146,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/parser/LogicParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.logic.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * The LogicParser interface is used to group parsers."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "public interface LogicParser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    Command parse(String[] args, String command) throws DukeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorianfong98": 3,
      "hughjazzman": 8
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.logic.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.logic.commands.SummaryCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import seedu.duke.logic.commands.TutorialCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.logic.commands.circuit.TemplateCircuitCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import seedu.duke.logic.commands.circuit.TutorialCircuitCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import seedu.duke.logic.commands.gates.TutorialBooleanCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.logic.parser.exceptions.InvalidArgumentException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.logic.parser.exceptions.InvalidCommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.logic.parser.exceptions.InvalidTemplateException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.logic.parser.exceptions.NotEnoughArgumentsException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " *  The Parser class handles text parsing for CLIrcuit Assistant."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " *  It is the abstract base class for all parser types."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    private static final Logger LOGGER \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private boolean isCircuit \u003d true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private final CircuitParser circuitParser \u003d new CircuitParser();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private final BooleanParser booleanParser \u003d new BooleanParser();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * Returns a Command object based on the input line."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @param line Line of user input."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @return Command object."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @throws DukeException If given line is blank."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public Command parse(String line) throws DukeException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        // Prevent blank tasks"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        if (line.isBlank()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            LOGGER.log(Level.WARNING, \"Blank line entered.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            throw new InvalidCommandException();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        // split by whitespace"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        String[] args \u003d line.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        String command \u003d args[0].toLowerCase();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        case SummaryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            return new SummaryCommand();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        case TutorialCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            return prepareTutorial(args);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        case TemplateCircuitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            return prepareTemplate(args);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        if (isCircuit) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            return circuitParser.parse(args, command);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            return booleanParser.parse(args, command);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private Command prepareTemplate(String[] args) throws DukeException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        if (args.length \u003c 2) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            throw new NotEnoughArgumentsException(2);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        String firstArg \u003d args[1].toLowerCase();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        boolean isCircuitTemplate \u003d firstArg.equals(\"r\") || firstArg.equals(\"rc\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "                || firstArg.equals(\"rl\") || firstArg.equals(\"lc\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        boolean isBooleanTemplate \u003d firstArg.equals(\"and\") || firstArg.equals(\"or\") || firstArg.equals(\"xor\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "                || firstArg.equals(\"nand\") || firstArg.equals(\"nor\") || firstArg.equals(\"xnor\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        if (isCircuitTemplate) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            isCircuit \u003d true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            return circuitParser.prepareCircuitTemplate(args);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        } else if (isBooleanTemplate) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            isCircuit \u003d false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            return booleanParser.prepareBooleanTemplate(args);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        throw new InvalidArgumentException();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    private Command prepareTutorial(String[] args) throws DukeException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        if (args.length \u003c 2) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            throw new NotEnoughArgumentsException(2);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        String command \u003d args[1].toLowerCase();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        case \"circuit\":"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            return new TutorialCircuitCommand();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        case \"boolean\":"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            return new TutorialBooleanCommand();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            throw new InvalidTemplateException();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorianfong98": 4,
      "hughjazzman": 74,
      "sevenseasofbri": 24
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/parser/exceptions/InvalidArgumentException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * The InvalidArgumentException class inherits from the ParserException class"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * and is thrown if the argument entered is invalid."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "public class InvalidArgumentException extends ParserException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public InvalidArgumentException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        super(\"Invalid argument! Please follow the format for the command being used.\" + System.lineSeparator()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "                + \"\\tYou can use the command \u0027summary\u0027 to take a look at all the commands.\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorianfong98": 4,
      "hughjazzman": 7,
      "sevenseasofbri": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/parser/exceptions/InvalidCommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * The InvalidCommandException class inherits from the ParserException class"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * and is thrown if the command entered is invalid."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "public class InvalidCommandException extends ParserException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public InvalidCommandException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        super(\"Invalid Command! Use the command \u0027summary\u0027 to take a look at all the available commands.\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorianfong98": 4,
      "hughjazzman": 7
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/parser/exceptions/InvalidGateException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * The InvalidGateException class inherits from the ParserException class"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * and is thrown if the gate entered is invalid."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "public class InvalidGateException extends ParserException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public InvalidGateException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        super(\"Invalid gate chosen! You can take a look at possible gates using the \u0027summary\u0027 command.\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorianfong98": 4,
      "hughjazzman": 7
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/parser/exceptions/InvalidInputException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * The InvalidInputException class inherits from the ParserException class"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * and is thrown if the input entered is invalid."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "public class InvalidInputException extends ParserException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public InvalidInputException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        super(\"Invalid input chosen! You should only choose 0 or 1 as input.\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorianfong98": 4,
      "hughjazzman": 7
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/parser/exceptions/InvalidNumberException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * The InvalidNumberException class inherits from the ParserException class"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * and is thrown if the input value is invalid."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "public class InvalidNumberException extends ParserException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public InvalidNumberException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        super(\"Invalid number! You should use a positive number.\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorianfong98": 4,
      "hughjazzman": 7
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/parser/exceptions/InvalidPositionException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * The InvalidPositionException class inherits from the ParserException class"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * and is thrown if the position entered is invalid."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "public class InvalidPositionException extends ParserException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public InvalidPositionException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        super(\"Invalid position chosen! Make sure the single letter position specified\\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "                + \"\\tis depicted in the current logic diagram.\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorianfong98": 4,
      "hughjazzman": 6,
      "sevenseasofbri": 2
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/parser/exceptions/InvalidTemplateException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * The InvalidTemplateException class inherits from the ParserException class"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * and is thrown if the tutorial mode entered is invalid."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "public class InvalidTemplateException extends ParserException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public InvalidTemplateException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        super(\"Please enter a valid tutorial type!\\n\\tUse \u0027tutorial circuit\u0027 or \u0027tutorial boolean\u0027.\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorianfong98": 4,
      "hughjazzman": 6,
      "sevenseasofbri": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/parser/exceptions/NoTemplateException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * The NoTemplateException class inherits from the ParserException class and"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * is thrown if the template has yet to be chosen."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "public class NoTemplateException extends ParserException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public NoTemplateException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        super(\"No template set yet! Use the \u0027summary\u0027 command to see the available templates.\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorianfong98": 4,
      "hughjazzman": 7
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/parser/exceptions/NotEnoughArgumentsException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * The NotEnoughArgumentsException class inherits from the ParserException class"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * and is thrown if the number of arguments entered is insufficient to parse."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "public class NotEnoughArgumentsException extends ParserException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public NotEnoughArgumentsException(int n) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        super(\"Not enough arguments! The command used needs \" + n + \" arguments.\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorianfong98": 4,
      "hughjazzman": 7
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/parser/exceptions/ParserException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * The CommandException class is the exception class for exceptions involving the Parser class."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "public abstract class ParserException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public ParserException(String s) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        super(s);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorianfong98": 3,
      "hughjazzman": 9
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/binarytree/BinaryTree.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "package seedu.duke.model.binarytree;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import seedu.duke.model.exceptions.binarytreeexceptions.BinaryTreeInvalidIndexException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * A Binary Tree-like structure (Heap) is used for implementing the Boolean Commands."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * The BinaryTree class is used to create BinaryTree objects."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * When an object of the BinaryTree class is created,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * it initialises the ArrayList instance to 15 null values."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "public class BinaryTree\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    public final ArrayList\u003cT\u003e arrayList \u003d new ArrayList\u003c\u003e(Collections.nCopies(15, null));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public BinaryTree(T root) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        arrayList.set(0, root);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    public BinaryTree() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        this(null);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * Checks if the tree is empty."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * @return boolean value, true if the tree is empty, otherwise false."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        return isNullAtIndex(0);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * Returns the root of the tree."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * @return T type value, root of the tree."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return arrayList.get(0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * Returns whether the index is out of bound of the range of the tree."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * @param idx int type input index"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * @return boolean value true if out of bounds otherwise false."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private boolean isOutOfBounds(int idx) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return idx \u003c 0 || idx \u003e\u003d arrayList.size();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * Returns T object at index of tree."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @param idx Index in tree."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @return T object."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * @throws BinaryTreeInvalidIndexException If the index specified is invalid."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    public T getT(int idx) throws BinaryTreeInvalidIndexException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        int parentIndex \u003d getParentIndex(idx);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        boolean hasParent \u003d !isNullAtIndex(parentIndex);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        boolean isRoot \u003d idx \u003d\u003d 0;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        // Not the root or has no parent"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        boolean isExisting \u003d isRoot || (hasParent);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        // If out of bounds or does not exist currently"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        if (isOutOfBounds(idx) || !isExisting) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            throw new BinaryTreeInvalidIndexException();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return arrayList.get(idx);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * Inserts T type value at specified position in the tree."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * @param idx int type specifies position to insert element."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * @param t T type value to be inserted."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * @throws BinaryTreeInvalidIndexException If the index specified is invalid."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    public void insert(int idx, T t) throws BinaryTreeInvalidIndexException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        if (isOutOfBounds(idx) || isNullAtIndex(getParentIndex(idx))) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            throw new BinaryTreeInvalidIndexException();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        arrayList.set(idx, t);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * Returns the index of the parent."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @param idx Index of child."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @return int Index of parent."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    public int getParentIndex(int idx) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        if (idx % 2 \u003d\u003d 0) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            return idx / 2 - 1;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            return idx / 2;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * Returns left child index."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @param idx Index of parent."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @return int Index of left child."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public int getLeftIndex(int idx) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return 2 * idx + 1;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * Returns right child index."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @param idx Index of parent."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @return int Index of right child."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public int getRightIndex(int idx) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return 2 * idx + 2;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private int getHeight(int idx) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return (int) (Math.log(idx + 1) / Math.log(2));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * Returns whether an index is null in the tree."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @param idx Index in tree."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @return boolean whether index is null."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    public boolean isNullAtIndex(int idx) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        boolean isNull;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            isNull \u003d arrayList.get(idx) \u003d\u003d null;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            isNull \u003d true;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        return isNull;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private boolean hasLeftChild(int index) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return !isNullAtIndex(getLeftIndex(index));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private boolean hasRightChild(int index) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return !isNullAtIndex(getRightIndex(index));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * Returns whether node at specified index is a leaf node or not."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * @param index int type specifying index of node."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * @return boolean value, true if node is a leaf, else false."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    public boolean isLeaf(int index) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        boolean hasNoChildren \u003d !hasLeftChild(index) \u0026\u0026 !hasRightChild(index);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        return !isNullAtIndex(index) \u0026\u0026 hasNoChildren;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorianfong98": 7,
      "hughjazzman": 94,
      "sevenseasofbri": 63
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/component/Capacitor.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.model.component;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * The Capacitor class inherits from the LoadComponent class"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * and is used to create Capacitor objects."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "public class Capacitor extends LoadComponent {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    private static final String SI_UNIT \u003d \"µF\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    public Capacitor(double value) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        super(value);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        siUnit \u003d SI_UNIT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        isDirectSeries \u003d false;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oasisbeatle": 7,
      "dorianfong98": 4,
      "hughjazzman": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/component/Component.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.model.component;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import seedu.duke.model.exceptions.componentexceptions.ZeroComponentException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * The Component class is used to create Component objects."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "public abstract class Component {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    protected double value;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    protected String siUnit;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public Component(double value) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "     * Returns the value of the Component."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "     * @return Value of Component."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    public double getValue() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "     * Sets the value of the Component."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "     * @param value Value of Component."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    public void setValue(double value) throws ZeroComponentException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        if (value \u003c\u003d 0) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            throw new ZeroComponentException();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * Returns the value and unit of Component object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @return String representation of Component value"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return (value) + \" \" + siUnit;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oasisbeatle": 20,
      "dorianfong98": 3,
      "hughjazzman": 19,
      "sevenseasofbri": 5
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/component/Inductor.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.model.component;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * The Inductor class inherits from the LoadComponent class"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * and is used to create Inductor objects."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "public class Inductor extends LoadComponent {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    private static final String SI_UNIT \u003d \"µH\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    public Inductor(double value) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        super(value);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        siUnit \u003d SI_UNIT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        isDirectSeries \u003d true;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorianfong98": 4,
      "hughjazzman": 4,
      "sevenseasofbri": 7
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/component/LoadComponent.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.model.component;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import seedu.duke.model.exceptions.componentexceptions.ZeroComponentException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * The LoadComponent class inherits from the Component class"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * and is used to create LoadComponent objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "public abstract class LoadComponent extends Component {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    protected boolean isDirectSeries;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public LoadComponent(double value) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        super(value);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    private double addDirect(double otherValue) throws ZeroComponentException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        if (otherValue \u003c\u003d 0) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            throw new ZeroComponentException();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return value + otherValue;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    private double addReciprocal(double otherValue) throws ZeroComponentException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        if (otherValue \u003c\u003d 0) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            throw new ZeroComponentException();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        if (value !\u003d 0) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            return 1 / ((1 / value) + (1 / otherValue));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            return otherValue;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * Returns the effective Component value when added in series."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @param otherValue Component value."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @return Effective value."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * @throws ZeroComponentException If value or otherValue is \u003c\u003d0."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    public double addSeries(double otherValue) throws ZeroComponentException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        if (isDirectSeries) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            return addDirect(otherValue);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            return addReciprocal(otherValue);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * Returns the effective Component value when added in parallel."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @param otherValue Component value."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @return Effective value."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * @throws ZeroComponentException If value or otherValue is non-positive."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    public double addParallel(double otherValue) throws ZeroComponentException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        if (!isDirectSeries) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            return addDirect(otherValue);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            return addReciprocal(otherValue);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorianfong98": 4,
      "oasisbeatle": 3,
      "hughjazzman": 43,
      "sevenseasofbri": 13
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/component/Resistor.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.model.component;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * The Resistor class inherits from the LoadComponent class"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * and is used to create Resistor objects."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "public class Resistor extends LoadComponent {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    private static final String SI_UNIT \u003d \"Ω\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    public Resistor(double value) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        super(value);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        siUnit \u003d SI_UNIT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        isDirectSeries \u003d true;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorianfong98": 4,
      "hughjazzman": 4,
      "PraveenElango": 7
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/component/VoltageSource.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.model.component;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * The VoltageSource class inherits from the Component class"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * and is used to create VoltageSource objects."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "public class VoltageSource extends Component {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "    private static final String SI_UNIT \u003d \"V\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "    public VoltageSource(double value) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "        super(value);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        siUnit \u003d SI_UNIT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorianfong98": 12,
      "hughjazzman": 2
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/exceptions/binarytreeexceptions/BinaryTreeException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "package seedu.duke.model.exceptions.binarytreeexceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * The BinaryTreeException class inherits from the DukeException class and"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * is the exception class for handling exceptions concerning the BinaryTree class."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "public abstract class BinaryTreeException extends DukeException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    public BinaryTreeException(String s) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        super(s);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorianfong98": 4,
      "sevenseasofbri": 9
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/exceptions/binarytreeexceptions/BinaryTreeInvalidIndexException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "package seedu.duke.model.exceptions.binarytreeexceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * The BinaryTreeInvalidIndexException class inherits from the BinaryTreeException class and"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * is thrown when the index entered is out of bounds."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "public class BinaryTreeInvalidIndexException extends BinaryTreeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    public BinaryTreeInvalidIndexException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        super(\"Position specified is out of bounds!\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorianfong98": 4,
      "sevenseasofbri": 7
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/exceptions/componentexceptions/ComponentException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "package seedu.duke.model.exceptions.componentexceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * The ComponentException class inherits from the DukeException class and"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * is the exception class for handling exceptions concerning the Component class."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "public abstract class ComponentException extends DukeException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    public ComponentException(String s) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        super(s);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorianfong98": 4,
      "sevenseasofbri": 9
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/exceptions/componentexceptions/ZeroComponentException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "package seedu.duke.model.exceptions.componentexceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * The ZeroComponentException class inherits from the ComponentException class and"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * is thrown when the value entered is zero or negative."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "public class ZeroComponentException extends ComponentException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    public ZeroComponentException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        super(\"You tried to enter a value \u003c\u003d0! Please use +ve real numbers for component values.\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorianfong98": 4,
      "sevenseasofbri": 7
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/exceptions/gatesexceptions/GateException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "package seedu.duke.model.exceptions.gatesexceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * The GateException class inherits from the DukeException class and"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * is the exception class for handling gate-related exceptions."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "public abstract class GateException extends DukeException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    public GateException(String s) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        super(s);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorianfong98": 4,
      "sevenseasofbri": 9
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/exceptions/gatesexceptions/InputsNotSetException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "package seedu.duke.model.exceptions.gatesexceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * The InputsNotSetException class inherits from the GateException class and"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * is thrown when any inputs have yet to be set."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "public class InputsNotSetException extends GateException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    public InputsNotSetException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        super(\":( Input(s) not set yet! Remember to set the values marked as ? before trying to calculate output.\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorianfong98": 4,
      "sevenseasofbri": 7
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/exceptions/templateexceptions/GateSetException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "package seedu.duke.model.exceptions.templateexceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * The GateSetException class inherits from the TemplateException class and"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * is thrown when the current position is already set as a gate."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "public class GateSetException extends TemplateException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    public GateSetException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        super(\":( The current position you are trying to set to a logic level is already set as a gate!\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorianfong98": 4,
      "sevenseasofbri": 7
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/exceptions/templateexceptions/GatesToChannelsException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "package seedu.duke.model.exceptions.templateexceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * The GateToChannelsException class inherits from the TemplateException class and"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * is thrown when the user attempts to add logic gates to channels."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "public class GatesToChannelsException extends TemplateException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    public GatesToChannelsException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        super(\"Cannot add gates to channels H, I, J, K, L, M, N, O! Try setting them instead.\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorianfong98": 4,
      "sevenseasofbri": 7
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/exceptions/templateexceptions/InputNotSetException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "package seedu.duke.model.exceptions.templateexceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * The InputNotSetException class inherits from the TemplateException class and"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * is thrown when an input has yet to be set."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "public class InputNotSetException extends TemplateException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    public InputNotSetException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        super(\"Oops! An input hasn\u0027t been set yet.\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorianfong98": 4,
      "sevenseasofbri": 7
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/exceptions/templateexceptions/InvalidComponentException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "package seedu.duke.model.exceptions.templateexceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * The InvalidComponentException class inherits from the TemplateException class and"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * is thrown when an invalid component has been used."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "public class InvalidComponentException extends TemplateException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    public InvalidComponentException(String s) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        super(\"You\u0027ve tried to use a \" + s + \" in a circuit template that doesn\u0027t support \" + s + \".\\n\\tIf you want to \""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "                + \"use \" + s + \" in your circuit, then consider trying out \" + (s.equals(\"l\") ? \"template lc or \""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "                + \"template rl\" : s.equals(\"c\") ? \"template lc or template rc\" :"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            \"template or template rl or template rc\") + \"\\n\\tinstead.\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorianfong98": 4,
      "sevenseasofbri": 10
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/exceptions/templateexceptions/ParentGateNotSetException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "package seedu.duke.model.exceptions.templateexceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * The ParentGateNotSetException class inherits from the TemplateException class and"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * is thrown when the parent gate has yet to be set."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "public class ParentGateNotSetException extends TemplateException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    public ParentGateNotSetException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        super(\"Parent gate not set yet!\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorianfong98": 4,
      "sevenseasofbri": 7
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/exceptions/templateexceptions/TemplateComponentsNotSetException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "package seedu.duke.model.exceptions.templateexceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * The TemplateComponentsNotSetException class inherits from the TemplateException class and"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * is thrown when any component in the current template has yet to be set."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "public class TemplateComponentsNotSetException extends TemplateException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    public TemplateComponentsNotSetException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        super(\"Component(s) in the circuit haven\u0027t been set yet! :(\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorianfong98": 4,
      "sevenseasofbri": 7
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/exceptions/templateexceptions/TemplateException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "package seedu.duke.model.exceptions.templateexceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * The TemplateException class inherits from the DukeException class and"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * is the exception class for handling template-related exceptions."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "public abstract class TemplateException extends DukeException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    public TemplateException(String s) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        super(s);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorianfong98": 4,
      "sevenseasofbri": 9
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/gates/AndGate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.model.gates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import seedu.duke.model.exceptions.gatesexceptions.InputsNotSetException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * The AndGate class inherits from the Gate class"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * and is used to create AndGate objects."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "public class AndGate extends Gate {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private static final String AND \u003d \"AND\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * Performs bitwise AND (\u0026) operation on the input instance variables and returns the output."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * @return boolean value of the gate output."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * @throws InputsNotSetException If both inputs aren\u0027t set yet."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    public boolean getOutput() throws InputsNotSetException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        checkHasSetBothInput();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        return input \u0026 secondInput;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * Returns String representation of the AND gate."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * @return String type depiction of AND gate."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        return AND;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorianfong98": 4,
      "hughjazzman": 2,
      "sevenseasofbri": 28
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/gates/Gate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.model.gates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import seedu.duke.model.exceptions.gatesexceptions.InputsNotSetException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * The Gate class is used to create Gate objects."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "public abstract class Gate {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    protected boolean output;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    protected boolean input;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    protected boolean secondInput;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    protected boolean isSetInput \u003d false;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    protected boolean isSetSecondInput \u003d false;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public Gate(boolean input, boolean secondInput) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        this.secondInput \u003d secondInput;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    public Gate() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        this(false, false);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * Returns output of gate."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * @return boolean type output value."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * @throws InputsNotSetException If the inputs aren\u0027t set."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    public abstract boolean getOutput() throws InputsNotSetException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public void setInput(boolean input) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        isSetInput \u003d true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * Sets second input to the gate."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * @param input int type value that can be either 0 or 1."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public void setSecondInput(boolean input) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        secondInput \u003d input;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        isSetSecondInput \u003d true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * Returns input of gate."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @return int input"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public boolean getInput() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return input;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * Returns second input of gate."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * @return int second input"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public boolean getSecondInput() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        return secondInput;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * Returns whether input is set."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public boolean isSetInput() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return isSetInput;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * Returns whether second input is set."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    public boolean isSetSecondInput() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        return isSetSecondInput;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * Checks is input has been set or not."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * @throws InputsNotSetException If an input is not set."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    protected void checkHasSetBothInput() throws InputsNotSetException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        if (!(isSetSecondInput \u0026\u0026 isSetInput)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            throw new InputsNotSetException();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorianfong98": 3,
      "hughjazzman": 28,
      "sevenseasofbri": 63
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/gates/NandGate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.model.gates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import seedu.duke.model.exceptions.gatesexceptions.InputsNotSetException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * The NandGate class inherits from the AndGate class"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * and is used to create NandGate objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "public class NandGate extends AndGate {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private static final String NAND \u003d \"NAND\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * Performs bitwise NAND (!\u0026) operation on the input instance variables and returns the output."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * @return boolean value of the gate output."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * @throws InputsNotSetException If both inputs aren\u0027t set yet."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    public boolean getOutput() throws InputsNotSetException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return !(super.getOutput());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "     * Returns String representation of the NAND gate."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "     * @return String type depiction of NAND gate."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        return NAND;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oasisbeatle": 18,
      "dorianfong98": 4,
      "hughjazzman": 4,
      "sevenseasofbri": 6
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/gates/NorGate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.model.gates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import seedu.duke.model.exceptions.gatesexceptions.InputsNotSetException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * The NorGate class inherits from the OrGate class"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * and is used to create NorGate objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "public class NorGate extends OrGate {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private static final String NOR \u003d \"NOR\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * Performs bitwise NOR (~|) operation on the input instance variables and returns output."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * @return boolean value of the gate output."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * @throws InputsNotSetException If both inputs aren\u0027t set yet."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    public boolean getOutput() throws InputsNotSetException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        checkHasSetBothInput();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return !(super.getOutput());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "     * Returns String representation of the NOR gate."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "     * @return String type depiction of NOR gate."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        return NOR;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "oasisbeatle": 19,
      "dorianfong98": 4,
      "hughjazzman": 4,
      "sevenseasofbri": 7
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/gates/OrGate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.model.gates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import seedu.duke.model.exceptions.gatesexceptions.InputsNotSetException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * The OrGate class inherits from the Gate class"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * and is used to create OrGate objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "public class OrGate extends Gate {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private static final String OR \u003d \"OR\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * Performs bitwise OR (|) operation on the input instance variables and returns output."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * @return boolean value of the gate output."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * @throws InputsNotSetException If both inputs aren\u0027t set yet."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    public boolean getOutput() throws InputsNotSetException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        checkHasSetBothInput();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        return input | secondInput;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "     * Returns String representation of the OR gate."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "     * @return String type depiction of OR gate."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        return OR;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorianfong98": 4,
      "hughjazzman": 2,
      "sevenseasofbri": 8,
      "PraveenElango": 19
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/gates/XnorGate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.model.gates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import seedu.duke.model.exceptions.gatesexceptions.InputsNotSetException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * The XnorGate class inherits from the XorGate class"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * and is used to create XnorGate objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "public class XnorGate extends XorGate {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private static final String XNOR \u003d \"XNOR\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * Performs bitwise XNOR (!^) operation on the input instance variables and returns output."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * @return boolean value of the gate output."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * @throws InputsNotSetException If both inputs aren\u0027t set yet."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    public boolean getOutput() throws InputsNotSetException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return !(super.getOutput());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "     * Returns String representation of the XNOR gate."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "     * @return String type depiction of XNOR gate."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        return XNOR;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oasisbeatle": 18,
      "dorianfong98": 4,
      "hughjazzman": 4,
      "sevenseasofbri": 6
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/gates/XorGate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.model.gates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import seedu.duke.model.exceptions.gatesexceptions.InputsNotSetException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * The XorGate class inherits from the Gate class"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * and is used to create XorGate objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "public class XorGate extends Gate {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private static final String XOR \u003d \"XOR\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * Performs bitwise XOR (^) operation on the input instance variables and returns output."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * @return boolean value of the gate output."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * @throws InputsNotSetException If both inputs aren\u0027t set yet."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    public boolean getOutput() throws InputsNotSetException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        checkHasSetBothInput();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        return input ^ secondInput;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "     * Returns String representation of the XOR gate."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "     * @return String type depiction of XOR gate."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        return XOR;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorianfong98": 4,
      "hughjazzman": 2,
      "sevenseasofbri": 8,
      "PraveenElango": 19
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/template/BooleanTemplate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.model.template;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import seedu.duke.model.binarytree.BinaryTree;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import seedu.duke.model.exceptions.binarytreeexceptions.BinaryTreeInvalidIndexException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import seedu.duke.model.exceptions.gatesexceptions.InputsNotSetException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import seedu.duke.model.exceptions.templateexceptions.GateSetException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import seedu.duke.model.exceptions.templateexceptions.GatesToChannelsException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import seedu.duke.model.exceptions.templateexceptions.InputNotSetException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import seedu.duke.model.exceptions.templateexceptions.ParentGateNotSetException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import seedu.duke.model.exceptions.templateexceptions.TemplateException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import seedu.duke.model.gates.Gate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * The BooleanTemplate class is used to create BooleanTemplate objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "public class BooleanTemplate {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private static final String FULL_TREE \u003d \"          0UT \\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            + \"\\t           |     \\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            + \"\\t     B           C\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            + \"\\t                     \\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            + \"\\t  D     E     F     G\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            + \"\\t                      \\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            + \"\\tH   I J   K L   M N   O\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private static final int ASCII_A \u003d 65;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    /** BinaryTree object to represent the logic circuit. **/"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private final BinaryTree\u003cGate\u003e circuit;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    /** String representation of the template. **/"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    private String currentConfig \u003d \"\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    public BooleanTemplate(Gate gate) throws BinaryTreeInvalidIndexException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        circuit \u003d new BinaryTree\u003c\u003e(gate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        buildTopDown();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * Adds a gate at a specified index."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @param gate Gate object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @param index Index in tree."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * @throws TemplateException If index specified cannot be assigned to a Gate."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * @throws BinaryTreeInvalidIndexException If index specified is out of bounds."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    public void addGate(Gate gate, int index) throws TemplateException, BinaryTreeInvalidIndexException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        if (index \u003e 6) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            throw new GatesToChannelsException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        circuit.insert(index, gate);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        buildTopDown();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * Sets the input of a specified index."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @param value Input value."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @param index Index in tree."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * @throws TemplateException If index specified does not have a parent or tries to overwrite a gate."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * @throws BinaryTreeInvalidIndexException If index error occurs."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    public void setInput(boolean value, int index) throws TemplateException, BinaryTreeInvalidIndexException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        int parentIdx \u003d circuit.getParentIndex(index);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        Gate parentGate \u003d circuit.getT(parentIdx);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        //Prevent accessing null gate."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        if (parentGate \u003d\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            throw new ParentGateNotSetException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        // Prevent setting already set gate"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        Gate currentGate \u003d circuit.getT(index);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        if (currentGate !\u003d null) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            throw new GateSetException();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        if (index % 2 \u003d\u003d 1) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            parentGate.setInput(value);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            parentGate.setSecondInput(value);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        buildTopDown();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private boolean isInputOutput(int index) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return !circuit.isNullAtIndex(circuit.getParentIndex(index));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private boolean isOutput(int index) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return isInputOutput(index) \u0026\u0026 !circuit.isNullAtIndex(index);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private boolean isInput(int index) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return isInputOutput(index) \u0026\u0026 circuit.isNullAtIndex(index);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * Builds currentConfig, the String representation of the template."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * @throws BinaryTreeInvalidIndexException If index error occurs."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    private void buildTopDown() throws BinaryTreeInvalidIndexException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        currentConfig \u003d FULL_TREE;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        int treeSize \u003d circuit.arrayList.size();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        // Clear empty indices first"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        for (int i \u003d 1; i \u003c treeSize; i++) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            if (!isInputOutput(i)) { // i \u003d\u003d 0"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "                currentConfig \u003d currentConfig.replace((char) (ASCII_A + i), \u0027 \u0027);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        // Get all equations"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        StringBuilder equations \u003d new StringBuilder();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        // Add 2 newlines"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        equations.append(System.lineSeparator()).append(System.lineSeparator());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        // Add the first line \"OUT \u003d B \u003cGate\u003e C\""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        equations.append(\"\\tOUT \u003d B \").append(circuit.getRoot()).append(\" C\")"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "                .append(System.lineSeparator()).append(\u0027\\t\u0027);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        for (int i \u003d 1; i \u003c treeSize; i++) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            if (!isInputOutput(i)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            String currentEquation \u003d \"\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            if (isOutput(i)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "                currentEquation \u003d getGateEquation(i);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            } else if (isInput(i)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "                currentEquation \u003d getInputEquation(i);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            // Add subsequent lines\u0027 equations"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            equations.append(currentEquation).append(System.lineSeparator()).append(\u0027\\t\u0027);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        currentConfig \u003d currentConfig.stripTrailing() + equations;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * Returns the String representation of a gate equation."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @param index Index of gate chosen."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @return String equation of gate."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * @throws BinaryTreeInvalidIndexException If index error occurs."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    private String getGateEquation(int index) throws BinaryTreeInvalidIndexException {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        Gate gate \u003d circuit.getT(index);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        char letter \u003d (char) (index + ASCII_A);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        String leftLetter \u003d String.valueOf((char) (circuit.getLeftIndex(index) + ASCII_A));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        String rightLetter \u003d String.valueOf((char) (circuit.getRightIndex(index) + ASCII_A));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return letter + \" \u003d \" + leftLetter + \" \" + gate + \" \" + rightLetter;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * Returns the String representation of an input."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     *"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @param index Index of input chosen."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @return String equation of input."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * @throws BinaryTreeInvalidIndexException If index error occurs."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    private String getInputEquation(int index) throws BinaryTreeInvalidIndexException {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        int parentIndex \u003d circuit.getParentIndex(index);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        Gate gate \u003d circuit.getT(parentIndex);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        char letter \u003d (char) (index + ASCII_A);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        String equation \u003d letter + \" \u003d \";"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        // Odd index - first input, even index, 2nd input"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        if (index % 2 \u003d\u003d 1) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            String input \u003d gate.getInput() ? \"1\" : \"0\";"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            equation +\u003d gate.isSetInput() ? input : \"?\";"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            String input \u003d gate.getSecondInput() ? \"1\" : \"0\";"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            equation +\u003d gate.isSetSecondInput() ? input : \"?\";"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return equation;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * Calculates and returns the total output of the circuit."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     *"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * @return int type value output, can be 0 or 1."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * @throws DukeException If input values are not set."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public boolean calculateOutput() throws DukeException {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        return calculateOutput(0);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * Recursive function which calculates the output value of the circuit at position passed."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     *"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * @param idx int type index of node."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * @return int type value output, can be 0 or 1."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * @throws InputsNotSetException If input values are not set for the gates."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * @throws BinaryTreeInvalidIndexException If index error occurs"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * @throws InputsNotSetException If the gates/their inputs are not set."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    private boolean calculateOutput(int idx) throws TemplateException, BinaryTreeInvalidIndexException,"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            InputsNotSetException {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        if (circuit.isNullAtIndex(idx)) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            throw new InputNotSetException();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        boolean isNullAtRight \u003d circuit.isNullAtIndex(circuit.getRightIndex(idx));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        boolean isNullAtLeft \u003d circuit.isNullAtIndex(circuit.getLeftIndex(idx));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        Gate gate \u003d circuit.getT(idx);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        if (!isNullAtLeft) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            gate.setInput(calculateOutput(circuit.getLeftIndex(idx)));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        if (!isNullAtRight) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            gate.setSecondInput(calculateOutput(circuit.getRightIndex(idx)));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        return gate.getOutput();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "     * Returns the binary tree circuit."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "     *"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "     * @return circuit"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    public BinaryTree\u003cGate\u003e getCircuit() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        return circuit;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * Returns the string representation of the BooleanTemplate."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     *"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @return String representation."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        return currentConfig;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorianfong98": 3,
      "oasisbeatle": 10,
      "hughjazzman": 126,
      "sevenseasofbri": 98
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/template/CircuitTemplate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.model.template;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.model.component.LoadComponent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.model.component.VoltageSource;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import seedu.duke.model.exceptions.componentexceptions.ZeroComponentException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import seedu.duke.model.exceptions.templateexceptions.InvalidComponentException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import seedu.duke.model.exceptions.templateexceptions.TemplateComponentsNotSetException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * The BooleanTemplate class is used to create BooleanTemplate objects."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "public abstract class CircuitTemplate {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    protected VoltageSource initialPowerSupply;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    protected static final double ANGULAR_FREQUENCY \u003d 100 * Math.PI;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    protected static final String NOT_SET \u003d \"not set\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public CircuitTemplate(double powerSupply) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        initialPowerSupply \u003d new VoltageSource(powerSupply);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * Returns the initialPowerSupply as specified at the instantiation of Template."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * @return initialPowerSupply, an instance of VoltageSource."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    public VoltageSource getInitialPowerSupply() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        return initialPowerSupply;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    protected boolean isSetPowerSupply() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return initialPowerSupply.getValue() !\u003d 0;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * Sets value of the voltage source."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * @param value double value to be set to the component."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    public void setInitialPowerSupply(double value) throws ZeroComponentException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        initialPowerSupply.setValue(value);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    protected abstract double calcImpedance() throws TemplateComponentsNotSetException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    public abstract void setComponent(String s, double value) throws ZeroComponentException;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * Returns the current of the circuit."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @return double of the current value."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    public double getCurrent() throws TemplateComponentsNotSetException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return initialPowerSupply.getValue() / calcImpedance();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * Returns the power of the circuit."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @return double of the power value."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    public double getPower() throws TemplateComponentsNotSetException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        double voltage \u003d initialPowerSupply.getValue();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return voltage * voltage / calcImpedance();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    public abstract LoadComponent getComponent(String component) throws InvalidComponentException;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    protected String voltageToString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        return \"\\tCurrent Voltage: \" + (isSetPowerSupply() ? initialPowerSupply : NOT_SET) + System.lineSeparator();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorianfong98": 4,
      "hughjazzman": 33,
      "sevenseasofbri": 34,
      "PraveenElango": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/template/LcTemplate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.model.template;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.model.component.Capacitor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.model.component.Inductor;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.model.component.LoadComponent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import seedu.duke.model.exceptions.componentexceptions.ZeroComponentException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import seedu.duke.model.exceptions.templateexceptions.InvalidComponentException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import seedu.duke.model.exceptions.templateexceptions.TemplateComponentsNotSetException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * The LcTemplate class inherits from the CircuitTemplate class"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * and is used to create LcTemplate objects."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "public class LcTemplate extends CircuitTemplate {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    private static final String LC_TEMPLATE \u003d \"+---L-----C---+\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "                                                + \"\\t|             |\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "                                                + \"\\t|             |\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "                                                + \"\\t+----+V_ac+---+\\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    private final Inductor inductor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    private final Capacitor capacitor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    public LcTemplate(double capacitance, double inductance, double powerSupply) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        super(powerSupply);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        inductor \u003d new Inductor(inductance);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        capacitor \u003d new Capacitor(capacitance);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public LcTemplate() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        this(0,0,0);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * Returns the impedance of LC circuit."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @return Impedance of LC circuit"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * @throws TemplateComponentsNotSetException If component values are not yet set."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    public double calcImpedance() throws TemplateComponentsNotSetException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        double inductance \u003d inductor.getValue() * Math.pow(10, -6);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        double capacitance \u003d capacitor.getValue() * Math.pow(10, -6);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        if (inductance \u003d\u003d 0 || capacitance \u003d\u003d 0) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            throw new TemplateComponentsNotSetException();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        return ANGULAR_FREQUENCY * Math.abs(inductance - (1 / capacitance));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "     * Returns inductor object, an attribute of the instance of LcTemplate."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "     * @return inductor, an instance of the Inductor class."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    public Inductor getInductor() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        return inductor;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "     * Returns capacitor object, an attribute of the instance of LcTemplate."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "     * @return capacitor, an instance of the Capacitor class."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    public Capacitor getCapacitor() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        return capacitor;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * Sets the value of the inductor in the Lc Template circuit to the value specified."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * @param value double type value to be set to the inductor in the circuit."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    protected void setInductor(double value) throws ZeroComponentException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        inductor.setValue(value);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * Sets the value of the capacitor in the Lc Template circuit to the value specified."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * @param value double type value to be set to the capacitor in the circuit."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    protected void setCapacitor(double value) throws ZeroComponentException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        capacitor.setValue(value);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    protected boolean isSetInductor() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return inductor.getValue() !\u003d 0;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    protected boolean isSetCapacitor() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return capacitor.getValue() !\u003d 0;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "     * Sets the value of the inductor in the Lc Template circuit to the value specified."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "     * @param s String corresponding to component type."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "     * @param value double type value to be set to the resistor in the circuit."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    public void setComponent(String s, double value) throws ZeroComponentException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        assert s.equals(\"l\") || s.equals(\"c\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        if (s.equals(\"l\")) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            setInductor(value);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            setCapacitor(value);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    protected String inductorToString() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        return \"\\tTotal Inductance: \" + (isSetInductor() ? inductor : NOT_SET) + System.lineSeparator();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    protected String capacitorToString() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        return \"\\tTotal Capacitance: \" + (isSetCapacitor() ? capacitor : NOT_SET) + System.lineSeparator();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "     * Returns String consisting of total inductance and capacitance values of the LcTemplate object."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "     * @return String representation of LcTemplate object."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return LC_TEMPLATE + voltageToString() + capacitorToString() + inductorToString();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * Returns LoadComponent object depending on input String."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @param component String representing the component."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @return LoadComponent object."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * @throws InvalidComponentException If input String does not match a component."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    public LoadComponent getComponent(String component) throws InvalidComponentException {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        if (component.equals(\"l\")) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            return getInductor();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        } else if (component.equals(\"c\")) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "            return getCapacitor();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            throw new InvalidComponentException(component);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "oasisbeatle": 42,
      "dorianfong98": 4,
      "hughjazzman": 53,
      "sevenseasofbri": 35,
      "PraveenElango": 13
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/template/LrTemplate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.model.template;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.model.component.Inductor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.model.component.LoadComponent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import seedu.duke.model.exceptions.componentexceptions.ZeroComponentException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import seedu.duke.model.exceptions.templateexceptions.InvalidComponentException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import seedu.duke.model.exceptions.templateexceptions.TemplateComponentsNotSetException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * The LrTemplate class inherits from the RTemplate class"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * and is used to create LrTemplate objects."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "public class LrTemplate extends RTemplate {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    private static final String RL_TEMPLATE \u003d \"+---R-----L---+\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "                                            + \"\\t|             |\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "                                            + \"\\t|             |\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "                                            + \"\\t+----+V_ac+---+\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    private final Inductor inductor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    public LrTemplate(double resistance, double inductance, double powerSupply) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "        super(resistance, powerSupply);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        inductor \u003d new Inductor(inductance);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public LrTemplate() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        this(0,0,0);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * Returns calculated impedance of the LrTemplate circuit."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @return double type calculated Impedance."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * @throws TemplateComponentsNotSetException If component values are not yet set."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    public double calcImpedance() throws TemplateComponentsNotSetException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        double resistance \u003d super.calcImpedance();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        double inductance \u003d inductor.getValue() * Math.pow(10, -6);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        if (inductance \u003d\u003d 0) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            throw new TemplateComponentsNotSetException();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return Math.sqrt(Math.pow(resistance, 2)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "                + Math.pow(inductance * ANGULAR_FREQUENCY, 2));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * Returns inductor object, an attribute of the instance of LrTemplate."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @return inductor, an instance of the Inductor class."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    public Inductor getInductor() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return inductor;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * Sets the value of the inductor in the Lr Template circuit to the value specified."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * @param value double type value to be set to the inductor in the circuit."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    protected void setInductor(double value) throws ZeroComponentException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        inductor.setValue(value);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * Sets the value of the inductor in the Lr Template circuit to the value specified."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @param s String corresponding to component type."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @param value double type value to be set to the resistor in the circuit."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    public void setComponent(String s, double value) throws ZeroComponentException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        assert s.equals(\"l\") || s.equals(\"r\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        if (s.equals(\"l\")) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            setInductor(value);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            super.setComponent(s, value);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    protected boolean isSetInductor() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return inductor.getValue() !\u003d 0;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    protected String inductorToString() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        return \"\\tTotal Inductance: \" + (isSetInductor() ? inductor : NOT_SET) + System.lineSeparator();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * Returns String consisting of total inductance and resistance values of the LrTemplate object."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * @return String representation of LrTemplate object."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return RL_TEMPLATE + voltageToString() + resistorToString() + inductorToString();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * Returns LoadComponent object depending on input String."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @param component String representing the component."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @return LoadComponent object."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * @throws InvalidComponentException If input String does not match a component."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    public LoadComponent getComponent(String component) throws InvalidComponentException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        if (component.equals(\"l\")) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            return getInductor();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return super.getComponent(component);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorianfong98": 7,
      "hughjazzman": 53,
      "sevenseasofbri": 51,
      "PraveenElango": 3
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/template/RTemplate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.model.template;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.model.component.LoadComponent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.model.component.Resistor;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import seedu.duke.model.exceptions.componentexceptions.ZeroComponentException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import seedu.duke.model.exceptions.templateexceptions.InvalidComponentException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import seedu.duke.model.exceptions.templateexceptions.TemplateComponentsNotSetException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * The RTemplate class inherits from the CircuitTemplate class"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * and is used to create RTemplate objects."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "public class RTemplate extends CircuitTemplate {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "    private static final String R_TEMPLATE \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "              \"+---R---------+\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "            + \"\\t|             |\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "            + \"\\t|             |\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "            + \"\\t+----+V_ac+---+\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    protected Resistor resistor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "    public RTemplate(double resistance, double powerSupply) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "        super(powerSupply);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "        resistor \u003d new Resistor(resistance);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public RTemplate() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        this(0,0);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * Returns impedance of Resistor."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @return impedance of Resistor."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * @throws TemplateComponentsNotSetException If component values are not yet set."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    public double calcImpedance() throws TemplateComponentsNotSetException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        if (resistor.getValue() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            throw new TemplateComponentsNotSetException();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return resistor.getValue();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "     * Returns resistor object, an attribute of the instance of LrTemplate."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "     * @return resistor, an instance of the Resistor class."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    public Resistor getResistor() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "        return resistor;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * Sets the value of the resistor in the circuit to the value specified."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * @param value double type value to be set to the resistor in the circuit."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    protected void setResistor(double value) throws ZeroComponentException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        resistor.setValue(value);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    protected boolean isSetResistor() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return resistor.getValue() !\u003d 0;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * Sets the value of the resistor in the circuit to the value specified."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @param s String corresponding to component type."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @param value double type value to be set to the resistor in the circuit."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    public void setComponent(String s, double value) throws ZeroComponentException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        setResistor(value);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    protected String resistorToString() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        return \"\\tTotal Resistance: \" + (isSetResistor() ? resistor : NOT_SET) + System.lineSeparator();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "     * Returns String consisting of total inductance and resistance values of the LrTemplate object."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "     * @return String representation of LrTemplate object."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return R_TEMPLATE + voltageToString() + resistorToString();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * Returns LoadComponent object depending on input String."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @param component String representing the component."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @return LoadComponent object."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * @throws InvalidComponentException If input String does not match a component."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    public LoadComponent getComponent(String component) throws InvalidComponentException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        if (!component.equals(\"r\")) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            throw new InvalidComponentException(component);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return getResistor();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "dorianfong98": 39,
      "hughjazzman": 46,
      "sevenseasofbri": 22
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/template/RcTemplate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.model.template;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.model.component.Capacitor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.model.component.LoadComponent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import seedu.duke.model.exceptions.componentexceptions.ZeroComponentException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import seedu.duke.model.exceptions.templateexceptions.InvalidComponentException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import seedu.duke.model.exceptions.templateexceptions.TemplateComponentsNotSetException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * The RcTemplate class inherits from the RTemplate class"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * and is used to create RcTemplate objects."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "public class RcTemplate extends RTemplate {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    private static final String RC_TEMPLATE \u003d \"+---R-----C---+\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "                                            + \"\\t|             |\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "                                            + \"\\t|             |\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "                                            + \"\\t+----+V_ac+---+\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    private final Capacitor capacitor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    public RcTemplate(double resistance, double capacitance, double powerSupply) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        super(resistance, powerSupply);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        capacitor \u003d new Capacitor(capacitance);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public RcTemplate() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        this(0,0,0);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * Returns impedance value of circuit."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @return impedance, a double representation of the impedance value of circuit."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * @throws TemplateComponentsNotSetException If component values are not yet set."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    public double calcImpedance() throws TemplateComponentsNotSetException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        double resistance \u003d super.calcImpedance();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        double capacitance \u003d capacitor.getValue() * Math.pow(10, -6);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        if (capacitance \u003d\u003d 0) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            throw new TemplateComponentsNotSetException();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return Math.sqrt(Math.pow(resistance, 2)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "                + (1 / Math.pow((ANGULAR_FREQUENCY * capacitance), 2)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "     * Returns capacitor object, an attribute of the instance of RcTemplate."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "     * @return capacitor, an instance of the Capacitor class."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    public Capacitor getCapacitor() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        return capacitor;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "     * Sets the value of the capacitor in the Rc Template circuit to the value specified."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @param value double type value to be set to the capacitor in the circuit."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    protected void setCapacitor(double value) throws ZeroComponentException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        capacitor.setValue(value);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * Sets the value of the component specified to the value specified in the Rc Template."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @param s String corresponding to component type."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * @param value double type value to be set to the component in the circuit."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    public void setComponent(String s, double value) throws ZeroComponentException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        assert s.equals(\"c\") || s.equals(\"r\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        if (s.equals(\"c\")) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            setCapacitor(value);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            super.setComponent(s, value);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    protected boolean isSetCapacitor() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return capacitor.getValue() !\u003d 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    protected String capacitorToString() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        return \"\\tTotal Capacitance: \" + (isSetCapacitor() ? capacitor : NOT_SET) + System.lineSeparator();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "     * Returns String consisting of total capacitance and resistance values of the RcTemplate object."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "     * @return String representation of RcTemplate object."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return RC_TEMPLATE + voltageToString() + resistorToString() + capacitorToString();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * Returns LoadComponent object depending on input String."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @param component String representing the component."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @return LoadComponent object."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * @throws InvalidComponentException If input String does not match a component."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    public LoadComponent getComponent(String component) throws InvalidComponentException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        if (component.equals(\"c\")) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            return getCapacitor();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return super.getComponent(component);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorianfong98": 4,
      "hughjazzman": 49,
      "sevenseasofbri": 16,
      "PraveenElango": 46
    }
  },
  {
    "path": "src/main/java/seedu/duke/ui/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.logic.commands.SummaryCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * The UI class handles the user interface, reads user input and"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " * prints messages to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    private static final String LOGO \u003d \"\\t  _____ _      _____                _ _                      _  \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            + \"   _              _   \\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            + \"\\t / ____| |    |_   _|              (_) |       /\\\\           (_)   | |            | |\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            + \"\\t| |    | |      | |  _ __ ___ _   _ _| |_     /  \\\\   ___ ___ _ ___| |_ __ _ _ __ | |_\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            + \"\\t| |    | |      | | | \u0027__/ __| | | | | __|   / /\\\\ \\\\ / __/ __| / __| __/ _` | \u0027_ \\\\| __|\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            + \"\\t| |____| |____ _| |_| | | (__| |_| | | |_   / ____ \\\\\\\\__ \\\\__ \\\\ \\\\__ \\\\ || (_| | | | | |_\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            + \"\\t \\\\_____|______|_____|_|  \\\\___|\\\\__,_|_|\\\\__| /_/    \\\\_\\\\___/___/_|___/\\\\__\\\\__,_|_| |_|\\\\__|\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    private static final String TUTORIAL \u003d \"\\t  _______    _             _       _   __  __           _      _ \\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            + \"\\t |__   __|  | |           (_)     | | |  \\\\/  |         | |    | |\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            + \"\\t    | |_   _| |_ ___  _ __ _  __ _| | | \\\\  / | ___   __| | ___| |\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            + \"\\t    | | | | | __/ _ \\\\| \u0027__| |/ _` | | | |\\\\/| |/ _ \\\\ / _` |/ _ \\\\ |\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            + \"\\t    | | |_| | || (_) | |  | | (_| | | | |  | | (_) | (_| |  __/_|\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            + \"\\t    |_|\\\\__,_|\\\\__\\\\___/|_|  |_|\\\\__,_|_| |_|  |_|\\\\___/ \\\\__,_|\\\\___(_)\\n\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    // The instructions to the circuit tutorial."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    public static final String[] CIRCUIT_INSTRUCTIONS \u003d {\"Lets get started! First we will choose a template to work \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            + \"with.\\n\\tIn the app you can choose from rc, rl, lc and r templates\\n\\tHowever,\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            + \" for this tutorial, we will use a Resistor-Capacitor template.\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            + \"\\n\\tTo select the Resistor-Capacitor circuit template, enter \u0027template rc\u0027\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        \"Let\u0027s set a value to our power source! Type in \u0027set v VALUE\u0027 , where VALUE is a +ve\\n\\tnumber in volts.\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            + \"\\n\\teg. set v 220 will set the power source to 220 volts.\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        \"Let\u0027s set a value to the resistor! To do so, type \u0027set r VALUE\u0027 , where VALUE is a +ve\\n\\tnumber in ohms(Ω).\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            + \"\\n\\teg. \u0027set r 500\u0027 will set the resistor to 500Ω.\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        \"Let\u0027s set a value to the capacitor! To do so, type \u0027set c VALUE\u0027 , where VALUE is a +ve\\n\\tnumber in \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            + \"microfarads(µF).\\n\\teg. \u0027set c 900\u0027 will set the capacitor to 900µF.\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        \"Want to add a component in parallel to your current component? Lets do that with the\\n\\tcapacitor! \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            + \"Type in \u0027add parallel c VALUE\u0027, where VALUE is a +ve number in microfarads (µF).\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            + \"\\n\\teg. \u0027add parallel c 500\u0027 will add a capacitor in parallel to the capacitor in your circuit.\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            + \"\\n\\tDo remember though, this can be done with resistors, capacitors and\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            + \" inductors and\\n\\tdifferent configurations (series/parallel) in the application based on the template\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            + \" chosen!\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        \"Great! Say, do you think we could find effective power consumed by the circuit?\\n\\tYes!\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            + \"\\n\\tType in \u0027calc power\u0027 to calculate total power dissipated in watts(W).\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            + \"\\n\\tDo remember, you can calculate a variety of other effective values\\n\\tin the application too!\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        \"Hooray! You\u0027re set to use the circuit builder of \\n\" + LOGO + \"\\n\\tEnjoy! :) type \u0027exit\u0027 to exit this mode.\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            + \"\\n\"};"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    //@@author oasisbeatle"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    public static final String[] BOOLEAN_INSTRUCTIONS \u003d {\"Let\u0027s get started! First chose a template you want to work \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "            + \"with.\\n\\tYou can chose from and, or, nand, nor, xor and xnor gate templates.\" + System.lineSeparator()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "            + \"\\tHowever for this tutorial, we will use an and gate template.\\n\\tTo select the and gate, \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "            + \"enter \u0027template and\u0027.\","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        \"Let\u0027s set a value to the input B!\\n\\tType in \u0027set B BOOLVALUE\u0027 where BOOLVALUE is either a 1 or a 0. \","
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        \"Now let\u0027s set a value to the input C!\\n\\tType in \u0027set C BOOLVLAUE\u0027 where BOOLVALUE is again either a 1 or 0.\","
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        \"Now let\u0027s calculate the output of B GATE C.\\n\\tGATE here is the template you typed out earlier. Enter \u0027calc\u0027.\","
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        \"Voila! Now you can see the output to your gate! Let\u0027s add another gate now.\\n\\tAgain, you can choose from the \""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "            + \"gate templates list we gave you earlier.\\n\\tJust to recap, the available gates are and, or, nand, nor, \""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "            + \"xor, and xnor gate templates.\\n\\tWe are now going to connect the output of the GATE you\u0027ve decided to\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "            + \" input B.\\n\\tEnter \u0027add C GATE\u0027 where GATE can be one of the following: and, or, nand, nor, xor, xnor.\","
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        \"Now a new gate has been added! Let us assign the other variables.\\n\\tSet input F by entering \u0027set F BOOLVALUE\u0027\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "            + \" where BOOLVALUE is either 1 or 0.\","
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        \"Now a new gate has been added! Let us assign the other variables.\\n\\tSet input G by entering \u0027set G BOOLVALUE\u0027\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "            + \" where BOOLVALUE is either 1 or 0.\","
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        \"Now let\u0027s calculate the output of the whole configuration. Enter \u0027calc\u0027.\","
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        \"Great! You\u0027re set to use the boolean builder of \\n\" + LOGO"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "            + \"\\n\\tEnjoy! :)\\n\\t type \u0027exit\u0027 to exit this mode.\\n\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    };"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private static final Scanner IN \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * Returns the next line of user input."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @return String of user input."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public String readLine() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return IN.nextLine().strip();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * Prints Duke logo."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private void printLogo() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        System.out.println(\"\\tHello from\\n\" + LOGO);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * Prints greeting to Duke."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private void printGreeting() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        System.out.println(\"\\t \");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        System.out.println(\"\\tI am a desktop app that implements and solves simple electronic and logic \""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "                + \"\\n\\tcircuits, optimized for use via the Command Line Interface (CLI)! :D \\n\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        System.out.println(new SummaryCommand());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * Prints logo and greeting for Duke."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        printLogo();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        printGreeting();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * Prints a message."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @param message Message."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public void printMessage(String message) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        System.out.println(\"-----------------------------------------------------------------------------------------\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        System.out.println(\"\\t\" + message);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        System.out.println(\"-----------------------------------------------------------------------------------------\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * Prints an error message."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @param message Error message."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public void showError(String message) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        printMessage(message);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * Prints the welcome message for the tutorial mode."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    public void printWelcomeTutorial() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        printMessage(\"You have entered\\n\" + TUTORIAL + System.lineSeparator()"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "                + \"\\tType \u0027exit\u0027 if you want to leave this mode and go back to the application.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * Prints the instruction at the specified index from the array."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * @param numOfCommandsDone Type int specifies index number."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    public void printCircuitInstruction(int numOfCommandsDone) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        printMessage(CIRCUIT_INSTRUCTIONS[numOfCommandsDone]);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "     * Prints the instruction at the specified index from the array."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "     *"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "     * @param numOfCommandsDone Type int specifies index number."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    public void printBooleanInstruction(int numOfCommandsDone) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        printMessage(BOOLEAN_INSTRUCTIONS[numOfCommandsDone]);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "     * Prompts the user to start the CLIrcuit Assistant."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    public void promptForIntro() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        System.out.println(\"Hello! Type \u0027start\u0027 to start the CLIrcuit Assistant\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        String userLine \u003d readLine();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        boolean isNotStart \u003d true;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        while (isNotStart) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "            if (userLine.equals(\"start\")) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "                showWelcome();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "                isNotStart \u003d false;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "                printMessage(\"Invalid Command! Type in start to begin using Circuit Assistant!\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "                userLine \u003d IN.nextLine();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "            }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorianfong98": 4,
      "oasisbeatle": 30,
      "hughjazzman": 59,
      "sevenseasofbri": 62,
      "PraveenElango": 16
    }
  },
  {
    "path": "src/test/java/seedu/duke/logic/ExitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "    void execute_run_setsExit() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "        ExitCommand c \u003d new ExitCommand();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        c.execute();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "        assertTrue(c.isExit());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorianfong98": 14,
      "hughjazzman": 3
    }
  },
  {
    "path": "src/test/java/seedu/duke/logic/commands/binary/AddBooleanCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "package seedu.duke.logic.commands.binary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "import seedu.duke.logic.commands.gates.AddBooleanCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "import seedu.duke.logic.commands.gates.CalculateBooleanCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "import seedu.duke.model.gates.Gate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "import seedu.duke.model.gates.NandGate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "import seedu.duke.model.gates.XnorGate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "import seedu.duke.model.gates.XorGate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "import seedu.duke.model.template.BooleanTemplate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "public class AddBooleanCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    private static Gate nandGate \u003d new NandGate();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    private static Gate xnorGate \u003d new XnorGate();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    private static int Output;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    void execute_addGate_addsGateToCircuit() throws DukeException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        BooleanTemplate booleanNandTemplate \u003d new BooleanTemplate(nandGate);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        AddBooleanCommand c \u003d new AddBooleanCommand(booleanNandTemplate, xnorGate, 2);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        c.execute();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        assertEquals(xnorGate, booleanNandTemplate.getCircuit().getT(2));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    void execute_addGateToWrongIndex_expectException() throws DukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        BooleanTemplate booleanNandTemplate \u003d new BooleanTemplate(nandGate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        AddBooleanCommand c \u003d new AddBooleanCommand(booleanNandTemplate, xnorGate, 5);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        assertThrows(DukeException.class, c::execute);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oasisbeatle": 41
    }
  },
  {
    "path": "src/test/java/seedu/duke/logic/commands/circuit/AddCircuitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.logic.commands.circuit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.model.template.RcTemplate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "class AddCircuitCommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private static final RcTemplate TEMPLATE \u003d new RcTemplate(500, 500, 5);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private static final String CONFIG \u003d \"series\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private static final String COMPONENT \u003d \"r\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private static final double VALUE \u003d 500;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    void execute_addResistor_setsResistor() throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        AddCircuitCommand c \u003d new AddCircuitCommand(TEMPLATE, CONFIG, COMPONENT, VALUE);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        c.execute();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        assertEquals(1000, c.template.getComponent(\"r\").getValue());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    void execute_wrongComponent_expectException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        AddCircuitCommand c \u003d new AddCircuitCommand(TEMPLATE, CONFIG, \"l\", VALUE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        assertThrows(DukeException.class, c::execute);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hughjazzman": 28
    }
  },
  {
    "path": "src/test/java/seedu/duke/logic/commands/circuit/CalculateCircuitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.logic.commands.circuit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import seedu.duke.model.exceptions.templateexceptions.TemplateComponentsNotSetException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.model.template.LcTemplate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.model.template.LrTemplate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.model.template.RTemplate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "public class CalculateCircuitCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    private static final RTemplate RTEMPLATE \u003d new RTemplate(100, 100);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    private static final LrTemplate LR_TEMPLATE \u003d new LrTemplate(0, 0, 10);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    private static final LcTemplate LC_TEMPLATE \u003d new LcTemplate(1600, 299, 220);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    private static final String POWER \u003d \"power\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    private static final String INDUCTANCE \u003d \"leff\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    private static final String CAPACITANCE \u003d \"ceff\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    private static final String CURRENT \u003d \"current\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    void execute_calcPower_calculatesPower() throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        CalculateCircuitCommand c \u003d new CalculateCircuitCommand(RTEMPLATE, POWER);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        c.execute();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        assertEquals(100, c.template.getPower());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    void execute_calcCeff_calculatesEffectiveCapacitance() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        CalculateCircuitCommand c \u003d new CalculateCircuitCommand(LC_TEMPLATE, CAPACITANCE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        assertDoesNotThrow(c::execute);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    void execute_calcCurrentWithZeroValueComponents_expectException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        CalculateCircuitCommand c \u003d new CalculateCircuitCommand(LR_TEMPLATE, CURRENT);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        assertThrows(TemplateComponentsNotSetException.class, c::execute);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    void execute_invalidComponentForTemplate_expectException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        CalculateCircuitCommand c \u003d new CalculateCircuitCommand(RTEMPLATE, INDUCTANCE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        assertThrows(DukeException.class, c::execute);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hughjazzman": 14,
      "sevenseasofbri": 33
    }
  },
  {
    "path": "src/test/java/seedu/duke/logic/commands/circuit/SetCircuitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.logic.commands.circuit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import seedu.duke.model.exceptions.componentexceptions.ZeroComponentException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.model.template.RcTemplate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "class SetCircuitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    void execute_voltageSource_setComponent() throws DukeException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        RcTemplate t \u003d new RcTemplate(100, 100, 100);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        SetCircuitCommand c \u003d new SetCircuitCommand(t, \"v\", 200);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        c.execute();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        assertEquals(c.component, \"v\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        assertEquals(c.componentObject.getValue(), 200);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    void execute_BadCommand_expectException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        RcTemplate t \u003d new RcTemplate(100, 100, 100);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        SetCircuitCommand c \u003d new SetCircuitCommand(t, \"v\", -100);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        assertThrows(ZeroComponentException.class, c::execute);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hughjazzman": 5,
      "sevenseasofbri": 2,
      "PraveenElango": 23
    }
  },
  {
    "path": "src/test/java/seedu/duke/logic/commands/gates/CalculateBooleanCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "package seedu.duke.logic.commands.gates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import seedu.duke.model.gates.AndGate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import seedu.duke.model.gates.OrGate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import seedu.duke.model.gates.XorGate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import seedu.duke.model.template.BooleanTemplate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "public class CalculateBooleanCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    void execute_emptyTree_throwsException() throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        BooleanTemplate b \u003d new BooleanTemplate(new OrGate());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        CalculateBooleanCommand c \u003d new CalculateBooleanCommand(b);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        assertThrows(DukeException.class, c::execute);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     void execute_notEmpty_doesNotThrowException() throws DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        BooleanTemplate b \u003d new BooleanTemplate(new OrGate());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        b.addGate(new AndGate(), 1);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        b.setInput(true, 2);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        b.addGate(new XorGate(), 4);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        b.setInput(true, 3);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        b.setInput(false, 9);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        b.setInput(true, 10);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        CalculateBooleanCommand c \u003d new CalculateBooleanCommand(b);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        assertDoesNotThrow(c::execute);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     void execute_notEmptyWithInputNotSet_throwsException() throws DukeException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        BooleanTemplate b \u003d new BooleanTemplate(new OrGate());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        b.addGate(new AndGate(), 1);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        b.addGate(new XorGate(), 4);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        b.setInput(true, 3);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        b.setInput(false, 9);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        b.setInput(true, 10);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        CalculateBooleanCommand c \u003d new CalculateBooleanCommand(b);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        assertThrows(DukeException.class, c::execute);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hughjazzman": 10,
      "sevenseasofbri": 37
    }
  },
  {
    "path": "src/test/java/seedu/duke/logic/commands/gates/SetBooleanCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.logic.commands.gates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.model.gates.Gate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.model.gates.NandGate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.model.gates.NorGate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.model.gates.XnorGate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.model.template.BooleanTemplate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "class SetBooleanCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    void execute_setValidZero_noException() throws DukeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        Gate gate \u003d new NorGate();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        BooleanTemplate template \u003d new BooleanTemplate(gate);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        SetBooleanCommand cmd \u003d new SetBooleanCommand(template, false, 1);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        assertDoesNotThrow(cmd::execute);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        assertFalse(gate.getInput());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        assertFalse(gate.isSetSecondInput());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    void execute_setValidOne_noException() throws DukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        Gate gate \u003d new NandGate();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        BooleanTemplate template \u003d new BooleanTemplate(gate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        SetBooleanCommand cmd \u003d new SetBooleanCommand(template, true, 2);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        assertDoesNotThrow(cmd::execute);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        assertTrue(gate.getSecondInput());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        assertFalse(gate.isSetInput());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    void execute_setZeroIndex_expectException() throws DukeException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        Gate gate \u003d new NandGate();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        BooleanTemplate template \u003d new BooleanTemplate(gate);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        SetBooleanCommand cmd \u003d new SetBooleanCommand(template, true, 0);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        assertThrows(DukeException.class, cmd::execute);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    void execute_setNegativeIndex_expectException() throws DukeException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        Gate gate \u003d new NandGate();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        BooleanTemplate template \u003d new BooleanTemplate(gate);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        SetBooleanCommand cmd \u003d new SetBooleanCommand(template, true, -5);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        assertThrows(DukeException.class, cmd::execute);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    void execute_setNonExistentIndex_expectException() throws DukeException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        Gate gate \u003d new XnorGate();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        BooleanTemplate template \u003d new BooleanTemplate(gate);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        SetBooleanCommand cmd \u003d new SetBooleanCommand(template, true, 7);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        assertThrows(DukeException.class, cmd::execute);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    void execute_setNullIndex_expectException() throws DukeException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        Gate gate \u003d new XnorGate();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        BooleanTemplate template \u003d new BooleanTemplate(gate);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        SetBooleanCommand cmd \u003d new SetBooleanCommand(template, true, 4);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        assertThrows(DukeException.class, cmd::execute);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    void execute_setLowestLeaf_expectException() throws DukeException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        Gate gate \u003d new XnorGate();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        BooleanTemplate template \u003d new BooleanTemplate(gate);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        template.addGate(new NandGate(), 2);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        Gate norGate \u003d new NorGate();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        template.addGate(norGate, 6);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        SetBooleanCommand cmd \u003d new SetBooleanCommand(template, true, 14);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        assertDoesNotThrow(cmd::execute);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        assertTrue(norGate.getSecondInput());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hughjazzman": 82
    }
  },
  {
    "path": "src/test/java/seedu/duke/logic/parser/BooleanParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.logic.parser.exceptions.InvalidGateException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.logic.parser.exceptions.InvalidInputException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.logic.parser.exceptions.NoTemplateException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "class BooleanParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    void parseTemplate_setWithoutTemplate_NoTemplateException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        Parser p \u003d new Parser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        String line \u003d \"set B 1\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        assertThrows(NoTemplateException.class, () -\u003e p.parse(line));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    void parseSet_setInvalidInput_InvalidInputException() throws DukeException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        Parser p \u003d new Parser();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        p.parse(\"template and\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        String line \u003d \"set B 0.5\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        assertThrows(InvalidInputException.class, () -\u003e p.parse(line));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    void parseAdd_invalidGate_InvalidGateException() throws DukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        Parser p \u003d new Parser();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        p.parse(\"template and\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        String line \u003d \"add B yolo\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        assertThrows(InvalidGateException.class, () -\u003e p.parse(line));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    void prepareBooleanTemplate_normalInput_noException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        BooleanParser p \u003d new BooleanParser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        assertDoesNotThrow(() -\u003e p.prepareBooleanTemplate(new String[]{\"template\", \"xnor\"}));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    void prepareBooleanTemplate_invalidInput_InvalidGateException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        BooleanParser p \u003d new BooleanParser();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        assertThrows(InvalidGateException.class, () -\u003e p.prepareBooleanTemplate(new String[]{\"template\", \"yeah\"}));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hughjazzman": 48
    }
  },
  {
    "path": "src/test/java/seedu/duke/logic/parser/CircuitParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "import seedu.duke.logic.commands.SummaryCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.logic.commands.circuit.AddCircuitCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.logic.commands.circuit.CalculateCircuitCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.logic.commands.circuit.CircuitCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.logic.commands.circuit.SetCircuitCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.logic.commands.circuit.TemplateCircuitCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import seedu.duke.logic.commands.circuit.TutorialCircuitCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.logic.parser.exceptions.InvalidArgumentException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.logic.parser.exceptions.InvalidCommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.logic.parser.exceptions.InvalidNumberException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.logic.parser.exceptions.NotEnoughArgumentsException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "class CircuitParserTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    void parse_noLine_expectException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        Parser p \u003d new Parser();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        String line \u003d \"\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        assertThrows(InvalidCommandException.class, () -\u003e p.parse(line));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    void parseTutorial_tutorialCircuit_returnsTutorialCircuitCommand() throws DukeException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        Parser p \u003d new Parser();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        String line \u003d \"tutorial circuit\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "        SummaryCommand c \u003d (SummaryCommand) p.parse(line);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        assertTrue(c instanceof TutorialCircuitCommand); // change to HelpCommand once done"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    void parseTemplate_Template_returnsTemplateCommand() throws DukeException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        Parser p \u003d new Parser();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        String line \u003d \"template \";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        String[] templates \u003d {\"r\", \"rl\", \"rc\", \"lc\"};"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        CircuitCommand c;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        for (String s : templates) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            c \u003d (CircuitCommand) p.parse(line + s);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            assertTrue(c instanceof TemplateCircuitCommand);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    void parseTemplate_noTemplate_expectException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        Parser p \u003d new Parser();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        String line \u003d \"template\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        assertThrows(NotEnoughArgumentsException.class, () -\u003e p.parse(line));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    void parseTemplate_wrongArgument_expectException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        Parser p \u003d new Parser();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        String line \u003d \"template haha\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        assertThrows(InvalidArgumentException.class, () -\u003e p.parse(line));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    void parseSet_resistor_returnsSetCommand() throws DukeException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        Parser p \u003d new Parser();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        p.parse(\"template rl\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        String line \u003d \"set r 500\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        CircuitCommand c \u003d (CircuitCommand) p.parse(line);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        assertTrue(c instanceof SetCircuitCommand);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    void parseSet_noResistance_expectException() throws DukeException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        Parser p \u003d new Parser();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        p.parse(\"template rl\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        String line \u003d \"set r \";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        assertThrows(NotEnoughArgumentsException.class, () -\u003e p.parse(line));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    void parseSet_negativeResistance_expectException() throws DukeException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        Parser p \u003d new Parser();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        p.parse(\"template rl\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        String line \u003d \"set r -500\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        assertThrows(InvalidNumberException.class, () -\u003e p.parse(line));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    void parseSet_invalidResistance_expectException() throws DukeException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        Parser p \u003d new Parser();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        p.parse(\"template rl\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        String line \u003d \"set r yolo\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        assertThrows(InvalidNumberException.class, () -\u003e p.parse(line));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    void parseSet_invalidComponent_expectException() throws DukeException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        Parser p \u003d new Parser();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        p.parse(\"template rl\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        String line \u003d \"set c 500\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        CircuitCommand c \u003d (CircuitCommand) p.parse(line);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        assertTrue(c instanceof SetCircuitCommand);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    void parseAdd_addResistor_returnsAddCommand() throws DukeException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        Parser p \u003d new Parser();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        p.parse(\"template rl\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        p.parse(\"set r 500\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        String line \u003d \"add series r 500\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        CircuitCommand c \u003d (CircuitCommand) p.parse(line);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        assertTrue(c instanceof AddCircuitCommand);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    void parseAdd_wrongConfig_expectException() throws DukeException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        Parser p \u003d new Parser();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        p.parse(\"template rl\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        p.parse(\"set r 500\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        String line \u003d \"add diagonal r 500\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e p.parse(line));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    void parseAdd_wrongComponent_expectException() throws DukeException {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        Parser p \u003d new Parser();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        p.parse(\"template rl\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        p.parse(\"set r 500\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        String line \u003d \"add series c 500\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        CircuitCommand c \u003d (CircuitCommand) p.parse(line);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        assertTrue(c instanceof AddCircuitCommand);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    void parseCalc_valueEff_CalculateCommand() throws DukeException {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        Parser p \u003d new Parser();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        p.parse(\"template rl\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        String line \u003d \"calc \";"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        String[] effValues \u003d {\"reff\", \"leff\", \"current\", \"power\"};"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        CircuitCommand c;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        for (String s : effValues) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            c \u003d (CircuitCommand) p.parse(line + s);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            assertTrue(c instanceof CalculateCircuitCommand);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        p.parse(\"template rc\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        String capEff \u003d \"ceff\";"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        c \u003d (CircuitCommand) p.parse(line + capEff);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        assertTrue(c instanceof CalculateCircuitCommand);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    void parseExit_bye_ExitCommand() throws DukeException {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        Parser p \u003d new Parser();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        String line \u003d \"bye\";"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        Command c \u003d p.parse(line);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        assertTrue(c instanceof ExitCommand);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    void parse_invalidCommand_expectException() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        Parser p \u003d new Parser();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        String line \u003d \"invaliddd\";"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        assertThrows(InvalidCommandException.class, () -\u003e p.parse(line));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorianfong98": 2,
      "hughjazzman": 163,
      "sevenseasofbri": 4
    }
  },
  {
    "path": "src/test/java/seedu/duke/model/binarytree/BinaryTreeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "package seedu.duke.model.binarytree;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import seedu.duke.model.exceptions.binarytreeexceptions.BinaryTreeInvalidIndexException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "import seedu.duke.model.gates.AndGate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "import seedu.duke.model.gates.Gate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "import seedu.duke.model.gates.OrGate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import seedu.duke.model.gates.XorGate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "public class BinaryTreeTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "    void isEmpty_emptyTree_returnsTrue() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        BinaryTree\u003cGate\u003e tree \u003d new BinaryTree\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        assertTrue(tree.isEmpty());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "    void isEmpty_nonEmptyTree_returnsFalse() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        BinaryTree\u003cGate\u003e tree \u003d new BinaryTree\u003c\u003e(new OrGate());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        assertFalse(tree.isEmpty());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "    void getRoot_emptyTree_returnsNull() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        BinaryTree\u003cGate\u003e tree \u003d new BinaryTree\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        assertNull(tree.getRoot());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "    void getRoot_nonEmptyTree_returnsRoot() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "        AndGate gate \u003d new AndGate();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        BinaryTree\u003cGate\u003e tree \u003d new BinaryTree\u003c\u003e(gate);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "        assertEquals(gate, tree.getRoot());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "    void getT_emptyTree_throwException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        BinaryTree\u003cGate\u003e tree \u003d new BinaryTree\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        assertThrows(BinaryTreeInvalidIndexException.class, () -\u003e tree.getT(1));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "    void getT_nonEmptyTree_returnsValueAtIndex() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        BinaryTree\u003cGate\u003e tree \u003d new BinaryTree\u003c\u003e(new OrGate());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "        assertDoesNotThrow(() -\u003e tree.getT(0));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "    void insert_valueAtIndex_updatesValueAtIndex() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        BinaryTree\u003cGate\u003e tree \u003d new BinaryTree\u003c\u003e(new OrGate());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "        AndGate gate \u003d new AndGate();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "        assertDoesNotThrow(() -\u003e tree.insert(2, gate));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    void insert_valueAtInvalidIndex_throwsException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        BinaryTree\u003cGate\u003e tree \u003d new BinaryTree\u003c\u003e(new OrGate());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        AndGate gate \u003d new AndGate();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        assertThrows(BinaryTreeInvalidIndexException.class, () -\u003e tree.insert(4, gate));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "    void getParentIndex_childIndex_returnsIndexOfParent() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        BinaryTree\u003cGate\u003e tree \u003d new BinaryTree\u003c\u003e(new OrGate());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "        assertEquals(1,tree.getParentIndex(3));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "    void getLeftIndex_parentIndex_returnsIndexOfLeftChild() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        BinaryTree\u003cGate\u003e tree \u003d new BinaryTree\u003c\u003e(new OrGate());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "        assertEquals(3, tree.getLeftIndex(1));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "    void getRightIndex_parentIndex_returnsIndexOfRightChild() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        BinaryTree\u003cGate\u003e tree \u003d new BinaryTree\u003c\u003e(new OrGate());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "        assertEquals(4, tree.getRightIndex(1));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "    void isNullAtIndex_Index_returnsTrue() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        BinaryTree\u003cGate\u003e tree \u003d new BinaryTree\u003c\u003e();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        assertTrue(tree.isNullAtIndex(0));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "    void isNullAtIndex_Index_returnsFalse() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        BinaryTree\u003cGate\u003e tree \u003d new BinaryTree\u003c\u003e(new OrGate());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        assertFalse(tree.isNullAtIndex(0));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "    void isLeaf_Index_returnsTrue() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        BinaryTree\u003cGate\u003e tree \u003d new BinaryTree\u003c\u003e(new OrGate());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        assertTrue(tree.isLeaf(0));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "    void isLeaf_Index_returnsFalse() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        BinaryTree\u003cGate\u003e tree \u003d new BinaryTree\u003c\u003e(new OrGate());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "        assertDoesNotThrow(() -\u003e tree.insert(1, new AndGate()));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        assertFalse(tree.isLeaf(0));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorianfong98": 78,
      "hughjazzman": 3,
      "sevenseasofbri": 35
    }
  },
  {
    "path": "src/test/java/seedu/duke/model/component/CapacitorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.model.component;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import seedu.duke.model.exceptions.componentexceptions.ZeroComponentException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "public class CapacitorTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    void setValue_positiveCapacitance_returnsCapacitance() throws DukeException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        Capacitor c \u003d new Capacitor(100);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        c.setValue(200);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        assertEquals(200, c.getValue());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    void setValue_negativeCapacitance_expectException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        Capacitor c \u003d new Capacitor(100);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        assertThrows(ZeroComponentException.class, () -\u003e c.setValue(-200));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    void setValue_zeroCapacitance_expectException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        Capacitor c \u003d new Capacitor(100);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        assertThrows(ZeroComponentException.class, () -\u003e c.setValue(0));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oasisbeatle": 27,
      "hughjazzman": 1,
      "sevenseasofbri": 3
    }
  },
  {
    "path": "src/test/java/seedu/duke/model/component/InductorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.model.component;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import seedu.duke.model.exceptions.componentexceptions.ZeroComponentException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "public class InductorTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    void setValue_positiveInductance_updatesInductance() throws ZeroComponentException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        Inductor l \u003d new Inductor(100);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        l.setValue(200);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        assertEquals(200, l.getValue());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    void setValue_negativeInductance_expectException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        Inductor l \u003d new Inductor(100);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        assertThrows(ZeroComponentException.class, () -\u003e l.setValue(-200));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    void setValue_zeroInductance_expectException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        Inductor l \u003d new Inductor(100);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        assertThrows(ZeroComponentException.class, () -\u003e l.setValue(0));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oasisbeatle": 24,
      "hughjazzman": 1,
      "sevenseasofbri": 4
    }
  },
  {
    "path": "src/test/java/seedu/duke/model/component/LoadComponentTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.model.component;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import seedu.duke.model.exceptions.componentexceptions.ZeroComponentException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "class LoadComponentTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    void addSeries_zeroCapacitance_expectException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        Capacitor c \u003d new Capacitor(100);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        assertThrows(ZeroComponentException.class, () -\u003e c.addSeries(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    void addSeries_negativeCapacitance_expectException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        Capacitor c \u003d new Capacitor(100);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        assertThrows(ZeroComponentException.class, () -\u003e c.addSeries(-200));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    void addSeries_positiveNonZeroCapacitance_updatesCapacitance() throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        Capacitor c \u003d new Capacitor(100);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        assertEquals(50.0, c.addSeries(100));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    void addParallel_zeroCapacitance_expectException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        Capacitor c \u003d new Capacitor(100);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        assertThrows(ZeroComponentException.class, () -\u003e c.addParallel(0));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    void addParallel_negativeCapacitance_expectException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        Capacitor c \u003d new Capacitor(100);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        assertThrows(ZeroComponentException.class, () -\u003e c.addParallel(-200));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    void addParallel_positiveNonZeroCapacitance_updatesCapacitance() throws DukeException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        Capacitor c \u003d new Capacitor(100);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        assertEquals(200, c.addParallel(100));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    void addParallel_zeroResistance_expectException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        Resistor r \u003d new Resistor(100);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        assertThrows(ZeroComponentException.class, () -\u003e r.addParallel(0));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    void addParallel_negativeResistance_expectException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        Resistor r \u003d new Resistor(100);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        assertThrows(ZeroComponentException.class, () -\u003e r.addParallel(-200));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    void addParallel_positiveResistance_updatesResistance() throws DukeException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        Resistor r \u003d new Resistor(100);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        assertEquals(50.0, r.addParallel(100));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    void addSeries_zeroResistance_expectException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        Resistor r \u003d new Resistor(100);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        assertThrows(ZeroComponentException.class, () -\u003e r.addSeries(0));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    void addSeries_negativeResistance_expectException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        Resistor r \u003d new Resistor(100);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        assertThrows(ZeroComponentException.class, () -\u003e r.addSeries(-200));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    void addSeries_positiveResistance_updatesResistance() throws DukeException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        Resistor r \u003d new Resistor(100);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        assertEquals(200.0, r.addSeries(100));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    void addParallel_zeroInductance_expectException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        Inductor l \u003d new Inductor(100);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        assertThrows(ZeroComponentException.class, () -\u003e l.addParallel(0));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    void addParallel_negativeInductance_expectException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        Inductor l \u003d new Inductor(100);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        assertThrows(ZeroComponentException.class, () -\u003e l.addParallel(-200));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    void addParallel_positiveInductance_updatesInductance() throws DukeException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        Inductor l \u003d new Inductor(100);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        assertEquals(50.0, l.addParallel(100));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    void addSeries_zeroInductance_expectException() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        Inductor l \u003d new Inductor(100);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        assertThrows(ZeroComponentException.class, () -\u003e l.addSeries(0));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    void addSeries_negativeInductance_expectException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        Inductor l \u003d new Inductor(100);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        assertThrows(ZeroComponentException.class, () -\u003e l.addSeries(-200));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    void addSeries_positiveInductance_updatesInductance() throws DukeException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        Inductor l \u003d new Inductor(100);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        assertEquals(200.0, l.addSeries(100));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oasisbeatle": 86,
      "hughjazzman": 21,
      "sevenseasofbri": 13
    }
  },
  {
    "path": "src/test/java/seedu/duke/model/component/ResistorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.model.component;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import seedu.duke.model.exceptions.componentexceptions.ZeroComponentException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "public class ResistorTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    void setValueTest_positiveResistance_updatesResistance() throws ZeroComponentException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        Resistor r \u003d new Resistor(100);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        r.setValue(200);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        assertEquals(200, r.getValue());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    void setValueTest_negativeResistance_expectException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        Resistor r \u003d new Resistor(100);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        assertThrows(ZeroComponentException.class, () -\u003e r.setValue(-200));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    void setValueTest_zeroResistance_expectException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        Resistor r \u003d new Resistor(100);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        assertThrows(ZeroComponentException.class, () -\u003e r.setValue(0));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oasisbeatle": 25,
      "hughjazzman": 1,
      "sevenseasofbri": 4
    }
  },
  {
    "path": "src/test/java/seedu/duke/model/component/VoltageSourceTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.model.component;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import seedu.duke.model.exceptions.componentexceptions.ZeroComponentException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "public class VoltageSourceTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    void setValue_positiveVoltage_updatesVoltage() throws ZeroComponentException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        VoltageSource v \u003d new VoltageSource(100);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        v.setValue(200);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        assertEquals(200, v.getValue());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    void setValue_negativeVoltage_expectException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        VoltageSource v \u003d new VoltageSource(100);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        assertThrows(ZeroComponentException.class, () -\u003e v.setValue(-200));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    void setValue_zeroVoltage_expectException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        VoltageSource v \u003d new VoltageSource(100);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        assertThrows(ZeroComponentException.class, () -\u003e v.setValue(0));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oasisbeatle": 25,
      "hughjazzman": 1,
      "sevenseasofbri": 4
    }
  },
  {
    "path": "src/test/java/seedu/duke/model/gates/GateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.model.gates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import seedu.duke.model.exceptions.gatesexceptions.GateException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "class GateTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    void getOutput_nandGateOneZero_One() throws GateException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        NandGate gate \u003d new NandGate();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        assertFalse(gate.isSetInput());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        assertFalse(gate.isSetSecondInput());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        gate.setInput(true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        gate.setSecondInput(false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        assertTrue(gate.getOutput());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    void getOutput_norGateOneZero_One() throws GateException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        NorGate gate \u003d new NorGate();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        assertFalse(gate.isSetInput());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        assertFalse(gate.isSetSecondInput());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        gate.setInput(true);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        gate.setSecondInput(false);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        assertFalse(gate.getOutput());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    void getOutput_xnorGateOneZero_One() throws GateException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        XnorGate gate \u003d new XnorGate();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        assertFalse(gate.isSetInput());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        assertFalse(gate.isSetSecondInput());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        gate.setInput(true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        gate.setSecondInput(false);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        assertFalse(gate.getOutput());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        gate.setInput(false);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        assertTrue(gate.getOutput());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hughjazzman": 38,
      "sevenseasofbri": 4
    }
  },
  {
    "path": "src/test/java/seedu/duke/model/template/BooleanTemplateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.model.template;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.model.gates.AndGate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.model.gates.OrGate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "class BooleanTemplateTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    void addGate_orGate_doesNotThrow() throws DukeException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        BooleanTemplate template \u003d new BooleanTemplate(new AndGate());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        assertDoesNotThrow(() -\u003e template.addGate(new OrGate(), 1));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    void setInput() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hughjazzman": 20
    }
  },
  {
    "path": "src/test/java/seedu/duke/model/template/LcTemplateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.model.template;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import seedu.duke.model.exceptions.componentexceptions.ZeroComponentException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import seedu.duke.model.exceptions.templateexceptions.TemplateComponentsNotSetException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "class LcTemplateTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    //@@author PraveenElango"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    public static final double DELTA \u003d 1e-15;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    void calcImpedance_zeroCapacitance_expectException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        LcTemplate t \u003d new LcTemplate();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        assertThrows(TemplateComponentsNotSetException.class, t::calcImpedance);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    void calcImpedance_lCValueEqualsOne_returnsImpedance() throws DukeException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        LcTemplate t \u003d new LcTemplate(1,1,1);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        double inductance \u003d 1 * Math.pow(10, -6);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        double capacitance \u003d 1 * Math.pow(10, -6);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        double impedance \u003d t.ANGULAR_FREQUENCY * Math.abs(inductance - (1 / capacitance));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        assertEquals(impedance, t.calcImpedance(), DELTA);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    void getInductor_lCValueEqualsOne_returnsInductor() throws ZeroComponentException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        LcTemplate t \u003d new LcTemplate(1, 1, 1);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        t.setInductor(5);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        assertEquals(5, t.getInductor().getValue(), DELTA);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    void setComponent_lCValueEqualsOne_setInductorValue() throws ZeroComponentException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        LcTemplate t \u003d new LcTemplate();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        t.setComponent(\"l\", 5);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        assertEquals(5, t.getInductor().getValue(), DELTA);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    void setCapacitor_lCValueEqualsOne_setsCapacitor() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        LcTemplate t \u003d new LcTemplate(1, 1, 1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        assertEquals(1, t.getCapacitor().getValue(), DELTA);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    void setComponent_cValueEqualsFive_setCapacitorValue() throws ZeroComponentException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        LcTemplate t \u003d new LcTemplate();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        t.setComponent(\"c\", 5);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        assertEquals(5, t.getCapacitor().getValue(), DELTA);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    void getCurrent_lCValueEqualsOne_returnsCurrent() throws DukeException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        LcTemplate t \u003d new LcTemplate(1,1,1);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        double current \u003d 1 / t.calcImpedance();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        assertEquals(current, t.getCurrent());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    void getPower_lCValueEqualsOne_returnsPower() throws DukeException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        LcTemplate t \u003d new LcTemplate(1,1,1);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        double power \u003d 1 * 1 / t.calcImpedance();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        assertEquals(power, t.getPower());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hughjazzman": 9,
      "sevenseasofbri": 2,
      "PraveenElango": 64
    }
  },
  {
    "path": "src/test/java/seedu/duke/model/template/LrTemplateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.model.template;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import seedu.duke.model.exceptions.componentexceptions.ZeroComponentException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import seedu.duke.model.exceptions.templateexceptions.TemplateComponentsNotSetException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "class LrTemplateTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    public static final double DELTA \u003d 5;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    void calcImpedance_zeroInductance_expectException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        LrTemplate t \u003d new LrTemplate();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        assertThrows(TemplateComponentsNotSetException.class, t::calcImpedance);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    void calcImpedance_lRValuesEqualOne_returnsDouble() throws DukeException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        LrTemplate t \u003d new LrTemplate(1,1,1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        double impedance \u003d Math.sqrt(Math.pow(1, 2)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "                + (1 / Math.pow((t.ANGULAR_FREQUENCY * 1), 2)));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        assertEquals(impedance, t.calcImpedance(), DELTA);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    void setComponent_lRValuesEqualOne_setCapacitorValue() throws ZeroComponentException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        LrTemplate t \u003d new LrTemplate();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        t.setComponent(\"l\", 5);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        assertEquals(5, t.getInductor().getValue(), DELTA);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    void getCurrent_lRValuesEqualOne_returnsDouble() throws DukeException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        LrTemplate t \u003d new LrTemplate(1,1,1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        double current \u003d 1 / t.calcImpedance();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        assertEquals(current, t.getCurrent());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    void getPower_lRValuesEqualOne_returnsDouble() throws DukeException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        LrTemplate t \u003d new LrTemplate(1,1,1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        double power \u003d 1 * 1 / t.calcImpedance();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        assertEquals(power, t.getPower());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hughjazzman": 1,
      "sevenseasofbri": 4,
      "PraveenElango": 44
    }
  },
  {
    "path": "src/test/java/seedu/duke/model/template/RTemplateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.model.template;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import seedu.duke.model.exceptions.componentexceptions.ZeroComponentException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import seedu.duke.model.exceptions.templateexceptions.TemplateComponentsNotSetException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "class RTemplateTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    public static final double DELTA \u003d 1e-15;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    void calcImpedance_zeroCapacitance_expectException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        RcTemplate t \u003d new RcTemplate();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        assertThrows(TemplateComponentsNotSetException.class, t::calcImpedance);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    void calcImpedance_rValueEqualsOne_returnsImpedance() throws DukeException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        RTemplate t \u003d new RTemplate(5,1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        assertEquals(5, t.calcImpedance(), DELTA);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    void setCapacitor_rValueEqualsFive_returnsResistor() throws ZeroComponentException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        RTemplate t \u003d new RTemplate(1, 1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        t.setResistor(5);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        assertEquals(5, t.getResistor().getValue(), DELTA);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    void setComponent_rValueEqualsFive_getResistorValue() throws ZeroComponentException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        RTemplate t \u003d new RTemplate();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        t.setComponent(\"r\", 5);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        assertEquals(5, t.getResistor().getValue(), DELTA);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    void getCurrent_rValueEqualsOne_returnsCurrent() throws DukeException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        RcTemplate t \u003d new RcTemplate(1,1,1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        double current \u003d 1 / t.calcImpedance();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        assertEquals(current, t.getCurrent());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    void getPower_rValueEqualsOne_returnsPower() throws DukeException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        RcTemplate t \u003d new RcTemplate(1,1,1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        double power \u003d 1 * 1 / t.calcImpedance();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        assertEquals(power, t.getPower());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hughjazzman": 1,
      "sevenseasofbri": 5,
      "PraveenElango": 47
    }
  },
  {
    "path": "src/test/java/seedu/duke/model/template/RcTemplateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.model.template;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import seedu.duke.model.exceptions.componentexceptions.ZeroComponentException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import seedu.duke.model.exceptions.templateexceptions.TemplateComponentsNotSetException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "class RcTemplateTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    public static final double DELTA \u003d 1e-15;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    void calcImpedance_zeroCapacitance_expectException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        RcTemplate t \u003d new RcTemplate();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        assertThrows(TemplateComponentsNotSetException.class, t::calcImpedance);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    void calcImpedance_rCValuesEqualsOne_returnsImpedance() throws DukeException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        RcTemplate t \u003d new RcTemplate(1,1,1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        double impedance \u003d Math.sqrt(Math.pow(1, 2)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "                + (1 / Math.pow((t.ANGULAR_FREQUENCY * 1 * Math.pow(10, -6)), 2)));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        assertEquals(impedance, t.calcImpedance(), DELTA);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    void setCapacitor_rCValuesEqualsOne_setsCapacitorObject() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        RcTemplate t \u003d new RcTemplate(1, 1, 1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        assertEquals(1, t.getCapacitor().getValue(), DELTA);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    void setComponent_rCValuesEqualsOne_setCapacitorValue() throws ZeroComponentException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        RcTemplate t \u003d new RcTemplate();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        t.setComponent(\"c\", 5);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        assertEquals(5, t.getCapacitor().getValue(), DELTA);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    void getCurrent_rCValuesEqualsOne_returnsCurrent() throws DukeException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        RcTemplate t \u003d new RcTemplate(1,1,1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        double current \u003d 1 / t.calcImpedance();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        assertEquals(current, t.getCurrent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    void getPower_rCValuesEqualsOne_returnsPower() throws DukeException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        RcTemplate t \u003d new RcTemplate(1,1,1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        double power \u003d 1 * 1 / t.calcImpedance();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        assertEquals(power, t.getPower());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hughjazzman": 13,
      "sevenseasofbri": 4,
      "PraveenElango": 38
    }
  },
  {
    "path": "src/test/java/seedu/duke/ui/UiTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "package seedu.duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "public class UiTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    void printInstruction_PassInvalidInstructionNumber_ThrowsException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        assertThrows(ArrayIndexOutOfBoundsException.class, () -\u003e ui.printCircuitInstruction(8));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oasisbeatle": 1,
      "sevenseasofbri": 13
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "start"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "tutorial"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "hello"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "tutorial circuit"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "template rc"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "set v 5"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "set l 220"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "set r 500"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "set c 20"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "add parallel r 30"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "add parallel c 20"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "calc power"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "exit"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "set v 5"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "tutorial boolean"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "template and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "set B 1"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "set C 0"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "calc"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "add C NOR"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "set F 0"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "set G 1"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "calc"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "exit"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "set B 1"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "template rc"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "set v -999"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "set v 5"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "set r 200"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "set c 10"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "add series r 200"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "add series c 10"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "add parallel r 200"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "add parallel l 100"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "set r 100"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "set c 2"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "calc current"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "template hey"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "template and"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "set a 2"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "set q 1"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "set b 0.5"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "add"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "set B 1"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "add C or"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "set F 0"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "add G xor"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "set N 1"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "set O 0"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "calc"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "summary"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "oasisbeatle": 11,
      "hughjazzman": 20,
      "sevenseasofbri": 20,
      "PraveenElango": 1
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@echo off"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "setlocal enableextensions"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "pushd %~dp0"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "cd .."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "call gradlew clean shadowJar"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "cd build\\libs"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "for /f \"tokens\u003d*\" %%a in ("
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027dir /b *.jar\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ") do ("
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    set jarloc\u003d%%a"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "java -jar -Dfile.encoding\u003dUTF-8 %jarloc% \u003c ..\\..\\text-ui-test\\input.txt \u003e ..\\..\\text-ui-test\\ACTUAL.TXT"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "cd ..\\..\\text-ui-test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "FC /w ACTUAL.TXT EXPECTED.TXT \u003eNUL \u0026\u0026 ECHO Test passed! || Echo Test failed!"
      }
    ],
    "authorContributionMap": {
      "hughjazzman": 1,
      "sevenseasofbri": 1,
      "-": 16
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# change to script directory"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "cd \"${0%/*}\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "cd .."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "./gradlew clean shadowJar"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "cd text-ui-test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "java -jar -Dfile.encoding\u003dUTF-8 $(find ../build/libs/ -mindepth 1 -print -quit) \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix EXPECTED-UNIX.TXT ACTUAL.TXT"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "diff -w EXPECTED-UNIX.TXT ACTUAL.TXT"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test passed!\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test failed!\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "oasisbeatle": 1,
      "sevenseasofbri": 1,
      "-": 21
    }
  },
  {
    "path": "unused/RemovedUi.java",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "//@@author PraveenElango"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "//table replaced with table in SummaryCommand"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "private void printGreeting() {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        System.out.println(\"What is your name?\");"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        System.out.println(\"Hello \" + readLine());"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        System.out.println(\" \");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        System.out.println(\"Welcome to the CLIrcuit Assistant!\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        System.out.println(\"\\n\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        + \"             +----------------------------------------+\\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        + \"             |    Command    |     Template Name      |\\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        + \"             +----------------------------------------+\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        + \"             |                Circuit                 |\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        + \"             +----------------------------------------+\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        + \"             | template r    | Resistor               |\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        + \"             | template rc   | Resistor-Capacitor     |\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        + \"             | template rl   | Resistor-Inductor      |\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        + \"             | template lc   | Inductor-Capacitor     |\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        + \"             +--------------+-------------------------+\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        + \"             |                Boolean                 |\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        + \"             +----------------------------------------+\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        + \"             | template or   | Or Gate                |\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        + \"             | template and  | And Gate               |\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        + \"             | template nor  | Nor Gate               |\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        + \"             | template xor  | Xor Gate               |\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        + \"             | template nand | Nand Gate              |\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        + \"             | template xnor | Xnor Gate              |\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        + \"             +--------------+-------------------------+\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        );"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        System.out.println(\"Type one of the above template commands to get started with your template.\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "//@@author"
      }
    ],
    "authorContributionMap": {
      "PraveenElango": 31
    }
  }
]
