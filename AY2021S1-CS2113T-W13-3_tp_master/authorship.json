[
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "![](https://avatars3.githubusercontent.com/u/57522870?s\u003d460\u0026u\u003d8dd180701edf230c1bd905ff0d49b81d40785e1a\u0026v\u003d4) | Vishruti Ranjan | [Github](https://github.com/sevenseasofbri) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "![](https://avatars2.githubusercontent.com/u/53231968?s\u003d460\u0026u\u003d43fad5fee043173a5c65db833d39c9c00c04549c\u0026v\u003d4) | Wira Azmoon | [Github](https://github.com/hughjazzman) | [Portfolio](docs/team/wira.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Praveen Elango | [Github](https://github.com/PraveenElango) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "![](https://avatars2.githubusercontent.com/u/47025155?s\u003d400\u0026u\u003dce782a0a69f128f7fb409598101baeef34fd201e\u0026v\u003d4) | Dorian Fong | [Github](https://github.com/dorianfong98) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "![](https://avatars3.githubusercontent.com/u/60434719?v\u003d4) | Dash Abhishek | [Github](https://github.com/oasisbeatle) | [Portfolio](docs/team/johndoe.md)"
      }
    ],
    "authorContributionMap": {
      "oasisbeatle": 1,
      "hughjazzman": 3,
      "sevenseasofbri": 1,
      "-": 4
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Duke"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "CLIrcuit Assistant is a desktop app to implement and solve simple circuits, optimized for use via the Command Line Interface (CLI)."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Useful links:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* [User Guide](UserGuide.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "* [Developer Guide](DeveloperGuide.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "* [About Us](AboutUs.md)"
      }
    ],
    "authorContributionMap": {
      "hughjazzman": 1,
      "-": 7
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "CLIrcuit Assistant is a desktop app to implement and solve simple circuits, optimized for use via the Command Line Interface (CLI)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "## Quick Start"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "{Give steps to get started quickly}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure that you have Java 11 or above installed."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "1. Down the latest version of `Duke` from [the releases](https://github.com/AY2021S1-CS2113T-W13-3/tp/releases) when it is ready."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "### Start interactive tutorial: `help`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "Starts the interactive tutorial for the app."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "### Create circuit template: `template`"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "Creates a circuit template."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "Format: `template TEMPLATE`"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "* The `TEMPLATE` can be chosen from the following 4 - `r`, `rc`, `rl`, `lc`"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    * `r` only consists of the resistor."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    * `rc` consists of the resistor and capacitor."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    * `rl` consists of the resistor and inductor."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    * `lc` consists of the inductor and capacitor."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "`template rc`"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "```"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "+---R-----C---+"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "|             |"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "|             |"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "+----+V_ac+---+"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "```"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "### Set component value: `set` \u003ca name\u003d\u0027set\u0027\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "Sets the value of the component. The component must be part of the current circuit template. Units correspond to the component involved - resistors in ohms, capacitors in microfarads, inductors in microhenries."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "Format: `set COMPONENT VALUE`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "* The `COMPONENT` can be chosen from the 3 - `r`, `c`, `l`"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    * `r` represents a resistor"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    * `c` represents a capacitor"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    * `l` represents an inductor"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "* The `VALUE` can be an integer of a float, of which the units depends on the component set."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "`set r 500`"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "### Add component: `add`"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "Adds a component, in a specific configuration, to the current circuit template."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "Format: `add CONFIG COMPONENT VALUE`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "* The `CONFIG` can be chosen from the 2 - `series` and `parallel`."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "* The `COMPONENT` and `VALUE` are as explained above under [Set component value](#set)."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "`add parallel c 500`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "### Calculate effective value: `calc`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "Calculates the effective value based on the components and their configuration. If calculating `reff`, `ceff`, or `leff`, the component must be part of the current circuit template."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "`calc EFF_VALUE`"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "* The `EFF_VALUE` can be chosen from the following 5 - `reff`, `ceff`, `leff`, `current`, `power`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    * `reff` is the effective resistance"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    * `ceff` is the effective capacitance"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    * `leff` is the effective inductance"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    * `current` is the current flowing through the power supply"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    * `power` is the power supplied by the power supply"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "`calc ceff`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "**Q**: How do I know the difference between the components?"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "**A**: Pay attention in EPP."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "## Command Summary"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "Action | Format, Examples"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "**Help** | `help`"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "**Template** | `template TEMPLATE` \u003cbr\u003e e.g., `template rc`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "**Set** | `set COMPONENT VALUE` \u003cbr\u003e e.g., `set r 500`"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "**Add** | `add CONFIG COMPONENT VALUE`\u003cbr\u003e e.g., `add parallel c 500`"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "**Calculate** | `calc EFF_VALUE` \u003cbr\u003e e.g., `calc ceff`"
      }
    ],
    "authorContributionMap": {
      "hughjazzman": 75,
      "-": 32
    }
  },
  {
    "path": "docs/team/wira.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "# Wira Azmoon - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "Handle Issues."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "### Summary of Contributions"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "Documentation."
      }
    ],
    "authorContributionMap": {
      "hughjazzman": 9
    }
  },
  {
    "path": "gradlew.bat",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Copyright 2015 the original author or authors."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Licensed under the Apache License, Version 2.0 (the \"License\");"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "@rem you may not use this file except in compliance with the License."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "@rem You may obtain a copy of the License at"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "@rem      https://www.apache.org/licenses/LICENSE-2.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Unless required by applicable law or agreed to in writing, software"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "@rem distributed under the License is distributed on an \"AS IS\" BASIS,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "@rem See the License for the specific language governing permissions and"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "@rem limitations under the License."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@rem  Gradle startup script for Windows"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Set local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "set DIRNAME\u003d%~dp0"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_BASE_NAME\u003d%~n0"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_HOME\u003d%DIRNAME%"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "for %%i in (\"%APP_HOME%\") do set APP_HOME\u003d%%~fi"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Find java.exe"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "if defined JAVA_HOME goto findJavaFromJavaHome"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003djava.exe"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ":findJavaFromJavaHome"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "if exist \"%JAVA_EXE%\" goto init"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ":init"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Get command-line arguments, handling Windows variants"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Slurp the command line arguments."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "set _SKIP\u003d2"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args_slurp"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "if \"x%~1\" \u003d\u003d \"x\" goto execute"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d%*"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ":execute"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Setup the command line"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Execute Gradle"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ":end"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "@rem End local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ":fail"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "rem the _cmd.exe /c_ return code!"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "exit /b 1"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ":mainEnd"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ":omega"
      }
    ],
    "authorContributionMap": {
      "-": 103,
      "PraveenElango": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/Duke.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    /** Instances of class objects for UI. **/"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private final Ui ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private Duke() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "                String line \u003d ui.readLine();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "                Command c \u003d Parser.parse(line);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "                c.execute(ui);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "                ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Main entry-point for the java.duke.Duke application."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        new Duke().run();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hughjazzman": 26,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/duke/DukeException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private final String message;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public DukeException(String s) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        this.message \u003d s;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * Returns message in Exception as a String."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @return String message for the Exception."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hughjazzman": 20
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.component.Capacitor;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.component.Inductor;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.component.LoadComponent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.component.Resistor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private final String config;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private final String component;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private final double value;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public AddCommand(String config, String component, double value) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        this.config \u003d config;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        this.component \u003d component;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * Executes appropriate methods based on the given command."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @param ui Ui object."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public void execute(Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        // Placeholder, to be replaced with Template.getComponent"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        LoadComponent c \u003d getComponent(component);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        if (config.equals(\"series\")) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            System.out.println(c.addSeries(value));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            System.out.println(c.addParallel(value));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    // Placeholder, getComponent would come from Template class instead"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private LoadComponent getComponent(String component) throws DukeException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        switch (component) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        case \"r\":"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            return new Resistor(1);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        case \"c\":"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            return new Capacitor(1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        case \"l\":"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            return new Inductor(1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            throw new DukeException(\"Invalid component\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hughjazzman": 50
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "public class Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    /** Boolean whether the command is to exit. **/"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    protected boolean isExit;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * Executes appropriate methods based on the given command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @param ui Ui object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public void execute(Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * Returns boolean isExit."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @return boolean isExit whether the command is to exit."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return isExit;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hughjazzman": 27
    }
  },
  {
    "path": "src/main/java/seedu/duke/component/Capacitor.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "package seedu.duke.component;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "public class Capacitor extends LoadComponent {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    private static final String SI_UNIT \u003d \"µF\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    public Capacitor(double value) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        super(value);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        siUnit \u003d SI_UNIT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        isDirectSeries \u003d false;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oasisbeatle": 8,
      "hughjazzman": 3
    }
  },
  {
    "path": "src/main/java/seedu/duke/component/Component.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.component;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "public abstract class Component {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    protected double value;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    protected String siUnit;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public Component(double value) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * Returns the value and unit of Component object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @return String representation of Component value"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return (value) + \" \" + siUnit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hughjazzman": 20
    }
  },
  {
    "path": "src/main/java/seedu/duke/component/Inductor.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "package seedu.duke.component;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "public class Inductor extends LoadComponent {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    private static final String SI_UNIT \u003d \"µH\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    public Inductor(double value) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        super(value);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        siUnit \u003d SI_UNIT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        isDirectSeries \u003d true;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hughjazzman": 3,
      "sevenseasofbri": 8
    }
  },
  {
    "path": "src/main/java/seedu/duke/component/LoadComponent.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.component;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "public abstract class LoadComponent extends Component {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    protected boolean isDirectSeries;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public LoadComponent(double value) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        super(value);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private double addDirect(double otherValue) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return value + otherValue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private double addReciprocal(double otherValue) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return 1 / ((1 / value) + (1 / otherValue));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * Returns the effective Component value when added in series."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @param otherValue Component value."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @return Effective value."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public double addSeries(double otherValue) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        if (isDirectSeries) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            return addDirect(otherValue);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            return addReciprocal(otherValue);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * Returns the effective Component value when added in parallel."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @param otherValue Component value."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @return Effective value."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public double addParallel(double otherValue) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        if (!isDirectSeries) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            return addDirect(otherValue);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            return addReciprocal(otherValue);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hughjazzman": 45
    }
  },
  {
    "path": "src/main/java/seedu/duke/component/Resistor.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "package seedu.duke.component;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "public class Resistor extends LoadComponent {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    private static final String SI_UNIT \u003d \"Ω\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    public Resistor(double value) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        super(value);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        siUnit \u003d SI_UNIT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        isDirectSeries \u003d true;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hughjazzman": 3,
      "PraveenElango": 8
    }
  },
  {
    "path": "src/main/java/seedu/duke/component/VoltageSource.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "package seedu.duke.component;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "public class VoltageSource extends Component {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "    private static final String SI_UNIT \u003d \"V\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "    public VoltageSource(double value) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "        super(value);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        siUnit \u003d SI_UNIT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorianfong98": 9,
      "hughjazzman": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.commands.AddCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private static final Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * Returns a Command object based on the input line."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @param line Line of user input."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @return Command object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @throws DukeException If given line is blank."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public static Command parse(String line) throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        // Prevent blank tasks"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        if (line.isBlank()) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            throw new DukeException(\"Invalid command!\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        // split by whitespace"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        String[] args \u003d line.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        switch (args[0].toLowerCase()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        case \"help\":"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            return new Command();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        case \"template\":"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            return prepareTemplate(args);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        case \"set\":"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            return prepareSet(args);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        case \"add\":"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            return prepareAdd(args);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        case \"calc\":"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            return prepareCalc(args);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            throw new DukeException(\"Invalid Command!\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private static boolean hasMinArguments(String[] args, int n) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return args.length \u003c n;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private static boolean isComponent(String arg) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return arg.equals(\"r\") || arg.equals(\"c\") || arg.equals(\"l\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author hughjazzman-reused"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    //Reused from https://stackoverflow.com/a/1102916 with minor modifications"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean isNumeric(String str) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            Double.parseDouble(str);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private static Command prepareTemplate(String[] args) throws DukeException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        if (hasMinArguments(args, 2)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            throw new DukeException(\"Not enough arguments!\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        boolean isTemplate \u003d args[1].equals(\"r\") || args[1].equals(\"rc\")"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "                || args[1].equals(\"rl\") || args[1].equals(\"lc\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        if (!isTemplate) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            throw new DukeException(\"Invalid argument\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return new Command();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private static Command prepareSet(String[] args) throws DukeException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        if (hasMinArguments(args, 3)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            throw new DukeException(\"Not enough arguments!\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        if (!(isComponent(args[1]) \u0026\u0026 isNumeric(args[2]))) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            throw new DukeException(\"Invalid argument\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return new Command();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private static Command prepareAdd(String[] args) throws DukeException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        if (hasMinArguments(args, 4)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            throw new DukeException(\"Not enough arguments!\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        boolean isConfig \u003d args[1].equals(\"parallel\") || args[1].equals(\"series\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        boolean isValid \u003d isConfig \u0026\u0026 isComponent(args[2]) \u0026\u0026 isNumeric(args[3]);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        if (!isValid) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            throw new DukeException(\"Invalid argument\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        double value \u003d Double.parseDouble(args[3]);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return new AddCommand(args[1], args[2], value);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private static Command prepareCalc(String[] args) throws DukeException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        if (hasMinArguments(args, 2)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            throw new DukeException(\"Not enough arguments!\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        boolean isCalc \u003d args[1].equals(\"reff\") || args[1].equals(\"ceff\") || args[1].equals(\"leff\")"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "                || args[1].equals(\"current\") || args[1].equals(\"power\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        if (!isCalc) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            throw new DukeException(\"Invalid argument\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return new Command();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hughjazzman": 106,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/duke/template/LrTemplate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "package seedu.duke.template;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import seedu.duke.component.Inductor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import seedu.duke.component.Resistor;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import seedu.duke.component.VoltageSource;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "public class LrTemplate extends Template {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    private static final String RL_TEMPLATE \u003d \"\\t+---R-----L---+\\n\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "                                            + \"\\t|             |\\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "                                            + \"\\t|             |\\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "                                            + \"\\t+----+V_ac+---+\\n\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    private Resistor resistor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    private Inductor inductor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    public LrTemplate(double resistance, double inductance, double powerSupply) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        super(powerSupply);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        inductor \u003d new Inductor(inductance);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        resistor \u003d new Resistor(resistance);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * Returns inductor object, an attribute of the instance of LrTemplate."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * @return inductor, an instance of the Inductor class."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    public Inductor getInductor() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        return inductor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * Returns resistor object, an attribute of the instance of LrTemplate."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * @return resistor, an instance of the Resistor class."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    public Resistor getResistor() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        return resistor;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * Returns String consisting of total inductance and resistance values of the LrTemplate object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * @return String representation of LrTemplate object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        return RL_TEMPLATE + \"Total Resistance: \" + resistor + System.lineSeparator()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "                + \"Total Inductance: \" + inductor + System.lineSeparator();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sevenseasofbri": 50
    }
  },
  {
    "path": "src/main/java/seedu/duke/template/Template.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "package seedu.duke.template;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import seedu.duke.component.VoltageSource;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "public class Template {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    protected VoltageSource initialPowerSupply;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    public Template(double powerSupply) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        initialPowerSupply \u003d new VoltageSource(powerSupply);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * Returns the initialPowerSupply as specified at the instantiation of Template."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * @return initialPowerSupply, an instance of VoltageSource."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    public VoltageSource getInitialPowerSupply() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        return initialPowerSupply;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sevenseasofbri": 20
    }
  },
  {
    "path": "src/main/java/seedu/duke/ui/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private static final String LOGO \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private static final Scanner IN \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * Returns the next line of user input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @return String of user input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public String readLine() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return IN.nextLine().strip();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * Prints Duke logo."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private void printLogo() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        System.out.println(\"Hello from\\n\" + LOGO);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * Prints greeting to Duke."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private void printGreeting() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        System.out.println(\"What is your name?\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        System.out.println(\"Hello \" + readLine());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * Prints logo and greeting for Duke."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        printLogo();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        printGreeting();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * Prints a message."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @param message Message."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public void showError(String message) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        System.out.println(message);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hughjazzman": 55
    }
  }
]
