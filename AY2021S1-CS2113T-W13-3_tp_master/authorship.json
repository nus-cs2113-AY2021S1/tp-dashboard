[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    mainClassName \u003d \"seedu.duke.Duke\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "tasks.withType(JavaCompile) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    options.encoding \u003d \u0027UTF-8\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hughjazzman": 4,
      "sevenseasofbri": 1,
      "-": 46
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "![](https://avatars3.githubusercontent.com/u/57522870?s\u003d460\u0026u\u003d8dd180701edf230c1bd905ff0d49b81d40785e1a\u0026v\u003d4) | Vishruti Ranjan | [Github](https://github.com/sevenseasofbri) | [Portfolio](team/johndoe.md)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "![](https://avatars2.githubusercontent.com/u/53231968?s\u003d460\u0026u\u003d43fad5fee043173a5c65db833d39c9c00c04549c\u0026v\u003d4) | Wira Azmoon | [Github](https://github.com/hughjazzman) | [Portfolio](team/wira.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "![](https://avatars1.githubusercontent.com/u/37036833?s\u003d400\u0026u\u003d2c0e2ed51f01d354f32fb3efd9e51a56aa273e8f\u0026v\u003d4) | Praveen Elango | [Github](https://github.com/PraveenElango) | [Portfolio](team/johndoe.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "![](https://avatars2.githubusercontent.com/u/47025155?s\u003d400\u0026u\u003dce782a0a69f128f7fb409598101baeef34fd201e\u0026v\u003d4) | Dorian Fong | [Github](https://github.com/dorianfong98) | [Portfolio](team/johndoe.md)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "![](https://avatars3.githubusercontent.com/u/60434719?v\u003d4) | Dash Abhishek | [Github](https://github.com/oasisbeatle) | [Portfolio](team/johndoe.md)"
      }
    ],
    "authorContributionMap": {
      "hughjazzman": 5,
      "-": 4
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "## Table of Contents"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "* [Setting up, getting started](#setting-up)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "* [Design \u0026 Implementation](#design--implementation)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    * [UI component](#ui-component)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    * [Logic component](#logic-component)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    * [Model component](#model-component)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "* [Appendix: Requirements](#appendix-requirements)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    * [Product scope](#product-scope)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    * [User Stories](#user-stories)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    * [Non-Functional Requirements](#non-functional-requirements)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    * [Glossary](#glossary)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "* [Appendix: Instructions for manual testing](#appendix-instructions-for-manual-testing)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "    * [Initital launch](#initial-launch)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "    * [Creating a digital circuit](#creating-a-digital-circuit)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "    * [Creating a logic gate](#creating-a-logic-gate)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "    * [Calculating values](#calculating-values)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "    * [Exiting the program](#exiting-the-program)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "    "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "## Setting up, getting started"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "Refer to the guide [*Setting up and getting started*](../README.md)."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "## Design \u0026 Implementation"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "![ArchitectureDiagram](diagrams/ArchitectureDiagram.png)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "The **Architecture Design** given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "**`Duke`** is the main class of the application, and handles the app launch, initializing the appropriate classes to be used."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "The rest of the app consists of four components."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "* [**`UI`**](#ui-component): The UI of the App."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "* [**`Logic`**](#logic-component): The command executor."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "* [**`Model`**](#model-component): Holds the data of the App in memory."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "### UI component"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "![UiDiagram](diagrams/UiClassDiagram.png)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "The `Ui` component"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "### Logic component"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "![LogicDiagram](diagrams/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "1. `Logic` stores a current `Template` object that represents the current circuit configuration."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "1. `Logic` uses the `Parser` class to parse the user command."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "1. This results in a `Command` object which is executed in `Duke`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "1. The command execution can affect the `Model` (e.g. setting a value)."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "1. In addition, the `Ui` may also perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `parse(\"set r 500\")` API call."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "![SetSequence](diagrams/SetSequenceDiagram.png)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "### Model component"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "![ModelDiagram](diagrams/ModelClassDiagram.png)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "* includes `CircuitTemplate` and `BooleanTemplate` that can represent the current `template` in [`Logic`](#logic-component)."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "* has `Component` and `Gate` within the templates."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "## Implementation of Boolean Commands"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "### Binary Tree"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "The boolean add, set and calculate features are modeled using a generic `BinaryTree\u003cT\u003e` class. The `BooleanTemplate` imports"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "this class to store and evaluate the logic circuit. "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "The elements of the tree are stored in a fixed `ArrayList` (size \u003d 15) indexed in a _heap-like_"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "manner. That is, a left to right _level-order traversal_ will map to the indexes of the array. The following diagram represents"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "the indexes each node in the tree corresponds to in the `ArrayList`."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "```"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "                  [0]"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "                   |     "
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "       [1]                    [2]"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "                     "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "  [3]       [4]         [5]         [6]"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "                      "
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "[7] [8]   [9] [10]   [11] [12]   [13] [14]"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "```"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "The operations exposed to the Logic in this Model include: "
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "* `BinaryTree#isNullAtIndex(int)` - Checks whether the value at specified index in tree is \u0027null\u0027 or not."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "* `BinaryTree#getParentIndex(int)` - Returns index of parent node."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "* `BinaryTree#insert(int, T)` - Inserts value at position specified in the tree, if valid."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "* `BinaryTree#isLeaf(int)` - Returns boolean based on whether node at specified index is a _leaf node_ or not."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "* `BinaryTree#isEmpty()` - Checks if the tree has no elements in it."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "When an object of the `BinaryTree\u003cT\u003e` class is created, it initialises the ArrayList\u003cT\u003e instance to 15 `null` values. This will be "
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "further discussed in the section detailing the `insert()` function."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "#### Initialising A `BinaryTree\u003cT\u003e` Object"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "The Logic initialises the `BinaryTree\u003cGate\u003e` object using the parameterised constructor, thus specifying the Gate class type "
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "root. The object diagram below depicts the initial state of the Model when a `BinaryTree\u003cGate\u003e` object is created."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "![InitialBinaryTree](diagrams/BinaryTreeInitialObjectDiagram.png)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "The Logic uses the parameterised constructor of `BinaryTree\u003cT\u003e` to create the object since it requires initialisation of"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "the root. Such an object is created as follows: `BinaryTree\u003cGate\u003e obj \u003d new BinaryTree(new OrGate(1,1))`. This sets the root"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "of the Binary Tree to the object specified."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "#### Using `BinaryTree#isNullAtIndex(int)`"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "`BooleanTemplate` uses this function to render the current configuration of the circuit in a String format. The method"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "is also extensively used in other internal operations in `BinaryTree\u003cT\u003e` for checking whether a position in the tree has been set or not."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "#### Using `BinaryTree#getParentIndex(int, T)`"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "Similar to `isNullAtIndex(int)`, this method is used in rendering the current configuration of the circuit in String format."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "#### Using `BinaryTree#insert(int, T)`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "In order to enable the ability to populate the `ArrayList\u003cT\u003e` at any node which has a non-null parent node"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "the `ArrayList\u003cT\u003e arrayList` attribute is pre-populated with 15 `null` values. The same attribute is modified in the insert()"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "operation in the list. Since `insert(int, T)` makes use of `ArrayList\u003cT\u003e.set(int, T)`, values in `arrayList` can be overwritten with this function."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "The following sequence diagram is a depiction of the events succeeding a call to `insert(1, new AndGate(1,1))`. "
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "![InsertSequenceDiagram](diagrams/BinaryTreeInsertSequenceDiagram.png)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "Post calling this function, the second element in the `arrayList` will be the `AndGate(1,1)` object."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "#### Using `BinaryTree#isLeaf(int)`"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "This function is used by the Logic class `BooleanTemplate` to calculate output values in the digital circuit. It "
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "returns whether the node at the input index is a leaf node or not."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "The following sequence diagram is a depiction of the events succeeding a call to `isLeaf(1)`on the current `arrayList`:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "![IsLeafSequenceDiagram](diagrams/BinaryTreeIsLeafSequence.png)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "#### Using `BinaryTree#isEmpty`"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "This is used by `BooleanTemplate` to ensure no calculations are being performed on an empty tree."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "The following sequence diagram showcases the events succeeding a call to `isEmpty()` on the current object of the `BinaryTree\u003cGate\u003e` "
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "![IsEmptySequenceDiagram](diagrams/BinaryTreeIsEmptySequenceDiagram.png)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": " "
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "### Rendering Current Boolean Circuit State"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "Using a _standard I/O operation_ (Like _Sopln()_) on an object of the `BooleanTemplate` class yields the current configuration"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "of the system."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "Each node of the system is represented by a signal ranging from B to O (OUT being the root). All nodes with null parent nodes are"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "not shown in the diagram."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "## Product scope"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "### Target user profile"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "New Computer/Electrical Engineering (CEG/EE) students who are looking for a quick way to check calculations for simple circuit configurations can use this App as an aid."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "#### Value proposition"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "CLIrcuit Assistant solves three problems:"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "1. Lack of access to simple circuit computation - the App quickly computes the required circuit\u0027s values."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "1. Doing labs at home because of remote learning - the App provides a quick visualisation tool for the student."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "1. Online alternatives require internet access, and some sites are slow to load with many resources needed - the App is an offline desktop application with minimal resources."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "### User Stories"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "|Version| As a ... | I want to ... | So that I can ...|"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "|--------|----------|---------------|------------------|"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "|v1.0|new CEG/EE Student |solve electronic/logic circuits through an Interactive Tutorial|get used to using a command line whilst simultaneously learning about circuits and apply the concepts in modules such as CG1111|"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "|v1.0|new CEG/EE Student|create template circuits using common components such as Resistors, Capacitors, Inductors|visualise and calculate values for common circuit configurations |"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "|v1.0|new CEG/EE Student | change values assigned to the components| obtain different calculations quickly|"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "|v1.0|new CEG/EE Student|add components arranged in either series or parallel|obtain my configuration for analysis|"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "|v1.0|new CEG/EE Student |calculate/verify my calculations of effective resistance, total capacitance, etc.|quickly and accurately do so via CLI, and not 3rd party software that I have to install/load online|"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "|**v2.0** (latest)|CEG/EE Student|compute a boolean logical expression|familiarise myself with logical computation used in digital circuits|"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "### Non-Functional Requirements"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "1. Should work on any *mainstream OS* as long as it has Java 11 or above installed."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "2. The average user profile is assumed to be someone who possesses *at least a basic understanding of the fundamental concepts of digital circuits, its components, and boolean logic computation* (concepts covered in CG1111, CS1231 and EE2026)."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "3. A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "## Glossary"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "* *glossary item* - Definition"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "## Appendix: Instructions for manual testing"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "### Initial launch  "
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "1. Download the jar file and copy it into an empty folder"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "2. Open a new terminal window and navigate to the same directory where your ip.jar is located"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "3. Enter the command `java -jar duke.jar` into the terminal window to launch the application"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "4. Enter `help` to go into interactive tutorial mode or `summary` to generate a summary of all the commands"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "### Creating a digital circuit  "
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "1. Enter `template` followed by the template type, e.g.: `template rc`"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "There are four templates to choose from: `r`,`rc`,`rl`,`lc`. "
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "2. Enter `set` followed by the component type to set the component value, e.g.: `set r 500`"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "The four types of components are: `r`,`c`,`l`,`v`. Note that the value inputted can be an integer or float"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "3. Enter `add` followed by the configuration, component , and component value to add a component e.g.:`add parallel c 500`"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "### Creating a logic gate "
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "Similar to the creation of a digital circuit, we create a `template`, `set` values, and can `add` values."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "For the detailed steps, visit: https://ay2021s1-cs2113t-w13-3.github.io/tp/UserGuide.html#logic-gate-commands"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "### Calculating values"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "For calculation of values, the `calc` command is used."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "Detailed steps on calculation for "
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "* Digital circuits:  "
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "https://ay2021s1-cs2113t-w13-3.github.io/tp/UserGuide.html#calc-circ"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "* Logic Gates:  "
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "https://ay2021s1-cs2113t-w13-3.github.io/tp/UserGuide.html#calc-output "
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "### Exiting the program"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "Simply enter `bye` to exit the program and bid farewell to ol\u0027 Duke."
      }
    ],
    "authorContributionMap": {
      "dorianfong98": 49,
      "hughjazzman": 63,
      "sevenseasofbri": 75,
      "-": 24
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "# CLIrcuit Assistant"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "CLIrcuit Assistant is a desktop app to implement and solve simple circuits, optimized for use via the Command Line Interface (CLI)."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Useful links:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* [User Guide](UserGuide.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "* [Developer Guide](DeveloperGuide.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "* [About Us](AboutUs.md)"
      }
    ],
    "authorContributionMap": {
      "hughjazzman": 1,
      "sevenseasofbri": 1,
      "-": 6
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "## Table of Contents"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "1. [Introduction](#introduction)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "1. [Quick Start](#quick-start)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "1. [Features](#features)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    1. [General Commands](#general-commands)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        1. [Summary of Commands](#summary)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        1. [Interactive Tutorial](#help)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    1. [Action Commands](#action-commands)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        1. [Circuit Commands](#circuit-commands)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            1. [Create Circuit Template](#template-circ)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            1. [Set Component](#set-comp)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            1. [Add Component](#add-comp)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            1. [Calculate Value](#calc-circ)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        1. [Logic Gate Commands](#logic-gate-commands)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            1. [Create Boolean Template](#template-logic)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            1. [Set Input](#set-input)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            1. [Add Gate](#add-gate)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "            1. [Calculate Output](#calc-output)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "1. [FAQ](#faq)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "1. [Command Summary](#command-summary)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "CLIrcuit Assistant is a desktop app to implement and solve simple circuits, optimized for use via the Command Line Interface (CLI)."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "## Quick Start"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure that you have Java 11 or above installed."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "1. Down the latest version of `Duke` from [the releases](https://github.com/AY2021S1-CS2113T-W13-3/tp/releases) when it is ready."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "1. Use the command `help` to go through an interactive tutorial before using the application."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "This section details the various features and commands available."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "### General Commands"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "This section details the generic commands that can be used."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "#### Summary of Commands: `summary` \u003ca name\u003d\"summary\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "This command prints a summary of all commands in the application as shown in [Command Summary](#command-summary)."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "Format: `summary`"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "#### Start interactive tutorial: `help` \u003ca name\u003d\"help\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "Starts the interactive tutorial for the app. In the following order, the tutorial will guide the user on how to use the commands for the application, currently specific to [Circuit Commands](#circuit-commands):"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "1. `template` - Selecting templates"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "1. `set v` - Setting value for voltage"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "1. `set r/c/l` - Setting value for a `LoadComponent`"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "1. `add series/parallel r/c/l` - Adding a `LoadComponent` in series/parallel"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "1. `calc` - Printing a calculated value"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "1. `exit` - Exiting the interactive tutorial"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "#### Print: `print` \u003ca name\u003d\"print\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "Prints the current `template` that is set under the [Action Commands](#action-commands) below. Nothing is printed if a `template` is not yet set."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "Format: `print`"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "### Action Commands"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "Action commands used in the application can be split into two categories, the [*circuit* commands](#circuit-commands), or the [*logic gate* commands](#logic-gate-commands). The two categories may use the same syntax for some commands, but the application will continuously track the current `template` that is being worked on and automatically use the correct command to execute. Thus, if there is no current `template`, then the other commands used will not be available to run."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "The commands involved with both categories are:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "* `template`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "* `set`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "* `add`"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "* `calc`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "The format of commands below keep to the following."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "| :information_source: | Words in `UPPER_CASE` are parameters. |"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "|----------------------|:-------------------------------------|"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "#### Circuit Commands "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "This section details how the commands are used with a *circuit* `template`."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "##### Create *circuit* template: `template` \u003ca name\u003d\"template-circ\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "Creates a circuit template."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "Format: `template TEMPLATE`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "* The `TEMPLATE` can be chosen from the following 4 - `r`, `rc`, `rl`, `lc`"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    * `r` only consists of the resistor."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    * `rc` consists of the resistor and capacitor."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    * `rl` consists of the resistor and inductor."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    * `lc` consists of the inductor and capacitor."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "`template rc`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "```"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "+---R-----C---+"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "|             |"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "|             |"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "+----+V_ac+---+"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "Total Resistance: 0.0 Ω"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "Total Inductance: 0.0 µH"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "```"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "##### Set component value: `set` \u003ca name\u003d\u0027set-comp\u0027\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "Sets the value of the component. The component must be part of the current circuit template. Units correspond to the component involved - resistors in ohms, capacitors in microfarads, inductors in microhenries."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "Format: `set COMPONENT VALUE`"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "* The `COMPONENT` can be chosen from the 4 - `r`, `c`, `l`, `v`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    * `r` represents a resistor"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    * `c` represents a capacitor"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    * `l` represents an inductor"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    * `v` represents a voltage source"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "* The `VALUE` can be an integer of a float, of which the units depends on the component set."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "`set r 500`"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "Expected Outcome:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "```"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "The resistor was set to 500.0 Ω"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "\t+---R-----C---+"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "\t|             |"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "\t|             |"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "\t+----+V_ac+---+"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "Total Resistance: 500.0 Ω"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "Total Capacitance: 0.0 µF"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "```"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "##### Add component: `add` \u003ca name\u003d\"add-comp\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "Adds a component, in a specific configuration, to the current circuit template."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "Format: `add CONFIG COMPONENT VALUE`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "* The `CONFIG` can be chosen from the 2 - `series` and `parallel`."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "* The `COMPONENT` and `VALUE` are as explained above under [Set component value](#set-comp)."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "`add parallel c 500`"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "Expected Outcome:"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "```"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "Nice, added a 500.0 µF"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "\t+---R-----C---+"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "\t|             |"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "\t|             |"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "\t+----+V_ac+---+"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "Total Resistance: 500.0 Ω"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "Total Capacitance: 500.0 µF"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "```"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "##### Calculate effective value: `calc` \u003ca name\u003d\"calc-circ\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "Calculates the effective value based on the components and their configuration. If calculating `reff`, `ceff`, or `leff`, the component must be part of the current circuit template."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "Format: `calc EFF_VALUE`"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "* The `EFF_VALUE` can be chosen from the following 5 - `reff`, `ceff`, `leff`, `current`, `power`"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    * `reff` is the effective resistance"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    * `ceff` is the effective capacitance"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    * `leff` is the effective inductance"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    * `current` is the current flowing through the power supply"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    * `power` is the power supplied by the power supply"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "`calc ceff`"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "Expected Outcome:"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "```"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "The effective capacitance calculated is 500.0 µF"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "```"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "#### Logic Gate Commands"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "This section details how the commands are used with a *logic gate* `template`."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "##### Create *logic gate* template: `template` \u003ca name\u003d\u0027template-logic\u0027\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "Creates a logic gate `template`."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "Format: `template GATE`"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "* Logic Gate `GATE` can be chosen from the following:"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    * `and`, `or`, `xor`, `nand`, `nor`, `xnor`"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "`template and`"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "```"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "      OUT"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "       |"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "   B       C"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "OUT \u003d B AND C"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "B \u003d ?"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "C \u003d ?"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "```"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "The letters B and C correspond to `INPUT` which is used in the following section."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "##### Set input value: `set` \u003ca name\u003d\u0027set-input\u0027\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "Sets the value of an input."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "Format: `set INPUT VALUE`"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "* The `INPUT` can be chosen only from the current `template`, which can be printed out using `print`."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "* The `VALUE` can be any integer, but any non-zero integer will be treated as `true`, while 0 is treated as `false`."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "`set B 0`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "Expected Outcome:"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "```"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "      OUT"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "       |"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "   B       C"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "OUT \u003d B AND C"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "B \u003d 0"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "C \u003d ?"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "```"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "##### Add `Gate`: `add` \u003ca name\u003d\"add-gate\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "The application has the ability to combine multiple templates to generate more complicated boolean logic gate configurations. This command allows you to set an input to a *logic gate* `template`. However, the depth of the deepest *logic gate* from the root *logic gate* cannot exceed 3."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "| :exclamation: | The `BooleanTemplate` `Gate` depth cannot exceed 3. |"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "|---------------|:-------------------------------------|"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "Format: `add INPUT GATE`"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "* The `INPUT` is as explained above in [Set](#set-input)."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "* The `GATE` is as explained above in [Template](#template-logic)."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "`add C or`"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "Expected Outcome:"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "```"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "      OUT"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "       |"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "   B       C"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "         F   G"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "OUT \u003d B AND C"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "B \u003d 0"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "C \u003d F OR G"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "F \u003d ?"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "G \u003d ?"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "```"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "##### Calculate output: `calc` \u003ca name\u003d\"calc-output\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "Calculates the output of the configured logic gates. This command requires that all inputs are set."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "Format: `calc`"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "`calc`"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "Expected Outcome:"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "```"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "      OUT"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "       |"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "   B       C"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "         F   G"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "OUT \u003d B AND C"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "B \u003d 0"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "C \u003d F OR G"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "F \u003d 1"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "G \u003d 0"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "The output of the above configuration is 0."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "```"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "**Q**: How do I know the difference between the components?"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "**A**: Pay attention in EPP."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "## Command Summary"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "Action | Format, Examples"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "**Help** | `help`"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "**Summary** | `summary`"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "**Print Circuit/Logic Gate** | `print`"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "**Template Circuit/Logic Gate** | `template TEMPLATE/GATE` \u003cbr\u003e e.g., `template rc` \u003cbr\u003e e.g., `template and`"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "**Set Circuit/Logic Gate** | `set COMPONENT/INPUT VALUE` \u003cbr\u003e e.g., `set r 500` \u003cbr\u003e e.g., `set B 0`"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "**Add Circuit** | `add CONFIG COMPONENT VALUE`\u003cbr\u003e e.g., `add parallel c 500`"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "**Add Logic Gate** | `add INPUT GATE`\u003cbr\u003e e.g., `add C or`"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "**Calculate Circuit/Logic Gate** | `calc EFF_VALUE/[]` \u003cbr\u003e e.g., `calc ceff` \u003cbr\u003e e.g., `calc`"
      }
    ],
    "authorContributionMap": {
      "dorianfong98": 1,
      "hughjazzman": 261,
      "sevenseasofbri": 25,
      "-": 33
    }
  },
  {
    "path": "docs/team/wira.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "# Wira Azmoon - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "* **Team lead**: Responsible for overall project coordination."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "* **Documentation** (short for ‘in charge of documentation’): Responsible for the quality of various project documents."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "* **PlantUML expert**: Helps other team member with matters related to PlantUML."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "* **In charge of `Parser`,`Ui` of the code**: In charge of the code that deals with parsing and UI."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "### Summary of Contributions"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "Documentation."
      }
    ],
    "authorContributionMap": {
      "hughjazzman": 12
    }
  },
  {
    "path": "gradlew.bat",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Copyright 2015 the original author or authors."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Licensed under the Apache License, Version 2.0 (the \"License\");"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "@rem you may not use this file except in compliance with the License."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "@rem You may obtain a copy of the License at"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "@rem      https://www.apache.org/licenses/LICENSE-2.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Unless required by applicable law or agreed to in writing, software"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "@rem distributed under the License is distributed on an \"AS IS\" BASIS,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "@rem See the License for the specific language governing permissions and"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "@rem limitations under the License."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@rem  Gradle startup script for Windows"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Set local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "set DIRNAME\u003d%~dp0"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_BASE_NAME\u003d%~n0"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_HOME\u003d%DIRNAME%"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "for %%i in (\"%APP_HOME%\") do set APP_HOME\u003d%%~fi"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Find java.exe"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "if defined JAVA_HOME goto findJavaFromJavaHome"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003djava.exe"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ":findJavaFromJavaHome"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "if exist \"%JAVA_EXE%\" goto init"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ":init"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Get command-line arguments, handling Windows variants"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Slurp the command line arguments."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "set _SKIP\u003d2"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args_slurp"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "if \"x%~1\" \u003d\u003d \"x\" goto execute"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d%*"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ":execute"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Setup the command line"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Execute Gradle"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ":end"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "@rem End local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ":fail"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "rem the _cmd.exe /c_ return code!"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "exit /b 1"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ":mainEnd"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ":omega"
      }
    ],
    "authorContributionMap": {
      "-": 103,
      "PraveenElango": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/Duke.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.logic.parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import java.util.logging.LogManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    private static final Logger LOGGER \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    /** Instances of class objects for UI. **/"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private final Ui ui;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private final Parser parser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private Duke() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        parser \u003d new Parser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        setUpLogger();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        LOGGER.info(\"Execution is beginning.\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "                String line \u003d ui.readLine();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "                Command c \u003d parser.parse(line);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "                c.execute();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "                ui.printMessage(c.toString());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "                LOGGER.log(Level.WARNING, \"Bad command\", e);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "                ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        LOGGER.info(\"Execution has ended\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Main entry-point for the java.duke.Duke application."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        new Duke().run();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    private void setUpLogger() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        LogManager.getLogManager().reset();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        LOGGER.setLevel(Level.ALL);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        ConsoleHandler ch \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        ch.setLevel(Level.SEVERE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        LOGGER.addHandler(ch);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            FileHandler fh \u003d new FileHandler(\"appLog.log\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            fh.setLevel(Level.FINE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            LOGGER.addHandler(fh);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            LOGGER.log(Level.SEVERE, \"File logger not working\", e);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hughjazzman": 29,
      "sevenseasofbri": 27,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/duke/DukeException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private final String message;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public DukeException(String s) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        this.message \u003d s;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * Returns message in Exception as a String."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @return String message for the Exception."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hughjazzman": 20
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/commands/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    protected static final Logger LOGGER \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    /** Boolean whether the command is to exit. **/"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    protected boolean isExit;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * Executes appropriate methods based on the given command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public abstract void execute() throws DukeException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * Returns boolean isExit."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @return boolean isExit whether the command is to exit."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return isExit;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hughjazzman": 23,
      "sevenseasofbri": 3
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * Executes the exit command."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        isExit \u003d true;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        LOGGER.info(\"Changed flag to exit program.\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * String representation of the Command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @return String representation."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return \" Bye. See you next time!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hughjazzman": 20,
      "sevenseasofbri": 3
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/commands/SummaryCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "public class SummaryCommand extends Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private static final String COMMAND_SUMMARY \u003d \"\\n\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            + \"+-----------+----------------------------+--------------------+\\n\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            + \"|  Action   |           Format           |      Examples      |\\n\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            + \"+-----------+----------------------------+--------------------+\\n\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            + \"| Help      | help                       | help               |\\n\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            + \"| Template  | template TEMPLATE          | template rc        |\\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            + \"| Set       | set COMPONENT VALUE        | set r 500          |\\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            + \"| Add       | add CONFIG COMPONENT VALUE | add parallel c 500 |\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            + \"| Calculate | calc EFF_VALUE             | calc ceff          |\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            + \"+-----------+----------------------------+--------------------+\\n\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    public SummaryCommand() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * String representation of the Command."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @return String representation."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return COMMAND_SUMMARY;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hughjazzman": 20,
      "sevenseasofbri": 12
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/commands/circuit/AddCircuitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.logic.commands.circuit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.model.component.LoadComponent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.model.template.CircuitTemplate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "public class AddCircuitCommand extends SetCircuitCommand {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private final String config;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private LoadComponent loadComponent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public AddCircuitCommand(CircuitTemplate template, String config, String component, double value) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        super(template, component, value);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        this.config \u003d config;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * Executes appropriate methods based on the given command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public void execute() throws DukeException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        loadComponent \u003d template.getComponent(component);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        value \u003d getNewValue();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        super.execute();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private double getNewValue() throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        assert config.equals(\"series\") || config.equals(\"parallel\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        if (config.equals(\"series\")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            return loadComponent.addSeries(value);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            return loadComponent.addParallel(value);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * String representation of the Command."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @return String representation."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return \"Nice, added a \" + loadComponent + \u0027\\n\u0027 + template;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hughjazzman": 44,
      "sevenseasofbri": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/commands/circuit/CalculateCircuitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.logic.commands.circuit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.model.template.CircuitTemplate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "public class CalculateCircuitCommand extends CircuitCommand {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private final String calculationType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private String value;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public CalculateCircuitCommand(CircuitTemplate template, String calculationType) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        super(template);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        this.calculationType \u003d calculationType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * Executes calculate command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * @throws DukeException If execution error occurs."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public void execute() throws DukeException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        value \u003d getValue();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private String getValue() throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        switch (calculationType) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        case \"power\":"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            return template.getPower() + \"W\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        case \"current\":"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            return template.getCurrent() + \"A\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        case \"reff\":"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            return template.getComponent(\"r\").toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        case \"ceff\":"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            return template.getComponent(\"c\").toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        case \"leff\":"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            return template.getComponent(\"l\").toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            throw new DukeException(\"No such value\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * String representation of the Command."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @return String representation."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        switch (calculationType) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        case \"power\":"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            return \"The power dissipated in the circuit is \" + value;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        case \"current\":"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            return \"The total rms current flowing through the circuit is \" + value;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        case \"reff\":"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            return \"The effective resistance calculated is \" + value;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        case \"ceff\":"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            return \"The effective capacitance calculated is \" + value;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        case \"leff\":"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            return \"The effective inductance calculated is \" + value;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            return \"Unknown calculation type!\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hughjazzman": 35,
      "sevenseasofbri": 29
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/commands/circuit/CircuitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.logic.commands.circuit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.model.template.CircuitTemplate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "public abstract class CircuitCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    protected CircuitTemplate template;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    protected CircuitCommand(CircuitTemplate template) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        this.template \u003d template;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    protected CircuitCommand() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        this(null);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hughjazzman": 16
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/commands/circuit/HelpCircuitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.logic.commands.circuit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.logic.parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "public class HelpCircuitCommand extends CircuitCommand {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    private static final Parser PARSER \u003d new Parser();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    private static final String[] orderOfInstructions \u003d {\"template\", \"set v\", \"set\", \"set\", \"add\", \"calc\"};"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private int numOfCommandsDone \u003d 0;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private final Ui ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public HelpCircuitCommand() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        ui \u003d new Ui(); // Create its own Ui instance, can be a Ui subclass later on"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * Begins execution of the interactive tutorial."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        ui.printWelcomeTutorial();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        String command;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        boolean isNotDone \u003d true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        while (isNotDone) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            assert numOfCommandsDone \u003c Ui.INSTRUCTIONS.length;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            ui.printInstruction(numOfCommandsDone);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            command \u003d ui.readLine();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "                isNotDone \u003d continueTutorial(command, ui);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "                LOGGER.log(Level.FINE, \"Bad Command DukeException thrown.\", e);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "                ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        LOGGER.info(\"Exiting help mode\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    private boolean continueTutorial(String command, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        if (command.equals(\"exit\")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        if (numOfCommandsDone \u003e\u003d 6 || !command.matches(orderOfInstructions[numOfCommandsDone] + \"(.*)\")) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            throw new DukeException(\"Bad Command! Please follow the instructions carefully.\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "                    + \"If you want to exit this mode, type \u0027exit\u0027 and press enter.\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        CircuitCommand c \u003d (CircuitCommand) PARSER.parse(command);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        c.execute();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        ui.printMessage(c.toString());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        numOfCommandsDone++;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * String representation of the Command."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @return String representation."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return \":) Have fun using CLIrcuit Assistant!\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hughjazzman": 22,
      "sevenseasofbri": 47
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/commands/circuit/SetCircuitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.logic.commands.circuit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.model.component.Capacitor;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.model.component.Component;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.model.component.Inductor;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.model.component.Resistor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.model.component.VoltageSource;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.model.template.CircuitTemplate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "public class SetCircuitCommand extends CircuitCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    protected final String component;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    protected double value;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    protected Component componentObject;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public SetCircuitCommand(CircuitTemplate template, String component, double value) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        super(template);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        this.component \u003d component;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * Executes set command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @throws DukeException If execution error occurs."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public void execute() throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        if (component.equals(\"v\")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            template.setInitialPowerSupply(value);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            componentObject \u003d template.getInitialPowerSupply();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        componentObject \u003d template.getComponent(component);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        componentObject.setValue(value);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * String representation of the Command."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @return String representation."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        if (componentObject instanceof VoltageSource) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            return \"The voltage source was changed to: \" + componentObject;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        String componentName \u003d \"\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        if (componentObject instanceof Resistor) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            componentName \u003d \"resistor\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        } else if (componentObject instanceof Capacitor) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            componentName \u003d \"capacitor\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        } else if (componentObject instanceof Inductor) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            componentName \u003d \"inductor\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return \"The \" + componentName + \" was set to \" + componentObject + \u0027\\n\u0027 + template;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hughjazzman": 57,
      "sevenseasofbri": 5
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/commands/circuit/TemplateCircuitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.logic.commands.circuit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.model.template.CircuitTemplate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "public class TemplateCircuitCommand extends CircuitCommand {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public TemplateCircuitCommand(CircuitTemplate template) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        super(template);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        LOGGER.info(\"Template was chosen\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return template.toString();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hughjazzman": 18,
      "sevenseasofbri": 2
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/commands/gates/AddBooleanCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.logic.commands.gates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.model.gates.Gate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.model.template.BooleanTemplate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "public class AddBooleanCommand extends BooleanCommand {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private final Gate gate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private final int index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public AddBooleanCommand(BooleanTemplate template, Gate gate, int index) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        super(template);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        this.gate \u003d gate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public void execute() throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        template.addGate(gate, index);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hughjazzman": 21
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/commands/gates/BooleanCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.logic.commands.gates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.model.template.BooleanTemplate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "public abstract class BooleanCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    protected final BooleanTemplate template;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    protected BooleanCommand(BooleanTemplate template) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        this.template \u003d template;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    protected BooleanCommand() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        this(null);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return template.toString();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hughjazzman": 21
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/commands/gates/CalculateBooleanCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.logic.commands.gates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "public class CalculateBooleanCommand extends BooleanCommand {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public void execute() throws DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hughjazzman": 10
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/commands/gates/SetBooleanCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.logic.commands.gates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "public class SetBooleanCommand extends BooleanCommand {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public void execute() throws DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hughjazzman": 10
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/commands/gates/TemplateBooleanCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.logic.commands.gates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "public class TemplateBooleanCommand extends BooleanCommand {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public void execute() throws DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hughjazzman": 10
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/parser/BooleanParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.logic.commands.gates.BooleanCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.logic.commands.gates.TemplateBooleanCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.model.gates.AndGate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.model.gates.NandGate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.model.gates.NorGate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.model.gates.OrGate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.model.gates.XnorGate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.model.gates.XorGate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.model.template.BooleanTemplate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "public class BooleanParser {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private static BooleanTemplate booleanTemplate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * Returns a Command object based on the input line."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @param args Array of arguments."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @param command Command as String."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @return Command object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @throws DukeException If given line is blank."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public BooleanCommand parse(String[] args, String command) throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        case \"help\":"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        case \"set\":"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        case \"add\":"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        case \"calc\":"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            throw new DukeException(\"Invalid Command!\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public TemplateBooleanCommand prepareBooleanTemplate(String[] args) throws DukeException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        booleanTemplate \u003d getBooleanTemplate(args[1]);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return new TemplateBooleanCommand();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private BooleanTemplate getBooleanTemplate(String arg) throws DukeException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        switch (arg.toLowerCase()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        case \"and\":"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            return new BooleanTemplate(new AndGate());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        case \"or\":"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            return new BooleanTemplate(new OrGate());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        case \"xor\":"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            return new BooleanTemplate(new XorGate());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        case \"nand\":"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            return new BooleanTemplate(new NandGate());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        case \"nor\":"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            return new BooleanTemplate(new NorGate());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        case \"xnor\":"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            return new BooleanTemplate(new XnorGate());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            throw new DukeException(\"Invalid Template!\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hughjazzman": 59
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/parser/CircuitParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.logic.commands.circuit.AddCircuitCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.logic.commands.circuit.CalculateCircuitCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.logic.commands.circuit.CircuitCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.logic.commands.circuit.HelpCircuitCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.logic.commands.circuit.SetCircuitCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.logic.commands.circuit.TemplateCircuitCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.model.template.CircuitTemplate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.model.template.LcTemplate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.model.template.LrTemplate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.model.template.RTemplate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.model.template.RcTemplate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "public class CircuitParser {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private static CircuitTemplate circuitTemplate \u003d null;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * Returns a Command object based on the input line."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @param args Array of arguments."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @param command Command as String."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @return Command object."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @throws DukeException If given line is blank."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public CircuitCommand parse(String[] args, String command) throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        case \"help\":"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            return new HelpCircuitCommand();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        case \"set\":"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            return prepareCircuitSet(args);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        case \"add\":"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            return prepareCircuitAdd(args);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        case \"calc\":"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            return prepareCircuitCalc(args);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            throw new DukeException(\"Invalid Command!\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public TemplateCircuitCommand prepareCircuitTemplate(String[] args) throws DukeException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        circuitTemplate \u003d getCircuitTemplate(args[1]);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return new TemplateCircuitCommand(circuitTemplate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private boolean isComponent(String arg) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return arg.equals(\"r\") || arg.equals(\"c\") || arg.equals(\"l\") || arg.equals(\"v\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author hughjazzman-reused"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    //Reused from https://stackoverflow.com/a/1102916 with minor modifications"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean isNumeric(String str) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return Double.parseDouble(str) \u003e 0;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private boolean hasNoTemplate() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return circuitTemplate \u003d\u003d null;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private CircuitTemplate getCircuitTemplate(String arg) throws DukeException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        switch (arg) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        case \"rl\":"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            return new LrTemplate();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        case \"rc\":"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            return new RcTemplate();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        case \"r\":"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            return new RTemplate();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        case \"lc\":"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            return new LcTemplate();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            throw new DukeException(\"Invalid Template!\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private CircuitCommand prepareCircuitSet(String[] args) throws DukeException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        if (hasMinArguments(args, 3)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            throw new DukeException(\"Not enough arguments!\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        if (hasNoTemplate()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            throw new DukeException(\"No template set yet!\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        if (!(isComponent(args[1]) \u0026\u0026 isNumeric(args[2]))) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            throw new DukeException(\"Invalid argument\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        double value \u003d Double.parseDouble(args[2]);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        assert value \u003e 0;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return new SetCircuitCommand(circuitTemplate, args[1], value);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private boolean hasMinArguments(String[] args, int i) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return args.length \u003c i;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private CircuitCommand prepareCircuitAdd(String[] args) throws DukeException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        if (hasMinArguments(args, 4)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            throw new DukeException(\"Not enough arguments!\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        if (hasNoTemplate()) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            throw new DukeException(\"No template set yet!\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        boolean isConfig \u003d args[1].equals(\"parallel\") || args[1].equals(\"series\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        boolean isValid \u003d isConfig \u0026\u0026 isComponent(args[2]) \u0026\u0026 isNumeric(args[3]);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        if (!isValid) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            throw new DukeException(\"Invalid argument\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        double value \u003d Double.parseDouble(args[3]);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        assert value \u003e 0;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return new AddCircuitCommand(circuitTemplate, args[1], args[2], value);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private CircuitCommand prepareCircuitCalc(String[] args) throws DukeException {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        if (hasMinArguments(args, 2)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            throw new DukeException(\"Not enough arguments!\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        if (hasNoTemplate()) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            throw new DukeException(\"No template set yet!\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        boolean isCalc \u003d args[1].equals(\"reff\") || args[1].equals(\"ceff\") || args[1].equals(\"leff\")"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "                || args[1].equals(\"current\") || args[1].equals(\"power\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        if (!isCalc) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            throw new DukeException(\"Invalid argument\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return new CalculateCircuitCommand(circuitTemplate, args[1]);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hughjazzman": 130,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.logic.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.logic.commands.SummaryCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    private static final Logger LOGGER \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private static boolean isCircuit \u003d true;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private static final CircuitParser circuitParser \u003d new CircuitParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private static final BooleanParser booleanParser \u003d new BooleanParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public Command parse(String line) throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        // Prevent blank tasks"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        if (line.isBlank()) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            LOGGER.log(Level.WARNING, \"Blank line entered.\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            throw new DukeException(\"Invalid command!\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        // split by whitespace"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        String[] args \u003d line.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        String command \u003d args[0].toLowerCase();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        case \"summary\":"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            return new SummaryCommand();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        case \"template\":"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            return prepareTemplate(args);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        if (isCircuit) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            return circuitParser.parse(args, command);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            return booleanParser.parse(args, command);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private Command prepareTemplate(String[] args) throws DukeException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        if (args.length \u003c 2) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            throw new DukeException(\"Not enough arguments!\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        boolean isCircuitTemplate \u003d args[1].equals(\"r\") || args[1].equals(\"rc\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "                || args[1].equals(\"rl\") || args[1].equals(\"lc\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        boolean isBooleanTemplate \u003d args[1].equals(\"and\") || args[1].equals(\"or\") || args[1].equals(\"xor\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "                || args[1].equals(\"nand\") || args[1].equals(\"nor\") || args[1].equals(\"xnor\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        if (isCircuitTemplate) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            isCircuit \u003d true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            return circuitParser.prepareCircuitTemplate(args);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        } else if (isBooleanTemplate) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            isCircuit \u003d false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            return booleanParser.prepareBooleanTemplate(args);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        throw new DukeException(\"Invalid argument\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hughjazzman": 63,
      "sevenseasofbri": 7
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/binarytree/BinaryTree.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "package seedu.duke.model.binarytree;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "public class BinaryTree\u003cT\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    public final ArrayList\u003cT\u003e arrayList \u003d new ArrayList\u003c\u003e(Collections.nCopies(15, null));"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public BinaryTree(T root) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        arrayList.set(0, root);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    public BinaryTree() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        this(null);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * Checks if the tree is empty."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * @return boolean value, true if the tree is empty, otherwise false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        return isNullAtIndex(0);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * Returns the root of the tree."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * @return T type value, root of the tree."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return arrayList.get(0);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * Inserts T type value at specified position in the tree."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * @param idx int type specifies position to insert element."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * @param t T type value to be inserted."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * @throws DukeException If the index specified is invalid."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    public void insert(int idx, T t) throws DukeException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        if (idx \u003c 0 || idx \u003e\u003d arrayList.size() || isNullAtIndex(getParentIndex(idx))) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            throw new DukeException(\"Index specified is out of bounds!\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        arrayList.set(idx, t);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    public int getParentIndex(int idx) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        if (idx % 2 \u003d\u003d 0) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            return idx / 2 - 1;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            return idx / 2;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private int getLeftIndex(int idx) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return 2 * idx + 1;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private int getRightIndex(int idx) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return 2 * idx + 2;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private int getHeight(int idx) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return (int) (Math.log(idx + 1) / Math.log(2));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    public boolean isNullAtIndex(int idx) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        boolean isNull;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            isNull \u003d arrayList.get(idx) \u003d\u003d null;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            isNull \u003d true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        return isNull;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * Returns whether node at specified index is a leaf node or not."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * @param index int type specifying index of node."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * @return boolean value, true if node is a leaf, else false."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    public boolean isLeaf(int index) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        boolean hasNoChildren \u003d isNullAtIndex(getLeftIndex(index)) \u0026\u0026 isNullAtIndex(getRightIndex(index));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        return !isNullAtIndex(index) \u0026\u0026 hasNoChildren;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hughjazzman": 38,
      "sevenseasofbri": 54
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/component/Capacitor.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.model.component;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "public class Capacitor extends LoadComponent {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    private static final String SI_UNIT \u003d \"µF\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    public Capacitor(double value) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        super(value);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        siUnit \u003d SI_UNIT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        isDirectSeries \u003d false;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oasisbeatle": 7,
      "hughjazzman": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/component/Component.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.model.component;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "public abstract class Component {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    protected double value;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    protected String siUnit;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public Component(double value) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "     * Returns the value of the Component."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "     * @return Value of Component."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    public double getValue() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        assert value \u003e 0 : \"Value has been incorrectly read.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "     * Sets the value of the Component."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "     * @param value Value of Component."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    public void setValue(double value) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        if (value \u003c 0) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "            throw new ArithmeticException(\"You tried to enter a negative value!\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        } else if (value \u003d\u003d 0) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "            throw new ArithmeticException(\"You tried to enter a zero value!\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * Returns the value and unit of Component object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @return String representation of Component value"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return (value) + \" \" + siUnit;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oasisbeatle": 26,
      "hughjazzman": 19
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/component/Inductor.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.model.component;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "public class Inductor extends LoadComponent {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    private static final String SI_UNIT \u003d \"µH\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    public Inductor(double value) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        super(value);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        siUnit \u003d SI_UNIT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        isDirectSeries \u003d true;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hughjazzman": 4,
      "sevenseasofbri": 7
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/component/LoadComponent.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.model.component;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "public abstract class LoadComponent extends Component {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    protected boolean isDirectSeries;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public LoadComponent(double value) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        super(value);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    private double addDirect(double otherValue) throws DukeException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        assert value \u003e 0 : \"Value has been incorrectly read.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        if (otherValue \u003c\u003d 0) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "            throw new DukeException(\"Invalid value (\u003c\u003d0)\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return value + otherValue;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private double addReciprocal(double otherValue) throws DukeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        assert value \u003e 0 : \"Value has been incorrectly read.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        if (otherValue \u003c\u003d 0) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            throw new DukeException(\"Invalid value (\u003c\u003d0)\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return 1 / ((1 / value) + (1 / otherValue));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * Returns the effective Component value when added in series."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @param otherValue Component value."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @return Effective value."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @throws DukeException If value or otherValue is non-positive."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public double addSeries(double otherValue) throws DukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        if (isDirectSeries) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            return addDirect(otherValue);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            return addReciprocal(otherValue);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * Returns the effective Component value when added in parallel."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @param otherValue Component value."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @return Effective value."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @throws DukeException If value or otherValue is non-positive."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public double addParallel(double otherValue) throws DukeException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        if (!isDirectSeries) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            return addDirect(otherValue);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            return addReciprocal(otherValue);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oasisbeatle": 7,
      "hughjazzman": 50
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/component/Resistor.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.model.component;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "public class Resistor extends LoadComponent {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    private static final String SI_UNIT \u003d \"Ω\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    public Resistor(double value) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        super(value);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        siUnit \u003d SI_UNIT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        isDirectSeries \u003d true;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hughjazzman": 4,
      "PraveenElango": 7
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/component/VoltageSource.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.model.component;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "public class VoltageSource extends Component {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "    private static final String SI_UNIT \u003d \"V\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "    public VoltageSource(double value) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "        super(value);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        siUnit \u003d SI_UNIT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorianfong98": 8,
      "hughjazzman": 2
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/gates/AndGate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.model.gates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "public class AndGate extends TwoInputGate {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    private static final String AND \u003d \"--(\u0026|--\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * Performs bitwise AND (\u0026) operation on the input instance variables."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * @return int value of the gate output."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    public int getOutput() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        return input \u0026 secondInput;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * Returns String representation of the AND gate."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * @return String type depiction of AND gate."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        return AND;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hughjazzman": 1,
      "sevenseasofbri": 24
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/gates/Gate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.model.gates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "public abstract class Gate {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    protected int output;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    protected int input;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    public abstract int getOutput();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    public void setInput(int input) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hughjazzman": 1,
      "sevenseasofbri": 12
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/gates/NandGate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.model.gates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "public class NandGate extends AndGate {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    private static final String NAND \u003d \"--(~\u0026|--\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "     * Performs bitwise NAND (~\u0026) operation on the input instance variables."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "     * @return int value of the gate output."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    public int getOutput() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return ~(super.getOutput());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "     * Returns String representation of the NAND gate."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "     * @return String type depiction of NAND gate."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        return NAND;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oasisbeatle": 22,
      "hughjazzman": 3
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/gates/NorGate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.model.gates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "public class NorGate extends OrGate {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    private static final String NOR \u003d \"--(~|)--\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "     * Performs bitwise NOR (~|) operation on the input instance variables."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "     * @return int value of the gate output."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    public int getOutput() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return ~(super.getOutput());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "     * Returns String representation of the NOR gate."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "     * @return String type depiction of NOR gate."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        return NOR;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "oasisbeatle": 23,
      "hughjazzman": 3
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/gates/NotGate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.model.gates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "public class NotGate extends Gate {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    private static final String NOT \u003d \"--(~)--\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    public NotGate(int input1) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        input \u003d input1;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "     * Performs bitwise NOT (~) operation on the input instance variable."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "     * @return int value of the gate output."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    public int getOutput() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        return ~input;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "     * Returns String representation of the NOT gate."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "     * @return String type depiction of NOT gate."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        return NOT;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hughjazzman": 1,
      "PraveenElango": 28
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/gates/OrGate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.model.gates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "public class OrGate extends TwoInputGate {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    private static final String OR \u003d \"--(|)--\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "     * Performs bitwise OR (|) operation on the input instance variables."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "     * @return int value of the gate output."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    public int getOutput() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        return input | secondInput;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "     * Returns String representation of the OR gate."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "     * @return String type depiction of OR gate."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        return OR;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hughjazzman": 1,
      "PraveenElango": 24
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/gates/TwoInputGate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.model.gates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "public abstract class TwoInputGate extends Gate {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    protected int secondInput;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public TwoInputGate(int input, int secondInput) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        this.secondInput \u003d secondInput;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public TwoInputGate() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        this(-1, -1);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * Sets second input to the gate."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * @param input int type value that can be either 0 or 1."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    public void setSecondInput(int input) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        secondInput \u003d input;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hughjazzman": 10,
      "sevenseasofbri": 13
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/gates/XnorGate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.model.gates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "public class XnorGate extends XorGate {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    private static final String XNOR \u003d \"--(~^)--\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "     * Performs bitwise XNOR (~^) operation on the input instance variables."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "     * @return int value of the gate output."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    public int getOutput() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return ~(super.getOutput());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "     * Returns String representation of the XNOR gate."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "     * @return String type depiction of XNOR gate."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        return XNOR;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oasisbeatle": 22,
      "hughjazzman": 3
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/gates/XorGate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.model.gates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "public class XorGate extends TwoInputGate {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    private static final String XOR \u003d \"--(^)--\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "     * Performs bitwise XOR (^) operation on the input instance variables."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "     * @return int value of the gate output."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    public int getOutput() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        return input ^ secondInput;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "     * Returns String representation of the XOR gate."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "     * @return String type depiction of XOR gate."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        return XOR;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hughjazzman": 1,
      "PraveenElango": 24
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/template/BooleanTemplate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.model.template;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import seedu.duke.model.binarytree.BinaryTree;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import seedu.duke.model.gates.Gate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "public class BooleanTemplate {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    private static String FULL_TREE \u003d \"          0UT \\n\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            + \"           |     \\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            + \"     B           C\\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            + \"                     \\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            + \"  D     E     F     G\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            + \"                      \\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            + \"H   I J   K L   M N   O\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    private BinaryTree\u003cGate\u003e circuit;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    private String currentConfig \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    public BooleanTemplate(Gate gate) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        circuit \u003d new BinaryTree\u003c\u003e(gate);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    public void addGate(Gate gate, int index) throws DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        circuit.insert(index, gate);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    private void buildTopDown() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        currentConfig \u003d FULL_TREE;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        for (int i \u003d 0; i \u003c circuit.arrayList.size(); i++) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            if (i !\u003d 0 \u0026\u0026 circuit.isNullAtIndex(circuit.getParentIndex(i))) { // i \u003d\u003d 0"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "                currentConfig \u003d currentConfig.replace((char)(65 + i), \u0027 \u0027);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        buildTopDown();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        return currentConfig;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hughjazzman": 4,
      "sevenseasofbri": 37
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/template/CircuitTemplate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.model.template;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.model.component.LoadComponent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.model.component.VoltageSource;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "public abstract class CircuitTemplate {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    protected VoltageSource initialPowerSupply;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    protected static final double ANGULAR_FREQUENCY \u003d 100 * Math.PI;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public CircuitTemplate(double powerSupply) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        initialPowerSupply \u003d new VoltageSource(powerSupply);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * Returns the initialPowerSupply as specified at the instantiation of Template."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * @return initialPowerSupply, an instance of VoltageSource."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    public VoltageSource getInitialPowerSupply() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        return initialPowerSupply;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * Sets value of the voltage source."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * @param value double value to be set to the component."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    public void setInitialPowerSupply(double value) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        initialPowerSupply.setValue(value);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    protected abstract double calcImpedance() throws DukeException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public abstract void setComponent(String s, double value);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * Returns the current of the circuit."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @return double of the current value."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public double getCurrent() throws DukeException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return initialPowerSupply.getValue() / calcImpedance();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * Returns the power of the circuit."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @return double of the power value."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public double getPower() throws DukeException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        double voltage \u003d initialPowerSupply.getValue();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return voltage * voltage / calcImpedance();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public abstract LoadComponent getComponent(String component) throws DukeException;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hughjazzman": 31,
      "sevenseasofbri": 25,
      "PraveenElango": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/template/LcTemplate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.model.template;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.model.component.Capacitor;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.model.component.Inductor;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.model.component.LoadComponent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "public class LcTemplate extends CircuitTemplate {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    private static final String LC_TEMPLATE \u003d \"\\t+---L-----C---+\\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "                                                + \"\\t|             |\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "                                                + \"\\t|             |\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "                                                + \"\\t+----+V_ac+---+\\n\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    private final Inductor inductor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    private final Capacitor capacitor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    public LcTemplate(double capacitance, double inductance, double powerSupply) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        super(powerSupply);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        inductor \u003d new Inductor(inductance);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        capacitor \u003d new Capacitor(capacitance);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public LcTemplate() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        this(0,0,0);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * Returns the impedance of LC circuit."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @return Impedance of LC circuit"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @throws DukeException If component values are not yet set."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public double calcImpedance() throws DukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        double inductance \u003d inductor.getValue() * Math.pow(10, -6);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        double capacitance \u003d capacitor.getValue() * Math.pow(10, -6);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        if (inductance \u003d\u003d 0 || capacitance \u003d\u003d 0) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            throw new DukeException(\"Component(s) not set yet.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        return ANGULAR_FREQUENCY * Math.abs(inductance - (1 / capacitance));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "     * Returns inductor object, an attribute of the instance of LcTemplate."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "     * @return inductor, an instance of the Inductor class."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    public Inductor getInductor() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        return inductor;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "     * Returns capacitor object, an attribute of the instance of LcTemplate."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "     * @return capacitor, an instance of the Capacitor class."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    public Capacitor getCapacitor() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        return capacitor;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * Sets the value of the inductor in the Lc Template circuit to the value specified."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * @param value double type value to be set to the inductor in the circuit."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    protected void setInductor(double value) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        inductor.setValue(value);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * Sets the value of the capacitor in the Lc Template circuit to the value specified."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * @param value double type value to be set to the capacitor in the circuit."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    protected void setCapacitor(double value) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        capacitor.setValue(value);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "     * Sets the value of the inductor in the Lc Template circuit to the value specified."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "     * @param s String corresponding to component type."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "     * @param value double type value to be set to the resistor in the circuit."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public void setComponent(String s, double value) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        assert s.equals(\"l\") || s.equals(\"c\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        if (s.equals(\"l\")) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            setInductor(value);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            setCapacitor(value);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "     * Returns String consisting of total inductance and capacitance values of the LcTemplate object."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "     * @return String representation of LcTemplate object."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        return LC_TEMPLATE + \"Total Capacitance: \" + capacitor + System.lineSeparator()"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "                + \"Total Inductance: \" + inductor + System.lineSeparator();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * Returns LoadComponent object depending on input String."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @param component String representing the component."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @return LoadComponent object."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @throws DukeException If input String does not match a component."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    public LoadComponent getComponent(String component) throws DukeException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        if (component.equals(\"l\")) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            return getInductor();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        } else if (component.equals(\"c\")) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "            return getCapacitor();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "            throw new DukeException(\"Invalid component\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "}"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "oasisbeatle": 46,
      "hughjazzman": 46,
      "sevenseasofbri": 20,
      "PraveenElango": 15
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/template/LrTemplate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.model.template;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.model.component.Inductor;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.model.component.LoadComponent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "public class LrTemplate extends RTemplate {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    private static final String RL_TEMPLATE \u003d \"\\t+---R-----L---+\\n\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "                                            + \"\\t|             |\\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "                                            + \"\\t|             |\\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "                                            + \"\\t+----+V_ac+---+\\n\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    private final Inductor inductor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    public LrTemplate(double resistance, double inductance, double powerSupply) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "        super(resistance, powerSupply);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        inductor \u003d new Inductor(inductance);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public LrTemplate() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        this(0,0,0);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * Returns calculated impedance of the LrTemplate circuit."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @return double type calculated Impedance."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @throws DukeException If component values are not yet set."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public double calcImpedance() throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        double resistance \u003d super.calcImpedance();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        double inductance \u003d inductor.getValue() * Math.pow(10, -6);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        if (inductance \u003d\u003d 0) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            throw new DukeException(\"Component(s) not set yet.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return Math.sqrt(Math.pow(resistance, 2)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "                + Math.pow(inductance * ANGULAR_FREQUENCY, 2));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * Returns inductor object, an attribute of the instance of LrTemplate."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @return inductor, an instance of the Inductor class."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    public Inductor getInductor() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return inductor;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * Sets the value of the inductor in the Lr Template circuit to the value specified."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * @param value double type value to be set to the inductor in the circuit."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    protected void setInductor(double value) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        inductor.setValue(value);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * Sets the value of the inductor in the Lr Template circuit to the value specified."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @param s String corresponding to component type."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @param value double type value to be set to the resistor in the circuit."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public void setComponent(String s, double value) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        assert s.equals(\"l\") || s.equals(\"r\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        if (s.equals(\"l\")) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            setInductor(value);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            super.setComponent(s, value);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * Returns String consisting of total inductance and resistance values of the LrTemplate object."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * @return String representation of LrTemplate object."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        return RL_TEMPLATE + \"Total Resistance: \" + getResistor() + System.lineSeparator()"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "                           + \"Total Inductance: \" + inductor + System.lineSeparator();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * Returns LoadComponent object depending on input String."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @param component String representing the component."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @return LoadComponent object."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @throws DukeException If input String does not match a component."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public LoadComponent getComponent(String component) throws DukeException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        if (component.equals(\"l\")) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            return getInductor();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return super.getComponent(component);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorianfong98": 3,
      "hughjazzman": 52,
      "sevenseasofbri": 42,
      "PraveenElango": 3
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/template/RTemplate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.model.template;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.model.component.LoadComponent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.model.component.Resistor;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "public class RTemplate extends CircuitTemplate {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "    private static final String R_TEMPLATE \u003d"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "              \"\\t+---R---------+\\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "            + \"\\t|             |\\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "            + \"\\t|             |\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "            + \"\\t+----+V_ac+---+\\n\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    protected Resistor resistor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "    public RTemplate(double resistance, double powerSupply) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "        super(powerSupply);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "        resistor \u003d new Resistor(resistance);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public RTemplate() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        this(0,0);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * Returns impedance of Resistor."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @return impedance of Resistor."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @throws DukeException If component values are not yet set."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public double calcImpedance() throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        if (resistor.getValue() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            throw new DukeException(\"Component(s) not set yet.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return resistor.getValue();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "     * Returns resistor object, an attribute of the instance of LrTemplate."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "     * @return resistor, an instance of the Resistor class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    public Resistor getResistor() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "        return resistor;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * Sets the value of the resistor in the circuit to the value specified."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * @param value double type value to be set to the resistor in the circuit."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    protected void setResistor(double value) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        resistor.setValue(value);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * Sets the value of the resistor in the circuit to the value specified."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @param s String corresponding to component type."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @param value double type value to be set to the resistor in the circuit."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public void setComponent(String s, double value) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        setResistor(value);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "     * Returns String consisting of total inductance and resistance values of the LrTemplate object."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "     * @return String representation of LrTemplate object."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "        return R_TEMPLATE + \"Total Resistance: \" + resistor + System.lineSeparator();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * Returns LoadComponent object depending on input String."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @param component String representing the component."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @return LoadComponent object."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @throws DukeException If input String does not match a component."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public LoadComponent getComponent(String component) throws DukeException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        if (!component.equals(\"r\")) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            throw new DukeException(\"Invalid component\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return getResistor();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "dorianfong98": 37,
      "hughjazzman": 47,
      "sevenseasofbri": 9
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/template/RcTemplate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.model.template;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.model.component.Capacitor;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.model.component.LoadComponent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "public class RcTemplate extends RTemplate {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    private static final String RC_TEMPLATE \u003d \"\\t+---R-----C---+\\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "                                            + \"\\t|             |\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "                                            + \"\\t|             |\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "                                            + \"\\t+----+V_ac+---+\\n\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    private final Capacitor capacitor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    public RcTemplate(double resistance, double capacitance, double powerSupply) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        super(resistance, powerSupply);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        capacitor \u003d new Capacitor(capacitance);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public RcTemplate() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        this(0,0,0);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * Returns impedance value of circuit."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @return impedance, a double representation of the impedance value of circuit."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @throws DukeException If component values are not yet set."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public double calcImpedance() throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        double resistance \u003d super.calcImpedance();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        double capacitance \u003d capacitor.getValue() * Math.pow(10, -6);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        if (capacitance \u003d\u003d 0) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            throw new DukeException(\"Component(s) not set yet.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return Math.sqrt(Math.pow(resistance, 2)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "                + (1 / Math.pow((ANGULAR_FREQUENCY * capacitance), 2)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "     * Returns capacitor object, an attribute of the instance of RcTemplate."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "     * @return capacitor, an instance of the Capacitor class."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    public Capacitor getCapacitor() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        return capacitor;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "     * Sets the value of the capacitor in the Rc Template circuit to the value specified."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @param value double type value to be set to the capacitor in the circuit."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    protected void setCapacitor(double value) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        capacitor.setValue(value);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * Sets the value of the component specified to the value specified in the Rc Template."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @param s String corresponding to component type."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * @param value double type value to be set to the component in the circuit."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public void setComponent(String s, double value) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        assert s.equals(\"c\") || s.equals(\"r\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        if (s.equals(\"c\")) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            setCapacitor(value);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            super.setComponent(s, value);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "     * Returns String consisting of total capacitance and resistance values of the RcTemplate object."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "     * @return String representation of RcTemplate object."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        return RC_TEMPLATE + \"Total Resistance: \" + resistor + System.lineSeparator()"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "                + \"Total Capacitance: \" + capacitor + System.lineSeparator();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * Returns LoadComponent object depending on input String."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @param component String representing the component."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @return LoadComponent object."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @throws DukeException If input String does not match a component."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public LoadComponent getComponent(String component) throws DukeException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        if (component.equals(\"c\")) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            return getCapacitor();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return super.getComponent(component);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hughjazzman": 49,
      "sevenseasofbri": 4,
      "PraveenElango": 50
    }
  },
  {
    "path": "src/main/java/seedu/duke/ui/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    //Running into issues with runtest.bat with the following LOGO. Using regular text for now."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    private static final String LOGO \u003d \" _____ _      _____                _ _                      _  \""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            + \"   _              _   \\n\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            + \"/ ____| |    |_   _|              (_) |       /\\\\           (_)   | |            | |\\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            + \"| |    | |      | |  _ __ ___ _   _ _| |_     /  \\\\   ___ ___ _ ___| |_ __ _ _ __ | |_\\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            + \"| |    | |      | | | \u0027__/ __| | | | | __|   / /\\\\ \\\\ / __/ __| / __| __/ _` | \u0027_ \\\\| __|\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            + \"| |____| |____ _| |_| | | (__| |_| | | |_   / ____ \\\\\\\\__ \\\\__ \\\\ \\\\__ \\\\ || (_| | | | | |_\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            + \"\\\\_____|______|_____|_|  \\\\___|\\\\__,_|_|\\\\__| /_/    \\\\_\\\\___/___/_|___/\\\\__\\\\__,_|_| |_|\\\\__|\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    private static final String TUTORIAL \u003d \"  _______    _             _       _   __  __           _      _ \\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            + \" |__   __|  | |           (_)     | | |  \\\\/  |         | |    | |\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            + \"    | |_   _| |_ ___  _ __ _  __ _| | | \\\\  / | ___   __| | ___| |\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            + \"    | | | | | __/ _ \\\\| \u0027__| |/ _` | | | |\\\\/| |/ _ \\\\ / _` |/ _ \\\\ |\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            + \"    | | |_| | || (_) | |  | | (_| | | | |  | | (_) | (_| |  __/_|\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            + \"    |_|\\\\__,_|\\\\__\\\\___/|_|  |_|\\\\__,_|_| |_|  |_|\\\\___/ \\\\__,_|\\\\___(_)\\n\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    public static final String[] INSTRUCTIONS \u003d {\"Lets get started! First choose a template you want to work with.\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            + \"You can choose from rc, rl, lc and r templates.\" + System.lineSeparator()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            + \"eg. To select the Resistor-Capacitor circuit template, enter \u0027template rc.\u0027\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        \"Lets set a value to our power source! Type in \u0027set v VALUE\u0027 , where VALUE is a +ve number in volts.\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        \"Lets set a value to resistor/capacitor/inductor! To do so, type \u0027set\u0027 followed by \u0027r\u0027 OR \u0027c\u0027 OR \u0027l\u0027\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            + \" followed by a numeric VALUE. eg. \u0027set r 500\u0027 will set the resistor to 500Ω\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        \"Lets set another value in our template! Here\u0027s the syntax for reference \u0027set r/l/c/v VALUE\u0027.\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        \"Want to add a component in parallel/series to your current component? Lets do that! \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            + \"Type in \u0027add\u0027 followed by \u0027series/parallel\u0027 then \u0027r\u0027/\u0027c\u0027/\u0027l\u0027 and a numeric VALUE.\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            + \"eg. \u0027add parallel c 500\u0027 will add a capacitor in parallel to the capacitor in your circuit (if any).\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        \"Great! Say, do you think we could find effective power/current consumed by the circuit?\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            + \"Or even effective resistance/inductance/capacitance? Yes!\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "            + \"Lets try it out. Type \u0027calc\u0027 followed by \u0027ceff\u0027/\u0027leff\u0027/\u0027reff\u0027/\u0027power\u0027/\u0027current\u0027 and enter. :D\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        \"Great! You\u0027re set to use\\n\" + \"CLIrcuit Assistant\" + \"Enjoy! :)\\n type \u0027exit\u0027 to exit this mode.\\n\"};"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private static final Scanner IN \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * Returns the next line of user input."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @return String of user input."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public String readLine() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        return IN.nextLine().strip();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * Prints Duke logo."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private void printLogo() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        System.out.println(\"Hello from\\n\" + LOGO);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * Prints greeting to Duke."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private void printGreeting() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        System.out.println(\"What is your name?\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        System.out.println(\"Hello \" + readLine());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * Prints logo and greeting for Duke."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        printLogo();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        printGreeting();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * Prints a message."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @param message Message."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public void printMessage(String message) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        System.out.println(message);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * Prints an error message."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     * @param message Error message."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    public void showError(String message) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        printMessage(message);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * Prints the welcome message for the tutorial mode."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    public void printWelcomeTutorial() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        System.out.println(\"You have entered Tutorial Mode!\" + System.lineSeparator()"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "                + \"Type \u0027exit\u0027 if you want to leave this mode and go back to the application.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * Prints the instruction at the specified index from the array."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     * @param numOfCommandsDone Type int specifies index number."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    public void printInstruction(int numOfCommandsDone) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        System.out.println(INSTRUCTIONS[numOfCommandsDone]);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hughjazzman": 58,
      "sevenseasofbri": 48
    }
  },
  {
    "path": "src/test/java/seedu/duke/logic/ExitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "    void execute_run_setsExit() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "        ExitCommand c \u003d new ExitCommand();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        c.execute();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "        assertTrue(c.isExit());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorianfong98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorianfong98": 14,
      "hughjazzman": 3
    }
  },
  {
    "path": "src/test/java/seedu/duke/logic/commands/circuit/AddCircuitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.logic.commands.circuit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.model.template.RcTemplate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "class AddCircuitCommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private static final RcTemplate TEMPLATE \u003d new RcTemplate(500, 500, 5);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private static final String CONFIG \u003d \"series\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private static final String COMPONENT \u003d \"r\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    private static final double VALUE \u003d 500;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    void execute_addResistor_setsResistor() throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        AddCircuitCommand c \u003d new AddCircuitCommand(TEMPLATE, CONFIG, COMPONENT, VALUE);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        c.execute();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        assertEquals(1000, c.template.getComponent(\"r\").getValue());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    void execute_wrongComponent_expectException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        AddCircuitCommand c \u003d new AddCircuitCommand(TEMPLATE, CONFIG, \"l\", VALUE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        assertThrows(DukeException.class, c::execute);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hughjazzman": 28
    }
  },
  {
    "path": "src/test/java/seedu/duke/logic/commands/circuit/CalculateCircuitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.logic.commands.circuit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.model.template.LcTemplate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.model.template.LrTemplate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.model.template.RTemplate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "public class CalculateCircuitCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    private static final RTemplate RTEMPLATE \u003d new RTemplate(100, 100);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    private static final LrTemplate LR_TEMPLATE \u003d new LrTemplate(0, 0, 10);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    private static final LcTemplate LC_TEMPLATE \u003d new LcTemplate(1600, 299, 220);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    private static final String POWER \u003d \"power\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    private static final String INDUCTANCE \u003d \"leff\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    private static final String CAPACITANCE \u003d \"ceff\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    private static final String CURRENT \u003d \"current\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    void execute_calcPower_calculatesPower() throws DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        CalculateCircuitCommand c \u003d new CalculateCircuitCommand(RTEMPLATE, POWER);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        c.execute();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        assertEquals(100, c.template.getPower());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    void execute_calcCeff_calculatesEffectiveCapacitance() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        CalculateCircuitCommand c \u003d new CalculateCircuitCommand(LC_TEMPLATE, CAPACITANCE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        assertDoesNotThrow(c::execute);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    void execute_calcCurrentWithZeroValueComponents_expectException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        CalculateCircuitCommand c \u003d new CalculateCircuitCommand(LR_TEMPLATE, CURRENT);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        assertThrows(AssertionError.class, c::execute);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    void execute_invalidComponentForTemplate_expectException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        CalculateCircuitCommand c \u003d new CalculateCircuitCommand(RTEMPLATE, INDUCTANCE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        assertThrows(DukeException.class, c::execute);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hughjazzman": 15,
      "sevenseasofbri": 31
    }
  },
  {
    "path": "src/test/java/seedu/duke/logic/commands/circuit/SetCircuitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.logic.commands.circuit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.model.template.RcTemplate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "class SetCircuitCommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    void execute_voltageSource_setComponent() throws DukeException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        RcTemplate t \u003d new RcTemplate(100, 100, 100);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        SetCircuitCommand c \u003d new SetCircuitCommand(t, \"v\", 200);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        c.execute();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        assertEquals(c.component, \"v\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        assertEquals(c.componentObject.getValue(), 200);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    void execute_BadCommand_expectException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        RcTemplate t \u003d new RcTemplate(100, 100, 100);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        SetCircuitCommand c \u003d new SetCircuitCommand(t, \"v\", -100);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        assertThrows(ArithmeticException.class, c::execute);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hughjazzman": 5,
      "PraveenElango": 24
    }
  },
  {
    "path": "src/test/java/seedu/duke/logic/parser/ParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.logic.commands.circuit.AddCircuitCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.logic.commands.circuit.CalculateCircuitCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.logic.commands.circuit.CircuitCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.logic.commands.circuit.HelpCircuitCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.logic.commands.circuit.SetCircuitCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.logic.commands.circuit.TemplateCircuitCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "class ParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    void parse_noLine_expectException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        Parser p \u003d new Parser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        String line \u003d \"\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e p.parse(line));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    void parseHelp_help_returnsHelpCommand() throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        Parser p \u003d new Parser();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        String line \u003d \"help\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        CircuitCommand c \u003d (CircuitCommand) p.parse(line);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        assertTrue(c instanceof HelpCircuitCommand); // change to HelpCommand once done"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    void parseTemplate_Template_returnsTemplateCommand() throws DukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        Parser p \u003d new Parser();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        String line \u003d \"template \";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        String[] templates \u003d {\"r\", \"rl\", \"rc\", \"lc\"};"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        CircuitCommand c;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        for (String s : templates) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            c \u003d (CircuitCommand) p.parse(line + s);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            assertTrue(c instanceof TemplateCircuitCommand);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    void parseTemplate_noTemplate_expectException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        Parser p \u003d new Parser();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        String line \u003d \"template\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e p.parse(line));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    void parseTemplate_wrongArgument_expectException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        Parser p \u003d new Parser();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        String line \u003d \"template haha\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e p.parse(line));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    void parseSet_resistor_returnsSetCommand() throws DukeException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        Parser p \u003d new Parser();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        p.parse(\"template rl\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        String line \u003d \"set r 500\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        CircuitCommand c \u003d (CircuitCommand) p.parse(line);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        assertTrue(c instanceof SetCircuitCommand);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    void parseSet_noResistance_expectException() throws DukeException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        Parser p \u003d new Parser();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        p.parse(\"template rl\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        String line \u003d \"set r \";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e p.parse(line));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    void parseSet_negativeResistance_expectException() throws DukeException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        Parser p \u003d new Parser();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        p.parse(\"template rl\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        String line \u003d \"set r -500\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e p.parse(line));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    void parseSet_invalidResistance_expectException() throws DukeException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        Parser p \u003d new Parser();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        p.parse(\"template rl\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        String line \u003d \"set r yolo\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e p.parse(line));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    void parseSet_invalidComponent_expectException() throws DukeException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        Parser p \u003d new Parser();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        p.parse(\"template rl\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        String line \u003d \"set c 500\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        CircuitCommand c \u003d (CircuitCommand) p.parse(line);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        assertTrue(c instanceof SetCircuitCommand);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    void parseAdd_addResistor_returnsAddCommand() throws DukeException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        Parser p \u003d new Parser();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        p.parse(\"template rl\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        p.parse(\"set r 500\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        String line \u003d \"add series r 500\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        CircuitCommand c \u003d (CircuitCommand) p.parse(line);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        assertTrue(c instanceof AddCircuitCommand);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    void parseAdd_wrongConfig_expectException() throws DukeException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        Parser p \u003d new Parser();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        p.parse(\"template rl\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        p.parse(\"set r 500\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        String line \u003d \"add diagonal r 500\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e p.parse(line));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    void parseAdd_wrongComponent_expectException() throws DukeException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        Parser p \u003d new Parser();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        p.parse(\"template rl\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        p.parse(\"set r 500\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        String line \u003d \"add series c 500\";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        CircuitCommand c \u003d (CircuitCommand) p.parse(line);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        assertTrue(c instanceof AddCircuitCommand);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    void parseCalc_valueEff_CalculateCommand() throws DukeException {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        Parser p \u003d new Parser();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        p.parse(\"template rl\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        String line \u003d \"calc \";"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        String[] effValues \u003d {\"reff\", \"leff\", \"current\", \"power\"};"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        CircuitCommand c;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        for (String s : effValues) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            c \u003d (CircuitCommand) p.parse(line + s);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "            assertTrue(c instanceof CalculateCircuitCommand);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        p.parse(\"template rc\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        String capEff \u003d \"ceff\";"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        c \u003d (CircuitCommand) p.parse(line + capEff);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        assertTrue(c instanceof CalculateCircuitCommand);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    void parseExit_bye_ExitCommand() throws DukeException {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        Parser p \u003d new Parser();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        String line \u003d \"bye\";"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        Command c \u003d p.parse(line);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        assertTrue(c instanceof ExitCommand);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    void parse_invalidCommand_expectException() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        Parser p \u003d new Parser();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        String line \u003d \"invaliddd\";"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e p.parse(line));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hughjazzman": 164
    }
  },
  {
    "path": "src/test/java/seedu/duke/model/component/CapacitorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.model.component;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "public class CapacitorTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    void setValue_positiveCapacitance_returnsCapacitance() throws DukeException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        Capacitor c \u003d new Capacitor(100);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        c.setValue(200);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        assertEquals(200, c.getValue());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    void setValue_negativeCapacitance_expectException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        Capacitor c \u003d new Capacitor(100);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        assertThrows(ArithmeticException.class, () -\u003e c.setValue(-200));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    void setValue_zeroCapacitance_expectException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        Capacitor c \u003d new Capacitor(100);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        assertThrows(ArithmeticException.class, () -\u003e c.setValue(0));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oasisbeatle": 29,
      "hughjazzman": 1
    }
  },
  {
    "path": "src/test/java/seedu/duke/model/component/InductorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.model.component;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "public class InductorTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    void setValue_positiveInductance_updatesInductance() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        Inductor l \u003d new Inductor(100);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        l.setValue(200);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        assertEquals(200, l.getValue());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    void setValue_negativeInductance_expectException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        Inductor l \u003d new Inductor(100);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        assertThrows(ArithmeticException.class, () -\u003e l.setValue(-200));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    void setValue_zeroInductance_expectException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        Inductor l \u003d new Inductor(100);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        assertThrows(ArithmeticException.class, () -\u003e l.setValue(0));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oasisbeatle": 27,
      "hughjazzman": 1
    }
  },
  {
    "path": "src/test/java/seedu/duke/model/component/LoadComponentTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.model.component;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "class LoadComponentTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    void addSeries_zeroCapacitance_expectException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        Capacitor c \u003d new Capacitor(100);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e c.addSeries(0));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    void addSeries_negativeCapacitance_expectException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        Capacitor c \u003d new Capacitor(100);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e c.addSeries(-200));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    void addSeries_positiveNonZeroCapacitance_updatesCapacitance() throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        Capacitor c \u003d new Capacitor(100);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        assertEquals(50.0, c.addSeries(100));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    void addParallel_zeroCapacitance_expectException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        Capacitor c \u003d new Capacitor(100);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e c.addParallel(0));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    void addParallel_negativeCapacitance_expectException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        Capacitor c \u003d new Capacitor(100);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e c.addParallel(-200));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    void addParallel_positiveNonZeroCapacitance_updatesCapacitance() throws DukeException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        Capacitor c \u003d new Capacitor(100);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        assertEquals(200, c.addParallel(100));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    void addParallel_zeroResistance_expectException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        Resistor r \u003d new Resistor(100);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e r.addParallel(0));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    void addParallel_negativeResistance_expectException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        Resistor r \u003d new Resistor(100);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e r.addParallel(-200));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    void addParallel_positiveResistance_updatesResistance() throws DukeException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        Resistor r \u003d new Resistor(100);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        assertEquals(50.0, r.addParallel(100));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    void addSeries_zeroResistance_expectException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        Resistor r \u003d new Resistor(100);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e r.addSeries(0));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    void addSeries_negativeResistance_expectException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        Resistor r \u003d new Resistor(100);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e r.addSeries(-200));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    void addSeries_positiveResistance_updatesResistance() throws DukeException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        Resistor r \u003d new Resistor(100);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        assertEquals(200.0, r.addSeries(100));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    void addParallel_zeroInductance_expectException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        Inductor l \u003d new Inductor(100);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e l.addParallel(0));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    void addParallel_negativeInductance_expectException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        Inductor l \u003d new Inductor(100);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e l.addParallel(-200));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    void addParallel_positiveInductance_updatesInductance() throws DukeException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        Inductor l \u003d new Inductor(100);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        assertEquals(50.0, l.addParallel(100));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    void addSeries_zeroInductance_expectException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        Inductor l \u003d new Inductor(100);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e l.addSeries(0));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    void addSeries_negativeInductance_expectException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        Inductor l \u003d new Inductor(100);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e l.addSeries(-200));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    void addSeries_positiveInductance_updatesInductance() throws DukeException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        Inductor l \u003d new Inductor(100);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        assertEquals(200.0, l.addSeries(100));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oasisbeatle": 95,
      "hughjazzman": 24
    }
  },
  {
    "path": "src/test/java/seedu/duke/model/component/ResistorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.model.component;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "public class ResistorTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    void setValueTest_positiveResistance_updatesResistance() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        Resistor r \u003d new Resistor(100);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        r.setValue(200);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        assertEquals(200, r.getValue());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    void setValueTest_negativeResistance_expectException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        Resistor r \u003d new Resistor(100);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        assertThrows(ArithmeticException.class, () -\u003e r.setValue(-200));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    void setValueTest_zeroResistance_expectException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        Resistor r \u003d new Resistor(100);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        assertThrows(ArithmeticException.class, () -\u003e r.setValue(0));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oasisbeatle": 28,
      "hughjazzman": 1
    }
  },
  {
    "path": "src/test/java/seedu/duke/model/component/VoltageSourceTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.model.component;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "public class VoltageSourceTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    void setValue_positiveVoltage_updatesVoltage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        VoltageSource v \u003d new VoltageSource(100);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        v.setValue(200);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        assertEquals(200, v.getValue());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    void setValue_negativeVoltage_expectException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        VoltageSource v \u003d new VoltageSource(100);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        assertThrows(ArithmeticException.class, () -\u003e v.setValue(-200));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    void setValue_zeroVoltage_expectException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        VoltageSource v \u003d new VoltageSource(100);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        assertThrows(ArithmeticException.class, () -\u003e v.setValue(0));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oasisbeatle": 28,
      "hughjazzman": 1
    }
  },
  {
    "path": "src/test/java/seedu/duke/model/template/LcTemplateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.model.template;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "class LcTemplateTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    public static final double DELTA \u003d 1e-15;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    void calcImpedance_zeroCapacitance_expectException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        LcTemplate t \u003d new LcTemplate();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        assertThrows(AssertionError.class, t::calcImpedance);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    void calcImpedance_lCValueEqualsOne_returnsImpedance() throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        LcTemplate t \u003d new LcTemplate(1,1,1);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        double inductance \u003d 1 * Math.pow(10, -6);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        double capacitance \u003d 1 * Math.pow(10, -6);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        double impedance \u003d t.ANGULAR_FREQUENCY * Math.abs(inductance - (1 / capacitance));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        assertEquals(impedance, t.calcImpedance(), DELTA);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    void getInductor_lCValueEqualsOne_returnsInductor() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        LcTemplate t \u003d new LcTemplate(1, 1, 1);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        t.setInductor(5);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        assertEquals(5, t.getInductor().getValue(), DELTA);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    void setComponent_lCValueEqualsOne_setInductorValue() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        LcTemplate t \u003d new LcTemplate();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        t.setComponent(\"l\", 5);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        assertEquals(5, t.getInductor().getValue(), DELTA);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    void setCapacitor_lCValueEqualsOne_setsCapacitor() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        LcTemplate t \u003d new LcTemplate(1, 1, 1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        assertEquals(1, t.getCapacitor().getValue(), DELTA);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    void setComponent_cValueEqualsFive_setCapacitorValue() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        LcTemplate t \u003d new LcTemplate();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        t.setComponent(\"c\", 5);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        assertEquals(5, t.getCapacitor().getValue(), DELTA);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    void getCurrent_lCValueEqualsOne_returnsCurrent() throws DukeException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        LcTemplate t \u003d new LcTemplate(1,1,1);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        double current \u003d 1 / t.calcImpedance();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        assertEquals(current, t.getCurrent());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    void getPower_lCValueEqualsOne_returnsPower() throws DukeException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        LcTemplate t \u003d new LcTemplate(1,1,1);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        double power \u003d 1 * 1 / t.calcImpedance();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        assertEquals(power, t.getPower());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oasisbeatle": 1,
      "hughjazzman": 13,
      "PraveenElango": 57
    }
  },
  {
    "path": "src/test/java/seedu/duke/model/template/LrTemplateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.model.template;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "class LrTemplateTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    public static final double DELTA \u003d 5;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    void calcImpedance_zeroInductance_expectException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        LrTemplate t \u003d new LrTemplate();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        assertThrows(AssertionError.class, t::calcImpedance);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    void calcImpedance_lRValuesEqualOne_returnsDouble() throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        LrTemplate t \u003d new LrTemplate(1,1,1);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        double impedance \u003d Math.sqrt(Math.pow(1, 2)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "                + (1 / Math.pow((t.ANGULAR_FREQUENCY * 1), 2)));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        assertEquals(impedance, t.calcImpedance(), DELTA);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    void setComponent_lRValuesEqualOne_setCapacitorValue() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        LrTemplate t \u003d new LrTemplate();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        t.setComponent(\"l\", 5);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        assertEquals(5, t.getInductor().getValue(), DELTA);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    void getCurrent_lRValuesEqualOne_returnsDouble() throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        LrTemplate t \u003d new LrTemplate(1,1,1);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        double current \u003d 1 / t.calcImpedance();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        assertEquals(current, t.getCurrent());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    void getPower_lRValuesEqualOne_returnsDouble() throws DukeException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        LrTemplate t \u003d new LrTemplate(1,1,1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        double power \u003d 1 * 1 / t.calcImpedance();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        assertEquals(power, t.getPower());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oasisbeatle": 1,
      "hughjazzman": 1,
      "PraveenElango": 45
    }
  },
  {
    "path": "src/test/java/seedu/duke/model/template/RTemplateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.model.template;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "class RTemplateTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    public static final double DELTA \u003d 1e-15;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    void calcImpedance_zeroCapacitance_expectException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        RcTemplate t \u003d new RcTemplate();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        assertThrows(AssertionError.class, t::calcImpedance);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    void calcImpedance_rValueEqualsOne_returnsImpedance() throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        RTemplate t \u003d new RTemplate(5,1);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        assertEquals(5, t.calcImpedance(), DELTA);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    void setCapacitor_rValueEqualsFive_returnsResistor() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        RTemplate t \u003d new RTemplate(1, 1);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        t.setResistor(5);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        assertEquals(5, t.getResistor().getValue(), DELTA);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    void setComponent_rValueEqualsFive_getResistorValue() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        RTemplate t \u003d new RTemplate();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        t.setComponent(\"r\", 5);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        assertEquals(5, t.getResistor().getValue(), DELTA);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    void getCurrent_rValueEqualsOne_returnsCurrent() throws DukeException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        RcTemplate t \u003d new RcTemplate(1,1,1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        double current \u003d 1 / t.calcImpedance();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        assertEquals(current, t.getCurrent());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    void getPower_rValueEqualsOne_returnsPower() throws DukeException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        RcTemplate t \u003d new RcTemplate(1,1,1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        double power \u003d 1 * 1 / t.calcImpedance();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        assertEquals(power, t.getPower());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oasisbeatle": 1,
      "hughjazzman": 1,
      "PraveenElango": 49
    }
  },
  {
    "path": "src/test/java/seedu/duke/model/template/RcTemplateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "package seedu.duke.model.template;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "class RcTemplateTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    public static final double DELTA \u003d 1e-15;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    void calcImpedance_zeroCapacitance_expectException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "        RcTemplate t \u003d new RcTemplate();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "        assertThrows(AssertionError.class, t::calcImpedance);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    void calcImpedance_rCValuesEqualsOne_returnsImpedance() throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        RcTemplate t \u003d new RcTemplate(1,1,1);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        double impedance \u003d Math.sqrt(Math.pow(1, 2)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "                + (1 / Math.pow((t.ANGULAR_FREQUENCY * 1 * Math.pow(10, -6)), 2)));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        assertEquals(impedance, t.calcImpedance(), DELTA);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    void setCapacitor_rCValuesEqualsOne_setsCapacitorObject() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        RcTemplate t \u003d new RcTemplate(1, 1, 1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        assertEquals(1, t.getCapacitor().getValue(), DELTA);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    void setComponent_rCValuesEqualsOne_setCapacitorValue() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        RcTemplate t \u003d new RcTemplate();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        t.setComponent(\"c\", 5);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        assertEquals(5, t.getCapacitor().getValue(), DELTA);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    void getCurrent_rCValuesEqualsOne_returnsCurrent() throws DukeException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        RcTemplate t \u003d new RcTemplate(1,1,1);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        double current \u003d 1 / t.calcImpedance();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        assertEquals(current, t.getCurrent());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    void getPower_rCValuesEqualsOne_returnsPower() throws DukeException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        RcTemplate t \u003d new RcTemplate(1,1,1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        double power \u003d 1 * 1 / t.calcImpedance();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "        assertEquals(power, t.getPower());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "PraveenElango"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oasisbeatle": 1,
      "hughjazzman": 13,
      "PraveenElango": 39
    }
  },
  {
    "path": "src/test/java/seedu/duke/ui/UiTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "package seedu.duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "public class UiTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    void printInstruction_PassInvalidInstructionNumber_ThrowsException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "        assertThrows(ArrayIndexOutOfBoundsException.class, () -\u003e ui.printInstruction(8));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sevenseasofbri": 14
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "struggling CG1111 student"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "help"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "template rc"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "set v 5"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "set r 500"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "set c 20"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "add parallel c 20"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "calc power"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "exit"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "summary"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "template rc"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "set v 5"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "set r 200"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "set c 10"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "add series r 200"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "add series c 10"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "add parallel r 200"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "set r 100"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "set c 2"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "calc current"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "hughjazzman": 18,
      "sevenseasofbri": 3
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@echo off"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "setlocal enableextensions"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "pushd %~dp0"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "cd .."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "call gradlew clean shadowJar"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "cd build\\libs"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "for /f \"tokens\u003d*\" %%a in ("
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027dir /b *.jar\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ") do ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    set jarloc\u003d%%a"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hughjazzman"
        },
        "content": "java -jar -Dfile.encoding\u003dUTF-8 %jarloc% \u003c ..\\..\\text-ui-test\\input.txt \u003e ..\\..\\text-ui-test\\ACTUAL.TXT"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "cd ..\\..\\text-ui-test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "FC /w ACTUAL.TXT EXPECTED.TXT \u003eNUL \u0026\u0026 ECHO Test passed! || Echo Test failed!"
      }
    ],
    "authorContributionMap": {
      "hughjazzman": 1,
      "sevenseasofbri": 1,
      "-": 17
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# change to script directory"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "cd \"${0%/*}\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "cd .."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "./gradlew clean shadowJar"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "cd text-ui-test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "oasisbeatle"
        },
        "content": "java -jar -Dfile.encoding\u003dUTF-8 $(find ../build/libs/ -mindepth 1 -print -quit) \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix EXPECTED-UNIX.TXT ACTUAL.TXT"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sevenseasofbri"
        },
        "content": "diff -w EXPECTED-UNIX.TXT ACTUAL.TXT"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test passed!\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test failed!\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "oasisbeatle": 1,
      "sevenseasofbri": 1,
      "-": 21
    }
  }
]
