[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    mainClassName \u003d \"seedu.duequest.DueQuest\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    archiveBaseName \u003d \"duequest\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "t170815518"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "t170815518"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "t170815518"
        },
        "content": "//create a single Jar with all dependencies"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "t170815518"
        },
        "content": "task fatJar(type: Jar) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    manifest {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        attributes \u0027Implementation-Title\u0027: \u0027DueQuest\u0027,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "t170815518"
        },
        "content": "                \u0027Implementation-Version\u0027: \u0027v1.0\u0027,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "t170815518"
        },
        "content": "                \u0027Main-Class\u0027: \u0027seedu.duequest.DueQuest\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    baseName \u003d project.name + \u0027-all\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    with jar"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "t170815518"
        },
        "content": "}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "t170815518"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "t170815518"
        },
        "content": "}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "t170815518": 33,
      "haroic1997": 1,
      "-": 44,
      "acyang97": 2
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "acyang97"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Ang Chun Yang | [Github](https://github.com/acyang97) | [Portfolio](team/acyang97.md)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "acyang97"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Low Ri Hao | [Github](https://github.com/haroic1997) | [Portfolio](team/haroic1997.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "acyang97"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Sun Xiu Qi | [Github](https://github.com/sunxiuqi-stacked) | [Portfolio](team/Xiuqi.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "acyang97"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Tang Yuting | [Github](https://github.com/t170815518) | [Portfolio](team/t170815518.md)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "acyang97"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Zou Yanfeng | [Github](https://github.com/teachyourselfcoding) | [Portfolio](team/yanfeng.md)"
      }
    ],
    "authorContributionMap": {
      "-": 4,
      "acyang97": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "acyang97"
        },
        "content": "# Developer Guide of DueQuest"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "acyang97"
        },
        "content": "## Table of contents"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "acyang97"
        },
        "content": "1. Introduction"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    - Welcome to DueQuest"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "acyang97"
        },
        "content": "2. Setting Up"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    - Prerequisites"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    - Setting the project"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "acyang97"
        },
        "content": "3. Design"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    - Architecture"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    - Task Component"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    - Command"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    - Managers"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    - Storage"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "acyang97"
        },
        "content": "4. Implementation"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    - Adding"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    - Display "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    - Storage"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    - Edit"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    - Delete"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "acyang97"
        },
        "content": "5. Documentation"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    - Basic Thing to know"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    - Style guidance"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    - Diagrams"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "acyang97"
        },
        "content": "6. Testing"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    - Running Tests"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    - Types of Tests"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "acyang97"
        },
        "content": "7. Appendices"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    - Appendix A: Product Scope"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    - Appendix B: User Stories"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    - Appendix C: Non Functional Requirements"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    - Appendix D: Glossary"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    - Appendix E: Instructions for Manual Testing"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "acyang97"
        },
        "content": "## 1. Introduction"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "acyang97"
        },
        "content": "### Welcome to DueQuest"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "acyang97"
        },
        "content": "Hello! We appreciate your interest in contributing to DueQuest. DueQuest is an application that"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "acyang97"
        },
        "content": "uses a Command Line Interface (CLI) specifically for NUS Students to manage their schedule"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "acyang97"
        },
        "content": "during school. This guide is written to give a clearer understanding for developers who are"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "acyang97"
        },
        "content": "interested in improving the design and implementation of DueQuest."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "acyang97"
        },
        "content": "## 2.Setting Up"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "acyang97"
        },
        "content": "### Prerequisites"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "acyang97"
        },
        "content": "- JDK 11"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "acyang97"
        },
        "content": "- IntelliJ IDEA"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "acyang97"
        },
        "content": "### Setting the project"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "acyang97"
        },
        "content": "1. Fork the repo and clone it into your computer"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "acyang97"
        },
        "content": "2. Configure the JDK in IntelliJ to ensure it is configured to use JDK11."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "acyang97"
        },
        "content": "3. Click `Import Project` (or `Open or Import` in newer version of Intellij)."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "acyang97"
        },
        "content": "4. IntelliJ IDEA by default has the Gradle plugin installed. If you have disabled it, go"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "acyang97"
        },
        "content": "to `File → Settings → Plugins` to re-enable them."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "acyang97"
        },
        "content": "5. Locate the build.gradle file (not the root folder as you would do in a normal"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "acyang97"
        },
        "content": "importing) and select it. Click `OK` . If asked, choose to `Open as Project` (not `Open as"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "acyang97"
        },
        "content": "File` )."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "acyang97"
        },
        "content": "6. Click `OK` to accept the default settings but do ensure that the selected version of"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "acyang97"
        },
        "content": "`Gradle JVM` matches the JDK being used for the project."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "acyang97"
        },
        "content": "7. Wait for the importing process to finish (could take a few minutes)."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "acyang97"
        },
        "content": "## 3. Design"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "acyang97"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "t170815518"
        },
        "content": "The diagram below shows a flow chart which gives an overall general picture of how the application works whenever the application receives an input from the user and a shows how each component interacts with one another for different scenarios. The logic behind the application is mostly handled by the `Parser` which converts inputs into various executable `Command`."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "acyang97"
        },
        "content": "![](Images/3.1Archi.jpg)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "t170815518"
        },
        "content": "### Module Component "
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "t170815518"
        },
        "content": "![](Images/Module.png)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "acyang97"
        },
        "content": "`ModuleManager` is the class that maintains the list of `Module` for the app and provides appropriate API to manipulate these modules.  "
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "acyang97"
        },
        "content": "| Class | Function |"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "acyang97"
        },
        "content": "|--------|----------|"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "acyang97"
        },
        "content": "| `Module` | `Module` class has attributes such as `moduleCode`, `title`, `auNumber` and `teachingSatffs`, and it also keeps the records of `Assessment` (e.g. assignments, exams, etc.) |"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "acyang97"
        },
        "content": "| `Assessment` | `Assessment` class stores the scores obtained by the user for the assessments he did for the `Module`|"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "t170815518"
        },
        "content": "To manipulate the module, the developer needs to access it from `ModuleManager`, generally through APIs such as `getModule(moduleCode: String)` . "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "acyang97"
        },
        "content": "### Task Component"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "acyang97"
        },
        "content": "Each `Task` can be a `Lesson`, `Event` or `Deadline`. Below is a UML diagram showing"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "acyang97"
        },
        "content": "some of the properties and methods that these classes have. A `Task` will be created"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "acyang97"
        },
        "content": "whenever a User wants to add a Task into the `ScheduleManager` or `ModuleManager`."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "acyang97"
        },
        "content": "![](Images/3.2Task.JPG)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "acyang97"
        },
        "content": "| Class | Function |"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "acyang97"
        },
        "content": "|--------|----------|"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "acyang97"
        },
        "content": "| `Task` | Parent class of `Lesson`, `Deadline` and `Event` |"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "acyang97"
        },
        "content": "| `Lesson` | Represents an `Lesson` object. A `Lesson` object represents a lesson for a module that occurs during the semester, maintaining information such as the `description` of the lesson, `startTimeOfLesson`, `endTimeOfLesson`, and day of the week which it occurs on (which is noted by the `frequency`). |"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "acyang97"
        },
        "content": "| `Deadline` | Represents an `Event` object. An `Event` object represents a one-off event for a module that maintains information such as `date` of the event, `startTimeOfEvent`, `endTimeOfEvent`. |"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "acyang97"
        },
        "content": "| `Event` | Represents a `Deadline` object. A `Deadline` object represents a deadline for a module that maintains information such as `description` of the deadline and `date` of the deadline. |"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "acyang97"
        },
        "content": "### Command"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "acyang97"
        },
        "content": "The logic of what should be executed whenever the application receives an input will be"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "acyang97"
        },
        "content": "handled by parsing these inputs into Commands using a Parser . Below is a UML Diagram"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "acyang97"
        },
        "content": "showing how the `Parser` classes and the `Command` classes interact. Unless the `Command` is"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "acyang97"
        },
        "content": "an `ExitCommand` or `HelpCommand` , the `Command` will be executed to perform an action to"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "acyang97"
        },
        "content": "either the `ScheduleManager` or `ModuleManager` or both."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "acyang97"
        },
        "content": "![](Images/3.3Command.JPG)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "acyang97"
        },
        "content": "| Class | Function |"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "acyang97"
        },
        "content": "|--------|----------|"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "acyang97"
        },
        "content": "| `Command` | An Abstract class which is the parent class of all of the commands below. The main method in this class is the `execute()` method, which handles the different executions required depending on the input by the user. |"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "acyang97"
        },
        "content": "| `AddCommand` | A child class of `Command` which helps to execute the feature of adding a `Task` into the `ScheduleManager` and `ModuleManager`. |"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "acyang97"
        },
        "content": "| `AddModuleCommand` | A child class of `Command` which helps to add a `Module` into the `ModuleManager`. |"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "acyang97"
        },
        "content": "| `DeleteCommand` | A child class of `Command` to execute methods to delete a `Task` and `Module` |"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "acyang97"
        },
        "content": "| `DisplayCommand` | A child class of `Command` which helps to display the list of tasks in a any day stated by the user, or the list of tasks from a `Module` stated by the user. |"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "acyang97"
        },
        "content": "| `EditCommand` | A child class of `Command` to execute edit methods |"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "acyang97"
        },
        "content": "| `EditModuleCommand` | A child class of `EditCommand` to execute edit methods that has a module code in the input. |"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "acyang97"
        },
        "content": "| `EditTaskCommand` | A child class of `EditCommand`  to execute edit methods without a module code in the input. |"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "acyang97"
        },
        "content": "| `HelpCommand` | A child class of `Command` which helps to provides the list of inputs for the user to know what to type in to use any of the features he wants. |"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "acyang97"
        },
        "content": "| `ExitCommand` | A child class of `Command` which helps to exit the app. |"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "t170815518"
        },
        "content": "| `AddAssessmentCommand` | A child class of `Command` which adds assessment to the module. |"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "t170815518"
        },
        "content": "| `ScoreAssessmentCommand` | A child class of `Command` which adds actual score to the assessment. |"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "t170815518"
        },
        "content": "| `DeleteAssessmentCommand` | A child class of `Command` which deletes the assessment from the module. |"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "acyang97"
        },
        "content": "### Managers"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "acyang97"
        },
        "content": "The application consists of two managers, the `ScheduleManager` and `ModuleManager`. The"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "acyang97"
        },
        "content": " `ScheduleManager` will handle the storing of `Task` in each day. The `ModuleManager` will"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "t170815518"
        },
        "content": "handle storing the task of each `Module`. "
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "t170815518"
        },
        "content": "Below is a UML Diagram showing some of the key methods and properties of the `ScheduleManager` and `ModuleManager` classes."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "acyang97"
        },
        "content": "![](Images/3.4Managers.JPG)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "acyang97"
        },
        "content": "| Class | Function |"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "acyang97"
        },
        "content": "|--------|----------|"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "acyang97"
        },
        "content": "| `ScheduleManager` | The `ScheduleManager` class  helps to store the `Task`s in each day. |"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "acyang97"
        },
        "content": "| `ModuleManager` | `ModuleManager` class helps to store the `Task`s of each module. |"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "acyang97"
        },
        "content": "Some Design Considerations on how to store the `Task` in the `ScheduleManager`:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "acyang97"
        },
        "content": "- Use of a `TreeMap` to store the date as keys and `ArrayList` as values."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    - Pros: Use of a `TreeMap` allows iteration of dates as the key to be iterated in order, which"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                might be useful in further development of implementation of the use of the `ScheduleManager`."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                Searching for a date can also be done in O(logn) similarly to a `HashMap`."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    - Cons: Storing the dates that have past and also storing of many dates might be heavy in"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                terms of space."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "acyang97"
        },
        "content": "- Use of a `HashMap` to store the date as keys and `ArrayList` as values"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    - Pros: Allows tracking of tasks with respect to the dates as keys."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    - Cons: Does Not allow iteration in order as when desired as compared to a `TreeMap`."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "acyang97"
        },
        "content": "- Creation of a new class which contains a schedule for each day, and using a `TreeSet`."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "acyang97"
        },
        "content": "      to contain this new class."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    - Pros: Making use of more oop design."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    - Cons: Might be tricky to implement and may need more resources."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "acyang97"
        },
        "content": "  "
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "acyang97"
        },
        "content": "### Storage"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "t170815518"
        },
        "content": "The application will save all of the application\u0027s data to a local directory (specified when launching the `jar` file) by using a `Storage` class, which is designed as singleton and can only be created and assessed through public class methods of Storage."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "t170815518"
        },
        "content": "When `DueQuest` is launched, the `Storage` instance will be created and read all the files in the specified storage directory. After that, it will load data into `ScheduleManager` and `ModuleManager`. "
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "t170815518"
        },
        "content": "When using the app, the commands (not all of them, e.g. exit, help, display commands won\u0027t call `Storage`) will call `Storage` to export updated module to local files every time they are executed. "
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "t170815518"
        },
        "content": "Below is the UML of `Storage`:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "acyang97"
        },
        "content": "![](Images/3.5Stroage.JPG)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "acyang97"
        },
        "content": "| Class | Function |"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "acyang97"
        },
        "content": "|--------|----------|"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "acyang97"
        },
        "content": "| `Storage` | It exports the data in the application and converts it into the form of a txt file. This allows users to retain their saved data after exiting the app. More elaboration of how this will be done will be shown later, where a sequence diagram will show how this process works. |"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "acyang97"
        },
        "content": "## 4. Implementation"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "acyang97"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "acyang97"
        },
        "content": "### Add Feature"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "acyang97"
        },
        "content": "The add implementation allows the user to add a `Lesson`, `Event` or `Deadline`. This is facilitated"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "acyang97"
        },
        "content": "by implementing the ScheduleManager and ModuleManager, which stores all of the `Task` in"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "acyang97"
        },
        "content": "them. The `ScheduleManager` helps to save these tasks into the dates according to the date of"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "acyang97"
        },
        "content": "the `Task` as stated by the User. The `ModuleManager` will also add the `Task` into the respective module"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "acyang97"
        },
        "content": "that it belongs to. Below is a sequence diagram which shows how adding of a"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "acyang97"
        },
        "content": "`Lesson` works. Adding of a Event or a Deadline is also in a similar fashion."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "acyang97"
        },
        "content": "![](Images/4.1Add.JPG)"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "acyang97"
        },
        "content": "1. The user inputs `lesson online lecutre CS2113 /on 5 16:00 18:00`, which will be by read by the `Ui` by it\u0027s `readCommand()` method, and returned as a String variable called `fullCommand`."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "acyang97"
        },
        "content": "1. A `Parser` is then used to obtain the logic behind the user\u0027s input. The `Parser` will first use it\u0027s `parse(fullCommand)` method, which will then call the `parseLesson(fullCommand)` method after finding out that the user wants to add a lesson since that was the first word in the user input for this case."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "acyang97"
        },
        "content": "1. The `parseLesson(fullCommand)` method will return a `Lesson lesson` object. It will also call a `AddCommand`, which will contain the `Lesson lesson` object, and the `AddCommand` will be returned to the `DueQuest` main class."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "acyang97"
        },
        "content": "1. Next, the `AddCommand` will be executed to handle the logic of adding a lesson with the details as stated by the user\u0027s input. "
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "acyang97"
        },
        "content": "1. Finally, the `execute(ScheduleManager scheduleManager, ModuleManager moduleManager)` will first call the `ScheduleManager`, which calls its own `addLesson(lesson, moduleManager, ui)` method to add the lesson to itself. It also calls the `ModuleManager` object, and the `ModuleManager` will call its own `addTaskToModule(lesson, moduleCodeOfLesson)` to add the lesson to the `Module` in it which has the module code stated by the user."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "acyang97"
        },
        "content": "### Display Feature"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "acyang97"
        },
        "content": "![](Images/4.2Display.JPG)"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "acyang97"
        },
        "content": "For display method, there are 5 possible scenarios that could include parameters such"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "acyang97"
        },
        "content": "as `Module` code, date \u0026 range of date."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "acyang97"
        },
        "content": "As seen from the diagram, the 5 Scenarios are:"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "acyang97"
        },
        "content": "1. Display today Schedule"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "acyang97"
        },
        "content": "2. Display all information in a specific module"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "acyang97"
        },
        "content": "3. Display all task in a specific module on a specific date"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "acyang97"
        },
        "content": "4. Display all task within a range of dates"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "acyang97"
        },
        "content": "5. Display all task on a specific date"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "acyang97"
        },
        "content": "Example: flow for Displaying today schedule:"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "acyang97"
        },
        "content": "1. The user will run the app and type in “display”, which will then be received by the `Ui` and"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "acyang97"
        },
        "content": "it returns the input as a String fullCommand"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "acyang97"
        },
        "content": "2. The String fullCommand will then be parsed by a `Parser` to return an `DisplayCommand`"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "acyang97"
        },
        "content": "object."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "acyang97"
        },
        "content": "3. The DisplayCommand object will then be executed to display today’s Schedule using the"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "acyang97"
        },
        "content": "`ScheduleManager.displayToday()` method"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "acyang97"
        },
        "content": "### Storage Feature"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "t170815518"
        },
        "content": "The storage is implemented in singleton such that the `Storage` class holds only 1 private instance, the constructor of which (e.g. `Storage(directoryPath)`) is private. Such instance can only be created with the class method, `Storage.setUpStorage(directoryPath)`. "
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "t170815518"
        },
        "content": "1. Set up the `Storage` from local disk. `storage` instance will be created. "
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "acyang97"
        },
        "content": "![](Images/4.3Storage1.JPG)"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "t170815518"
        },
        "content": "2. Add/Edit Module and Its Components"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "t170815518"
        },
        "content": "When modules’ information or their components are changed (e.g. add, delete the module or add, delete the assessments, etc.), the changed module’s code will be passed to storage. `Storage` will export the new information of the changed `Module` to the corresponding local files."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "acyang97"
        },
        "content": "![](Images/4.3Storage2.JPG)"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "t170815518"
        },
        "content": "3. Edit/Delete Action"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "t170815518"
        },
        "content": "-  When multiple modules are affected. Storage will export the new content of `ModuleManager` by iterating all modules in `ModuleManager` , since the module is not specified. Below is the sequence diagram with the example of task deletion: "
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "acyang97"
        },
        "content": "![](Images/4.3Storage3.JPG)"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "t170815518"
        },
        "content": "-  When the task only on specific date is modified. The command of edit/deleting is passed to `Storage`, and `Storage` will write this command string to `AdditionalFile`, so that whenever importing files, this `DeleteCommand` or `EditCommand` will be executed again from `AdditionalFile`. Below is an example of deleting the task:"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "acyang97"
        },
        "content": "![](Images/4.3Storage4.JPG)"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "t170815518"
        },
        "content": "+ When the frequent task of a module is deleted for all dates, `Storage` will export the updated module to the corresponding local file. (the sequence diagram is the same as *2. Add/Edit Module and Its Components*)"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "### Edit Feature"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "acyang97"
        },
        "content": "The `EditCommand` base class forms the basis for the two extensions listed below."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "acyang97"
        },
        "content": "1. Edit Module Command: When the `EditModuleCommand` is executed, it checks for the description of the particular property to "
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "acyang97"
        },
        "content": "edit with `ScheduleManager` and `ModuleManager`.  The constructor function is overloaded such that the "
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "conditions will check for which property to edit. In the case that there are no module details to modify,"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "the function execution will go on to check for module tasks to modify."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "acyang97"
        },
        "content": "![](Images/5.1EditModule1.jpeg)"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "acyang97"
        },
        "content": "2. Edit Task Command: When the `EditTaskCommand` is executed, it checks for the description of the particular property to "
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "acyang97"
        },
        "content": "edit with `ScheduleManager` and `ModuleManager`.  The constructor function is overloaded such that the "
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "conditions will check for which property to edit."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "acyang97"
        },
        "content": "![](Images/5.2EditTask2.jpeg)"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "### Delete Feature"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "acyang97"
        },
        "content": "The `DeleteCommand` is the class which oversees the deletion of modules and tasks."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "acyang97"
        },
        "content": "1. The `DeleteCommand` class is overloaded such that the conditions of the deletion are checked. The "
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "acyang97"
        },
        "content": "`ScheduleManager` and `ModuleManager` both manage their deletions separately, overloading the deletions"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "where necessary."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "acyang97"
        },
        "content": "![](Images/6.1Delete.jpeg)"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "acyang97"
        },
        "content": "## 5. Documentation"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "acyang97"
        },
        "content": "This Section describes how to write documentation for the project. The projects is"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "acyang97"
        },
        "content": "written in GitHub-Flavoured Markdown"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "acyang97"
        },
        "content": "### Basic Thing to know"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "acyang97"
        },
        "content": "- The docs/ folder is used to store documentation file"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "acyang97"
        },
        "content": "### Style guidance"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "acyang97"
        },
        "content": "- Google developer Documentation style guide"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "acyang97"
        },
        "content": "- [se-edu/guides] Markdown coding standards"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "acyang97"
        },
        "content": "### Diagrams"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "acyang97"
        },
        "content": "- Draw.io (free)"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "acyang97"
        },
        "content": "## Testing"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "acyang97"
        },
        "content": "## 6. Running Tests"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "acyang97"
        },
        "content": "### Running Tests"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "acyang97"
        },
        "content": "There are two ways to run tests"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "acyang97"
        },
        "content": "1. Using IntelliJ JUnit Test Runner"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    1. To run all the test, right click on the src/test/java and choose Run ‘Tests in"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "acyang97"
        },
        "content": "tp.test’"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    2. To run a subset of test, you can right click on a test package, test class, or a test"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "acyang97"
        },
        "content": "and choose run “ScheduleManagerTest”"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "acyang97"
        },
        "content": "2. Using Gradle"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    1. Open a console and run the command gradlew clean test"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    2. For Mac or linux users, use ./gradlew clean test"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    "
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "acyang97"
        },
        "content": "### Types of Tests"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "acyang97"
        },
        "content": "For this project, we used:"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    - Unit Test. For eg, seedu.ModuleManagerTest."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    - Integration Testing. For eg, seedu.duequest.DueQuestTest. "
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "acyang97"
        },
        "content": "## 7. Appendices"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "acyang97"
        },
        "content": "### Appendix A: Product Scope "
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "acyang97"
        },
        "content": "#### Target user profile"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "acyang97"
        },
        "content": "The target user for our app is for:"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "acyang97"
        },
        "content": " - NUS Students who hope to have a platform for them to manage their schedule and work in the school semester."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "acyang97"
        },
        "content": " - Users who can type fast."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "acyang97"
        },
        "content": " - Users who are reasonably comfortable using CLI applications. "
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "acyang97"
        },
        "content": "#### Value proposition"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "acyang97"
        },
        "content": "To help NUS Students by keeping them on track with their schedule and work on a daily basis using a CLI driven app."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "acyang97"
        },
        "content": "Thus, reducing the chances of them forgetting about any work related to school."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "acyang97"
        },
        "content": "### Appendix B: User Stories "
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "![](Images/userstories.PNG)"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "This is an example of how we originally tackle the user stories."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "* The green or orange highlight is to group similar features together"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "* The Strikethrough is when a feature is redundant or unneccessary at the stage of planning"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "acyang97"
        },
        "content": "### Appendix C: Non Functional Requirements"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "acyang97"
        },
        "content": "1. Should work on any *mainstream OS* as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "acyang97"
        },
        "content": "1. Should be quick enough to take in input from the user and show output for the user."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "acyang97"
        },
        "content": "1. A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should "
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "acyang97"
        },
        "content": "be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "acyang97"
        },
        "content": "### Appendix D: Glossary"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "acyang97"
        },
        "content": "* **Mainstream OS**: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "acyang97"
        },
        "content": "### Appendix E: Instructions for Manual Testing"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "acyang97"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "acyang97"
        },
        "content": "#### Initial Launch"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "acyang97"
        },
        "content": "1. Download the latest executable jar file from our latest release."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "acyang97"
        },
        "content": "1. Copy the jar file into an empty folder."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "acyang97"
        },
        "content": "1. Run the program using the command line by inputting `java -jar DueQuestv2.1jar`."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "acyang97"
        },
        "content": "1. You should see the following below"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "acyang97"
        },
        "content": "![](ManualTestingImages/InitialLaunch-1.JPG)"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "acyang97"
        },
        "content": "#### Adding a module"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "acyang97"
        },
        "content": "#### Positive Test"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "acyang97"
        },
        "content": "1. Enter `module c/CS2113 a/4 s/Dr.Akshay s/ChengChen` into the console and you should see the following below:"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "acyang97"
        },
        "content": "![](ManualTestingImages/AddingAModule-PositiveTest.JPG)"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "acyang97"
        },
        "content": "#### Negative Test 1: Duplicate module code"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "acyang97"
        },
        "content": "1. Enter `module c/CS2113 a/4 s/Dr.Akshay s/ChengChen` again into the console and you should see the following below:"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "acyang97"
        },
        "content": "![](ManualTestingImages/AddingAModule-NegativeTest-1.JPG)"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "acyang97"
        },
        "content": "#### Negative Test 2: Invalid module code"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "acyang97"
        },
        "content": "1. Enter `module c/cs2113 a/4 s/Dr.Akshay s/ChengChen` into the console and you should see the following below:"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "acyang97"
        },
        "content": "![](ManualTestingImages/AddingAModule-NegativeTest-2.JPG)"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "acyang97"
        },
        "content": "#### Negative Test 3: au not specified"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "acyang97"
        },
        "content": "1. Enter `module c/ST2113` into the console and you should see the following below:"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "acyang97"
        },
        "content": "![](ManualTestingImages/AddingAModule-NegativeTest-3.JPG)"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "acyang97"
        },
        "content": "#### Adding Tasks."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "acyang97"
        },
        "content": "There are three types of tasks to add: `Lesson`, `Event` and `Deadline`"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "acyang97"
        },
        "content": "#### Adding a Lesson"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "acyang97"
        },
        "content": "#### Positive Test"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "acyang97"
        },
        "content": "1. Enter `lesson online lecture CS2113 /on 5 16:00 18:00` into the console and you should see the following below:"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "acyang97"
        },
        "content": "![](ManualTestingImages/AddingALessonPositiveTest-1.JPG)"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "t170815518"
        },
        "content": "2. Enter `display CS2113` into the console and you should see if the lesson has been indeed added to the module. You should see the following below:"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "acyang97"
        },
        "content": "![](ManualTestingImages/AddingALessonPositiveTest-2.JPG)"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "acyang97"
        },
        "content": "#### Negative Test 1: A module code that does not exist in the ModuleManager"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "acyang97"
        },
        "content": "1. Enter `lesson online lecture MA2113 /on 5 16:00 18:00` into the console and you should see the following below:"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "acyang97"
        },
        "content": "![](ManualTestingImages/AddingALesson-NegativeTest1.JPG)"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "acyang97"
        },
        "content": "#### Negative Test 2: Invalid Start Time "
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "acyang97"
        },
        "content": "1. Enter `lesson online lecture CS2113 /on 5 16:aa 18:00` into the console and you should see the following below:"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "acyang97"
        },
        "content": "![](ManualTestingImages/AddingALesson-NegativeTest2.JPG)"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "acyang97"
        },
        "content": "#### Negative Test 3: Invalid frequency"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "acyang97"
        },
        "content": "1. Enter `lesson online lecture CS2113 /on 8 16:00 18:00` into the console and you should see the following below:"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "acyang97"
        },
        "content": "![](ManualTestingImages/AddingALesson-NegativeTest3.JPG)"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "acyang97"
        },
        "content": "#### Adding an Event"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "acyang97"
        },
        "content": "#### Positive Test"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "acyang97"
        },
        "content": "1. Enter `event CS2113 final exam /at 2021-05-03 14:00 16:00 LT14` into the console and you should see the following below:"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "acyang97"
        },
        "content": "![](ManualTestingImages/AddingAEvent-PositiveTest-1.JPG)"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "t170815518"
        },
        "content": "2. Enter `display /date 2021/05/03` into the console and to see that the event has been indeed added to the date. You should see the following below:"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "acyang97"
        },
        "content": "![](ManualTestingImages/AddingAEvent-PositiveTest-2.JPG)"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "t170815518"
        },
        "content": "3. Enter `display CS2113` into the console and to see that the event has been indeed added to the module. You should see the following below:"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "acyang97"
        },
        "content": "   *Note: The lesson added previously is still inside CS2113*"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "acyang97"
        },
        "content": "![](ManualTestingImages/AddingAEvent-PositiveTest-3.JPG)"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "acyang97"
        },
        "content": "#### Negative Test 1: A module code that does not exist in the ModuleManager"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "acyang97"
        },
        "content": "1. Enter `event MA3333 final exam /at 2021-05-03 14:00 16:00 LT14` into the console and you should see the following below:"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "acyang97"
        },
        "content": "![](ManualTestingImages/AddingAEvent-NegativeTest-1.JPG)"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "acyang97"
        },
        "content": "#### Negative Test 2: A date that is out of range (meaning not between 1 January 2021 and 31 May 2021)"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "acyang97"
        },
        "content": "1. Enter `event CS2113 final exam /at 2021-06-01 14:00 16:00 LT14` into the console and you should see the following below:"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "acyang97"
        },
        "content": "![](ManualTestingImages/AddingAEvent-NegativeTest-2.JPG)"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "acyang97"
        },
        "content": "#### Negative Test 3: A start time that is too early"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "acyang97"
        },
        "content": "1. Enter `event CS2113 final exam /at 2021-05-01 07:00 10:00 LT14` into the console and you should see the following below:"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "acyang97"
        },
        "content": "![](ManualTestingImages/AddingAEvent-NegativeTest-3.JPG)"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "acyang97"
        },
        "content": "#### Adding an Deadline"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "acyang97"
        },
        "content": "#### Positive Test"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "acyang97"
        },
        "content": "1. Enter `deadline CS2113 TP version 1 /by 2021-04-04` into the console and you should see the following below:"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "acyang97"
        },
        "content": "![](ManualTestingImages/AddingADeadline-PositiveTest-1.JPG)"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "t170815518"
        },
        "content": "2. Enter `display /date 2021/04/04` into the console and to see that the deadline has been indeed added to the date. You should see the following below:"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "acyang97"
        },
        "content": "![](ManualTestingImages/AddingADeadline-PositiveTest-2.JPG)"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "t170815518"
        },
        "content": "3. Enter `display CS2113` into the console to see that the deadline has been indeed added to the module. You should see the following below:"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "acyang97"
        },
        "content": "   *Note: the lesson and event added before this is still inside CS2113*"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "acyang97"
        },
        "content": "![](ManualTestingImages/AddingADeadline-PositiveTest-3.JPG)"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "acyang97"
        },
        "content": "#### Negative Test 1: deadline with empty description"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "acyang97"
        },
        "content": "1. Enter `deadline CS2113  /by 2021-04-04` into the console and you should see the following below:"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "acyang97"
        },
        "content": "![](ManualTestingImages/AddingADeadline-NegativeTest-1.JPG)"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "acyang97"
        },
        "content": "#### Negative Test 2: deadline with invalid date format"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "acyang97"
        },
        "content": "1. Enter `deadline CS2113 TP version 1 /by 2021-4-4` into the console and you should see the following below:"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "acyang97"
        },
        "content": "![](ManualTestingImages/AddingADeadline-NegativeTest-2.JPG)"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "acyang97"
        },
        "content": "#### Adding an Assessment"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "acyang97"
        },
        "content": "#### Positive Test"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "acyang97"
        },
        "content": "1. Enter `assessment CS2113 TP 100` into the console and you should see the following below:"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "acyang97"
        },
        "content": "![](ManualTestingImages/AddingAnAssessment-PositiveTest-1.JPG)"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "t170815518"
        },
        "content": "2. Enter `display CS2113` into the console to see if the assessment has been indeed added. You should see the following below:"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "acyang97"
        },
        "content": "   *Note: the lesson, event and deadline added before is still inside CS2113*"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "acyang97"
        },
        "content": "![](ManualTestingImages/AddingAnAssessment-PositiveTest-2.JPG)"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "acyang97"
        },
        "content": "#### Negative Test 1: Missing assessment title name"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "acyang97"
        },
        "content": "1. Enter `assessment CS2113 100` into the console and you should see the following below:"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "acyang97"
        },
        "content": "![](ManualTestingImages/AddingAnAssessment-NegativeTest-1.JPG)"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "acyang97"
        },
        "content": "#### Add score to an assessment"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "acyang97"
        },
        "content": "#### Positive Test"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "acyang97"
        },
        "content": "1. Enter `score CS2113 TP 100` into the console and you should see the following below:"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "acyang97"
        },
        "content": "![](ManualTestingImages/AddScoreToAnAssessment-PositiveTest-1.JPG)"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "t170815518"
        },
        "content": "2. Enter `display CS2113` into the console to see if the score of the assessment has been indeed added. You should see the following below:"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "acyang97"
        },
        "content": "![](ManualTestingImages/AddScoreToAnAssessment-PositiveTest-2.JPG)"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "acyang97"
        },
        "content": "#### Negative Test 1: Adding score to an assessment with a title that does not exist in the module."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "acyang97"
        },
        "content": "1. Enter `score CS2113 aa 100` into the console and you should see the following below:"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "acyang97"
        },
        "content": "![](ManualTestingImages/AddScoreToAnAssessment-NegativeTest-1.JPG)"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "acyang97"
        },
        "content": "#### Negative Test 2: Adding score to an assessment to a module that does not exist"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "acyang97"
        },
        "content": "1. Enter `score CT2113 TP 100` into the console and you should see the following below:"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "acyang97"
        },
        "content": "![](ManualTestingImages/AddScoreToAnAssessment-NegativeTest-2.JPG)"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "acyang97"
        },
        "content": "#### Delete an assessment"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "acyang97"
        },
        "content": "#### Positive Test"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "acyang97"
        },
        "content": "1. Enter `delete_assessment CS2113 TP` into the console and you should see the following below:"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "acyang97"
        },
        "content": "![](ManualTestingImages/DeleteAnAssessment-PositiveTest-1.JPG)"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "t170815518"
        },
        "content": "2. Enter `display CS2113` into the console to see if the assessment has been indeed deleted. You should see the following below:"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "acyang97"
        },
        "content": "![](ManualTestingImages/DeleteAnAssessment-PositiveTest-2.JPG)"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "acyang97"
        },
        "content": "#### Negative Test 1: Deleting of an assessment that does not exist"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "acyang97"
        },
        "content": "1. Enter `delete_assessment CS2113 minitest` into the console and you should see the following below:"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "acyang97"
        },
        "content": "![](ManualTestingImages/DeleteAnAssessment-NegativeTest-1.JPG)"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "acyang97"
        },
        "content": "#### Display"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "acyang97"
        },
        "content": "#### Positive Test"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "acyang97"
        },
        "content": "1. Enter `display CS2113` into the console and you should see the following below:"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "acyang97"
        },
        "content": "![](ManualTestingImages/Display-PositiveTest-1.JPG)"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "acyang97"
        },
        "content": "#### Negative Test 1: Module code that does not exist"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "acyang97"
        },
        "content": "1. Enter `display CS2113T` into the console and you should see the following below:"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "acyang97"
        },
        "content": "![](ManualTestingImages/Display-NegativeTest-1.JPG)"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "acyang97"
        },
        "content": "#### Display all the task in a module on a date"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "acyang97"
        },
        "content": "#### Positive Test"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "acyang97"
        },
        "content": "1. Enter `display CS2113 /date 2021/04/04` into the console and you should see the following below:"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "acyang97"
        },
        "content": "![](ManualTestingImages/DisplayAllTheTaskInAModuleOnADate-PositiveTest-1.JPG)"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "acyang97"
        },
        "content": "#### Negative Test 1: Invalid date"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "acyang97"
        },
        "content": "1. Enter `display CS2113 /date 2021/04/0a` into the console and you should see the following below:"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "acyang97"
        },
        "content": "![](ManualTestingImages/DisplayAllTheTaskInAModuleOnADate-NegativeTest-1.JPG)"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "acyang97"
        },
        "content": "#### Display all the task on a date"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "acyang97"
        },
        "content": "#### Positive Test"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "acyang97"
        },
        "content": "1. Enter `display /date 2021/05/03` into the console and you should see the following below:"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "acyang97"
        },
        "content": "![](ManualTestingImages/DisplayAllTheTaskOnADate-PositiveTest-1.JPG)"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "acyang97"
        },
        "content": "#### Negative Test 1: Invalid Date: Date not between 1 January 2021 and 31 May 2021"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "acyang97"
        },
        "content": "1. Enter `display /date 2020/12/31` into the console and you should see the following below:"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "acyang97"
        },
        "content": "![](ManualTestingImages/DisplayAllTheTaskOnADate-NegativeTest-1.JPG)"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "acyang97"
        },
        "content": "#### Display all the task on a range of date"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "acyang97"
        },
        "content": "#### Positive Test"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "acyang97"
        },
        "content": "1. Enter `display /date 2021/05/02-2021/05/05` into the console and you should see the following below:"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "acyang97"
        },
        "content": "![](ManualTestingImages/DisplayAllTheTaskOnARangeOfDate-PositiveTest-1.JPG)"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "acyang97"
        },
        "content": "#### Negative Test 1: Invalid date format"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "acyang97"
        },
        "content": "1. Enter `display /date 2021/00/02-2021/06/05` into the console and you should see the following below:"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "acyang97"
        },
        "content": "![](ManualTestingImages/DisplayAllTheTaskOnARangeOfDate-NegativeTest-1.JPG)"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "acyang97"
        },
        "content": "#### Editing a task"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "acyang97"
        },
        "content": "**Important! Please do the following before carrying on with the rest of the tests for this section.**"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "acyang97"
        },
        "content": "1. Enter `delete c/CS2113` into the console and you should see the following below:"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "acyang97"
        },
        "content": "![](ManualTestingImages/EditingATask-1.JPG)"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "t170815518"
        },
        "content": "2. Enter `module c/CS2113 a/4` to add the module and you should see the following below:"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "acyang97"
        },
        "content": "![](ManualTestingImages/EditingATask-2.JPG)"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "acyang97"
        },
        "content": "#### Edit the date of a task with description"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "acyang97"
        },
        "content": "#### Positive Test"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "acyang97"
        },
        "content": "1. Enter `deadline CS2113 tp /by 2021-04-20` into the console and you should see the following below:"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "acyang97"
        },
        "content": "![](ManualTestingImages/EditingDateOfTaskWithDescription-PositiveTest-1.JPG)"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "t170815518"
        },
        "content": "2. Enter `edit tp /date 2021-04-20 /date /2021-04-21` into the console and you should see the following below:"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "acyang97"
        },
        "content": "![](ManualTestingImages/EditingDateOfTaskWithDescription-PositiveTest-2.JPG)"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "t170815518"
        },
        "content": "3. Enter `display CS2113` into the console to check if the date of the task tp has been indeed changed in the module, and you should see the following below:"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "acyang97"
        },
        "content": "![](ManualTestingImages/EditingDateOfTaskWithDescription-PositiveTest-3.JPG)"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "t170815518"
        },
        "content": "4. Enter `display /date 2021/04/21` into the console to check if the date of the task tp has been indeed changed in the date, and you should see the following below:"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "acyang97"
        },
        "content": "![](ManualTestingImages/EditingDateOfTaskWithDescription-PositiveTest-4.JPG)"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "acyang97"
        },
        "content": "#### Negative Test 1: Description that does not match any task"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "acyang97"
        },
        "content": "1. Enter `edit team_pro /date 2021-04-20 /date /2021-04-21` into the console and you should see the following below:"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "acyang97"
        },
        "content": "![](ManualTestingImages/EditingDateOfTaskWithDescription-NegativeTest-1.JPG)"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "acyang97"
        },
        "content": "#### Edit the date of a task with description and module code"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "acyang97"
        },
        "content": "#### Positive Test"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "acyang97"
        },
        "content": "*Note: We carry on from the previous example, so there exist a task on 2021/04/21 tp from before*"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "acyang97"
        },
        "content": "1. Enter `edit c/CS2113 tp /date 2021-04-21 /date /2021-04-20` into the console and you should see the following below:"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "acyang97"
        },
        "content": "![](ManualTestingImages/EditingDateOfTaskWithDescriptionAndModuleCode-PositiveTest-1.JPG)"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "t170815518"
        },
        "content": "2. Enter `display CS2113` into the console to check if the date of the task tp has been indeed changed in the module, and you should see the following below:"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "acyang97"
        },
        "content": "![](ManualTestingImages/EditingDateOfTaskWithDescriptionAndModuleCode-PositiveTest-2.JPG)"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "t170815518"
        },
        "content": "3. Enter `display /date 2021/04/20` into the console to check if the date of the task tp has been indeed changed in the date, and you should see the following below:"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "acyang97"
        },
        "content": "![](ManualTestingImages/EditingDateOfTaskWithDescriptionAndModuleCode-PositiveTest-3.JPG)"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "t170815518"
        },
        "content": "4. Enter `display /date 2021/04/21` into the console to check if the date of the task tp has been indeed changed in the date, and you should see the following below:"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "acyang97"
        },
        "content": "![](ManualTestingImages/EditingDateOfTaskWithDescriptionAndModuleCode-PositiveTest-4.JPG)"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "acyang97"
        },
        "content": "#### Negative Test 1: Invalid module code"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "acyang97"
        },
        "content": "1. Enter `edit c/CS2114 tp /date 2021-04-20 /date /2021-04-21` into the console and you should see the following below:"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "acyang97"
        },
        "content": "![](ManualTestingImages/EditingDateOfTaskWithDescriptionAndModuleCode-NegativeTest-1.JPG)"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "acyang97"
        },
        "content": "#### Deleting tasks"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "acyang97"
        },
        "content": "**Important! Please do the following before carrying on with the rest of the tests for this section.**"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "acyang97"
        },
        "content": "1. Enter `delete c/CS2113` into the console and you should see the following below:"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "acyang97"
        },
        "content": "![](ManualTestingImages/DeletingTasks-1.JPG)"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "t170815518"
        },
        "content": "2. Enter `module c/CS2113 a/4` to add the module and you should see the following below:"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "acyang97"
        },
        "content": "![](ManualTestingImages/DeletingTasks-2.JPG)"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "acyang97"
        },
        "content": "#### Deleting task via description"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "acyang97"
        },
        "content": "#### Positive Test"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "acyang97"
        },
        "content": "1. Enter `deadline CS2113 tp /by 2021-04-20` into the console and you should see the following below:"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "acyang97"
        },
        "content": "![](ManualTestingImages/DeletingTaskViaDescription-PositiveTest-1.JPG)"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "t170815518"
        },
        "content": "2. Enter `delete tp` into the console and you should see the following below:"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "acyang97"
        },
        "content": "![](ManualTestingImages/DeletingTaskViaDescription-PositiveTest-2.JPG)"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "t170815518"
        },
        "content": "3. Enter `display CS2113` into the console to check if the date of the task tp has been indeed deleted in the module, and you should see the following below:   "
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "t170815518"
        },
        "content": "   *Note: Notice that the deadline has been deleted*   "
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "acyang97"
        },
        "content": "![](ManualTestingImages/DeletingTaskViaDescription-PositiveTest-3.JPG)"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "t170815518"
        },
        "content": "4. Enter `display /date 2021/04/20` into the console to check if the date of the task tp has been indeed deleted in the date, and you should see the following below:"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "acyang97"
        },
        "content": "![](ManualTestingImages/DeletingTaskViaDescription-PositiveTest-4.JPG)"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "acyang97"
        },
        "content": "#### Negative test 1: deleting task with description that does not exist in the app"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "acyang97"
        },
        "content": "1. Add back the deadline by entering `deadline CS2113 tp /by 2021-04-20` into the console and you should see the following below:"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "acyang97"
        },
        "content": "![](ManualTestingImages/DeletingTaskViaDescription-NegativeTest-1.JPG)"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "t170815518"
        },
        "content": "2. Enter `delete tpp` into the console and you should see the following below:"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "acyang97"
        },
        "content": "![](ManualTestingImages/DeletingTaskViaDescription-NegativeTest-2.JPG)"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "acyang97"
        },
        "content": "#### Deleting task via description and date"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "acyang97"
        },
        "content": "*Note: Remember that there is already a deadline that was not deleted in the earlier part*"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "acyang97"
        },
        "content": "#### Positive test"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "acyang97"
        },
        "content": "1. Enter `delete tp /date 2021-04-20` into the console and you should see the following below:"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "acyang97"
        },
        "content": "![](ManualTestingImages/DeletingTaskViaDescriptionAndDate-PositiveTest-1.JPG)"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "t170815518"
        },
        "content": "2. Enter `display CS2113` into the console to check if the date of the task tp has been indeed deleted in the module, and you should see the following below:"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "acyang97"
        },
        "content": "![](ManualTestingImages/DeletingTaskViaDescriptionAndDate-PositiveTest-2.JPG)"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "t170815518"
        },
        "content": "3. Enter `display /date 2021/04/20` into the console to check if the date of the task tp has been indeed deleted in the date, and you should see the following below:"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "acyang97"
        },
        "content": "   *Note: Notice that the deadline has been deleted*"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "acyang97"
        },
        "content": "![](ManualTestingImages/DeletingTaskViaDescriptionAndDate-PositiveTest-3.JPG)"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "acyang97"
        },
        "content": "#### Negative Test 1:Invalid date"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "acyang97"
        },
        "content": "1. Add back the deadline by entering `deadline CS2113 tp /by 2021-04-20` into the console and you should see the following below:"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "acyang97"
        },
        "content": "![](ManualTestingImages/DeletingTaskViaDescriptionAndDate-NegativeTest-1.JPG)"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "t170815518"
        },
        "content": "2. Enter `delete tp /date 2021-04-aa` into the console and you should see the following below:"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "acyang97"
        },
        "content": "![](ManualTestingImages/DeletingTaskViaDescriptionAndDate-NegativeTest-2.JPG)"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "acyang97"
        },
        "content": "#### Delete all of a module\u0027s task on a certain date"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "acyang97"
        },
        "content": "*Note: Remember that there is already a deadline that was not deleted in the earlier part*"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "acyang97"
        },
        "content": "1. Add another deadline by entering `deadline CS2113 tp jar file /by 2021-04-20` into the console and you should see the following below:"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "acyang97"
        },
        "content": "![](ManualTestingImages/DeleteAllTaskOnDate-PositiveTest-1.JPG)"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "t170815518"
        },
        "content": "2. Enter `delete c/CS2113 /date 2021-04-20` into the console and you should see the following below:"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "acyang97"
        },
        "content": "![](ManualTestingImages/DeleteAllTaskOnDate-PositiveTest-2.JPG)"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "t170815518"
        },
        "content": "3. Enter `display CS2113` into the console to check if the date of the task tp has been indeed deleted in the module, and you should see the following below:"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "t170815518"
        },
        "content": "   *Note: Notice all the tasks of CS2113 has been deleted)*"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "acyang97"
        },
        "content": "![](ManualTestingImages/DeleteAllTaskOnDate-PositiveTest-3.JPG)"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "t170815518"
        },
        "content": "4. Enter `display /date 2021/04/20` into the console to check if the date of the task tp has been indeed deleted in the date, and you should see the following below:"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "t170815518"
        },
        "content": "   *Note: Notice all the tasks of on 2021/04/20 has been deleted)*"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "acyang97"
        },
        "content": "![](ManualTestingImages/DeleteAllTaskOnDate-PositiveTest-4.JPG)"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "acyang97"
        },
        "content": "#### Negative Test 1: Invalid date"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "acyang97"
        },
        "content": "1. Add back the deadline by entering `deadline CS2113 tp /by 2021-04-20` into the console and you should see the following below:"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "acyang97"
        },
        "content": "![](ManualTestingImages/DeleteAllTaskOnDate-NegativeTest-1.JPG)"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "t170815518"
        },
        "content": "2. Enter `delete c/CS2113 /date 2021-04-2a` into the console and you should see the following below:"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "acyang97"
        },
        "content": "![](ManualTestingImages/DeleteAllTaskOnDate-NegativeTest-2.JPG)"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "acyang97"
        },
        "content": "#### Delete all of a module\u0027s task\u0027s with fitting description, on a certain date"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "acyang97"
        },
        "content": "*Note: Remember that there is already a deadline that was not deleted in the earlier part*"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "acyang97"
        },
        "content": "#### Positive Test"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "acyang97"
        },
        "content": "1. Add another deadline by entering `deadline CS2113 tp dg /by 2021-04-25` into the console and you should see the following below:"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "acyang97"
        },
        "content": "![](ManualTestingImages/DeleteAllTaskWithFittingDescription-PositiveTest-1.JPG)"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "t170815518"
        },
        "content": "2. Enter `delete c/CS2113 tp /date 2021-04-20` into the console and you should see the following below:"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "acyang97"
        },
        "content": "![](ManualTestingImages/DeleteAllTaskWithFittingDescription-PositiveTest-2.JPG)"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "t170815518"
        },
        "content": "3. Enter `display CS2113` into the console to check if the date of the task tp has been indeed deleted in the module, and you should see the following below:"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "acyang97"
        },
        "content": "![](ManualTestingImages/DeleteAllTaskWithFittingDescription-PositiveTest-3.JPG)"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "t170815518"
        },
        "content": "4. Enter `display /date 2021/04/20` into the console to check if the date of the task tp has been indeed deleted in the date, and you should see the following below:"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "acyang97"
        },
        "content": "![](ManualTestingImages/DeleteAllTaskWithFittingDescription-PositiveTest-4.JPG)"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "acyang97"
        },
        "content": "#### Negative Test: Invalid date"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "acyang97"
        },
        "content": "*Note: Remember that you still have the deadline tp dg by 2021-04-25 in the app*"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "acyang97"
        },
        "content": "1. Enter `delete c/CS2113 tp /date 2021-04-2a` into the console and you should see the following below:"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "acyang97"
        },
        "content": "![](ManualTestingImages/DeleteAllTaskWithFittingDescription-NegativeTest-1.JPG)"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "acyang97"
        },
        "content": "#### Deleting entire module"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "acyang97"
        },
        "content": "#### Positive Test"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "acyang97"
        },
        "content": "1. Enter `delete c/CS2113` into the console and you should see the following below:"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "acyang97"
        },
        "content": "![](ManualTestingImages/DeleteModule-PositiveTest-1.JPG)"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "t170815518"
        },
        "content": "2. Enter `display CS2113` into the console to check if the date of the task tp has been indeed deleted in the module, and you should see the following below:"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "acyang97"
        },
        "content": "![](ManualTestingImages/DeleteModule-PositiveTest-2.JPG)"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "acyang97"
        },
        "content": "#### Negative Test: Module code that does not exist in the app"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "acyang97"
        },
        "content": "1. Add the module back by entering `module c/CS2113 a/4` into the console and you should see the following below:"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "acyang97"
        },
        "content": "![](ManualTestingImages/DeleteModule-NegativeTest-1.JPG)"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "t170815518"
        },
        "content": "2. Enter `delete c/CS2113T` into the console and you should see the following below:"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "acyang97"
        },
        "content": "![](ManualTestingImages/DeleteModule-NegativeTest-2.JPG)"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "acyang97"
        },
        "content": "#### Exiting the app"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "acyang97"
        },
        "content": "#### Positive Test"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "acyang97"
        },
        "content": "1. Enter `bye` into the console and you should see the following below:"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "acyang97"
        },
        "content": "![](ManualTestingImages/Bye-PositiveTest-1.JPG)"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "acyang97"
        },
        "content": "#### Negative Test 1: Invalid input"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "acyang97"
        },
        "content": "1. Enter `byee` into the console and you should see the following below:"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "acyang97"
        },
        "content": "![](ManualTestingImages/Bye-NegativeTest-1.JPG)"
      }
    ],
    "authorContributionMap": {
      "t170815518": 69,
      "haroic1997": 4,
      "-": 36,
      "acyang97": 667
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "acyang97"
        },
        "content": "# DueQuest"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "acyang97"
        },
        "content": "**DueQuest** is an application which helps NUS students manage their schedule in the semester"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "acyang97"
        },
        "content": "as well as tasks related to their modules that they are taking. "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Useful links:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "* [User Guide](UserGuide.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "* [Developer Guide](DeveloperGuide.md)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "* [About Us](AboutUs.md)"
      }
    ],
    "authorContributionMap": {
      "-": 6,
      "acyang97": 3
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "t170815518"
        },
        "content": "**Command Sumary** "
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "t170815518"
        },
        "content": "![](Images/toc.jpg)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "t170815518"
        },
        "content": "**DueQuest** is an application which helps NUS students manage their schedule in the semester"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "acyang97"
        },
        "content": "as well as tasks related to their modules that they are taking. DueQuest is made specific for AY2020/2021 semester 2."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## Quick Start"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "t170815518"
        },
        "content": "1. Ensure that you have Java 11 or above installed on the machine."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "t170815518"
        },
        "content": "1. Down the latest version of `DueQuest` from [here](https://github.com/AY2021S1-CS2113-T13-4/tp/releases), and put the jar file into a directory."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "t170815518"
        },
        "content": "1. Type `java -jar DueQuest_v2.1.jar` to start the app "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "t170815518"
        },
        "content": "---"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "t170815518"
        },
        "content": "## Storage "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "t170815518"
        },
        "content": "The storage directory that contains storage files (in `.txt` format) can be specified when launching `java -jar DueQuest.jar SPECIFIED_DIR`. "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "t170815518"
        },
        "content": "+ By default, the directory is `data` in the current working directory. "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "t170815518"
        },
        "content": "+ In the storage directory, each module will have a txt file that contains related information (e.g. information and tasks), as well as `additional.txt` is for commands such as delete or edit certain tasks on certain dates. "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "t170815518"
        },
        "content": "+ The information will be imported and exported automatically by the app. "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "t170815518"
        },
        "content": "+ If you see the error message when loading, such as `No proper comman detected`, please check if the files are modified accidentally or try deleting the files to make the app before launching again. "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "t170815518"
        },
        "content": "## Add a Module: `module`"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "acyang97"
        },
        "content": "A module can be added into the Module Manager using the command below. You should start adding modules first before you can use most of the other features after this section."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "t170815518"
        },
        "content": "Format: `module c/MODULECODE a/AU_NUM  [t/TITLE] [s/TEACHING_STAFF]`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "t170815518"
        },
        "content": "+ `MODULECODE` must be given, and it should be unique. "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "t170815518"
        },
        "content": "  + There are 3 types of valid module codes. "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    * 6 characters long. The first 2 characters are alphabets. The last 4 characters are digits. Example: CS2113"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    * 7 characters long. The first 3 characters are alphabets. The last 4 characters are digits. Example: DSA4211"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    * 7 characters long. The first 2 characters are alphabets. The next 4 characters are digits. The last character is an alphabet. The  Example: CS2113T."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    * Alphabets in the module code should be all in capital letters. "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "t170815518"
        },
        "content": "+ **`AU_NUM` must given and should be a positive integer**, meaning it has to be more to more than zero. This has to be specified in the input."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "t170815518"
        },
        "content": "+ **`TITLE` shouldn\u0027t contain any whitespace**, e.g. `t/SE OOP` should be replaced by `t/SE_OOP` or `t/SE-OOP`   "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "t170815518"
        },
        "content": "+ `TEACHING_STAFF` is optional, and multiple `[s/TEACHING_STAFF]` are supported, e.g. `module c/ST2113 a/4 s/Dr.Lim s/ChengChen`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "+ You cannot add two modules of the same name, an error message will appear if this is attempted."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "t170815518"
        },
        "content": "Example Usage: "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "t170815518"
        },
        "content": "`module c/ST2113 a/4 s/Dr.Lim s/ChengChen`"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "t170815518"
        },
        "content": "```"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "t170815518"
        },
        "content": "module c/ST2113 a/4 s/Dr.Lim s/ChengChen        "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "t170815518"
        },
        "content": "added: ST2113"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "t170815518"
        },
        "content": "Successfully added to Module Manager! Have fun suffering from "
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "t170815518"
        },
        "content": "Course: ST2113"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "t170815518"
        },
        "content": "Title: null"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "t170815518"
        },
        "content": "AU: 4"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "t170815518"
        },
        "content": "Teaching Staffs: [Dr.Lim, ChengChen]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "t170815518"
        },
        "content": "Assessment : "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "t170815518"
        },
        "content": "Here are your modules you are currently taking! "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "t170815518"
        },
        "content": "[ST2113]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "t170815518"
        },
        "content": "```"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "t170815518"
        },
        "content": "```"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "t170815518"
        },
        "content": "module c/ST2113 a/4 "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "t170815518"
        },
        "content": "The module with the same code already exists."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "t170815518"
        },
        "content": "```"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "t170815518"
        },
        "content": "## Task"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "acyang97"
        },
        "content": "A Task can be a Lesson, Event or Deadline. "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "acyang97"
        },
        "content": "**You can only add tasks with dates from 1 January 2021 to 31 May 2021.**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "t170815518"
        },
        "content": "+ Lessons are classes that are held **on every week** in your timetable."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "t170815518"
        },
        "content": "+ Events are one-off, they only take place on a single day."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "t170815518"
        },
        "content": "+ Deadline are assignments where there is a due date."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "acyang97"
        },
        "content": "## Adding tasks"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "acyang97"
        },
        "content": "A task can be added into both the Schedule Manager and Module Manager using the commands below."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "The Schedule Manager and Module Manager both share the same database, but can be used separately."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "+ Schedule Manager primarily handles tasks. It can handle tasks with \"module\" attributes, but it mainly handles tasks operations"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "+ Module Manager primarily handles modules. It can be used to handle both module information as well as tasks."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "acyang97"
        },
        "content": "Please make sure that you have added already added the module as explained in the earlier Add a Module section first,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "else you will not be able to add the task. An error message will appear if you attempt to do so."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "t170815518"
        },
        "content": "## Adding a lesson: `lesson`"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "acyang97"
        },
        "content": "Adds a new Lesson into both your Schedule Manager and Module Manager."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "acyang97"
        },
        "content": "Lesson will only be added into weeks when there are lessons conducted according to the NUS curriculum. "
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "acyang97"
        },
        "content": "This means that the lesson will not be added  into dates during Reading Weeks, Vacation, and Examination weeks."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "acyang97"
        },
        "content": "If there is a clash in timings detected (the time of the lesson to be added clashes with another lesson or event), the"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "acyang97"
        },
        "content": "lesson will not be added."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "acyang97"
        },
        "content": "`lesson DESCRIPTION MODULECODE /on DAYOFWEEK  STARTTIME ENDTIME`"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "acyang97"
        },
        "content": "* Please make sure that you do not leave the `DESCRIPTION` blank."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "acyang97"
        },
        "content": "* Please ensure that your `MODULECODE` is a valid module code in NUS. Refer to the earlier section in Add a Module to find out what is a valid module code."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "acyang97"
        },
        "content": "* The `DAYOFWEEK` is the Day Of Week when the lesson is conducted on, starting from Monday (e.g. 1). Please type in an integer, meaning if the lesson is held on Thursday, type in 4. If the lesson is held on Wednesday, type in 3."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "acyang97"
        },
        "content": "* The `START_TIME` and `END_TIME` are both in `HH:MM` format. If you want `START_TIME` to be 4pm, input `16:00`. You are only allowed to type in timings such that `MM` is `00`. For example, `18:00` is allowed but not `18:01`. "
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "acyang97"
        },
        "content": "* For this app, you are not allowed to type in a `START_TIME` and `END_TIME` before 8am.  "
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "acyang97"
        },
        "content": "Examples of Usage:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "acyang97"
        },
        "content": "Assuming that you have already added the modules that are in the examples(namely CS2113 and CS1234)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "acyang97"
        },
        "content": "* If you want to add a CS2113 online lecture lesson which starts at 4pm and ends at 6pm, held on every Friday (every 7 days): `lesson online lecture CS2113 /on 5 16:00 18:00`."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "acyang97"
        },
        "content": "* If you want to add a CS1234 online tutorial lesson which starts at 8am and ends at 10am, held on every Thursday (every 7 days): `lesson online tutorial CS1234 /on 4 08:00 10:00`"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "t170815518"
        },
        "content": "Example Usage:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "t170815518"
        },
        "content": "```"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "acyang97"
        },
        "content": "lesson online lecture CS2113 /on 5 16:00 18:00"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "t170815518"
        },
        "content": "Got it, added lesson to the Schedule Manager and Module Manager!"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "t170815518"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "t170815518"
        },
        "content": "lesson online tutorial ST2113 /on 4 08:00 10:00"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "t170815518"
        },
        "content": "Got it, added lesson to the Schedule Manager and Module Manager!"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "```"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "+ If you try to add a lesson that already exist"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "```"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "t170815518"
        },
        "content": "lesson online tutorial CS2113 /on 4 08:00 10:00        "
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "Clashes detected, task is not added."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "t170815518"
        },
        "content": "```"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "t170815518"
        },
        "content": "## Adding an event: `event`"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "acyang97"
        },
        "content": "Adds an Event associated with a module into the Schedule Manager and Module Manager."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "acyang97"
        },
        "content": "If there is a clash in timings detected (the time of the event to be added clashes with another lesson or event), the"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "acyang97"
        },
        "content": "event will not be added."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "t170815518"
        },
        "content": "Format: `event MODULE_CODE DESCRIPTION /at DATE_OF_EVENT START_TIME END_TIME LOCATION_OF_EVENT`"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "acyang97"
        },
        "content": "* Please ensure that your `MODULECODE` is a valid module code in NUS."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "acyang97"
        },
        "content": "  + There are 3 types of valid module codes. "
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    * 6 characters long. The first 2 characters are alphabets. The last 4 characters are digits. Example: CS2113"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    * 7 characters long. The first 3 characters are alphabets. The last 4 characters are digits. Example: DSA4211"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    * 7 characters long. The first 2 characters are alphabets. The next 4 characters are digits. The last character is an alphabet. The  Example: CS2113T."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    * Alphabets in the module code should be all in capital letters. "
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "acyang97"
        },
        "content": "* Please make sure that you do not leave the `DESCRIPTION` blank."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "acyang97"
        },
        "content": "* `DATE_OF_EVENT` is in `YYYY-MM-DD` format. For example, if you want to add an event on 10th April 2021, type in `2021-04-10`."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "acyang97"
        },
        "content": "* Please ensure that `DATE_OF_EVENT` is between `2021/01/01` to `2021/05/31` as well."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "acyang97"
        },
        "content": "* The `START_TIME` and `END_TIME` are both in `HH:MM` format. If you want `START_TIME` to be 4pm, input `16:00`. You are only allowed to type in timings such that `MM` is `00`. For example, `18:00` is allowed but not `18:01`. "
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "acyang97"
        },
        "content": "* For this app, you are not allowed to type in a `START_TIME` and `END_TIME` before 8am.  "
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "acyang97"
        },
        "content": "* Please ensure that you do not leave `LOCATION_OF_EVENT` blank."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "t170815518"
        },
        "content": "Example Usage:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "acyang97"
        },
        "content": "* If you want to add an event called final exam for module CS2113 at 3rd May 2021, from 2pm to 4pm at LT14, input"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "t170815518"
        },
        "content": " `event CS2113 final exam /at 2021-05-03 14:00 16:00 LT14`"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "t170815518"
        },
        "content": "```"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "t170815518"
        },
        "content": "event CS2113 final exam /at 2021-05-03 14:00 16:00 LT14"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "t170815518"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "t170815518"
        },
        "content": "Event added to both Schedule manager and Module manager"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "t170815518"
        },
        "content": "```"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "* If you try to add a lesson that already exist"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "```"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "event ST2113 final exam /at 2021-05-03 14:00 16:00 LT14"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "Clashes detected, task is not added."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "```"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "t170815518"
        },
        "content": "## Adding a deadline: `deadline`"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "acyang97"
        },
        "content": "Adds a deadline of an assignment into the Schedule Manager and Module Manager."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "acyang97"
        },
        "content": "Format: `deadline MODULECODE DESCRIPTION /by DATE_OF_DEADLINE `"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "acyang97"
        },
        "content": "* Please ensure that your `MODULECODE` is a valid module code in NUS."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "acyang97"
        },
        "content": "   + There are 3 types of valid module codes. "
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * 6 characters long. The first 2 characters are alphabets. The last 4 characters are digits. Example: CS2113"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * 7 characters long. The first 3 characters are alphabets. The last 4 characters are digits. Example: DSA4211"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * 7 characters long. The first 2 characters are alphabets. The next 4 characters are digits. The last character is an alphabet. The  Example: CS2113T."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * Alphabets in the module code should be all in capital letters. "
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "acyang97"
        },
        "content": "* Please make sure that you do not leave the `DESCRIPTION` blank."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "acyang97"
        },
        "content": "* `DATE_OF_DEADLINE` is in `YYYY-MM-DD` format. For example, if you want to add a deadline on 10th April 2021, type in `2021-04-10`."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "acyang97"
        },
        "content": "* Please ensure that `DATE_OF_EVENT` is between `2021/01/01` to `2021/05/31` as well."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "* You **can** add more than one of the same deadline to the same day and time. This is not a bug."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "t170815518"
        },
        "content": "Examples input:"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "t170815518"
        },
        "content": "* If you want to add a deadline for CS2113 for TP at 4th April 2021, input `deadline CS2113 TP /by 2021-04-04`"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "t170815518"
        },
        "content": "```"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "t170815518"
        },
        "content": "deadline CS2113 TP /by 2021-04-04"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "t170815518"
        },
        "content": "Got it, added deadline to Schedule Manager and Module Manager"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "t170815518"
        },
        "content": "display CS2113"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "t170815518"
        },
        "content": "Course: CS2113"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "t170815518"
        },
        "content": "Title: null"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "t170815518"
        },
        "content": "AU: 4"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "t170815518"
        },
        "content": "Teaching Staffs: []"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "t170815518"
        },
        "content": "Assessment : "
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "t170815518"
        },
        "content": "test_case(0.00/1.00)"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "t170815518"
        },
        "content": "The list of task in CS2113:"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "t170815518"
        },
        "content": "[L] online lecture - CS2113 FRIDAY 16:00 18:00"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "t170815518"
        },
        "content": "[D] TP - CS2113  (by: 2021-04-04)"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "t170815518"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "```"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "acyang97"
        },
        "content": "## Adding an assessment: `assessment` "
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "t170815518"
        },
        "content": "Adds assessment (e.g. assignments and exams) to a module "
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "t170815518"
        },
        "content": "Format: `assessment MODULECODE TITLE FULL_SCORE`"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "t170815518"
        },
        "content": "Note: "
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "acyang97"
        },
        "content": "+ Please ensure that your `MODULECODE` is a valid module code in NUS."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "acyang97"
        },
        "content": "  + There are 3 types of valid module codes. "
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    * 6 characters long. The first 2 characters are alphabets. The last 4 characters are digits. Example: CS2113"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    * 7 characters long. The first 3 characters are alphabets. The last 4 characters are digits. Example: DSA4211"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    * 7 characters long. The first 2 characters are alphabets. The next 4 characters are digits. The last character is an alphabet. The  Example: CS2113T."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    * Alphabets in the module code should be all in capital letters. "
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "t170815518"
        },
        "content": "+ The input should match the order specified in the format "
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "t170815518"
        },
        "content": "+ The title shouldn\u0027t contain any whitespace "
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "t170815518"
        },
        "content": "+ `FULL_SCORE` is  float, the maximum score the student can obtain of the assessment "
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "t170815518"
        },
        "content": "Example Input:"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "t170815518"
        },
        "content": "`assessment CS2113 TP 100` "
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "t170815518"
        },
        "content": "Example output:"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "```"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "assessment CS2113 TP 100"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "t170815518"
        },
        "content": "Done. The assessment TP has been made."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "t170815518"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "t170815518"
        },
        "content": "display CS2113"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "t170815518"
        },
        "content": "Course: CS2113"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "t170815518"
        },
        "content": "Title: null"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "t170815518"
        },
        "content": "AU: 4"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "t170815518"
        },
        "content": "Teaching Staffs: []"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "t170815518"
        },
        "content": "Assessment : "
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "t170815518"
        },
        "content": "TP(0.00/100.00)"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "t170815518"
        },
        "content": "The list of task in CS2113:"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "t170815518"
        },
        "content": "[L] online lecture - CS2113 FRIDAY 16:00 18:00"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "t170815518"
        },
        "content": "[E] CS2113 final exam (14:00 2021-05-03 at LT14)"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "t170815518"
        },
        "content": "[D] TP version 1 - CS2113  (by: 2021-04-04)"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "t170815518"
        },
        "content": "[D] TP version 1 - CS2113  (by: 2021-04-04)"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "t170815518"
        },
        "content": "[D] TP version 1 - CS2113  (by: 2021-04-04)"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "t170815518"
        },
        "content": "```"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "t170815518"
        },
        "content": "## Add score to an assessment: `score`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "t170815518"
        },
        "content": "Assign the actual score the student gets for the assessment."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "t170815518"
        },
        "content": "Format: `score MODULE_CODE TITLE SCORE`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "+ Please ensure that your module already exist, else there will be an error message!"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "+ Please ensure that the assessment already exist, else there will be an error message!"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "acyang97"
        },
        "content": "+ Please ensure that your `MODULECODE` is a valid module code in NUS."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "acyang97"
        },
        "content": "  + There are 3 types of valid module codes. "
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    * 6 characters long. The first 2 characters are alphabets. The last 4 characters are digits. Example: CS2113"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    * 7 characters long. The first 3 characters are alphabets. The last 4 characters are digits. Example: DSA4211"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    * 7 characters long. The first 2 characters are alphabets. The next 4 characters are digits. The last character is an alphabet. The  Example: CS2113T."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    * Alphabets in the module code should be all in capital letters. "
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "t170815518"
        },
        "content": "+ `TITLE` is the title of the assessment to score "
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "t170815518"
        },
        "content": "+ `SCORE` is the actual score, it should be non-negative and smaller than the full_score "
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "t170815518"
        },
        "content": "Example Input:"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "t170815518"
        },
        "content": "`score CS2113 TP 100`"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "t170815518"
        },
        "content": "Example Output:"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "t170815518"
        },
        "content": "```"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "score CS2113 TP 100"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "t170815518"
        },
        "content": "Done. The assessment TP has been scored as 100.00/100.00."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "t170815518"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "t170815518"
        },
        "content": "display CS2113"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "t170815518"
        },
        "content": "Course: CS2113"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "t170815518"
        },
        "content": "Title: null"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "t170815518"
        },
        "content": "AU: 4"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "t170815518"
        },
        "content": "Teaching Staffs: []"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "t170815518"
        },
        "content": "Assessment : "
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "TP(100.00/100.00)"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "t170815518"
        },
        "content": "The list of task in CS2113:"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "t170815518"
        },
        "content": "[L] online lecture - CS2113 FRIDAY 16:00 18:00"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "t170815518"
        },
        "content": "[E] CS2113 final exam (14:00 2021-05-03 at LT14)"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "t170815518"
        },
        "content": "[D] TP version 1 - CS2113  (by: 2021-04-04)"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "t170815518"
        },
        "content": "[D] TP version 1 - CS2113  (by: 2021-04-04)"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "t170815518"
        },
        "content": "[D] TP version 1 - CS2113  (by: 2021-04-04)"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "t170815518"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "t170815518"
        },
        "content": "```"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "t170815518"
        },
        "content": "Inputting a module/assessment that doesn\u0027t exist"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "t170815518"
        },
        "content": "```"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "t170815518"
        },
        "content": "score CS2113 tt 100"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "t170815518"
        },
        "content": "There is no assessment with the title tt in Module CS2113 "
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "t170815518"
        },
        "content": "score SA0001 test 100"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "t170815518"
        },
        "content": "Module does not exist, please add the module first!"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "```"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "t170815518"
        },
        "content": "## Delete an assessment: `delete_assessment` "
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "t170815518"
        },
        "content": "Delete assessment  (e.g. assignments and exams) from the module "
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "t170815518"
        },
        "content": "Format: `delete_assessment MODULE_CODE TITLE` "
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "acyang97"
        },
        "content": "+ Please ensure that your `MODULECODE` is a valid module code in NUS."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "acyang97"
        },
        "content": "  + There are 3 types of valid module codes. "
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    * 6 characters long. The first 2 characters are alphabets. The last 4 characters are digits. Example: CS2113"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    * 7 characters long. The first 3 characters are alphabets. The last 4 characters are digits. Example: DSA4211"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    * 7 characters long. The first 2 characters are alphabets. The next 4 characters are digits. The last character is an alphabet. The  Example: CS2113T."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    * Alphabets in the module code should be all in capital letters. "
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "t170815518"
        },
        "content": "+ `TITLE` is the title of the assessment to score "
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "t170815518"
        },
        "content": "+ If there are multiple assessments with the same title, only the 1st one will be deleted. "
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "t170815518"
        },
        "content": "Example Input:"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "t170815518"
        },
        "content": "`delete_assessment CS2113 TP` "
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "t170815518"
        },
        "content": "```"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "t170815518"
        },
        "content": "delete_assessment CS2113 TP"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "t170815518"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "t170815518"
        },
        "content": "Done. The assessment TP has been deleted."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "t170815518"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "t170815518"
        },
        "content": "display CS2113"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "t170815518"
        },
        "content": "Course: CS2113"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "t170815518"
        },
        "content": "Title: null"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "t170815518"
        },
        "content": "AU: 4"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "t170815518"
        },
        "content": "Teaching Staffs: []"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "t170815518"
        },
        "content": "Assessment : "
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "t170815518"
        },
        "content": "The list of task in CS2113:"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "t170815518"
        },
        "content": "[L] online lecture - CS2113 FRIDAY 16:00 18:00"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "t170815518"
        },
        "content": "[E] CS2113 final exam (14:00 2021-05-03 at LT14)"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "t170815518"
        },
        "content": "[D] TP version 1 - CS2113  (by: 2021-04-04)"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "t170815518"
        },
        "content": "[D] TP version 1 - CS2113  (by: 2021-04-04)"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "t170815518"
        },
        "content": "[D] TP version 1 - CS2113  (by: 2021-04-04)"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "t170815518"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "t170815518"
        },
        "content": "```"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "t170815518"
        },
        "content": "## Display today\u0027s Schedule: `display` "
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "Display Today\u0027s Lesson and Task( Deadline and Event)"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "* Note: The full feature only works within the Set Semester Schedule date"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "* Else it will be disabled."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "Format: `display`"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "t170815518"
        },
        "content": "Example input:"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "t170815518"
        },
        "content": "`display`"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "t170815518"
        },
        "content": "Disabled Feature output (due to the current date not being SEM 2)"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "```"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "display"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "Today\u0027s date is not within the set Semester Date."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "Valid Date: 2021 Jan 1 - 2021 May 31 "
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "Please proceed to using other type of Display Commands"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "```"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "t170815518"
        },
        "content": "Full Feature Enabled output (if current date is in SEM 2):"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "t170815518"
        },
        "content": "```"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "t170815518"
        },
        "content": "display"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "t170815518"
        },
        "content": "Today\u0027s Schedule:"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "t170815518"
        },
        "content": "08:00 "
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "t170815518"
        },
        "content": "09:00 "
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "t170815518"
        },
        "content": "10:00 "
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "t170815518"
        },
        "content": "11:00 "
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "t170815518"
        },
        "content": "12:00 "
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "t170815518"
        },
        "content": "13:00 "
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "t170815518"
        },
        "content": "14:00 "
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "t170815518"
        },
        "content": "15:00 "
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "t170815518"
        },
        "content": "16:00 online lecture - CS2113 |"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "t170815518"
        },
        "content": "17:00 online lecture - CS2113 |"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "t170815518"
        },
        "content": "18:00"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "t170815518"
        },
        "content": "19:00"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "t170815518"
        },
        "content": "20:00"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "t170815518"
        },
        "content": "21:00"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "t170815518"
        },
        "content": "22:00"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "t170815518"
        },
        "content": "23:00"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "t170815518"
        },
        "content": "Today\u0027s deadline:"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "t170815518"
        },
        "content": "You don\u0027t have any deadline!"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "t170815518"
        },
        "content": "```"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "t170815518"
        },
        "content": "## Display all the task in a module: `display  MODULECODE`"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "haroic1997"
        },
        "content": " Display task in a specific module"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "haroic1997"
        },
        "content": " Format: `display MODULECODE`"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "haroic1997"
        },
        "content": " Example of Usage"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "haroic1997"
        },
        "content": " * `display CS2113`"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "t170815518"
        },
        "content": "```"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "t170815518"
        },
        "content": "display CS2113"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "t170815518"
        },
        "content": "Course: CS2113"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "t170815518"
        },
        "content": "Title: null"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "AU: 4"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "t170815518"
        },
        "content": "Teaching Staffs: []"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "Assessment : "
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "t170815518"
        },
        "content": "The list of task in CS2113:"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "t170815518"
        },
        "content": "[L] online lecture - CS2113 FRIDAY 16:00 18:00"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "[E] CS2113 final exam (14:00 2021-05-03 at LT14)"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "[D] TP version 1 - CS2113  (by: 2021-04-04)"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "t170815518"
        },
        "content": "[D] TP version 1 - CS2113  (by: 2021-04-04)"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "t170815518"
        },
        "content": "[D] TP version 1 - CS2113  (by: 2021-04-04)"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "t170815518"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "t170815518"
        },
        "content": "```"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "t170815518"
        },
        "content": "## Display all the task in a module on a date: `display  MODULECODE /date DATE`"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "Display task in a specific module on a specific Date"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "Format: `display  MODULECODE /date DATE`"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "acyang97"
        },
        "content": "* Please ensure that your `MODULECODE` is a valid module code in NUS."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "acyang97"
        },
        "content": "  + There are 3 types of valid module codes. "
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    * 6 characters long. The first 2 characters are alphabets. The last 4 characters are digits. Example: CS2113"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    * 7 characters long. The first 3 characters are alphabets. The last 4 characters are digits. Example: DSA4211"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    * 7 characters long. The first 2 characters are alphabets. The next 4 characters are digits. The last character is an alphabet. The  Example: CS2113T."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    * Alphabets in the module code should be all in capital letters. "
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "* The `DATE` must be in `YYYY/MM/DD`"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "Example of Usage"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "* `display CS2113 /date 2021/05/03`"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "t170815518"
        },
        "content": "```"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "display CS2113 /date 2021/05/03"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "CS2113 - 3 May"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "Events \u0026 Deadlines :"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "[E] CS2113 final exam (14:00 2021-05-03 at LT14)"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "Lessons :"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "t170815518"
        },
        "content": "You don\u0027t have any lessons!"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "t170815518"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "t170815518"
        },
        "content": "```"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "t170815518"
        },
        "content": "## Display all the task on a date: `display /date DATE`"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "acyang97"
        },
        "content": "Display the schedule on a specific Date."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "acyang97"
        },
        "content": "Also shows the all the upcoming deadlines one week from the specified date. "
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "Format: `display /date DATE`"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "* The `DATE` must be in `YYYY/MM/DD`"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "  "
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "Example of Usage"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "* `display /date 2021/05/03`"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "t170815518"
        },
        "content": "```"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "display /date 2021/05/03"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "Here is your schedule on 2021-05-03!! :)"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "t170815518"
        },
        "content": "08:00"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "t170815518"
        },
        "content": "09:00"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "10:00"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "11:00"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "12:00"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "13:00"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "14:00 final exam - CS2113 at LT14 |"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "15:00 final exam - CS2113 at LT14 |"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "t170815518"
        },
        "content": "16:00"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "t170815518"
        },
        "content": "17:00"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "t170815518"
        },
        "content": "18:00"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "t170815518"
        },
        "content": "19:00"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "t170815518"
        },
        "content": "20:00"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "t170815518"
        },
        "content": "21:00"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "t170815518"
        },
        "content": "22:00"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "t170815518"
        },
        "content": "23:00"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "Upcoming Deadlines :"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "You don\u0027t have any deadline!"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "t170815518"
        },
        "content": "```"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "t170815518"
        },
        "content": "## Display all the task on a range of date: `display /date STARTDATE-ENDDATE`"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "t170815518"
        },
        "content": "Display task on a specific range of days"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "Format: `display /date STARTDATE-ENDDATE`"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "* The `STARTDATE/ENDDATE` must be in `YYYY/MM/DD`"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "* Do note the Dash `-` to indicate the end date"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "  "
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "Example of Usage"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "* `display /date 2021/01/01-2021/02/13`"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "t170815518"
        },
        "content": "```"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "display /date 2021/01/01-2021/02/13"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "List of task from 1 Jan 21 to 13 Feb 21"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "t170815518"
        },
        "content": "Jan 14 :"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "t170815518"
        },
        "content": "[L] online tutorial - ST2113 THURSDAY 08:00 10:00"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "t170815518"
        },
        "content": "Jan 15 :"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "t170815518"
        },
        "content": "[L] online lecture - CS2113 FRIDAY 16:00 18:00"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "t170815518"
        },
        "content": "Jan 21 :"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "t170815518"
        },
        "content": "[L] online tutorial - ST2113 THURSDAY 08:00 10:00"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "t170815518"
        },
        "content": "Jan 22 :"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "t170815518"
        },
        "content": "[L] online lecture - CS2113 FRIDAY 16:00 18:00"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "t170815518"
        },
        "content": "Jan 28 :"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "t170815518"
        },
        "content": "[L] online tutorial - ST2113 THURSDAY 08:00 10:00"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "t170815518"
        },
        "content": "Jan 29 :"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "t170815518"
        },
        "content": "[L] online lecture - CS2113 FRIDAY 16:00 18:00"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "t170815518"
        },
        "content": "Feb 4 :"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "t170815518"
        },
        "content": "[L] online tutorial - ST2113 THURSDAY 08:00 10:00"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "t170815518"
        },
        "content": "Feb 5 :"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "t170815518"
        },
        "content": "[L] online lecture - CS2113 FRIDAY 16:00 18:00"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "t170815518"
        },
        "content": "Feb 11 :"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "t170815518"
        },
        "content": "[L] online tutorial - ST2113 THURSDAY 08:00 10:00"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "t170815518"
        },
        "content": "Feb 12 :"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "t170815518"
        },
        "content": "[L] online lecture - CS2113 FRIDAY 16:00 18:00"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "t170815518"
        },
        "content": "```"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "t170815518"
        },
        "content": "## Edit a task: `edit` "
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "There is a few things that the user might want to edit."
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "1)Edit a task\u0027s description/type of task/module code/time/frequency/date"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "2)Edit a module\u0027s task\u0027s description/type of task/module code/time/frequency/date"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "Difference between 1) and 2) is that for 1)All tasks with that description will be edited, 2)Task under the module and with description will be edited "
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "Attributes:"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "1) Edit the parameter(description, date, frequency, module code, time) of a certain task"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "t170815518"
        },
        "content": "Format: `edit TASKNAME /date DATE /ATTRIBUTES /NEW_VALUE` "
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "t170815518"
        },
        "content": "+ `DATE` is in format `YYYY-MM-DD`"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "+ `ATTRIBUTES` refers to the parameter that you want to edit. E.g. description, date, frequency, module code, time, task type, etc"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "+ Input all time in `HH:MM` format."
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "t170815518"
        },
        "content": "Example of Usage: "
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "t170815518"
        },
        "content": "```"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "t170815518"
        },
        "content": "edit tp /date 2021-04-01 /date /2021-05-01"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "t170815518"
        },
        "content": "1 or more tasks has been deleted"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "t170815518"
        },
        "content": "The tasks\u0027 date has been updated"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "t170815518"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "t170815518"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "t170815518"
        },
        "content": "Done. The edit has been made."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "t170815518"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "t170815518"
        },
        "content": "Please type the next command!"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "t170815518"
        },
        "content": "display CS2113"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "t170815518"
        },
        "content": "Course: CS2113"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "t170815518"
        },
        "content": "Title: null"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "t170815518"
        },
        "content": "AU: 4"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "t170815518"
        },
        "content": "Teaching Staffs: []"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "t170815518"
        },
        "content": "Assessment : "
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "t170815518"
        },
        "content": "test_case(0.00/1.00)"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "t170815518"
        },
        "content": "The list of task in CS2113:"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "t170815518"
        },
        "content": "[L] online lecture - CS2113 FRIDAY 16:00 18:00"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "t170815518"
        },
        "content": "[D] tp - CS2113  (by: 2021-05-01)"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "t170815518"
        },
        "content": "```"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "2) Edit the parameter(description, date, frequency, module code, time) of a certain module\u0027s task"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "Format: `edit c/MODULE_CODE TASKNAME /date DATE /ATTRIBUTES /NEW_VALUE`"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "Example of Usage: "
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "```"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "t170815518"
        },
        "content": "edit c/CS2113 tp /date 2021-05-01 /date /2021-05-02"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "t170815518"
        },
        "content": "1 or more tasks has been deleted"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "t170815518"
        },
        "content": "The tasks\u0027 date in this module has been updated"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "t170815518"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "t170815518"
        },
        "content": "Cant find a matching task"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "t170815518"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "t170815518"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "t170815518"
        },
        "content": "Done. The edit has been made."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "t170815518"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "t170815518"
        },
        "content": "Please type the next command!"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "display CS2113"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "Course: CS2113"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "Title: null"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "t170815518"
        },
        "content": "AU: 4"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "Teaching Staffs: []"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "t170815518"
        },
        "content": "Assessment : "
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "t170815518"
        },
        "content": "test_case(0.00/1.00)"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "The list of task in CS2113:"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "t170815518"
        },
        "content": "[L] online lecture - CS2113 FRIDAY 16:00 18:00"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "t170815518"
        },
        "content": "[D] tp - CS2113  (by: 2021-05-02)"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "```"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "t170815518"
        },
        "content": "## Delete tasks of a description:  `delete` "
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "There are several things that a user might want to delete:"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "1) Delete all the task that matches a description"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "2) Delete all the task that matches a description on a certain date"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "3) Delete all the task that matches a description on a certain date"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "4) Delete all the task in a module"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "5) Delete the entire module alongside with all its tasks"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "1)Delete every task that fits the description regardless of date"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "t170815518"
        },
        "content": "Format: `delete DESCRIPTION` "
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "t170815518"
        },
        "content": "Example of Usage:"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "t170815518"
        },
        "content": "```"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "t170815518"
        },
        "content": "deadline CS2113 tp /by 2021-04-01"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "t170815518"
        },
        "content": "Got it, added deadline to Schedule Manager and Module Manager"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "t170815518"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "t170815518"
        },
        "content": "Please type the next command!"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "t170815518"
        },
        "content": "display CS2113"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "t170815518"
        },
        "content": "Course: CS2113"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "t170815518"
        },
        "content": "Title: null"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "t170815518"
        },
        "content": "AU: 4"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "t170815518"
        },
        "content": "Teaching Staffs: []"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "t170815518"
        },
        "content": "Assessment : "
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "t170815518"
        },
        "content": "test_case(0.00/1.00)"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "t170815518"
        },
        "content": "The list of task in CS2113:"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "t170815518"
        },
        "content": "[D] tp - CS2113  (by: 2021-04-01)"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "t170815518"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "t170815518"
        },
        "content": "Please type the next command!"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "t170815518"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "t170815518"
        },
        "content": "delete tp "
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "t170815518"
        },
        "content": "tp"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "t170815518"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "t170815518"
        },
        "content": "1 or more tasks has been deleted"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "t170815518"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "t170815518"
        },
        "content": "Please type the next command!"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "t170815518"
        },
        "content": "```"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "2)Delete all tasks of a description on a certain date: "
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "Delete every task that fits the description on that particular date"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "t170815518"
        },
        "content": "Format: `delete DESCRIPTION /date DATE`"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "* The DATE must be in YYYY-MM-DD, and between 2021/01/1 - 2021/05/31"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "acyang97"
        },
        "content": "Example of Usage"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "t170815518"
        },
        "content": "```"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "t170815518"
        },
        "content": "delete online lecture /date 2021-04-16"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "t170815518"
        },
        "content": "1 or more tasks has been deleted"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "t170815518"
        },
        "content": "```"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "3)Delete all of a module\u0027s task on a certain date"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "Format: `delete c/MODULE_CODE  /date DATE`"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "* The DATE must be in YYYY-MM-DD, and between 2021/01/1 - 2021/05/31"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "* You can delete an individual lesson from a module. It will disappear from Schedule Manager."
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "* However, since lessons are repetitive, the other instances of lessons will still show up"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "Example of Usage"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": ""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "```"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "Please type the command!"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "deadline CS2113 tp /by 2021-01-15"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "Got it, added deadline to Schedule Manager and Module Manager"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "Please type the command!"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "deadline CS2113 tpv1 /by 2021-01-15"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "Got it, added deadline to Schedule Manager and Module Manager"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "Please type the command!"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "deadline CS2113 tpv2 /by 2021-01-15"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "Got it, added deadline to Schedule Manager and Module Manager"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "Please type the command!"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "delete c/CS2113 /date 2021-01-15"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "Please type the command!"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "display CS2113"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": ""
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "Course: CS2113"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "Title: null"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "AU: 4"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "Teaching Staffs: []"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "The list of task in CS2113:"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "[D]CS2113 tp (by: 2020-10-16)"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": ""
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": ""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "Please type the command!"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "display /date 2020/10/16"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "Here is your schedule on 2020-10-16!! :)"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "08:00"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "09:00"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "10:00"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "11:00"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "12:00"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "13:00"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "14:00"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "15:00"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "16:00"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "17:00"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "18:00"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "19:00"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "20:00"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "21:00"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "22:00"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "23:00"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": ""
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "Deadlines on 2020-10-16:"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "You don\u0027t have any tasks!"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "```"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "Adding a lesson"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "```"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "lesson online lecture ST2113 /on 5 16:00 18:00"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "Got it, added lesson to the Schedule Manager and Module Manager!"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "Please type the next command!"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "```"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "Display all tasks from 2021/01/01-2021/02/01"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "```"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "display /date 2021/01/01-2021/06/01"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "List of task from 1 Jan 21 to 1 Feb 21"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "Jan 15 :"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "[L] online lecture - ST2113 FRIDAY 16:00 18:00"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "Jan 22 :"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "[L] online lecture - ST2113 FRIDAY 16:00 18:00"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "Jan 29 :"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "[L] online lecture - ST2113 FRIDAY 16:00 18:00"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "Feb 5 :"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "[L] online lecture - ST2113 FRIDAY 16:00 18:00"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "```"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "Deleting all task on Jan 15"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "```"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "delete c/ST2113 /date 2021-01-15"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "All task from this module on this date has been deleted"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "Please type the next command!"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "```"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "Display all tasks from 2021/01/01-2021/02/01"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "```"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "display /date 2021/01/01-2021/06/01"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "List of task from 1 Jan 21 to 1 Feb 21"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "Jan 22 :"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "[L] online lecture - ST2113 FRIDAY 16:00 18:00"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "Jan 29 :"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "[L] online lecture - ST2113 FRIDAY 16:00 18:00"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "Feb 5 :"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "[L] online lecture - ST2113 FRIDAY 16:00 18:00"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "```"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "Display ST2113"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "```"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "display ST2113"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "Course: ST2113"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "Title: null"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "AU: 4"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "Teaching Staffs: [Dr.Lim, ChengChen]"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "Assessment : "
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "The list of task in ST2113:"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "[D] TP version 1 - ST2113  (by: 2021-04-04)"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "[L] online lecture - ST2113 FRIDAY 16:00 18:00"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "Please type the next command!"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "```"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": ""
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "4)Delete all of a module\u0027s task\u0027s with fitting description, on a certain date"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "Format: `delete c/MODULE_CODE DESCRIPTION /date DATE`"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": ""
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "* The DATE must be in YYYY-MM-DD, and between 2021/01/1 - 2021/05/31"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "* You can delete an individual lesson from a module. It will disappear from Schedule Manager."
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "* However, since lessons are repetitive, the other instances of lessons will still show up"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": ""
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "Example of Usage"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": ""
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "```"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "deadline CS2113 tpv1 /by 2021-01-15"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "Got it, added deadline to Schedule Manager and Module Manager"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "Please type the command!"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "deadline CS2113 tpv2 /by 2021-01-15"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "Got it, added deadline to Schedule Manager and Module Manager"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": ""
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "Please type the command!"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "t170815518"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "delete c/CS2113 tpv2 /date 2021-01-15"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "Please type the command!"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "display CS2113"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": ""
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "Course: CS2113"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "Title: null"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "AU: 0"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "Teaching Staffs: []"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "The list of task in CS2113:"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "[D]CS2113 v1 (by: 2021-01-15)"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": ""
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": ""
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "Please type the command!"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "display /date 2021/01/15"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "Here is your schedule on 2021-01-15!! :)"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "08:00"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "09:00"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "10:00"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "11:00"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "12:00"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "13:00"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "14:00"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "15:00"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "16:00"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "17:00"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "18:00"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "19:00"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "20:00"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "21:00"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "22:00"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "23:00"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": ""
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "Deadlines on 2021-01-15:"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "CS2113 v1"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "```"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "Adding a lesson"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "```"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "lesson online lecture ST2113 /on 5 16:00 18:00"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "Got it, added lesson to the Schedule Manager and Module Manager!"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "Please type the next command!"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "```"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "Display all tasks from 2021/01/01-2021/02/01"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "```"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "display /date 2021/01/01-2021/06/01"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "List of task from 1 Jan 21 to 1 Feb 21"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "Jan 15 :"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "[L] online lecture - ST2113 FRIDAY 16:00 18:00"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "[D]CS2113 v1 (by: 2021-01-15)"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "Jan 22 :"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "[L] online lecture - ST2113 FRIDAY 16:00 18:00"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "Jan 29 :"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "[L] online lecture - ST2113 FRIDAY 16:00 18:00"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "Feb 5 :"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "[L] online lecture - ST2113 FRIDAY 16:00 18:00"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "```"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "Deleting all task on Jan 15 that matches \"online lecture\""
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "```"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "delete c/ST2113 online lecture /date 2021-01-15"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "All task from this module on this date has been deleted"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "Please type the next command!"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "```"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "Display all tasks from 2021/01/01-2021/02/01"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "```"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "display /date 2021/01/01-2021/06/01"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "List of task from 1 Jan 21 to 1 Feb 21"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "Jan 15 :"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "[D]CS2113 v1 (by: 2021-01-15)"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "Jan 22 :"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "[L] online lecture - ST2113 FRIDAY 16:00 18:00"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "Jan 29 :"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "[L] online lecture - ST2113 FRIDAY 16:00 18:00"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "Feb 5 :"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "[L] online lecture - ST2113 FRIDAY 16:00 18:00"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "```"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "Display ST2113"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "```"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "display ST2113"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "Course: ST2113"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "Title: null"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "AU: 4"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "Teaching Staffs: [Dr.Lim, ChengChen]"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "Assessment : "
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "The list of task in ST2113:"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "[D] TP version 1 - ST2113  (by: 2021-04-04)"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "[L] online lecture - ST2113 FRIDAY 16:00 18:00"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "Please type the next command!"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "```"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "4)Delete entire module"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "* Tasks that is linked to this module will automatically be deleted"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "* Format: `delete c/MODULE_CODE`"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "Example of Usage"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "```"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "Please type the command!"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "deadline CS2113 tpv1 /by 2021-01-15"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "Got it, added deadline to Schedule Manager and Module Manager"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "Please type the command!"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "deadline CS2113 tpv2 /by 2021-01-15"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "Got it, added deadline to Schedule Manager and Module Manager"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "Please type the command!"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "delete c/CS2113 "
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "Please type the command!"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "display 2021-06-01-2021-06-01"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "Please type the command!"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "\u003c--------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "display /date 2021/01/15"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "Here is your schedule on 2021-01-15!! :)"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "08:00"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "09:00"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "10:00"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "11:00"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "12:00"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "13:00"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "14:00"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "15:00"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "16:00"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "17:00"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "18:00"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "19:00"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "20:00"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "21:00"
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "22:00"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "23:00"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "Deadlines on 2021-01-15:"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "```"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "acyang97"
        },
        "content": "## Exiting the app: `bye`"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "acyang97"
        },
        "content": "Exits the app and saves the tasks in the txt files."
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "acyang97"
        },
        "content": "Format: `bye`"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "acyang97"
        },
        "content": "Example of Usage:"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "acyang97"
        },
        "content": "Input: `bye`"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "acyang97"
        },
        "content": "Output: "
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "acyang97"
        },
        "content": "```"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "acyang97"
        },
        "content": "Aye captain. This is DueQuest Signing out!"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "acyang97"
        },
        "content": "```"
      }
    ],
    "authorContributionMap": {
      "t170815518": 412,
      "haroic1997": 136,
      "sunxiuqi-stacked": 222,
      "teachyourselfcoding": 146,
      "-": 27,
      "acyang97": 108
    }
  },
  {
    "path": "docs/team/Xiuqi.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "acyang97"
        },
        "content": "# Sun XiuQi’s Portfolio for CS2113 TP"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "acyang97"
        },
        "content": "## Code Contributions:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "acyang97"
        },
        "content": "### Edit Module Feature "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "acyang97"
        },
        "content": "What it does: Allow the user to edit features of the module itself. Users can edit the module code, change the modular credits, as well as edit the staff involved with this module."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "acyang97"
        },
        "content": "Justification: This is integral to the program as we have to allow changes to the module details once tasks are created so users are not forced to delete the module and create a new one if wrong information was keyed in."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "acyang97"
        },
        "content": "Highlights: Every task can choose to carry information about the module such as module code, modular credits, staff information etc. Hence it became harder than simpler changing properties of the module itself, instead, each task has to be tracked down and checked."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "acyang97"
        },
        "content": "###  Edit Module Task feature "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "acyang97"
        },
        "content": "What it does: This allow the user to edit several properties of the task that exist within the module. Properties include task description, time information, date information, task’s frequency, task type, etc. Since many tasks are repetitive, the program allows the user to choose the date where he can edit all tasks pertaining to a module, or he can edit all instances of a task from the module."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "acyang97"
        },
        "content": "Justification: From our user story we identified there are different situations that a student would want to edit attributes of tasks. For example, if the lecture that falls on every Friday changes the timing, the user would want to edit the timing of all instances of that task. If a one time talk is postponed, the user will want to edit the task that falls on one particular day."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "acyang97"
        },
        "content": "Highlights: Since the attributes were written by different coders, editing these attributes was tedious as each method was likely different. Long hours were also spent to understand the logic of their code and to edit their properties."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "acyang97"
        },
        "content": "###  Edit Task feature. "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "acyang97"
        },
        "content": "What it does: Similar to Edit module task, Users can edit several properties of various tasks. However, these tasks may or may not belong to any modules. Hence Edit Module Task caters to ModuleManager more, but Edit task caters to ScheduleManager. Users can edit all tasks that match a description or limit them to a single date."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "acyang97"
        },
        "content": "Justification: Since ModuleManager and ScheduleManager works as two interlinked entities, Edit task feature is required to pertain to tasks that do not belong to any modules."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "acyang97"
        },
        "content": "Highlights: Was hard to implement as we had to sync it to Edit Module Task. If we delete a module’s tasks, we have to delete it in ScheduleManager. If we delete it from ScheduleManager then we have to check if it exists inside ModuleManager."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "acyang97"
        },
        "content": "###  Improved UI Feature"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "acyang97"
        },
        "content": "What it does: UI class is the interface that interacts with the users, such as sending them error messages or acknowledgements. Error messages and acknowledgements throughout the programs were collected and consolidated such that they were all sent through the UI."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "acyang97"
        },
        "content": "Justification: Tidying up the UI improves readability and uniformity through consolidating all the print messages from other classes into the UI class. "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "acyang97"
        },
        "content": "Highlights: Tedious as there was a lot of different messages that were all different. However, this process also eliminated a lot of test print messages that were used for printing that were not caught during product testing."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "acyang97"
        },
        "content": "## Documentation "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "acyang97"
        },
        "content": "User Guide:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "acyang97"
        },
        "content": "Added documentation for the features edit, delete (#)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "acyang97"
        },
        "content": "###  Developer Guide:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "acyang97"
        },
        "content": "Added implementation details and sequence diagram for the edit feature. (#133)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "acyang97"
        },
        "content": "###  Project management"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "acyang97"
        },
        "content": "Added and Managed issues for milestones v1.0, v2.0, v2.1."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "acyang97"
        },
        "content": "https://nus-cs2113-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-09-27\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026zFR\u003dfalse\u0026tabAuthor\u003dteachyourselfcoding\u0026tabRepo\u003dAY2021S1-CS2113-T13-4%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code"
      }
    ],
    "authorContributionMap": {
      "acyang97": 36
    }
  },
  {
    "path": "docs/team/acyang97.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "acyang97"
        },
        "content": "# Ang Chun Yang\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "acyang97"
        },
        "content": "## Project: DueQuest"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "acyang97"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "acyang97"
        },
        "content": "**DueQuest** is an application which helps NUS students manage their schedule in the semester"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "acyang97"
        },
        "content": "as well as tasks related to their modules that they are taking. Our design of DueQuest is such that it is specific for AY 2020/2021 Semester 2."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "acyang97"
        },
        "content": "## Summary of Contributions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "acyang97"
        },
        "content": "### Code Contribution"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "acyang97"
        },
        "content": "See the [RepoSense Dashboard here](https://nus-cs2113-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dacyang97\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-09-27\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other) for my contributions to DueQuest."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "acyang97"
        },
        "content": "### Enhancements Implemented"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "acyang97"
        },
        "content": "- Implemented the creation and design of the ScheduleManager class"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "acyang97"
        },
        "content": "- Implemented the function to add Tasks - namely Lesson, Event and Deadline objects into the ScheduleManager and ModuleManager classes."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "acyang97"
        },
        "content": "- Implemented and tested test cases in the following test classes and contributed to 35% code line coverage, 38% method coverage :"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    - ScheduleManagerTest "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    - ModuleManagerTest"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    - ParserTest"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    - DueQuestTest"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "acyang97"
        },
        "content": "### Contributions to documentation"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "acyang97"
        },
        "content": "- For User guide:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    - Wrote the introduction."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    - Wrote description on definition of a valid MODULECODE."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    - Wrote description for adding tasks, adding lessons, adding events, adding deadlines."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    - Wrote description for exiting the app."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "acyang97"
        },
        "content": "- For Developer Guide"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    - Wrote table of contents."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    - Wrote introduction."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    - Wrote details on setting up. "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    - Helped with drawing of diagram in Architecture Diagram."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    - Wrote and drew diagram in Task component in the Design Component."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    - Helped with writing and drawing of diagram in Command component in the Design Component."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    - Wrote and drew diagram in Managers component in the Design Component, including the design considerations."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    - Wrote and drew diagram in Add Feature in the Implementation Component."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    - Helped with writing of Manual Testing."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "acyang97"
        },
        "content": "   "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "acyang97"
        },
        "content": "### Contributions to team-based tasks"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "acyang97"
        },
        "content": "- Helped with solving some checkstyle issues."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "acyang97"
        },
        "content": "- Helped with keeping track of deadlines and everyone\u0027s pace."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "acyang97"
        },
        "content": "### Reviewing/mentoring contributions "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "acyang97"
        },
        "content": "- Helped teammate with the editing and deletion of tasks."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "acyang97": 48
    }
  },
  {
    "path": "docs/team/haroic1997.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "# Low Ri Hao Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "## Project: DueQuest"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "**DueQuest** is an application which helps NUS students manage their schedule in the semester"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "as well as tasks related to their modules that they are taking."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "## Summary of Contributions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "### Code Contribution"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "[ Code Contribution Link](https://nus-cs2113-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dharoic1997\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-09-27\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "### Enhancements Implemented"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "- Implemented the design of the ScheduleManager and ModuleManager class"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "- Implemented and tested test cases for the 5 different `display` tasks scenario of the app."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "- Implemented `Help` Command"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "- Implemented the Creation and Design of the `UI` and it\u0027s output  "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "### Contributions to documentation"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "- For User guide:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    - Wrote the `Display` components"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    - Wrote description for exiting the app."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "- For Developer Guide"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    - Wrote and drew diagram in DisplayCommand Component in the Design Component."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    - Wrote the User Stories part and explain the process of how we brainstorm."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    - Wrote the part on Running tests and Documentation"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "### Review/Mentoring Contributions"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "- Help to Clear 2000+ Checkstyle Issue for the team with the Command \"CTRL + ALT + L\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "- Help to provide resources such as Markdown Cheatsheet"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "  "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "haroic1997": 36
    }
  },
  {
    "path": "docs/team/t170815518.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "t170815518"
        },
        "content": "# TANG YUTING\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "t170815518"
        },
        "content": "## Project: DueQuest"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "t170815518"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "t170815518"
        },
        "content": "**DueQuest** is an application which helps NUS students manage their schedule in the semester"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "t170815518"
        },
        "content": "as well as tasks related to their modules that they are taking."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "t170815518"
        },
        "content": "## Summary of Contributions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "t170815518"
        },
        "content": "### Code Contribution"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "acyang97"
        },
        "content": "See the [RepoSense Dashboard here](https://nus-cs2113-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dTANG%20YUTING\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-09-27\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other) for my contributions to DueQuest."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "t170815518"
        },
        "content": "### Enhancements Implemented"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "t170815518"
        },
        "content": "+ Design, implement and test  `Storage` functions"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "t170815518"
        },
        "content": "+ Design and implement part of  `Module` functions"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "t170815518"
        },
        "content": "  + Test some functions such as `AddModuleTest`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "t170815518"
        },
        "content": "+ Implement and test `Assessment` functions and related commands"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "t170815518"
        },
        "content": "+ Improve the UI and exceptions of the application"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "t170815518"
        },
        "content": "### Contributions to documentation"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "t170815518"
        },
        "content": "- For User guide:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    - Draft and format the initial version of UG"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    -  Write `Storage` and assessment related parts "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    -  Update the example out of UG "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "t170815518"
        },
        "content": "- For Developer Guide"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    - Check and draw UML diagrams "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    - Write `Storage` and parts of `Module` "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    - Format instructions for manual testing "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "t170815518"
        },
        "content": "### Contributions to team-based tasks"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "t170815518"
        },
        "content": "+ Help intergrate the storage function to the other functions\u0027 component "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "t170815518"
        },
        "content": "+ Test the application "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "t170815518"
        },
        "content": "### Reviewing/mentoring contributions"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "t170815518"
        },
        "content": "- Improve the design of architecture "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "t170815518": 39,
      "acyang97": 1
    }
  },
  {
    "path": "docs/team/yanfeng.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "acyang97"
        },
        "content": "# Zou Yanfeng’s Portfolio for CS2113 TP"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "acyang97"
        },
        "content": "## Code Contributions"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "acyang97"
        },
        "content": "### Delete Module Feature"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "acyang97"
        },
        "content": "What it does: Delete an entire module based on module code. All the tasks belonging to the module will also be deleted."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "acyang97"
        },
        "content": "Justification: There are times when a module is no longer needed. For example, when a module is dropped. Hence the module will no longer be needed, neither nor its associated tasks such as deadlines, lessons, events."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "acyang97"
        },
        "content": "Highlights: While the Delete module function is a function that primarily deals with ModuleManager, the duality nature of ModuleManager and ScheduleManager means that Delete Module also deletes all tasks that have its Module Code from ScheduleManager."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "acyang97"
        },
        "content": "### Delete Module Task feature"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "acyang97"
        },
        "content": "What it does: There are two sub-functions of this feature, depending on user input"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "acyang97"
        },
        "content": "Delete a module’s task with the date and description: Users can search for a particular task based on its own description on a certain date, and delete it. E.g. A cancelled lecture on a particular date."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "acyang97"
        },
        "content": "Delete Module’s task based on dates: Users can choose to delete everything from the module on that date. E.g. A public holiday."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "acyang97"
        },
        "content": "Justification: Given that there can be many different types of tasks each carrying different attributes, it is expected that the user would want to search for tasks via different properties that is most convenient for them in order to delete it."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "acyang97"
        },
        "content": "Highlights: Many tasks have different but similar attributes. For examples, events and lessons have timings, just like deadlines, but the deadline timing works differently from that of events and lessons. Hence more time have to be spent fixing these issues so we could search by date."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "acyang97"
        },
        "content": "### Delete Task Feature"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "acyang97"
        },
        "content": "What it does: Similar to Module task delete, Delete Task deletes tasks but from the ScheduleManager instead of ModuleManager."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "acyang97"
        },
        "content": "Justification: Not all task belong to modules.  Users might also want to delete tasks from different modules. E.g. cancelling all rest days...."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "acyang97"
        },
        "content": "Highlights: Required deletion of tasks from ModuleManger as well as Schedulemanager"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "acyang97"
        },
        "content": "### Improving Parser for edit and delete commands."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "acyang97"
        },
        "content": "What it does: Parser handles the text processing from the user input. Improvement was made to Parser to allow it to recognise different user input command "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "acyang97"
        },
        "content": "Justification: "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "acyang97"
        },
        "content": "Highlights: Text processing was tedious as there was many different outcome commands, yet the inputs always start with “edit” and “delete” only."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "acyang97"
        },
        "content": "## Documentation"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "acyang97"
        },
        "content": "### Adding to UG:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "acyang97"
        },
        "content": "Updated UG with the documentation for edit, delete features."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "acyang97"
        },
        "content": "Add manual testing test cases and expected output for new users."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "acyang97"
        },
        "content": "### Adding to DG"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "acyang97"
        },
        "content": "Added implementation details and class diagram for the delete feature #257"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "acyang97"
        },
        "content": "### Project management"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "acyang97"
        },
        "content": "Added and managed issues for milestones v1.0, v2.0, v2.1."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "acyang97"
        },
        "content": "### Enhancements to existing features"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "acyang97"
        },
        "content": "Debugged issues for edit and delete features, as well as other components in the project"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "acyang97"
        },
        "content": "Manual testing, reported bugs and suggestions."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "acyang97"
        },
        "content": "### Community"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "acyang97"
        },
        "content": "Reported bugs and suggestions for other teams in the class."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "acyang97"
        },
        "content": "https://nus-cs2113-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-09-27\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026zFR\u003dfalse\u0026tabAuthor\u003dteachyourselfcoding\u0026tabRepo\u003dAY2021S1-CS2113-T13-4%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code"
      }
    ],
    "authorContributionMap": {
      "acyang97": 48
    }
  },
  {
    "path": "src/main/java/seedu/DueQuestException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "acyang97"
        },
        "content": "package seedu;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "acyang97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "acyang97"
        },
        "content": " * DukeException is used to represent duke-specific exceptions that are likely"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "acyang97"
        },
        "content": " * to occur."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "acyang97"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "acyang97"
        },
        "content": "public class DueQuestException extends Exception {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    DueQuestExceptionType exceptionType;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    public DueQuestExceptionType getExceptionType() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        return exceptionType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    public DueQuestException(DueQuestExceptionType exceptionType) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        this.exceptionType \u003d exceptionType;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "acyang97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "acyang97": 17
    }
  },
  {
    "path": "src/main/java/seedu/DueQuestExceptionType.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "package seedu;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "acyang97"
        },
        "content": " * DukeExceptionType represents the different kind of Duke-specific Exceptions."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haroic1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "acyang97"
        },
        "content": "public enum DueQuestExceptionType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    MISSING_DESCRIPTION,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    WRONG_INPUT_FORMAT,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    MISSING_DEADLINE,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    MISSING_EVENT_INFO,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    INVALID_COMMAND,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    WRONG_DATE_FORMAT,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "    MISSING_DELETE_DETAILS,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    MISSING_MODULE,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    INVALID_MODULE_CODE,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    INVALID_DATE,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    MISSING_LESSON_TIMING_DETAILS"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "haroic1997": 5,
      "teachyourselfcoding": 1,
      "acyang97": 13
    }
  },
  {
    "path": "src/main/java/seedu/ModuleManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "acyang97"
        },
        "content": "package seedu;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "t170815518"
        },
        "content": "import seedu.exception.ModuleAlreadyExistsException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "t170815518"
        },
        "content": "import seedu.exception.ModuleNotExistsException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.module.Module;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "import seedu.task.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.task.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "import seedu.task.Lesson;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "import seedu.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "import java.lang.reflect.Array;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "acyang97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "acyang97"
        },
        "content": " * Class to keep track of all the Module that the user is taking."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "acyang97"
        },
        "content": " * Whenever an event or task is added into the ScheduleManager, we will add that task or event"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "acyang97"
        },
        "content": " * into the ModuleManager as well according to the Module Code."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "acyang97"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "acyang97"
        },
        "content": "public class ModuleManager {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    public ArrayList\u003cModule\u003e listOfModules;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    public ModuleManager() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        this.listOfModules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    public ModuleManager(ArrayList\u003cModule\u003e listOfModules) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        this.listOfModules \u003d listOfModules;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    public int getNumberOfModules() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        return this.listOfModules.size();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "t170815518"
        },
        "content": "     * Add new module to the app."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "t170815518"
        },
        "content": "     * If the module with the same course code exists already, the message will be printed."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "t170815518"
        },
        "content": "     * @param module new Module object to add"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "t170815518"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    public void addModule(Module module) throws ModuleAlreadyExistsException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        if (!this.checkIfModuleExist(module)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            this.listOfModules.add(module);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "            Ui.print(\"added: \" + module.getModuleCode().toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            throw new ModuleAlreadyExistsException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "t170815518"
        },
        "content": "     * Check if the module with the same module code already exists in the ModuleManager."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * This is to check before adding in any modules."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * @param module module to be check if it already exist."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * @return ture if the module exist, false if it dosen\u0027t."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    public boolean checkIfModuleExist(Module module) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        return this.getListOfModuleCodes().contains(module.getModuleCode().toUpperCase());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "t170815518"
        },
        "content": "     * Gets the module with specified module code from the list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "t170815518"
        },
        "content": "     * @param moduleCode module code in string"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "t170815518"
        },
        "content": "     * @return the Module object in list"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "t170815518"
        },
        "content": "     * @throws ModuleNotExistsException if nothing is found"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "t170815518"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    public Module getModule(String moduleCode) throws ModuleNotExistsException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        for (Module m : listOfModules) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            if (m.getModuleCode().equals(moduleCode)) {  // \u0027\u003d\u003d\u0027 cannot be used."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                return m;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        throw new ModuleNotExistsException();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    //@@author sunxiuqi-stacked"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    public void editTask(String description, LocalDate date, String type, String newProperty, String moduleCode) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        boolean edit \u003d false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        for (Module m : listOfModules) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "            if (m.getModuleCode().equals(moduleCode)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                Ui.printModuleCode(m);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                for (Task task : m.getListOfTasks()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                    if (task.getDate().isEqual(date)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                        switch (type) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                        case \"description\":"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                            if (task.getDescription().equals(description)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                                task.setDescription(newProperty);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                                edit \u003d true;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                        case \"tasktype\":"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                            if (task.getDescription().equals(description)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                                task.setTasktype(newProperty);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                                edit \u003d true;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                        case \"module code\":"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                            if (task.getDescription().equals(description)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                                task.setModulecode(newProperty);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                                edit \u003d true;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                        case \"time\":"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                            if (task.getDescription().equals(description)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                                task.setTime(newProperty);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                                edit \u003d true;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                        default:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                            Ui.printInvalidEditTypeMessage();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        if (edit) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "            Ui.printModulePropertyEditedMessage();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "     * TODO - add the description"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "     * Method do edit module to set a new frequency."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "     *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "     * @param description  description."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "     * @param date         date."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "     * @param property     property."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "     * @param newFrequency new frequency."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "     * @param moduleCode   module code."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    public void editTask(String description, LocalDate date, String property, int newFrequency, String moduleCode) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        boolean edited \u003d false;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        for (Module m : listOfModules) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "            if (m.getModuleCode().equals(moduleCode)) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                for (Task task : m.getListOfTasks()) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                    if (task.getDescription().equals(description)) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                        task.setFrequency(newFrequency);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                        edited \u003d true;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "            }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        if (edited) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "            Ui.printModuleFrequencyEditedMessage();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "     * Edit module to set new date."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "     *"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "     * @param description description."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "     * @param date        date."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "     * @param property    property."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "     * @param newDate     new date."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "     * @param moduleCode  module code."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    public void editTask(String description, LocalDate date, String property, LocalDate newDate, String moduleCode) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        boolean edited \u003d false;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        for (Module m : listOfModules) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "            if (m.getModuleCode().equals(moduleCode)) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                for (Task task : m.getListOfTasks()) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                    if (task.getDescription().equals(description)) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                        Task newTask \u003d task;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                        newTask.setDate(newDate.toString()); //need to change later"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                        m.addTask(newTask);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                        m.getListOfTasks().remove(task);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                        edited \u003d true;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "            }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        if (edited) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "            Ui.printModuleDateEditedMessage();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        Ui.printModuleDateNotEditedMessage();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "    //@@author teachyourselfcoding"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "     * Method to delete the entire module."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "     *"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "     * @param moduleCode module code of module to be deleted."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "    public void delete(String moduleCode) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        for (Module m : listOfModules) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "            if (m.getModuleCode().equals(moduleCode)) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                Ui.printModuleDeletedMessage();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "            }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        listOfModules.removeIf(m -\u003e m.getModuleCode().equals(moduleCode));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "     * Method to delete a task in a module on a specific date."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "     *"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "     * @param moduleCode  module code of the task."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "     * @param description description of the task."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "     * @param date        date of the task."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "    public void delete(String moduleCode, String description, LocalDate date) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        boolean deleted \u003d false;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        for (Module m : listOfModules) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "            if (m.getModuleCode().equals(moduleCode)) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                for (Task task : m.getListOfTasks()) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                    if (task.getDate().equals(date)) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                        if (task.getDescription().equals(description)) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                            deleted \u003d true;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                if (deleted) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                    Ui.printTaskDeletedMessage();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                    m.getListOfTasks().removeIf(task -\u003e task.getDate() \u003d\u003d date);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                Ui.printTaskNotDeletedMessage();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "            }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "     * Method to delete all the task of a module on a certain date."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "     *"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "     * @param moduleCode module code of the tasks."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "     * @param date       date chosen."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "    public void delete(String moduleCode, LocalDate date) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        boolean edited \u003d false;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        for (Module m : listOfModules) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "            if (m.getModuleCode().equals(moduleCode)) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                for (Task task : m.getListOfTasks()) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                    if (task.getDate().equals(date)) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                        edited \u003d true;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "            }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        if (edited) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "            for (Module m : listOfModules) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                if (m.getModuleCode().equals(moduleCode)) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                    m.getListOfTasks().removeIf(t -\u003e t.getDate().isEqual(date));"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "            }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "            Ui.printModuleTaskDateDeletedMessage();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        Ui.printModuleTaskDateNotDeletedMessage();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "    public void deleteModuleTasks(String description, LocalDate date) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        for (Module m : listOfModules) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "            ArrayList\u003cTask\u003e ls \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "            for (Task task : m.getListOfTasks()) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                if (!task.getDescription().equals(description) \u0026\u0026 task.getDate().equals(date)) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                    ls.add(task);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "            }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "            m.setListOfTasks(ls);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "    public void deleteModuleTasks(String description) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        for (Module m : listOfModules) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "            ArrayList\u003cTask\u003e ls \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "            for (Task task : m.getListOfTasks()) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                if (!task.getDescription().equals(description)) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                    ls.add(task);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "            }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "            m.setListOfTasks(ls);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "    //@@author teachyourselfcoding"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "     * Display the tasks of a module."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "     *"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "     * @param moduleCode module code\u0027s string."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "     * @throws ModuleNotExistsException when the module does not exist."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "    public void display(String moduleCode) throws ModuleNotExistsException {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        for (Module m : listOfModules) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "            if (m.getModuleCode().equals(moduleCode)) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                ArrayList\u003cTask\u003e tasks \u003d m.getListOfTasks();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                Ui.printModuleInformation(m); // print the module\u0027s information"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                Ui.print(\"The list of task in \" + moduleCode + \":\");"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                Ui.printListGenericType(tasks, \"events,deadline or lessons\");"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                Ui.printSeparator();"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "            }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        throw new ModuleNotExistsException();"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "     * Method to display all the task in a module on a specific date."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "     *"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "     * @param moduleCode to have tasks to be displayed."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "     * @param date       date to be displayed."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "     * @throws ModuleNotExistsException when module does not exist."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "    public void display(String moduleCode, LocalDate date) throws ModuleNotExistsException {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        ArrayList\u003cTask\u003e filteredTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        ArrayList\u003cLesson\u003e lessons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        DayOfWeek dayOfWeek \u003d date.getDayOfWeek();"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        for (Module m : listOfModules) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "            if (m.getModuleCode().equals(moduleCode)) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                for (Task t : m.getListOfTasks()) {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                    if (t instanceof Deadline) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                        if (((Deadline) t).getDate().isEqual(date)) {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                            filteredTasks.add(t);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                    } else if (t instanceof Event) {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                        if (((Event) t).getDate().equals(date)) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                            filteredTasks.add(t);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                    } else if (t instanceof Lesson) {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                        if (((Lesson) t).getLessonDayInDayOfWeek() \u003d\u003d dayOfWeek) {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                            lessons.add((Lesson) t);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                Ui.print(moduleCode + \" - \" + Ui.convertDateToString(date));"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                Ui.print(\"Events \u0026 Deadlines :\");"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                Ui.printListGenericType(filteredTasks, \"events and deadlines\");"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                Ui.print(\"Lessons :\");"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                Ui.printListGenericType(lessons, \"lessons\");"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                Ui.printSeparator();"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "            }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        throw new ModuleNotExistsException();"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "    public ArrayList\u003cModule\u003e getListOfModules() {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        return listOfModules;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "     * Method to get a list of Module Codes in String form."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "     *"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "     * @return the list of module codes."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "    public List\u003cString\u003e getListOfModuleCodes() {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        List\u003cString\u003e listOfModuleCodes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        for (Module module : listOfModules) {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "            listOfModuleCodes.add(module.getModuleCode());"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        return listOfModuleCodes;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "     * Method to add a task to the module inside the list of the module manager."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "     * This is executed in the AddCommand method, when a task is added to both."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "     * the module manager and schedule manager."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "     *"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "     * @param task       task to be added into the module manager."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "     * @param moduleCode this is the modulecode of the task. Remember, moduleCode is an attribute of task."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "    public void addTaskToModule(Task task, String moduleCode) {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        for (int i \u003d 0; i \u003c this.listOfModules.size(); i++) {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "            if (this.listOfModules.get(i).getModuleCode().equals(moduleCode)) {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                this.listOfModules.get(i).addTask(task);"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "            }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "     * Finds the module contains the task with the specified description."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "     *"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "     * @param description the description in string."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "     * @return Module found."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "    private Module findModuleContainsTask(String description) {"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        for (Module m : this.listOfModules) {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "            for (Task t : m.getListOfTasks()) {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                if (t.getDescription().equals(description)) {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                    return m;"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                }"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "            }"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "    private Module findModuleContainsTask(String description, LocalDate date) {"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        for (Module m : this.listOfModules) {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "            for (Task t : m.getListOfTasks()) {"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                if (t.getDescription().equals(description) \u0026\u0026 date.isEqual(t.getDate())) {"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                    return m;"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                }"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "            }"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "    public void deleteTask(String description) {"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        Module module \u003d findModuleContainsTask(description);"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        if (module !\u003d null) {"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "            module.deleteTask(description);"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "    public void deleteTask(String description, LocalDate date) {"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        Module module \u003d findModuleContainsTask(description, date);"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        if (module !\u003d null) {"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "            module.deleteTask(description, date);"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "    public String export() {"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        String export \u003d \"\";"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        for (int i \u003d 0; i \u003c this.listOfModules.size(); i++) {"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "            export \u003d this.listOfModules.get(i).export() + \u0027\\n\u0027;"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        return export;"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "t170815518": 22,
      "haroic1997": 19,
      "sunxiuqi-stacked": 103,
      "teachyourselfcoding": 244,
      "acyang97": 36
    }
  },
  {
    "path": "src/main/java/seedu/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "package seedu;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.command.AddAssessmentCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.command.AddCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.command.AddModuleCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.command.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.command.DeleteAssessmentCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.command.DeleteCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.command.DisplayCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "import seedu.command.EditCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.command.EditModuleCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.command.EditTaskCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.command.ExitCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.command.HelpCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.command.ScoreAssessmentCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.exception.EmptyArgumentException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.exception.InvalidArgumentsException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.exception.InvalidDateException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.exception.InvalidDateFormatException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.exception.InvalidFrequencyException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.exception.InvalidModuleCodeException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.exception.InvalidScoreException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.exception.InvalidTimeFormatException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.exception.MissingDeadlineDescriptionException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.exception.MissingDeadlineTimingDetailsException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.exception.MissingDeleteDetailsException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.exception.MissingEventDateAndTimeDetailsException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.exception.MissingEventDescriptionException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.exception.MissingLessonDescriptionException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.exception.MissingLessonTimingException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.exception.MissingModuleCodeOrInvalidModuleCodeException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.exception.StartAndEndTimeSameException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.exception.StartTimeAndEndTimeTooEarlyException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.exception.StartTimeIsAfterEndTimeException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.exception.WrongDateFormatException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "import seedu.task.Deadline;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.task.Event;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.task.Lesson;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "t170815518"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "acyang97"
        },
        "content": " *Parser Object is used for translating String user input into."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "acyang97"
        },
        "content": " * a actionable Command object for execution."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "haroic1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    public Parser() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "     * Convert the given string input into a subclass of Command class."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * return different subclass of Command class."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * @param input User input."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * @return a subclass of Command class."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * @throws DueQuestException if invalid input."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    public static Command parse(String input) throws DueQuestException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "            String[] words \u003d input.split(\" \");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "            switch (words[0].toLowerCase()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "            case \"help\":"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                return new HelpCommand();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "            case \"bye\":"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                return new ExitCommand();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "            case \"delete\":"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                return validateDeleteCommand(input);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "            case \"deadline\":"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                Deadline deadline \u003d validateDeadline(input);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                return new AddCommand(deadline);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "            case \"event\":"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                Event ev \u003d validateEvent(input);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                return new AddCommand(ev);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "            case \"display\":"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "t170815518"
        },
        "content": "                return parseDisplayCommand(input);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            case \"lesson\":"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "t170815518"
        },
        "content": "                Lesson lesson \u003d parseLesson(input);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                return new AddCommand(lesson);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            case \"module\": // adding a module"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "t170815518"
        },
        "content": "                return new AddModuleCommand(Arrays.copyOfRange(words, 1, input.length()));  // only pass the arguments"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            case \"edit\":"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                return validateEditCommand(input);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            case \"assessment\":"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "t170815518"
        },
        "content": "                return validateAddAssessmentCommand(input);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            case \"delete_assessment\":"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "t170815518"
        },
        "content": "                return validateDeleteAssessmentCommand(input);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            case \"score\":"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "t170815518"
        },
        "content": "                return validateScoreAssessmentCommand(input);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                throw new DueQuestException(DueQuestExceptionType.INVALID_COMMAND);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        } catch (InvalidArgumentsException e) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            Ui.printInvalidArgumentsErrorMessage();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        } catch (MissingLessonTimingException e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            Ui.printMissingLessonTimingMessage();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        } catch (EmptyArgumentException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            Ui.printEmptyArgumentMessage();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        } catch (InvalidModuleCodeException e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            Ui.printInvalidModuleCode();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        } catch (WrongDateFormatException e) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            Ui.printInvalidDateFormatMessage();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        } catch (InvalidDateException e) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            Ui.printInvalidDateMessage();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        } catch (MissingDeadlineTimingDetailsException e) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            Ui.printMissingDeadlineTimingDetailsMessage();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        } catch (MissingEventDateAndTimeDetailsException e) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            Ui.printMissingEventDateAndTimeDetailsMessage();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        } catch (InvalidTimeFormatException e) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            Ui.printWrongTimeFormatMessage();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        } catch (InvalidFrequencyException e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            Ui.printInvalidFrequencyMessage();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        } catch (StartAndEndTimeSameException e) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            Ui.printStartAndEndTimeCannotBeTheSameMessage();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        } catch (MissingDeadlineDescriptionException e) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            Ui.printMissingDeadlineDescriptionMessage();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        } catch (MissingLessonDescriptionException e) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            Ui.printMissingLessonDescriptionMessage();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        } catch (MissingEventDescriptionException e) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            Ui.printMissingEventDescriptionMessage();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        } catch (StartTimeIsAfterEndTimeException e) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            Ui.printStartTimeCannotBeAfterEndTimeMessage();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        } catch (StartTimeAndEndTimeTooEarlyException e) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            Ui.printStartTimeAndEndTimeCannotBeBeforeEightOClockMessage();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        } catch (MissingModuleCodeOrInvalidModuleCodeException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            Ui.printMissingModuleCodeOrInvalidModuleCodeMessage();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        } catch (MissingDeleteDetailsException e) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "            Ui.printMissingDeleteDetails();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            Ui.printInvalidInputMessage();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        return null;  // the function must return something"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * Used to validate a deadline by checking for any errors in the user input for a Deadline."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * @param input representing user input"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * @return DeadLine object including the moduleCode of the deadline."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * @throws WrongDateFormatException if date in the input is of wrong format."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * @throws InvalidDateException if date in the input is in an invalid range."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * @throws EmptyArgumentException if the information of the Deadline is missing in the input."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * @throws MissingDeadlineTimingDetailsException  if the timing details of the deadline is missing."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * @throws InvalidModuleCodeException if the module code in the input is invalid."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * @throws InvalidDateFormatException if the input date is of invalid format."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    public static Deadline validateDeadline(String input) throws WrongDateFormatException, InvalidDateException,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            EmptyArgumentException, MissingDeadlineTimingDetailsException, InvalidModuleCodeException,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            MissingDeadlineDescriptionException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String[] filteredInput \u003d input.trim().split(\" \", 2);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        if (filteredInput.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            throw new EmptyArgumentException();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        } else if (!filteredInput[1].contains(\"/by\")) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            throw new MissingDeadlineTimingDetailsException();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String[] moduleCodeAndDescription \u003d filteredInput[1]"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                .split(\"/by\",2)[0].trim().split(\" \", 2);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        if (moduleCodeAndDescription.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            throw new MissingDeadlineDescriptionException();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String moduleCode \u003d moduleCodeAndDescription[0].trim();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        if (!verifyModuleCode(moduleCode)) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            throw new InvalidModuleCodeException();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String byInfo \u003d filteredInput[1].split(\"/by\", 2)[1].trim();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        if (byInfo.length() !\u003d 10) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            throw new WrongDateFormatException();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            LocalDate.parse(byInfo);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            throw new WrongDateFormatException();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        if (LocalDate.parse(byInfo).isAfter(LocalDate.of(2021, 5, 31))"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            || LocalDate.parse(byInfo).isBefore(LocalDate.of(2021, 1, 1))) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            throw new InvalidDateException();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String description \u003d moduleCodeAndDescription[1].trim();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        return new Deadline(moduleCode, description, byInfo);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * Used to validate a Event by checking for any errors in the user input."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * @param input representing user input."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * @return Event object."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * @throws WrongDateFormatException if the input date is of wrong format."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * @throws InvalidDateException if the input date is not in the given range as stated in the User Guide."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * @throws EmptyArgumentException if input does not contain anything after the first word."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * @throws MissingEventDateAndTimeDetailsException if the event is missing time, date or location details."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * @throws InvalidTimeFormatException if the input time is of invalid format."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * @throws StartAndEndTimeSameException if the start and end time is the same."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * @throws MissingEventDescriptionException if the event description is missing."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * @throws StartTimeIsAfterEndTimeException if the start time is later than the end time."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * @throws StartTimeAndEndTimeTooEarlyException if start time or end time is before 8am."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * @throws MissingModuleCodeOrInvalidModuleCodeException if module code is missing or invalid."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    public static Event validateEvent(String input) throws WrongDateFormatException, InvalidDateException,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            EmptyArgumentException, MissingEventDateAndTimeDetailsException, InvalidTimeFormatException,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            StartAndEndTimeSameException, MissingEventDescriptionException,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            StartTimeIsAfterEndTimeException, StartTimeAndEndTimeTooEarlyException,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            MissingModuleCodeOrInvalidModuleCodeException {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String[] filteredInputTest \u003d input.trim().split(\" \", 2);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        if (filteredInputTest.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            throw new EmptyArgumentException();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        } else if (!filteredInputTest[1].contains(\"/at\")) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            throw new MissingEventDateAndTimeDetailsException();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String filteredInput \u003d input.trim().split(\" \", 2)[1]; //get rid of event word in front"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String moduleCode \u003d filteredInput.split(\" \")[0];"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String[] splitDescriptionAndDateTimeDetails \u003d filteredInput.split(\"/at\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String description \u003d splitDescriptionAndDateTimeDetails[0].trim();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        if (splitDescriptionAndDateTimeDetails[0].split(\" \").length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            throw new MissingEventDescriptionException();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        if (!verifyModuleCode(moduleCode)) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            throw new MissingModuleCodeOrInvalidModuleCodeException();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        description \u003d description.split(\" \", 2)[1].trim();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String dateTimeLocationDetails \u003d splitDescriptionAndDateTimeDetails[1];"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String[] splitDateTimeLocationDetails \u003d dateTimeLocationDetails.trim().split(\" \", 4);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        if (splitDateTimeLocationDetails.length !\u003d 4) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            throw new MissingEventDateAndTimeDetailsException();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String dateOfEvent \u003d splitDateTimeLocationDetails[0];"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        if (dateOfEvent.length() !\u003d 10) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            throw new WrongDateFormatException();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            LocalDate.parse(dateOfEvent);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            throw new WrongDateFormatException();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        if (LocalDate.parse(dateOfEvent).isAfter(LocalDate.of(2021, 5, 31))"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                || LocalDate.parse(dateOfEvent).isBefore(LocalDate.of(2021, 1, 1))) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            throw new InvalidDateException();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String startTime \u003d splitDateTimeLocationDetails[1];"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String endTime \u003d splitDateTimeLocationDetails[2];"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        if (startTime.length() !\u003d 5"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                || endTime.length() !\u003d 5) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            throw new InvalidTimeFormatException();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String hhStart \u003d startTime.substring(0, 2);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String mmStart \u003d startTime.substring(3);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String hhEnd \u003d endTime.substring(0, 2);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String mmEnd \u003d endTime.substring(3);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            LocalTime.of(Integer.parseInt(hhStart), Integer.parseInt(mmStart));"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            throw new InvalidTimeFormatException();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            throw new InvalidTimeFormatException();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        if (Integer.parseInt(mmStart) !\u003d 0) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            throw new InvalidTimeFormatException();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            LocalTime.of(Integer.parseInt(hhEnd), Integer.parseInt(mmEnd));"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            throw new InvalidTimeFormatException();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            throw new InvalidTimeFormatException();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        if (Integer.parseInt(mmEnd) !\u003d 0) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            throw new InvalidTimeFormatException();"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        if (startTime.equals(endTime)) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            throw new StartAndEndTimeSameException();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        if (LocalTime.of(Integer.parseInt(hhStart), Integer.parseInt(mmStart))"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                .isAfter(LocalTime.of(Integer.parseInt(hhEnd), Integer.parseInt(mmEnd)))) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            throw new StartTimeIsAfterEndTimeException();"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        if (LocalTime.of(Integer.parseInt(hhStart), Integer.parseInt(mmStart)).isBefore(LocalTime.of(8, 0))"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            || LocalTime.of(Integer.parseInt(hhEnd), Integer.parseInt(mmEnd)).isBefore(LocalTime.of(8,0))) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            throw new StartTimeAndEndTimeTooEarlyException();"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String locationOfEvent \u003d splitDateTimeLocationDetails[3];"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        return new Event(description, moduleCode, locationOfEvent, startTime, endTime, dateOfEvent);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * Used to validate a Lesson by checking for any errors in the user input."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * @param input representing user input."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * @return Lesson object."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * @throws EmptyArgumentException if the information of the Lesson is missing in the input."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * @throws MissingLessonTimingException if the timing of the lesson is missing in the input."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * @throws InvalidModuleCodeException if the module code in the input is invalid."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * @throws InvalidTimeFormatException if the time in the input is of wrong format."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * @throws InvalidFrequencyException if the frequency in the input is invalid."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * @throws StartAndEndTimeSameException if the start time and end time is the same."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * @throws MissingLessonDescriptionException if the lesson description is missing."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * @throws StartTimeIsAfterEndTimeException if the start time is after the end time."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * @throws StartAndEndTimeSameException if the start time and end time are the same."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * @throws StartTimeAndEndTimeTooEarlyException if the start or end time is before 8am."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    public static Lesson parseLesson(String input) throws EmptyArgumentException, MissingLessonTimingException,"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            InvalidModuleCodeException, InvalidTimeFormatException, InvalidFrequencyException,"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            StartAndEndTimeSameException, MissingLessonDescriptionException, StartTimeIsAfterEndTimeException,"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            StartTimeAndEndTimeTooEarlyException {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String[] filteredInput \u003d input.trim().split(\" \", 2);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        if (filteredInput.length \u003d\u003d 1) {  // e.g. lesson [empty_arguments]"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            throw new EmptyArgumentException();"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        }  else if (!filteredInput[1].contains(\"/on\")) {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            throw new MissingLessonTimingException();"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String[] descriptionWithModuleCodeAndTime \u003d filteredInput[1].split(\"/on\", 2);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String[] frequencyAndTime \u003d descriptionWithModuleCodeAndTime[1].trim().split(\" \");"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String[] descriptionWithModuleCode \u003d descriptionWithModuleCodeAndTime[0].trim().split(\" \");"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        int size \u003d descriptionWithModuleCode.length;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String moduleCode \u003d descriptionWithModuleCode[size - 1].trim();"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        if (!verifyModuleCode(moduleCode)) {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            throw new InvalidModuleCodeException();"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        if (size \u003d\u003d 1) {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            throw new MissingLessonDescriptionException();"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        if (frequencyAndTime.length !\u003d 3) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            throw new MissingLessonTimingException();"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String description \u003d \"\";"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        for (int i \u003d 0; i \u003c descriptionWithModuleCode.length - 1; i++) {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            description +\u003d descriptionWithModuleCode[i].trim() + \" \";"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        description \u003d description.trim();"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String freq \u003d frequencyAndTime[0];"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            Integer.parseInt(freq);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            throw new InvalidFrequencyException();"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        int frequency \u003d Integer.parseInt(frequencyAndTime[0]);"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        if (frequency \u003e 7 || frequency \u003c 1) {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            throw new InvalidFrequencyException();"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String startTime \u003d frequencyAndTime[1];"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String endTime \u003d frequencyAndTime[2];"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        if (startTime.length() !\u003d 5 || endTime.length() !\u003d 5) {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            throw new InvalidTimeFormatException();"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String hhStart \u003d startTime.substring(0, 2);"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String mmStart \u003d startTime.substring(3);"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String hhEnd \u003d endTime.substring(0, 2);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String mmEnd \u003d endTime.substring(3);"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            LocalTime.of(Integer.parseInt(hhStart), Integer.parseInt(mmStart));"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            throw new InvalidTimeFormatException();"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            throw new InvalidTimeFormatException();"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        if (Integer.parseInt(mmStart) !\u003d 0) {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            throw new InvalidTimeFormatException();"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            LocalTime.of(Integer.parseInt(hhEnd), Integer.parseInt(mmEnd));"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            throw new InvalidTimeFormatException();"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            throw new InvalidTimeFormatException();"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        if (Integer.parseInt(mmEnd) !\u003d 0) {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            throw new InvalidTimeFormatException();"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        if (startTime.equals(endTime)) {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            throw new StartAndEndTimeSameException();"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        if (LocalTime.of(Integer.parseInt(hhStart), Integer.parseInt(mmStart))"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                .isAfter(LocalTime.of(Integer.parseInt(hhEnd), Integer.parseInt(mmEnd)))) {"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            throw new StartTimeIsAfterEndTimeException();"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        if (LocalTime.of(Integer.parseInt(hhStart), Integer.parseInt(mmStart)).isBefore(LocalTime.of(8, 0))"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            || LocalTime.of(Integer.parseInt(hhEnd), Integer.parseInt(mmEnd)).isBefore(LocalTime.of(8,0))) {"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            throw new StartTimeAndEndTimeTooEarlyException();"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        return new Lesson(description, moduleCode, frequency, startTime, endTime);"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * Used to validate the input in Delete Command."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * @param input representing user input."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * @return returns a DeleteCommand."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * @throws DueQuestException if the input date is of wrong format."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    public static DeleteCommand validateDeleteCommand(String input) throws DueQuestException,"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            MissingDeleteDetailsException, InvalidTimeFormatException, InvalidDateException {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String[] inputLength \u003d input.trim().split(\" \", 2);"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        String moduleCode \u003d \" \";"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        String description;"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        String[] splitViaModule;"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        String[] splitViaDate;"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        String filteredInput;"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        LocalDate date;"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        if (inputLength.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "            throw new MissingDeleteDetailsException();"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        if (!input.contains(\"/\")) {"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "            moduleCode \u003d null;"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        if (moduleCode !\u003d null \u0026\u0026 (input.charAt(7) \u003d\u003d (\u0027c\u0027) \u0026\u0026 input.charAt(8) \u003d\u003d (\u0027/\u0027))) { //has a module code"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "            splitViaModule \u003d ((input.split(\"c/\"))[1].trim()).split(\" \", 2);"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "            moduleCode \u003d splitViaModule[0].trim();"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "            if (splitViaModule.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "t170815518"
        },
        "content": "                Storage.getStorage().exportAdditionalData(input);"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                return new DeleteCommand(moduleCode, \"module\");"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "            }"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "            filteredInput \u003d splitViaModule[1].trim();"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "            if (filteredInput.contains(\"/date\")) { //has a module code and date"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                splitViaDate \u003d (filteredInput.split(\"/date\")[1].trim()).split(\" \", 2);"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                date \u003d LocalDate.parse(splitViaDate[0].trim());"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                if (date.isBefore(LocalDate.of(2021,1,1))"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                        || date.isAfter(LocalDate.of(2021,5,31))) {"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                    throw new InvalidDateException();"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                }"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                if (splitViaDate.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "t170815518"
        },
        "content": "                    Storage.getStorage().exportAdditionalData(input);"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                    return new DeleteCommand(moduleCode, \"module\", date); //has module code, has date"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                }"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                description \u003d splitViaDate[1].trim();"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "t170815518"
        },
        "content": "                Storage.getStorage().exportAdditionalData(input);"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                return new DeleteCommand(moduleCode, date, description);"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "            }"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        filteredInput \u003d input.substring(7);"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        if (!filteredInput.contains(\"/date\")) {"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "            description \u003d filteredInput.trim();"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            Storage.getStorage().exportAdditionalData(input);"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "            return new DeleteCommand(description);"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        splitViaDate \u003d filteredInput.split(\"/date\");"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "            date \u003d LocalDate.parse(splitViaDate[1].trim());"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            if (date.isBefore(LocalDate.of(2021,1,1))"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                    || date.isAfter(LocalDate.of(2021,5,31))) {"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                throw new InvalidDateException();"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "            }"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "            throw new InvalidDateException();"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        description \u003d splitViaDate[0].trim();"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        Storage.getStorage().exportAdditionalData(input);"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        return new DeleteCommand(description, date);"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "t170815518"
        },
        "content": "     * Parses DisplayCommand from the input."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "t170815518"
        },
        "content": "     * @param input the user\u0027s input in string"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * @return DisplayCommand."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * @throws WrongDateFormatException if the date in wrong format and cannot be parsed."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * @throws InvalidArgumentsException if the input gives the argument in wrong format."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    public static DisplayCommand parseDisplayCommand(String input) throws WrongDateFormatException,"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            InvalidArgumentsException {"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        String moduleCode \u003d \"\";"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        String[] filteredInput \u003d input.trim().split(\" \",2);"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        if (filteredInput.length \u003d\u003d 1) {  // by default, the display time is now."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "            return new DisplayCommand(LocalDate.now());"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        String[] descriptionWithModuleCode \u003d filteredInput[1].trim().split(\" \", 2);"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        if (!descriptionWithModuleCode[0].equals(\"\") \u0026\u0026 !descriptionWithModuleCode[0].contains(\"/date\")) {"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "            moduleCode \u003d descriptionWithModuleCode[0].trim().toUpperCase();"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "            if (descriptionWithModuleCode.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                return new DisplayCommand(moduleCode);"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        if (input.contains(\"/date\")) {"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "            //split the filtered input into description and date info"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "            String[] dateDetails \u003d filteredInput[1].split(\"/date\",2);"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "            if (dateDetails[1].contains(\"-\")) {"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                String[] dateRange \u003d dateDetails[1].trim().split(\"-\", 2);"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                    return new DisplayCommand(displayDateValidation(dateRange[0]),displayDateValidation(dateRange[1]));"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "t170815518"
        },
        "content": "                    throw new WrongDateFormatException();"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                }"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "            } else if (!moduleCode.equals(\"\")) {"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                    return new DisplayCommand(moduleCode, displayDateValidation(dateDetails[1]));"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                } catch (Exception e) {"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "t170815518"
        },
        "content": "                    throw new WrongDateFormatException();"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                }"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                    return new DisplayCommand(displayDateValidation(dateDetails[1]));"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                } catch (Exception e) {"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "t170815518"
        },
        "content": "                    throw new WrongDateFormatException();"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                }"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        throw new InvalidArgumentsException();"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    public static LocalDate displayDateValidation(String input) throws WrongDateFormatException {"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        String[] date \u003d input.split(\"/\",3);"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        String year \u003d date[0].trim();"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        String month;"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        String day;"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        if (date[1].trim().length() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "            month \u003d \"0\" + date[1].trim().toString();"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        } else if (date[1].trim().length() \u003d\u003d 2) {"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "            month \u003d date[1].trim().toString();"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "            throw  new WrongDateFormatException();"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        if (date[2].trim().length() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "            day \u003d \"0\" + date[2].trim().toString();"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        } else if (date[2].trim().length() \u003d\u003d 2) {"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "            day \u003d date[2].trim().toString();"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "            throw  new WrongDateFormatException();"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        String filterDate \u003d year + \"-\" + month + \"-\" + day;"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        LocalDate specificDate \u003d LocalDate.parse(filterDate);"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        return specificDate;"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * Method to check if a given moduleCode in String format is a valid Module code."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * A valid Module examples. CS2113, CS2113T, DSA4211. Basically got 3 styles."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * This method is mainly for the parser."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * @param moduleCode moduleCode in string form that you want to verify if it is valid."
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * @return true if valid, else false."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    public static boolean verifyModuleCode(String moduleCode) {"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        if (moduleCode.length() \u003c 6 || moduleCode.length() \u003e 7) {"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        char[] charArray \u003d moduleCode.toCharArray();"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        if (charArray.length \u003d\u003d 6) {"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            for (int i \u003d 0; i \u003c 2; i++) {"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                char ch \u003d charArray[i];"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                if (!(ch \u003e\u003d \u0027A\u0027 \u0026\u0026 ch \u003c\u003d \u0027Z\u0027)) {"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            for (int i \u003d 2; i \u003c 6; i++) {"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                char ch \u003d charArray[i];"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                if (!(ch \u003e\u003d \u00270\u0027 \u0026\u0026 ch \u003c\u003d \u00279\u0027)) {"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        } else if (charArray.length \u003d\u003d 7) {"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            // case of if it is like CS2113T"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            if (charArray[2] \u003e\u003d \u00270\u0027 \u0026\u0026 charArray[2] \u003c\u003d \u00279\u0027) {"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                for (int i \u003d 0; i \u003c 2; i++) {"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                    char ch \u003d charArray[i];"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                    if (!(ch \u003e\u003d \u0027A\u0027 \u0026\u0026 ch \u003c\u003d \u0027Z\u0027)) {"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                        return false;"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                for (int i \u003d 2; i \u003c 6; i++) {"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                    char ch \u003d charArray[i];"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                    if (!(ch \u003e\u003d \u00270\u0027 \u0026\u0026 ch \u003c\u003d \u00279\u0027)) {"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                        return false;"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                if (!(charArray[6] \u003e\u003d \u0027A\u0027 \u0026\u0026 charArray[6] \u003c\u003d \u0027Z\u0027)) {"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            } else { // case if DSA4211"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                for (int i \u003d 0; i \u003c 3; i++) {"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                    char ch \u003d charArray[i];"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                    if (!(ch \u003e\u003d \u0027A\u0027 \u0026\u0026 ch \u003c\u003d \u0027Z\u0027)) {"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                        return false;"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                for (int i \u003d 3; i \u003c 7; i++) {"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                    char ch \u003d charArray[i];"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                    if (!(ch \u003e\u003d \u00270\u0027 \u0026\u0026 ch \u003c\u003d \u00279\u0027)) {"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                        return false;"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "    //@@author teachyourselfcoding"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "    public static EditCommand validateEditCommand(String input) throws DueQuestException, WrongDateFormatException,"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "            InvalidDateException {"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        String moduleCode \u003d null;"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        String[] splitViaModule;"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        String filteredInput;"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        if (input.charAt(5) \u003d\u003d \u0027c\u0027 \u0026\u0026 input.charAt(6) \u003d\u003d \u0027/\u0027) {"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "            splitViaModule \u003d ((input.split(\"c/\"))[1].trim()).split(\" \",2);"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "            filteredInput \u003d splitViaModule[1].trim();"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "            moduleCode \u003d splitViaModule[0].trim();"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "            if (!filteredInput.contains(\"/date\")) {"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                String moduleProperty \u003d filteredInput.trim().split(\"/\",2)[0].trim();"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                String newModuleProperty \u003d filteredInput.trim().split(\"/\")[1].trim();"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                if (moduleProperty.equals(\"staff\")"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                        || moduleProperty.equals(\"au\")"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                        || moduleProperty.equals(\"modulecode\")"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                ) {"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                    Storage.getStorage().exportAdditionalData(input);"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                    return new EditModuleCommand(moduleCode, moduleProperty, newModuleProperty);"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                    Ui.printInvalidInputMessage();"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                }"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "            }"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "            filteredInput \u003d input.substring(5);"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        String[] name \u003d filteredInput.trim().split(\"/date\",2);"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        String[] property \u003d name[1].trim().substring(10).trim().split(\"/\",3);"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        String description \u003d name[0].trim();"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        String type \u003d (property[1].toLowerCase()).trim();"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        String newValue \u003d property[2].trim();"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        case \"description\":"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "            //Fall through"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        case \"tasktype\":"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "            //Fall through"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        case \"module code\":"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "            //Fall through"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        case \"modulecode\":"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "            //Fall through"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        case \"time\":"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                LocalDate date \u003d LocalDate.parse(name[1].trim().substring(0, 10).trim()"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                        .replace(\"/\", \"-\"));"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                if (date.isBefore(LocalDate.of(2021,1,1))"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                        || date.isAfter(LocalDate.of(2021,5,31))) {"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                    throw new InvalidDateException();"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                }"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                if (moduleCode \u003d\u003d null) {"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                    Storage.getStorage().exportAdditionalData(input);"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                    return new EditTaskCommand(description, date, type, newValue);"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                }"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                Storage.getStorage().exportAdditionalData(input);"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                return new EditModuleCommand(moduleCode, description, date, type, newValue);"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "            } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                throw new WrongDateFormatException();"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "            } catch (InvalidDateException e) {"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                throw new InvalidDateException();"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "            }"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        case \"frequency\":"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "            //int[] newFrequency \u003d new int[2];"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "            //newFrequency[0] \u003d Integer.parseInt(newValue);"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "            int newFrequency \u003d Integer.parseInt(newValue);"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                LocalDate date \u003d LocalDate.parse(name[1].trim().substring(0, 10)"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                        .trim().replace(\"/\", \"-\"));"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                if (date.isBefore(LocalDate.of(2021,1,1))"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                        || date.isAfter(LocalDate.of(2021,5,31))) {"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                    throw new InvalidDateException();"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                }"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                if (moduleCode \u003d\u003d null) {"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                    Storage.getStorage().exportAdditionalData(input);"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                    return new EditTaskCommand(description, date, type, newFrequency);"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                }"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                Storage.getStorage().exportAdditionalData(input);"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                return new EditModuleCommand(moduleCode, description, date, type, newFrequency);"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "            } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                throw new WrongDateFormatException();"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "            } catch (InvalidDateException e) {"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                throw new InvalidDateException();"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "            }"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        case \"date\":"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                LocalDate date \u003d LocalDate.parse(name[1].trim().substring(0, 10)"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                        .trim().replace(\"/\", \"-\"));"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                if (date.isBefore(LocalDate.of(2021,1,1))"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                        || date.isAfter(LocalDate.of(2021,5,31))) {"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                    throw new InvalidDateException();"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                }"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                LocalDate newDate \u003d LocalDate.parse(newValue.trim().replace(\"/\",\"-\"));"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                if (newDate.isBefore(LocalDate.of(2021,1,1))"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                        || newDate.isAfter(LocalDate.of(2021,5,31))) {"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                    throw new InvalidDateException();"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                }"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                if (moduleCode \u003d\u003d null) {"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                    Storage.getStorage().exportAdditionalData(input);"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                    return new EditTaskCommand(description, date, type, newDate);"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                }"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                Storage.getStorage().exportAdditionalData(input);"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                return new EditModuleCommand(moduleCode, description, date, type, newDate);"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "            } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                throw new WrongDateFormatException();"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "            } catch (InvalidDateException e) {"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                throw new InvalidDateException();"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "            }"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "            Ui.printInvalidEditTypeMessage();"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    public static AddAssessmentCommand validateAddAssessmentCommand(String input) throws InvalidArgumentsException {"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        String[] splitInput \u003d input.split(\" \");"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        String moduleCode;"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        String title;"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        String fullScore;"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        String attemptScore;"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            moduleCode \u003d splitInput[1];"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            title \u003d splitInput[2];"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            fullScore \u003d splitInput[3];"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            throw new InvalidArgumentsException();"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        }"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        return new AddAssessmentCommand(title, fullScore, moduleCode);"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    }"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    public static DeleteAssessmentCommand validateDeleteAssessmentCommand(String input)"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            throws InvalidArgumentsException {"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        String[] splitInput \u003d input.split(\" \");"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        String moduleCode;"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        String title;"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            moduleCode \u003d splitInput[1];"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            title \u003d splitInput[2];"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            throw new InvalidArgumentsException();"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        }"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        return new DeleteAssessmentCommand(moduleCode, title);"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    }"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    public static ScoreAssessmentCommand validateScoreAssessmentCommand(String input) throws InvalidArgumentsException,"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            InvalidScoreException {"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        String[] splitInput \u003d input.split(\" \");"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        String moduleCode;"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        String title;"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        String attemptScore;"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            moduleCode \u003d splitInput[1];"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            title \u003d splitInput[2];"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            attemptScore \u003d splitInput[3];"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            return new ScoreAssessmentCommand(moduleCode, title, attemptScore);"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            throw new InvalidArgumentsException();"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        } catch (InvalidScoreException e) {"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            throw new InvalidScoreException();"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        }"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    }"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "t170815518": 90,
      "haroic1997": 96,
      "sunxiuqi-stacked": 5,
      "teachyourselfcoding": 166,
      "acyang97": 399
    }
  },
  {
    "path": "src/main/java/seedu/ScheduleManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "acyang97"
        },
        "content": "package seedu;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "import seedu.exception.InvalidStartEndDateException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "import seedu.exception.InvalidDateException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.exception.ModuleDoesNotExistException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "import seedu.exception.StartAndEndTimeSameException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.task.Deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.task.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.task.Lesson;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "acyang97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haroic1997"
        },
        "content": " * READ THIS FIRST!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "acyang97"
        },
        "content": " * Class for ScheduleManager."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "acyang97"
        },
        "content": " * Contains the schedule for the user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "acyang97"
        },
        "content": " * We will assume that the ScheduleManager is built for AY 2020/2021 Semester 2."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "acyang97"
        },
        "content": " * NonLessonDates includes - Winter Break, Reading weeks, Examination week."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "acyang97"
        },
        "content": " * Dates of the following are obtained from NUS website."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "acyang97"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "acyang97"
        },
        "content": "public class ScheduleManager {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    private TreeMap\u003cLocalDate, ArrayList\u003cTask\u003e\u003e semesterSchedule \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    private HashSet\u003cLocalDate\u003e listOfNonLessonDates \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * Constructor for ScheduleManager if a ScheduleManager already exist."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "     * @param semesterSchedule treeMap object of Local Date and List of Task"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    public ScheduleManager(TreeMap\u003cLocalDate, ArrayList\u003cTask\u003e\u003e semesterSchedule) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        this.semesterSchedule \u003d semesterSchedule;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    public TreeMap\u003cLocalDate, ArrayList\u003cTask\u003e\u003e getSemesterSchedule() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        return semesterSchedule;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    public void setSemesterSchedule(TreeMap\u003cLocalDate, ArrayList\u003cTask\u003e\u003e semesterSchedule) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        this.semesterSchedule \u003d semesterSchedule;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * Constructor for ScheduleManager if a ScheduleManager has yet to be created."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * Main role is to populate the HashMap with the dates in the year as the \u0027key\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * and an empty list of task as the value."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    public ScheduleManager() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        this.semesterSchedule \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        for (LocalDate date \u003d LocalDate.of(2021, 1, 1);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "acyang97"
        },
        "content": "             date.isBefore(LocalDate.of(2021, 6, 1));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "acyang97"
        },
        "content": "             date \u003d date.plusDays(1)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            this.semesterSchedule.put(date, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        for (LocalDate date \u003d LocalDate.of(2021, 1, 1);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "acyang97"
        },
        "content": "             date.isBefore(LocalDate.of(2021, 1, 11));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "acyang97"
        },
        "content": "             date \u003d date.plusDays(1)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            this.listOfNonLessonDates.add(date);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        for (LocalDate date \u003d LocalDate.of(2021, 2, 20);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "acyang97"
        },
        "content": "             date.isBefore(LocalDate.of(2021, 3, 1));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "acyang97"
        },
        "content": "             date \u003d date.plusDays(1)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            this.listOfNonLessonDates.add(date);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        for (LocalDate date \u003d LocalDate.of(2021, 4, 17);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "acyang97"
        },
        "content": "             date.isBefore(LocalDate.of(2021, 5, 9));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "acyang97"
        },
        "content": "             date \u003d date.plusDays(1)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            this.listOfNonLessonDates.add(date);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        for (LocalDate date \u003d LocalDate.of(2021, 5, 9);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "acyang97"
        },
        "content": "             date.isBefore(LocalDate.of(2021, 6, 1));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "acyang97"
        },
        "content": "             date \u003d date.plusDays(1)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            this.listOfNonLessonDates.add(date);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * Add lessons to the day of the week that the lesson is conducted in."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * @param lesson lesson to be added to the schedule manager."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    public void addLesson(Lesson lesson, ModuleManager moduleManager, Ui ui) throws ModuleDoesNotExistException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        DayOfWeek day \u003d lesson.getLessonDayInDayOfWeek();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        if (!moduleManager.getListOfModuleCodes().contains(lesson.getModuleCode())) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            throw new ModuleDoesNotExistException();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        if (checkIfLessonToBeAddedClashesWithCurrentTimetable((lesson))) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            ui.printClashesMessage();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        for (Map.Entry\u003cLocalDate, ArrayList\u003cTask\u003e\u003e entry : this.semesterSchedule.entrySet()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            LocalDate key \u003d entry.getKey();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            if (!this.listOfNonLessonDates.contains(key)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                if (key.getDayOfWeek().getValue() \u003d\u003d day.getValue()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                    this.semesterSchedule.get(key).add(lesson);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        moduleManager.addTaskToModule(lesson, lesson.getModuleCode());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        Ui.printLessonAddedMessage();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    public boolean checkIfLessonToBeAddedClashesWithCurrentTimetable(Lesson lesson) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        DayOfWeek day \u003d lesson.getLessonDayInDayOfWeek();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        for (Map.Entry\u003cLocalDate, ArrayList\u003cTask\u003e\u003e entry : this.semesterSchedule.entrySet()) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            LocalDate key \u003d entry.getKey();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            if (!this.listOfNonLessonDates.contains(key)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                if (key.getDayOfWeek().getValue() \u003d\u003d day.getValue()) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                    if (checkIfLessonToBeAddedClashesInADate(lesson, key)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                        return true;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    public boolean checkIfLessonToBeAddedClashesInADate(Lesson lesson, LocalDate date) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        ArrayList\u003cTask\u003e listOfTasks \u003d this.semesterSchedule.get(date);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        LocalTime startTimeOfLesson \u003d lesson.getStartTimeInLocalTime();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        LocalTime endTimeOfLesson \u003d lesson.getEndTimeInLocalTime();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        for (Task task : listOfTasks) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            if (task instanceof Lesson) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                LocalTime startTimeOfTask \u003d ((Lesson) task).getStartTimeInLocalTime();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                LocalTime endTimeOfTask \u003d ((Lesson) task).getEndTimeInLocalTime();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                if (startTimeOfLesson.equals(endTimeOfTask) || startTimeOfLesson.isAfter(endTimeOfTask)) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                    //break;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                if (endTimeOfLesson.equals(startTimeOfTask) || endTimeOfLesson.isBefore(startTimeOfTask)) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                    //break;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            if (task instanceof Event) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                LocalTime startTimeOfTask \u003d ((Event) task).getStartTimeOfEventInLocalTime();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                LocalTime endTimeOfTask \u003d ((Event) task).getEndTimeOfEventInLocalTime();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                if (startTimeOfLesson.equals(endTimeOfTask) || startTimeOfLesson.isAfter(endTimeOfTask)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                    //break;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                if (endTimeOfLesson.equals(startTimeOfTask) || endTimeOfLesson.isBefore(startTimeOfTask)) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                    //break;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    public boolean checkIfEventToBeAddedClashesInADate(Event event, LocalDate date) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        ArrayList\u003cTask\u003e listOfTasks \u003d this.semesterSchedule.get(date);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        LocalTime startTimeOfEvent \u003d event.getStartTimeOfEventInLocalTime();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        LocalTime endTimeOfEvent \u003d event.getEndTimeOfEventInLocalTime();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        for (Task task : listOfTasks) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            if (task instanceof Lesson) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                LocalTime startTimeOfTask \u003d ((Lesson) task).getStartTimeInLocalTime();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                LocalTime endTimeOfTask \u003d ((Lesson) task).getEndTimeInLocalTime();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                if (startTimeOfEvent.equals(endTimeOfTask) || startTimeOfEvent.isAfter(endTimeOfTask)) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                    //break;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                if (endTimeOfEvent.equals(startTimeOfTask) || endTimeOfEvent.isBefore(startTimeOfTask)) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                    //break;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            if (task instanceof Event) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                LocalTime startTimeOfTask \u003d ((Event) task).getStartTimeOfEventInLocalTime();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                LocalTime endTimeOfTask \u003d ((Event) task).getEndTimeOfEventInLocalTime();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                if (startTimeOfEvent.equals(endTimeOfTask) || startTimeOfEvent.isAfter(endTimeOfTask)) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                    //break;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                if (endTimeOfEvent.equals(startTimeOfTask) || endTimeOfEvent.isBefore(startTimeOfTask)) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                    //break;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    /**."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * Deadline only got 1 day, so just filter for the"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * date where I need to add the deadline,"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * @param deadline add deadline inside the list of tasks of the schedule manager."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    public void addDeadline(Deadline deadline, ModuleManager moduleManager) throws ModuleDoesNotExistException {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        if (!moduleManager.getListOfModuleCodes().contains(deadline.getModuleCode())) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            throw new ModuleDoesNotExistException();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        LocalDate date \u003d LocalDate.parse(deadline.getDeadline());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        this.semesterSchedule.get(date).add(deadline);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        moduleManager.addTaskToModule(deadline, deadline.getModuleCode());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * Event only got 1 date, so just filter for the"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * date where I need to add the event."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * @param event add event inside the list of tasks of the schedule manager."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    public void addEvent(Event event, ModuleManager moduleManager, Ui ui) throws ModuleDoesNotExistException {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        LocalDate date \u003d LocalDate.parse(event.getDateOfEvent());"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        if (!moduleManager.getListOfModuleCodes().contains(event.getModuleCode())) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            throw new ModuleDoesNotExistException();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        if (checkIfEventToBeAddedClashesInADate(event, date)) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            ui.printClashesMessage();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        this.semesterSchedule.get(date).add(event);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        if (!event.getModuleCode().equals(\"\")) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "            moduleManager.addTaskToModule(event, event.getModuleCode());"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        if (!event.getModuleCode().equals(\"\")) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "            Ui.printEventAddedMessage();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "            Ui.printEventAddedtoScheduleOnlyMessage();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    //@@author sunxiuqi-stacked"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    public void editTask(String description, LocalDate date, String type, String newProperty, String moduleCode) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        //edit property of module task on a certain date"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        for (Task task : semesterSchedule.get(date)) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "            switch (type) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "            case \"description\":"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                if (task.getDescription().equals(description) \u0026\u0026 task.getModuleCode().equals(moduleCode)) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                    task.setDescription(newProperty);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "            case \"tasktype\":"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                if (task.getDescription().equals(description) \u0026\u0026 task.getModuleCode().equals(moduleCode)) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                    task.setTasktype(newProperty);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "            case \"module code\":"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                if (task.getDescription().equals(description) \u0026\u0026 task.getModuleCode().equals(moduleCode)) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                    task.setModulecode(newProperty);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "            case \"time\":"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                if (task.getDescription().equals(description) \u0026\u0026 task.getModuleCode().equals(moduleCode)) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                    task.setTime(newProperty);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                Ui.printInvalidEditTypeMessage();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "            } Ui.printModuleTaskEditedMessage();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    public void editTask(String description, LocalDate date, String type, String newProperty) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        //edit property of task on a certain date"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        boolean edited \u003d false;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        for (Task task : semesterSchedule.get(date)) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "            switch (type) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "            case \"description\":"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                if (task.getDescription().equals(description)) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                    task.setDescription(newProperty);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                    edited \u003d true;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "            case \"tasktype\":"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                if (task.getDescription().equals(description)) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                    task.setTasktype(newProperty);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                    edited \u003d true;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "            case \"module code\":"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                if (task.getDescription().equals(description)) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                    task.setModulecode(newProperty);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                    edited \u003d true;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "            case \"time\":"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                if (task.getDescription().equals(description)) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                    task.setTime(newProperty);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                    edited \u003d true;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                Ui.printInvalidEditTypeMessage();"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "            }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        if (edited) {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "            Ui.printSuccessfulEdit();"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        Ui.printTaskNotEditedMessage();"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    public void editTask(String description, LocalDate date, String property, int newFrequency, String moduleCode) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        //edit frequency of module\u0027s task"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        for (Task task : semesterSchedule.get(date)) {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "            if (task.getDescription().equals(description) \u0026\u0026 task.getModuleCode().equals(moduleCode)) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                task.setFrequency(newFrequency);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "            }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    public void editTask(String description, LocalDate date, String property, int newFrequency) {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        //edit frequency of task"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        boolean edited \u003d false;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        for (Task task : semesterSchedule.get(date)) {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "            if (task.getDescription().equals(description)) {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                task.setFrequency(newFrequency);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                edited \u003d true;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "            }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        if (edited) {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "            Ui.printTaskFrequencyEditedMessage();"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        Ui.printTaskFrequencyNotEditedMessage();"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    public void editTask(String description, LocalDate date, String property, LocalDate newDate, String moduleCode) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        //edit date of module task"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        boolean edited \u003d false;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        for (Task task : semesterSchedule.get(date)) {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "            if (task.getDescription().equals(description) \u0026\u0026 task.getModuleCode().equals(moduleCode)) {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                semesterSchedule.get(newDate).add(task);"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                edited \u003d true;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "            }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        if (edited) {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "            for (Task newTask : semesterSchedule.get(newDate)) {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                if ((newTask.getDescription().equals(description)) \u0026\u0026 newTask.getModuleCode().equals(moduleCode)) {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                    newTask.setDate(newDate.toString()); //Need to change later"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "            }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "            deleteTask(description, date);"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    public void editTask(String description, LocalDate date, String property, LocalDate newDate) {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        //edit date of  task"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        boolean edited \u003d false;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        for (Task task : semesterSchedule.get(date)) {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "            if (task.getDescription().equals(description)) {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                semesterSchedule.get(newDate).add(task);"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                edited \u003d true;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "            }"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        if (edited) {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "            for (Task newTask : semesterSchedule.get(newDate)) {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                if (newTask.getDescription().equals(description)) {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                    newTask.setDate(newDate.toString()); //Need to change later"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "            }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "            deleteTask(description, date);"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "            Ui.printTaskDateEditedMessage();"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        }"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        Ui.printTaskDateNotEditedMessage();"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    }"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    public void deleteTask(String description, LocalDate date) {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        //delete all tasking matching description on date"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        boolean deleted \u003d false;"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        for (Task task : semesterSchedule.get(date)) {"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "            if (semesterSchedule.get(date).size() !\u003d 0) {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                if (task.getDescription().equals(description)) {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                    deleted \u003d true;"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        if (deleted) {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "            if (semesterSchedule.get(date).size() !\u003d 0) {"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "                semesterSchedule.get(date).removeIf(task -\u003e task.getDescription().equals(description));"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "            Ui.printTaskDeletedMessage();"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        Ui.printTaskNotDeletedMessage();"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    public void deleteTask(String moduleCode, String description, LocalDate date) {"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        //delete all task matching description and module code on date"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        boolean deleted \u003d false;"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        if (semesterSchedule.get(date).size() !\u003d 0) {"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "            for (Task task : semesterSchedule.get(date)) {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                if (task.getModuleCode().equals(moduleCode) \u0026\u0026 task.getDescription().equals(description)) {"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                    deleted \u003d true;"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                }"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "            }"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "            if (deleted) {"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                Ui.printTaskDeletedMessage();"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                semesterSchedule.get(date).removeIf(task -\u003e task.getModuleCode().equals(moduleCode)"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                        \u0026\u0026 task.getDescription().equals(description));"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                Ui.printTaskNotDeletedMessage();"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "            }"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "    public void deleteTask(LocalDate date, String moduleCode) { //delete all tasking matching  module code on date"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        boolean deleted \u003d false;"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        if (semesterSchedule.get(date).size() !\u003d 0) {"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "            for (Task task : semesterSchedule.get(date)) {"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                if (task.getModuleCode().equals(moduleCode)) {"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                    deleted \u003d true;"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                }"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "            }"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "            if (deleted) {"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                Ui.printModuleTaskDateDeletedMessage();"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                semesterSchedule.get(date).removeIf(task -\u003e task.getModuleCode().equals(moduleCode));"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                Ui.printModuleTaskDateNotDeletedMessage();"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "    public void deleteTask(String description, String moduleCode) { //delete all tasking matching module code"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        boolean deleted \u003d false;"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        for (LocalDate date \u003d LocalDate.of(2021, 1, 1);"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "             date.isBefore(LocalDate.of(2021, 6, 1)); date \u003d date.plusDays(1)) {"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "            if (semesterSchedule.get(date).size() !\u003d 0) {"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                for (Task task : semesterSchedule.get(date)) {"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                    if (task.getModuleCode().equals(moduleCode)) {"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                        deleted \u003d true;"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                }"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                semesterSchedule.get(date).removeIf(task -\u003e task.getModuleCode().equals(moduleCode));"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "            }"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        if (!deleted) {"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "            Ui.printTaskModuleCodeNotDeletedMessage();"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        Ui.printTaskModuleCodeDeletedMessage();"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "    public void deleteTask(String description) { //delete all task matching description"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        boolean deleted \u003d false;"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        for (LocalDate date \u003d LocalDate.of(2021, 1, 1);"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "             date.isBefore(LocalDate.of(2021, 6, 1)); date \u003d date.plusDays(1)) {"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "                if (semesterSchedule.get(date).size() !\u003d 0) {"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                    for (Task task : semesterSchedule.get(date)) {"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                        if (task.getDescription().equals(description)) {"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                            deleted \u003d true;"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                    if (!deleted) {"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                        Ui.printTaskNotDeletedMessage();"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                        return;"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "                    semesterSchedule.get(date).removeIf(task -\u003e task.getDescription().equals(description));"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "t170815518"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            }"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        Ui.printTaskDeletedMessage();"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    /**."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "     * based on the system date, it will retrieved the task for today\u0027s date"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    public void displayTodaySchedule() {"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        LocalDate todayDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        if (todayDate.isBefore(LocalDate.of(2021, 1, 1))"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                || todayDate.isAfter(LocalDate.of(2021,5,31))) {"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "            Ui.printDisplayTodayNotWithinSemester();"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        Ui.print(\"Today\u0027s Schedule:\");"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        ArrayList\u003cTask\u003e taskList \u003d semesterSchedule.get(todayDate);"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        ArrayList\u003cTask\u003e nonLessonList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String[] timing \u003d {\"08:00\", \"09:00\", \"10:00\", \"11:00\", \"12:00\", \"13:00\", \"14:00\", \"15:00\", \"16:00\", \"17:00\","
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            \"18:00\", \"19:00\", \"20:00\", \"21:00\", \"22:00\", \"23:00\"};"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        for (Task t : taskList) {"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            if (t instanceof Lesson) {"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                String startTime \u003d ((Lesson) t).getStartTime();"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                String endTime \u003d ((Lesson) t).getEndTime();"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                boolean hasStart \u003d false;"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                boolean hasEnd \u003d false;"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                for (int i \u003d 0; i \u003c timing.length; i++) {"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                    if (timing[i].substring(0, 5).equals(startTime)) {"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                        hasStart \u003d true;"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                        timing[i] \u003d timing[i] + \" \" + t.getDescription() + \" - \" + t.getModuleCode() + \" |\";"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                    } else if (timing[i].substring(0, 5).equals(endTime)) {"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                        hasEnd \u003d false;"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                        hasStart \u003d false;"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                    } else if (hasStart \u0026\u0026 !hasEnd) {"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                        timing[i] \u003d timing[i] + \" \" + t.getDescription() + \" - \" + t.getModuleCode() + \" |\";"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "            } else if (t instanceof Event) {"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                String startTime \u003d ((Event) t).getStartTimeOfEvent();"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                String endTime \u003d ((Event) t).getEndTimeOfEvent();"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                boolean hasStart \u003d false;"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                boolean hasEnd \u003d false;"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                for (int i \u003d 0; i \u003c timing.length; i++) {"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                    if (timing[i].substring(0, 5).equals(startTime)) {"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                        hasStart \u003d true;"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                        timing[i] \u003d timing[i] + \" \" + t.getDescription() + \" - \" + t.getModuleCode() + \" |\";"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                    } else if (timing[i].substring(0, 5).equals(endTime)) {"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                        hasEnd \u003d false;"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                        hasStart \u003d false;"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                    } else if (hasStart \u0026\u0026 !hasEnd) {"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                        timing[i] \u003d timing[i] + \" \" + t.getDescription() + \" - \" + t.getModuleCode() + \" |\";"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                }"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                nonLessonList.add(t);"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        for (String i : timing) {"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            Ui.print(i);"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        Ui.print(\"\\nToday\u0027s deadline:\");"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        Ui.printListGenericType(nonLessonList, \"deadline\");"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "     * Displays tasks on the days within the range."
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "     * The error message will be printed if startDay and endDay gives wrong range (e.g. endDay \u003c startDay)."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "     * @param startDate the start of the range."
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "     * @param endDate   the end of the range."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    public void display(LocalDate startDate, LocalDate endDate) throws InvalidStartEndDateException,"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "            StartAndEndTimeSameException {"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        if (startDate.isAfter(endDate)) {"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "            throw new InvalidStartEndDateException();"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        } else if (startDate.isEqual(endDate)) {"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "            throw new StartAndEndTimeSameException();"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        Ui.print(\"List of task from \""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                + Ui.convertDateToStringWithYear(startDate)"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                + \" to \""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                + Ui.convertDateToStringWithYear(endDate));"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        for (LocalDate date \u003d LocalDate.of(2021, 1, 1);"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "             date.isBefore(LocalDate.of(2021, 6, 1)); date \u003d date.plusDays(1)) {"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "            if (date.isEqual(startDate)) {"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                if (semesterSchedule.get(date).size() !\u003d 0) {"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                    Ui.print(date.format(DateTimeFormatter.ofPattern(\"MMM d\"))"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                            + \" :\");"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                    Ui.printListGenericType(semesterSchedule.get(date), \"deadline\");"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "            } else if (date.isAfter(startDate) \u0026\u0026 date.isBefore(endDate)) {"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                if (semesterSchedule.get(date).size() !\u003d 0) {"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                    Ui.print(date.format(DateTimeFormatter.ofPattern(\"MMM d\"))"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                            + \" :\");"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                    Ui.printListGenericType(semesterSchedule.get(date), \"deadline\");"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                }"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "            } else if (date.isEqual(endDate)) {"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                if (semesterSchedule.get(date).size() !\u003d 0) {"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                    Ui.print(date.format(DateTimeFormatter.ofPattern(\"MMM d\"))"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                            + \" :\");"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                    Ui.printListGenericType(semesterSchedule.get(date), \"deadline\");"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                }"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * Method to display the schedule of 1 date."
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * @param date that user wants to see the schedule of."
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    public void displayDate(LocalDate date) throws InvalidDateException {"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String startTime \u003d null;"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String endTime \u003d null;"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        boolean taskIsLessonOrEvent \u003d false;"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        ArrayList\u003cTask\u003e taskList \u003d semesterSchedule.get(date);"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        if (taskList \u003d\u003d null) {"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "            throw new InvalidDateException();"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        Ui.print(\"Here is your schedule on \" + date.toString() + \"!! :)\");"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        ArrayList\u003cDeadline\u003e deadlineList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String[] timing \u003d {\"08:00\", \"09:00\", \"10:00\", \"11:00\", \"12:00\", \"13:00\", \"14:00\", \"15:00\", \"16:00\", \"17:00\","
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "            \"18:00\", \"19:00\", \"20:00\", \"21:00\", \"22:00\", \"23:00\""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        };"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        for (Task t : taskList) {"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            if (t instanceof Lesson) {"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                startTime \u003d ((Lesson) t).getStartTime();"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                endTime \u003d ((Lesson) t).getEndTime();"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                boolean hasStart \u003d false;"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                boolean hasEnd \u003d false;"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                for (int i \u003d 0; i \u003c timing.length; i++) {"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                    if (timing[i].substring(0, 5).equals(startTime)) {"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                        hasStart \u003d true;"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                        timing[i] \u003d timing[i] + \" \" + t.getDescription() + \" - \" + t.getModuleCode() + \" |\";"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                    } else if (timing[i].substring(0, 5).equals(endTime)) {"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                        hasEnd \u003d false;"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                        hasStart \u003d false;"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                    } else if (hasStart \u0026\u0026 !hasEnd) {"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                        timing[i] \u003d timing[i] + \" \" + t.getDescription() + \" - \" + t.getModuleCode() + \" |\";"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            } else if (t instanceof Event) {"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                startTime \u003d ((Event) t).getStartTimeOfEvent();"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                endTime \u003d ((Event) t).getEndTimeOfEvent();"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                boolean hasStart \u003d false;"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                boolean hasEnd \u003d false;"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                for (int i \u003d 0; i \u003c timing.length; i++) {"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                    if (timing[i].substring(0, 5).equals(startTime)) {"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                        hasStart \u003d true;"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                        if (!t.getModuleCode().equals(\"\")) {"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                            timing[i] \u003d timing[i] + \" \" + t.getDescription() + \" - \" + t.getModuleCode() + \" at \""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                                    + ((Event) t).getAt() + \" |\";"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                            timing[i] \u003d timing[i] + \" \" + t.getDescription() + \" - \" + \"at \""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                                    + ((Event) t).getAt() + \" |\";"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                    } else if (timing[i].substring(0, 5).equals(endTime)) {"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                        hasEnd \u003d false;"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                        hasStart \u003d false;"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                    } else if (hasStart \u0026\u0026 !hasEnd) {"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                        if (!t.getModuleCode().equals(\"\")) {"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                            timing[i] \u003d timing[i] + \" \" + t.getDescription() + \" - \" + t.getModuleCode() + \" at \""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                                    + ((Event) t).getAt() + \" |\";"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                            timing[i] \u003d timing[i] + \" \" + t.getDescription() + \" - \" + \"at \""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                                    + ((Event) t).getAt() + \" |\";"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                deadlineList.add((Deadline) t);"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        for (String i : timing) {"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            Ui.print(i);"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        deadlineList \u003d addToDeadlineList(date, deadlineList);"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        //Ui.print(\"\\nDeadlines on \" + date.toString() + \":\" );"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        Ui.print(\"\\nUpcoming Deadlines :\");"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        Ui.printListGenericType(deadlineList, \"deadline\");"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    /**."
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * Adds deadlines of the next 7 days from current day to the non lesson and event list"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * @param currentDate current date specified."
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * @param list        list of the Deadlines where more deadlines will be added to."
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * @return list of Deadlins"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    private ArrayList\u003cDeadline\u003e addToDeadlineList(LocalDate currentDate, ArrayList\u003cDeadline\u003e list) {"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        LocalDate oneWeekAfterCurrentDate \u003d currentDate.plusDays(7);"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        currentDate \u003d currentDate.plusDays(1);"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        for (LocalDate date \u003d currentDate; date.isBefore(oneWeekAfterCurrentDate); date \u003d date.plusDays(1)) {"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            for (Task task : this.semesterSchedule.get(date)) {"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                if (task instanceof Deadline) {"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                    list.add((Deadline) task);"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    public int getNumberOfTaskInADay(LocalDate date) {"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        return semesterSchedule.get(date).size();"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "acyang97"
        },
        "content": "}"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "t170815518": 4,
      "haroic1997": 120,
      "sunxiuqi-stacked": 161,
      "teachyourselfcoding": 53,
      "-": 18,
      "acyang97": 340
    }
  },
  {
    "path": "src/main/java/seedu/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "package seedu;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "t170815518"
        },
        "content": "import seedu.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "t170815518"
        },
        "content": "import seedu.exception.ModuleNotExistsException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "t170815518"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "t170815518"
        },
        "content": " * Class handles data storage for DueQuest."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "t170815518"
        },
        "content": " * It is designed as Singleton."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haroic1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    public static final String DEFAULT_FILE_PATH \u003d \"data\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    private static Storage storage \u003d null;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    private File directory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    private File additionalFile;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    private boolean isImport;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    /**."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "     * Create a constructor with specific directory path"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "t170815518"
        },
        "content": "     * @param directoryPath the path of storage"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    private Storage(String directoryPath) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        this.directory \u003d new File(directoryPath);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        this.isImport \u003d true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        if (!this.directory.isDirectory()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            this.directory.mkdirs();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        additionalFile \u003d new File(this.directory.getAbsolutePath() + \"/additional.txt\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        if (!additionalFile.exists()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "t170815518"
        },
        "content": "                additionalFile.createNewFile();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            } catch (IOException ioException) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                Ui.printAddtionalTxtCreationError();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    public void loadData(ScheduleManager scheduleManager, ModuleManager moduleManager,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "t170815518"
        },
        "content": "                         Ui ui) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        Ui.printFileLoadingMessage();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        File[] files \u003d this.directory.listFiles();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            for (File moduleFile : files) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "t170815518"
        },
        "content": "                if (moduleFile.getName().contains(\"additional.txt\")) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "t170815518"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "t170815518"
        },
        "content": "                }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "t170815518"
        },
        "content": "                processFile(scheduleManager, moduleManager, ui, moduleFile);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            // no file in dir, so just ignore the iteration"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        processFile(scheduleManager, moduleManager, ui, this.additionalFile);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        Ui.printFileLoadedMessage();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        this.isImport \u003d false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    private void processFile(ScheduleManager scheduleManager, ModuleManager moduleManager, Ui ui, File moduleFile) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        Scanner scanner \u003d null;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            scanner \u003d new Scanner(moduleFile);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            System.out.printf(\"%s cannot be loaded.\\n\", moduleFile.getName());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            while (scanner.hasNextLine()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "t170815518"
        },
        "content": "                Command command \u003d null;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "t170815518"
        },
        "content": "                String nextLine \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "t170815518"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "t170815518"
        },
        "content": "                    command \u003d Parser.parse(nextLine);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "t170815518"
        },
        "content": "                } catch (DueQuestException e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "t170815518"
        },
        "content": "                    System.out.printf(\"%s cannot be parsed correctly.\\n\", nextLine);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "t170815518"
        },
        "content": "                }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "t170815518"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "t170815518"
        },
        "content": "                    if (command !\u003d null) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "t170815518"
        },
        "content": "                        command.execute(scheduleManager, moduleManager, ui);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "t170815518"
        },
        "content": "                } catch (Exception e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                    e.printStackTrace();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "t170815518"
        },
        "content": "                }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "t170815518"
        },
        "content": "     * Exports the modules and tasks to the file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "t170815518"
        },
        "content": "     * @param moduleManager moduleManager of Duke"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    public void exportData(ModuleManager moduleManager, String moduleCode) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        if (isImport) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            return; // avoid duplicate export"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        File moduleFile \u003d new File(this.directory.getAbsolutePath() + \u0027/\u0027 + moduleCode + \".txt\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            if (!moduleFile.exists()) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "t170815518"
        },
        "content": "                moduleFile.createNewFile();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            FileWriter moduleWriter \u003d new FileWriter(moduleFile, false);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            moduleWriter.write(moduleManager.getModule(moduleCode).export());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            moduleWriter.close();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "            Ui.printFileWritingError();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        } catch (ModuleNotExistsException e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "            Ui.printModuleMissingWritingError();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    public void exportData(ModuleManager moduleManager) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        if (isImport) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        for (String moduleCode : moduleManager.getListOfModuleCodes()) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            exportData(moduleManager, moduleCode);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    public void exportAdditionalData(String command) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        if (isImport) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(this.additionalFile, true);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            fileWriter.write(command + \u0027\\n\u0027);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            fileWriter.close();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "            Ui.printAddtionalTxtWritingError();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    /**."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "t170815518"
        },
        "content": "     * TODO: test empty directoryPath"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "t170815518"
        },
        "content": "     * @param directoryPath the path of storage directory"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "t170815518"
        },
        "content": "     * @return newly created storage object"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    public static Storage setUpStorage(String directoryPath) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        if (Storage.storage \u003d\u003d null) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            storage \u003d new Storage(Objects.requireNonNullElse(directoryPath, DEFAULT_FILE_PATH));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            return storage;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            return Storage.storage;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    public static Storage getStorage() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        return storage;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "t170815518": 122,
      "haroic1997": 32,
      "sunxiuqi-stacked": 6,
      "acyang97": 2
    }
  },
  {
    "path": "src/main/java/seedu/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "package seedu;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "t170815518"
        },
        "content": "import seedu.module.Assessment;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "import seedu.module.Module;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haroic1997"
        },
        "content": " * Represents the Class for functions related to the CLI User interface"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haroic1997"
        },
        "content": " * and used to print out exception messages for troubleshooting purpose."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haroic1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    private Scanner scanner;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    private static String SEPARATOR \u003d \"\u003c--------------------------------------------------------------\u003e\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "t170815518"
        },
        "content": "     * Constructor of Ui."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "t170815518"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * Print out the on startup message."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    public void welcomeMessage() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        String welcomeMessage \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                \"_____________________________________________\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                        + \"Whats up people! DueQuest is here to save the day\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                        + \"DueQuest for students by students\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                        + \"So, what can I do for you?\\n\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        System.out.print(welcomeMessage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * Print out the exit message."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    public void byeMessage() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        String byeMessage \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                \"Aye captain. This is DueQuest Signing out!\\n\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        System.out.print(byeMessage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * Prints out message for the help guide when a HelpCommand is execute."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    public void printHelpGuide() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String helpMessage \u003d \" This is the list of Command Available, please refer to the User Guide\\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                + \" display          - display today\u0027s Schedule, module info, list of Task \\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                + \" module           - add a module\\n\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                + \" add              - add a deadline, event, lesson\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                + \" edit             - edit information\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                + \" delete           - delete task in a module\\n\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "t170815518"
        },
        "content": "                + \" assessment       - create an assessment\\n\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "t170815518"
        },
        "content": "                + \" delete_assessment- delete an assessment\\n\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "t170815518"
        },
        "content": "                + \" score            - score the assessment\\n\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "t170815518"
        },
        "content": "                + \" bye              - exit DueQuest\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        print(helpMessage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * Scan and Read in user input on the CLI."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * @return String command."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        System.out.println(\"Please type the next command!\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        String commandString;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        if (scanner.hasNextLine()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "            commandString \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "            commandString \u003d \"\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        return commandString;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "     * use the scanner to check if there is an input"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    public boolean hasNextLine() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        return scanner.hasNextLine();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    public void printClashesMessage() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        System.out.println(\"Clashes detected, task is not added.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    public static void printSeparator() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * Prints the Exception information based on the parameters."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * @param e DukeExceptionType."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    public void showError(DueQuestExceptionType e) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        switch (e) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        case MISSING_DEADLINE:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "            System.out.println(\"Missing Deadline!\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        case MISSING_EVENT_INFO:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "            System.out.println(\"Missing Event Information!\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        case WRONG_INPUT_FORMAT:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "            System.out.println(\"Wrong Input format\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        case MISSING_DESCRIPTION:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "            System.out.println(\"Missing Description!\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        case WRONG_DATE_FORMAT:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "            System.out.println(\"Missing Or Wrong Date Format! Enter in DD-MM-YYYY:\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        case INVALID_COMMAND:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "            System.out.println(\"No proper Commands Detected, retype again!\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    public static void print(String text) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        System.out.println(text);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * Used to print any generic list."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * @param lists the provided list of generic type."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "     * @param \u003cT\u003e   the object type"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    public static \u003cT\u003e void printListGenericType(ArrayList\u003cT\u003e lists, String modifier) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        if (lists !\u003d null) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "            for (T i : lists) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                print(i.toString());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        if (lists.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "            System.out.println(\"You don\u0027t have any \" + modifier + \"!\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        print(\"\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * Convert LocalDate object into readable string format without year."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * E.g 12 JUN."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "     * @param date Local date object to convert"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "     * @return String"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    public static String convertDateToString(LocalDate date) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        String stringDate \u003d date.format(DateTimeFormatter.ofPattern(\"d MMM\"));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        return stringDate;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * Convert LocalDate object into readable string format with year included."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * E.g 12 JUN 20."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * @param date date to be converted."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * @return string form of the converted LocalDate object with year."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    public static String convertDateToStringWithYear(LocalDate date) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        String stringDate \u003d date.format(DateTimeFormatter.ofPattern(\"d MMM YY\"));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        return stringDate;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    public static void printInvalidArgumentsErrorMessage() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        System.out.println(\"Sorry, please check your arguments again.\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    public static void printModuleAlreadyExistMessage() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        System.out.println(\"The module with the same code already exists.\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    public static void printModuleNotExistMessage() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        System.out.printf(\"The module does not exists.\\n\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    public static void printMissingLessonTimingMessage() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        System.out.println(\"The lesson\u0027s time information is missing.\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    public static void printMissingDeadlineTimingDetailsMessage() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        System.out.println(\"The deadline\u0027s time information is missing.\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    public static void printMissingEventDateAndTimeDetailsMessage() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        System.out.println(\"The event\u0027s date, time or location information is missing.\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    public static void printEmptyArgumentMessage() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        System.out.println(\"The arguments for this command cannot be empty.\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    public static void printWrongTimeFormatMessage() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        System.out.println(\"The format for time should be in HH:MM format.\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        System.out.println(\"Make sure the time you input is valid. E.g. not 30:00, 21:99\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        System.out.println(\"Make sure MM is 00. E.g. 18:00 is allowed but not 18:01\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    public static void printInvalidModuleCode() {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        System.out.println(\"The module code is not valid or not typed in.\");"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        System.out.println(\"Please make sure your module code is typed in follows the specifications stated \""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                + \"in the user guide!\");"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    public static void printInvalidDateFormatMessage() {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        System.out.println(\"Please give the date in correct format and a valid date.\""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                + \" It should be in YYYY-MM-DD format.\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    public static void printInvalidStartEndDate() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        System.out.println(\"The Start date cannot be after End date\");"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    public static void printInvalidDateMessage() {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        System.out.println(\"Please give the date between 2021/01/01 and 2021/05/31.\");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    public static void printInvalidFrequencyMessage() {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        System.out.println(\"Frequency should be a digit from 1 to 7\");"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        System.out.println(\"E.g. 1 represents Monday, 3 represents Wednesday\");"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    public static void printStartAndEndTimeCannotBeTheSameMessage() {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        System.out.println(\"Start and End time cannot be the same!\");"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    public static void printMissingDeadlineDescriptionMessage() {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        System.out.println(\"Your deadline is missing the description!\");"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    public static void printMissingLessonDescriptionMessage() {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        System.out.println(\"Your lesson is missing the description!\");"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    public static void printMissingEventDescriptionMessage() {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        System.out.println(\"Your event is missing the description!\");"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    public static void printInvalidInputMessage() {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        System.out.println(\"Input doesnt seems right, please check again\");"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "    public static void printMissingDeleteDetails() {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        System.out.println(\"Details cannot be missing\");"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    public static void printSuccessfulEdit() {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        System.out.println(\"Done. The edit has been made.\");"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    public static void printSuccessfulAssessmentAdd(Assessment assessment) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        System.out.printf(\"Done. The assessment %s has been made.\\n\", assessment.title);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    public static void printSuccessfulScoreAssessment(Assessment assessment) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        System.out.printf(\"Done. The assessment %s has been scored as %.2f/%.2f.\\n\", assessment.title,"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "t170815518"
        },
        "content": "                assessment.getAttemptScore(), assessment.getFullScore());"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    public static void printSuccessfulAssessmentDelete(String title) {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        System.out.printf(\"Done. The assessment %s has been deleted.\\n\", title);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    public static void printStartTimeCannotBeAfterEndTimeMessage() {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        System.out.println(\"The start time cannot be after the end time!\");"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    public static void printStartTimeAndEndTimeCannotBeBeforeEightOClockMessage() {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        System.out.println(\"The start time and end time cannot be before 8am!\");"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    public static void printModuleDoesNotExistMessage() {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        System.out.println(\"Module does not exist, please add the module first!\");"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    public static void printMissingModuleCodeOrInvalidModuleCodeMessage() {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        System.out.println(\"Your module code is either missing or in the wrong format!\");"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        System.out.println(\"Please make sure your module code is typed in follows the specifications stated \""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                + \"in the user guide!\");"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    public static void printInvalidScoreErrorMessage() {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        System.out.println(\"Please give the invalid score.\");"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    public static void printNoSuchAssessment(String title, String moduleCode) {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        System.out.printf(\"There is no assessment with the title %s in Module %s \\n\", title, moduleCode);"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    public static void printInvalidEditTypeMessage() {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        System.out.printf(\"Looks like an invalid type edit to me\");"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    public static void printModuleInformation(Module m) {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        System.out.println(m);"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    }"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    public static void printModuleCode(Module m) {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        System.out.println(m.getModuleCode());"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    }"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    public static void printModulePropertyEditedMessage() {"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        System.out.println(\"Module tasks property has been updated\");"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    }"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    public static void printModuleFrequencyEditedMessage() {"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        System.out.println(\"Module tasks frequency has been updated\");"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    }"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    public static void printTaskFrequencyEditedMessage() {"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        System.out.println(\"Task\u0027s frequency has been updated\");"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    }"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    public static void printTaskFrequencyNotEditedMessage() {"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        System.out.println(\"Task not found\");"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    }"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    public static void printModuleDateEditedMessage() {"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        System.out.println(\"The tasks\u0027 date in this module has been updated\");"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    }"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    public static void printModuleDateNotEditedMessage() {"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        System.out.println(\"Cant find a matching task\");"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    }"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    public static void printTaskDateEditedMessage() {"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        System.out.println(\"The tasks\u0027 date has been updated\");"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    }"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    public static void printTaskDateNotEditedMessage() {"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        System.out.println(\"Cant find a matching task\");"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    }"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    public static void printModuleDeletedMessage() {"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        System.out.println(\"This module has been deleted\");"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    }"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    public static void printModuleTaskDateDeletedMessage() {"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        System.out.println(\"All task from this module on this date has been deleted\");"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    }"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    public static void printModuleTaskDateNotDeletedMessage() {"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        System.out.println(\"Did not find the task that matches your description\");"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    }"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    public static void printTaskDeletedMessage() {"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        System.out.println(\"1 or more tasks has been deleted\");"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    }"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    public static void printTaskModuleCodeDeletedMessage() {"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        System.out.println(\"All tasks matching module code have been deleted\");"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    }"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    public static void printTaskModuleCodeNotDeletedMessage() {"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        System.out.println(\"Did not find the right task to delete\");"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    }"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    public static void printTaskModuleCodeDateNotDeletedMessage() {"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        System.out.println(\"Did not find task matching module code on this date\");"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    }"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    public static void printTaskNotDeletedMessage() {"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        System.out.println(\"No task matching description or module code or date found\");"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    }"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    public static void printModuleTaskEditedMessage() {"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        System.out.println(\"Module task\u0027s date has been edited\");"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    }"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    public static void printTaskNotEditedMessage() {"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        System.out.println(\"Task not found\");"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    }"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    public static void printLessonAddedMessage() {"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        System.out.println(\"Got it, added lesson to the Schedule Manager and Module Manager!\");"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    }"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    public static void printEventAddedMessage() {"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        System.out.println(\"Event added to both Schedule manager and Module manager\");"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    }"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    public static void printEventAddedtoScheduleOnlyMessage() {"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        System.out.println(\"Event added to Schedule Manager only\");"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    }"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    public static void printAddtionalTxtCreationError() {"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        System.out.println(\"Error: additional.txt file cannot be created.\");"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    }"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    public static void printAddtionalTxtWritingError() {"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        System.out.println(\"Error: additional.txt file cannot be written.\");"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    }"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    public static void printFileLoadingMessage() {"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        System.out.println(\"Loading data from the file...\");"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    }"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    public static void printFileLoadedMessage() {"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        System.out.println(\"Loading completed.\");"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    }"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    public static void printFileMissingError() {"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        System.out.println(\"Error: the file is not found.\");"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    }"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    public static void printFileWritingError() {"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        System.out.println(\"Error: the file cannot be written.\");"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    }"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    public static void printModuleMissingWritingError() {"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        System.out.println(\"Cannot find the relevant module\");"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    }"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    public static void printDisplayTodayNotWithinSemester() {"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        System.out.println(\"Today\u0027s date is not within the set Semester Date.\""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                + \"\\nValid Date: 2021 Jan 1 - 2021 May 31 \""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                + \"\\nPlease proceed to using other type of Display Commands\");"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "t170815518": 99,
      "haroic1997": 140,
      "sunxiuqi-stacked": 211,
      "teachyourselfcoding": 7,
      "acyang97": 130
    }
  },
  {
    "path": "src/main/java/seedu/command/AddAssessmentCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "t170815518"
        },
        "content": "package seedu.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "t170815518"
        },
        "content": "import seedu.ModuleManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "t170815518"
        },
        "content": "import seedu.ScheduleManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "t170815518"
        },
        "content": "import seedu.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "t170815518"
        },
        "content": "import seedu.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.exception.EmptyArgumentException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.exception.InvalidArgumentsException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.exception.InvalidScoreException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.exception.ModuleDoesNotExistException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.exception.ModuleNotExistsException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "t170815518"
        },
        "content": "import seedu.module.Assessment;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "t170815518"
        },
        "content": "import seedu.module.Module;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "t170815518"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "t170815518"
        },
        "content": " * Class represents the command of adding a new assessment."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "t170815518"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "t170815518"
        },
        "content": "public class AddAssessmentCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    public String title;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    private float fullScore;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "t170815518"
        },
        "content": "     * Constructor."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "t170815518"
        },
        "content": "     * @param title      title of the assessment"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * @param fullScore  score of the assessment"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "t170815518"
        },
        "content": "     * @param moduleCode module code of the assessment"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "t170815518"
        },
        "content": "     * @throws InvalidArgumentsException if there is no float number to parse from fullScore"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "t170815518"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    public AddAssessmentCommand(String title, String fullScore, String moduleCode) throws InvalidArgumentsException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        this.title \u003d title.strip();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            this.fullScore \u003d Float.parseFloat(fullScore);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            throw new InvalidArgumentsException();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    public void execute(ScheduleManager scheduleManager, ModuleManager moduleManager, Ui ui)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            throws ModuleDoesNotExistException,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            EmptyArgumentException, InvalidScoreException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            Module module \u003d moduleManager.getModule(this.moduleCode);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            Assessment assessment \u003d new Assessment(this.title, this.fullScore);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            module.addAssessment(assessment);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            Ui.printSuccessfulAssessmentAdd(assessment);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            Storage.getStorage().exportData(moduleManager, this.moduleCode);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        } catch (ModuleNotExistsException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            throw new ModuleDoesNotExistException();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        } catch (EmptyArgumentException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            throw new EmptyArgumentException();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        } catch (InvalidScoreException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            throw new InvalidScoreException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "t170815518"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "t170815518": 55,
      "acyang97": 9
    }
  },
  {
    "path": "src/main/java/seedu/command/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "package seedu.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.ModuleManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.ScheduleManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "import seedu.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.exception.ModuleDoesNotExistException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.task.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.task.Lesson;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.task.Deadline;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "import seedu.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "acyang97"
        },
        "content": " * Represents a command for adding different subclass of tasks."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haroic1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "public class AddCommand  extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    private Task task;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    public AddCommand(Task task) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * Method to add the lesson into the schedule manager."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * Exceptions settle later, check if method works first."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * Main function is to add the lesson into the semesterSchedule of the ScheduleManager."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * Note that everthing in the Lesson Object if it is a Lesson object is still in String form."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * Convert it to LocalTime if necessary."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * @param scheduleManager scheduleManager that handles tasks."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * @param moduleManager moduleManager that handles modules where we need to add task into module."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * @param ui ui that helps with ui stuff."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * @throws ModuleDoesNotExistException if the module has not been created yet."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    public void execute(ScheduleManager scheduleManager, ModuleManager moduleManager, Ui ui)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            throws ModuleDoesNotExistException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "            if (task instanceof Lesson) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                scheduleManager.addLesson((Lesson) task, moduleManager, ui);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "            } else if (task instanceof Event) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                scheduleManager.addEvent((Event) task, moduleManager, ui);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "            } else if (task instanceof Deadline) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                scheduleManager.addDeadline((Deadline) task, moduleManager);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                System.out.println(\"Got it, added deadline to Schedule Manager and Module Manager\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            String moduleCode \u003d task.getModuleCode();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            Storage.getStorage().exportData(moduleManager, moduleCode);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            Ui.printSeparator();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        } catch (ModuleDoesNotExistException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            Ui.printModuleDoesNotExistMessage();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "t170815518": 3,
      "haroic1997": 22,
      "acyang97": 36
    }
  },
  {
    "path": "src/main/java/seedu/command/AddModuleCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "t170815518"
        },
        "content": "package seedu.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "import seedu.ModuleManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "t170815518"
        },
        "content": "import seedu.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "import seedu.ScheduleManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "import seedu.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "import seedu.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "t170815518"
        },
        "content": "import seedu.exception.InvalidModuleCodeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "t170815518"
        },
        "content": "import seedu.module.Module;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "t170815518"
        },
        "content": "import seedu.exception.InvalidArgumentsException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "t170815518"
        },
        "content": "import seedu.exception.ModuleAlreadyExistsException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "t170815518"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "t170815518"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "t170815518"
        },
        "content": " * Represents a command for adding module."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "t170815518"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "acyang97"
        },
        "content": "public class AddModuleCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    private final Module module;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "t170815518"
        },
        "content": "     * Creates Module object from arguments given in string."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "t170815518"
        },
        "content": "     * Throws InvalidArgumentsException when the moduleCode is empty or au number is negative."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * @param strings the argument array in string."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * @throws InvalidArgumentsException if the argument is invalid or cannot be parsed correctly."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "t170815518"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    public AddModuleCommand(String[] strings) throws InvalidArgumentsException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        String moduleCode \u003d null;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        String title \u003d null;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        int auNum \u003d 0;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        ArrayList\u003cString\u003e teachingStaffs \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            for (int i \u003d 0; i \u003c strings.length; i++) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "t170815518"
        },
        "content": "                String argument \u003d strings[i];"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "t170815518"
        },
        "content": "                if (argument \u003d\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "t170815518"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "t170815518"
        },
        "content": "                }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "t170815518"
        },
        "content": "                switch (argument.substring(0, 2)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "t170815518"
        },
        "content": "                case \"c/\":"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "t170815518"
        },
        "content": "                    moduleCode \u003d argument.substring(2);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "t170815518"
        },
        "content": "                    if (!Parser.verifyModuleCode(moduleCode)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "t170815518"
        },
        "content": "                        throw new InvalidModuleCodeException();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "t170815518"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "t170815518"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "t170815518"
        },
        "content": "                case \"t/\":"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "t170815518"
        },
        "content": "                    title \u003d argument.substring(2);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "t170815518"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "t170815518"
        },
        "content": "                case \"a/\":"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                    auNum \u003d Integer.parseInt(argument.substring(2));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "t170815518"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "t170815518"
        },
        "content": "                case \"s/\":"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "t170815518"
        },
        "content": "                    teachingStaffs.add(argument.substring(2));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "t170815518"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "t170815518"
        },
        "content": "                }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            throw new InvalidArgumentsException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        if ((moduleCode \u003d\u003d null) || (auNum \u003c\u003d 0)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            throw new InvalidArgumentsException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        this.module \u003d new Module(moduleCode, title, auNum, teachingStaffs);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    public void execute(ScheduleManager scheduleManager, ModuleManager moduleManager, Ui ui) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            moduleManager.addModule(this.module);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            Ui.print(\"Successfully added to Module Manager! Have fun suffering from \" + this.module);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "            System.out.println(\"Here are your modules you are currently taking! \""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                    + \"\\n\" + Arrays.toString(moduleManager.getListOfModuleCodes().toArray()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            Storage.getStorage().exportData(moduleManager, this.module.getModuleCode());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            Ui.printSeparator();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        } catch (ModuleAlreadyExistsException e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            Ui.printModuleAlreadyExistMessage();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "t170815518"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "t170815518": 58,
      "haroic1997": 11,
      "acyang97": 19
    }
  },
  {
    "path": "src/main/java/seedu/command/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "package seedu.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.ModuleManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.ScheduleManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "import seedu.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "t170815518"
        },
        "content": "import seedu.exception.EmptyArgumentException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "t170815518"
        },
        "content": "import seedu.exception.InvalidScoreException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.exception.ModuleDoesNotExistException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "acyang97"
        },
        "content": " * The base for all other Command classes to inherit from."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haroic1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    public abstract boolean isExit();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * Use this method to execute the commands first for our team project."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    public abstract void execute(ScheduleManager scheduleManager, ModuleManager moduleManager, Ui ui)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "            throws ModuleDoesNotExistException, EmptyArgumentException, InvalidScoreException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "t170815518": 2,
      "haroic1997": 11,
      "acyang97": 8
    }
  },
  {
    "path": "src/main/java/seedu/command/DeleteAssessmentCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "t170815518"
        },
        "content": "package seedu.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "t170815518"
        },
        "content": "import seedu.ModuleManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "t170815518"
        },
        "content": "import seedu.ScheduleManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "t170815518"
        },
        "content": "import seedu.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "t170815518"
        },
        "content": "import seedu.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "t170815518"
        },
        "content": "import seedu.exception.EmptyArgumentException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "t170815518"
        },
        "content": "import seedu.exception.InvalidScoreException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "t170815518"
        },
        "content": "import seedu.exception.ModuleDoesNotExistException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "t170815518"
        },
        "content": "import seedu.exception.ModuleNotExistsException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "t170815518"
        },
        "content": "import seedu.module.Module;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "t170815518"
        },
        "content": "public class DeleteAssessmentCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    String moduleCode;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    String title;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    public DeleteAssessmentCommand(String moduleCode, String title) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        this.title \u003d title.strip();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    public void execute(ScheduleManager scheduleManager, ModuleManager moduleManager, Ui ui)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            throws ModuleDoesNotExistException, EmptyArgumentException, InvalidScoreException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            Module module \u003d moduleManager.getModule(this.moduleCode);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            for (int i \u003d 0; i \u003c module.assessments.size(); i++) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "t170815518"
        },
        "content": "                if (module.assessments.get(i).title.equals(this.title)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "t170815518"
        },
        "content": "                    module.assessments.remove(i);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "t170815518"
        },
        "content": "                    Storage.getStorage().exportData(moduleManager, module.getModuleCode());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "t170815518"
        },
        "content": "                    Ui.printSuccessfulAssessmentDelete(this.title);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "t170815518"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "t170815518"
        },
        "content": "                }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            Ui.printNoSuchAssessment(title, moduleCode);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        } catch (ModuleNotExistsException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            throw new ModuleDoesNotExistException();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "t170815518"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "t170815518": 46
    }
  },
  {
    "path": "src/main/java/seedu/command/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "package seedu.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.ModuleManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.ScheduleManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "import seedu.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "import seedu.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "import seedu.module.Module;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "acyang97"
        },
        "content": " * DeleteCommand is used to delete a task in the list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haroic1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "    private String type \u003d \" \";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "    private String description \u003d \" \";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    private LocalDate date \u003d null;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "    private String moduleCode \u003d null;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "    public DeleteCommand(String description) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "    public DeleteCommand(String moduleCode, String type) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        this.moduleCode \u003d moduleCode.strip();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "    public DeleteCommand(String description, LocalDate date) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        this.description \u003d description.strip();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "    public DeleteCommand(String moduleCode, String type, LocalDate date) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "    public DeleteCommand(String moduleCode, LocalDate date, String description) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        this.description \u003d description.strip();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        this.type \u003d \"module\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    public void execute(ScheduleManager scheduleManager, ModuleManager moduleManager, Ui ui) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        if (moduleCode \u003d\u003d null) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "            if (this.date \u003d\u003d null) { //delete task with no date"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                scheduleManager.deleteTask(description.strip());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "                moduleManager.deleteModuleTasks(description.strip());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "            scheduleManager.deleteTask(description, date); //delete task with date, with description"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "            moduleManager.deleteModuleTasks(description, date);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        if (this.date \u003d\u003d null) {                                                  //delete entire module"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "            scheduleManager.deleteTask(\"module\", moduleCode);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "            moduleManager.delete(moduleCode);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "            if (description.equals(\" \")) { //delete all task in module matching date"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                scheduleManager.deleteTask(date, moduleCode);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                moduleManager.delete(moduleCode, date);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "                scheduleManager.deleteTask(moduleCode, description, date);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                moduleManager.delete(moduleCode, description, date);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                //delete all task in module with matching date and description"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haroic1997": 18,
      "sunxiuqi-stacked": 5,
      "teachyourselfcoding": 49,
      "acyang97": 7
    }
  },
  {
    "path": "src/main/java/seedu/command/DisplayCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "package seedu.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "import seedu.ModuleManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "import seedu.ScheduleManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "import seedu.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "import seedu.exception.InvalidDateException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "import seedu.exception.InvalidStartEndDateException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "t170815518"
        },
        "content": "import seedu.exception.ModuleNotExistsException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "import seedu.exception.StartAndEndTimeSameException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "acyang97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "acyang97"
        },
        "content": " * DisplayCommand class is used to help display the tasks in the ScheduleManager and ModuleManager."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "acyang97"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "public class DisplayCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    private LocalDate startDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    private LocalDate endDate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    private LocalDate specificDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    private String displayOptions; // used to determine what kind of information to display"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    public DisplayCommand() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    public DisplayCommand(String moduleCode) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        this.moduleCode \u003d moduleCode.trim();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        displayOptions \u003d \"module\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    public DisplayCommand(String moduleCode, LocalDate specificDate) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        this.specificDate \u003d specificDate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        displayOptions \u003d \"module with date\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    public DisplayCommand(LocalDate specificDate) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        this.specificDate \u003d specificDate;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        displayOptions \u003d \"date\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    public DisplayCommand(LocalDate startDate, LocalDate endDate) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        displayOptions \u003d \"date with range\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    public void execute(ScheduleManager scheduleManager, ModuleManager moduleManager, Ui ui) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "            switch (displayOptions) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "            case \"module\": {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                moduleManager.display(moduleCode);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "            case \"module with date\": {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                moduleManager.display(moduleCode, specificDate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "            case \"date\": {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                if (specificDate.equals(LocalDate.now())) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                    scheduleManager.displayTodaySchedule();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "t170815518"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                    scheduleManager.displayDate(specificDate);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "            case \"date with range\": {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                scheduleManager.display(startDate, endDate);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "            default: {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                Ui.printInvalidDateMessage();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        } catch (ModuleNotExistsException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            Ui.printModuleNotExistMessage();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        } catch (InvalidStartEndDateException e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "            Ui.printInvalidStartEndDate();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        } catch (InvalidDateException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "            Ui.printInvalidDateMessage();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        } catch (StartAndEndTimeSameException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "            Ui.printStartAndEndTimeCannotBeTheSameMessage();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "t170815518": 6,
      "haroic1997": 77,
      "acyang97": 9
    }
  },
  {
    "path": "src/main/java/seedu/command/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "//@@author sunxiuqi-stacked"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "package seedu.command;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "import seedu.ModuleManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "import seedu.ScheduleManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "import seedu.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    public void execute(ScheduleManager scheduleManager, ModuleManager moduleManager, Ui ui) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sunxiuqi-stacked": 18
    }
  },
  {
    "path": "src/main/java/seedu/command/EditModuleCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "//@@author sunxiuqi-stacked"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "package seedu.command;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "import seedu.ModuleManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "import seedu.ScheduleManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "import seedu.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "import seedu.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": " * Commands to execute edit the module\u0027s information. This may be implemented by setter functions."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "public class EditModuleCommand extends EditCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    String moduleCode;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    String description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    LocalDate date \u003d null;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    LocalDate newDate \u003d null;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    String task;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    String type;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    String module \u003d \"module\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    String newProperty;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    int newFrequency;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    //edit module\u0027s tasks"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    public EditModuleCommand(String moduleCode, String task, LocalDate date, String property, String newProperty) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        this.description \u003d task;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        this.type \u003d property;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        this.newProperty \u003d newProperty;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    } //edit module\u0027s property"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    public EditModuleCommand(String moduleCode, String task, LocalDate date, String property, int newFrequency) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        this.description \u003d task;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        this.type \u003d property;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        this.newFrequency \u003d newFrequency;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    } //edit module\u0027s property"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    public EditModuleCommand(String moduleCode, String task, LocalDate date, String property, LocalDate newDate) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        this.description \u003d task;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        this.type \u003d property;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        this.newDate \u003d newDate;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    } //edit module\u0027s property"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    public EditModuleCommand(String moduleCode, String property, String newProperty) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        this.task \u003d module;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        this.description \u003d property;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        this.newProperty \u003d newProperty;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    public void execute(ScheduleManager scheduleManager, ModuleManager moduleManager, Ui ui) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        case \"type\":"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "            //Fallthrough"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        case \"description\":"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "            //Fallthrough"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        case \"time\":"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "            scheduleManager.editTask(description, date, type, newProperty, moduleCode);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "            moduleManager.editTask(description, date, type, newProperty, moduleCode);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        case \"frequency\":"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "            scheduleManager.editTask(description, date, type, newFrequency, moduleCode);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "            moduleManager.editTask(description, date, type, newFrequency, moduleCode);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        case \"date\":"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "            scheduleManager.editTask(description, date, type, newDate, moduleCode);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "            moduleManager.editTask(description, date, type, newDate, moduleCode);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "            Ui.printInvalidEditTypeMessage();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        Ui.printSuccessfulEdit();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        Storage.getStorage().exportData(moduleManager, moduleCode);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sunxiuqi-stacked": 91
    }
  },
  {
    "path": "src/main/java/seedu/command/EditTaskCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "//@@author sunxiuqi-stacked"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "package seedu.command;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "import seedu.ModuleManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "import seedu.ScheduleManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "import seedu.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": " * Commands to execute edit the task\u0027s information. This may be implemented by setter functions."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": " * TODO add code"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "public class EditTaskCommand extends EditCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    String description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    LocalDate date \u003d null;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    LocalDate newDate \u003d null;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    String type;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    String newProperty;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    int newFrequency;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    public EditTaskCommand(String description, LocalDate date, String type, String newProperty) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        this.newProperty \u003d newProperty;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    public EditTaskCommand(String description, LocalDate date, String type, LocalDate newDate) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        this.newDate \u003d newDate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    public EditTaskCommand(String description, LocalDate date, String type, int newFrequency) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        this.newFrequency \u003d newFrequency;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    public void execute(ScheduleManager scheduleManager, ModuleManager moduleManager, Ui ui) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        case \"type\":"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "            //"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        case \"description\":"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "            //"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        case \"modulecode\":"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "            //??"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        case \"module code\":"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "            //??"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        case \"time\":"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "            scheduleManager.editTask(description, date, type, newProperty);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        case \"frequency\":"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "            scheduleManager.editTask(description, date, type, newFrequency);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        case \"date\":"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "            scheduleManager.editTask(description, date, type, newDate);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "            Ui.printInvalidEditTypeMessage();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        Ui.printSuccessfulEdit();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sunxiuqi-stacked": 75
    }
  },
  {
    "path": "src/main/java/seedu/command/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "package seedu.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.ModuleManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.ScheduleManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "import seedu.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "acyang97"
        },
        "content": " * Represents a Command for exiting the application."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haroic1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    public void execute(ScheduleManager scheduleManager, ModuleManager moduleManager, Ui ui) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haroic1997": 13,
      "acyang97": 6
    }
  },
  {
    "path": "src/main/java/seedu/command/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "package seedu.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "import seedu.ModuleManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "import seedu.ScheduleManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "import seedu.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    public void execute(ScheduleManager scheduleManager, ModuleManager moduleManager, Ui ui) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        ui.printHelpGuide();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haroic1997": 17
    }
  },
  {
    "path": "src/main/java/seedu/command/ScoreAssessmentCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "t170815518"
        },
        "content": "package seedu.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "t170815518"
        },
        "content": "import seedu.ModuleManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "t170815518"
        },
        "content": "import seedu.ScheduleManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "t170815518"
        },
        "content": "import seedu.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "t170815518"
        },
        "content": "import seedu.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "t170815518"
        },
        "content": "import seedu.exception.EmptyArgumentException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "t170815518"
        },
        "content": "import seedu.exception.InvalidScoreException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "t170815518"
        },
        "content": "import seedu.exception.ModuleDoesNotExistException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "t170815518"
        },
        "content": "import seedu.exception.ModuleNotExistsException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "t170815518"
        },
        "content": "import seedu.module.Module;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "t170815518"
        },
        "content": "public class ScoreAssessmentCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    private final String moduleCode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    private final String title;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    private final float attemptScore;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    public ScoreAssessmentCommand(String moduleCode, String title, String attemptScore) throws InvalidScoreException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            this.attemptScore \u003d Float.parseFloat(attemptScore);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            throw new InvalidScoreException();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    public void execute(ScheduleManager scheduleManager, ModuleManager moduleManager, Ui ui)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            throws ModuleDoesNotExistException, EmptyArgumentException, InvalidScoreException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            Module module \u003d moduleManager.getModule(this.moduleCode);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            for (int i \u003d 0; i \u003c module.assessments.size(); i++) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "t170815518"
        },
        "content": "                if (module.assessments.get(i).title.equals(this.title)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "t170815518"
        },
        "content": "                    module.assessments.get(i).setAttemptScore(this.attemptScore);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "t170815518"
        },
        "content": "                    Storage.getStorage().exportData(moduleManager, module.getModuleCode());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "t170815518"
        },
        "content": "                    Ui.printSuccessfulScoreAssessment(module.assessments.get(i));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "t170815518"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "t170815518"
        },
        "content": "                }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            Ui.printNoSuchAssessment(title, moduleCode);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        } catch (ModuleNotExistsException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            throw new ModuleDoesNotExistException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "t170815518"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "t170815518": 51
    }
  },
  {
    "path": "src/main/java/seedu/duequest/DueQuest.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "acyang97"
        },
        "content": "package seedu.duequest;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "t170815518"
        },
        "content": "import seedu.DueQuestException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "t170815518"
        },
        "content": "import seedu.ModuleManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "t170815518"
        },
        "content": "import seedu.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "t170815518"
        },
        "content": "import seedu.ScheduleManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "t170815518"
        },
        "content": "import seedu.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "t170815518"
        },
        "content": "import seedu.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "import seedu.command.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "t170815518"
        },
        "content": "import seedu.exception.EmptyArgumentException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "t170815518"
        },
        "content": "import seedu.exception.InvalidScoreException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.exception.ModuleDoesNotExistException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "acyang97"
        },
        "content": " * DueQuest class is the main class for running the DueQuest application."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haroic1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "acyang97"
        },
        "content": "public class DueQuest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    private ScheduleManager scheduleManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    private ModuleManager moduleManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    static final String FILE_PATH \u003d \"data/duequest.txt\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    static Storage storage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "t170815518"
        },
        "content": "     * The main function to run the whole Duke app."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "t170815518"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        DueQuest dq \u003d new DueQuest();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            storage \u003d Storage.setUpStorage(args[0]);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            storage \u003d Storage.setUpStorage(null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        storage.loadData(dq.scheduleManager, dq.moduleManager, dq.ui);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        dq.run();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "     * Constructor."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    public DueQuest() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        this.ui.welcomeMessage();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        this.scheduleManager \u003d new ScheduleManager();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        this.moduleManager \u003d new ModuleManager();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * The run method to execute the commands."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "     * The run method to execute the commands FOR OUR TP!!!!."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "            String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                c.execute(scheduleManager, moduleManager, ui);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            } catch (DueQuestException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                ui.showError(e.getExceptionType());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            } catch (NullPointerException e) {  // this has been handled within parser"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            } catch (ModuleDoesNotExistException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                Ui.printModuleDoesNotExistMessage();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            } catch (EmptyArgumentException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "t170815518"
        },
        "content": "                Ui.printEmptyArgumentMessage();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            } catch (InvalidScoreException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "t170815518"
        },
        "content": "                Ui.printInvalidScoreErrorMessage();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        ui.byeMessage();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    public Ui getUi() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        return ui;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    public ScheduleManager getScheduleManager() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        return scheduleManager;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    public ModuleManager getModuleManager() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        return moduleManager;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "t170815518": 28,
      "haroic1997": 27,
      "-": 3,
      "acyang97": 29
    }
  },
  {
    "path": "src/main/java/seedu/exception/EmptyArgumentException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "t170815518"
        },
        "content": "package seedu.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "acyang97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "acyang97"
        },
        "content": " * Class for EmptyArgumentException. Thrown when user did not input anything after the first keyword."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "acyang97"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "t170815518"
        },
        "content": "public class EmptyArgumentException extends Exception{"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "t170815518"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "t170815518": 4,
      "acyang97": 3
    }
  },
  {
    "path": "src/main/java/seedu/exception/InvalidArgumentsException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "t170815518"
        },
        "content": "package seedu.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "t170815518"
        },
        "content": "public class InvalidArgumentsException extends Exception{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "t170815518"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "t170815518": 4
    }
  },
  {
    "path": "src/main/java/seedu/exception/InvalidDateException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "acyang97"
        },
        "content": "package seedu.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "acyang97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "acyang97"
        },
        "content": " * Class for InvalidDateException. Thrown when user inputs an invalid date."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "acyang97"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "acyang97"
        },
        "content": "public class InvalidDateException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "acyang97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "acyang97": 7
    }
  },
  {
    "path": "src/main/java/seedu/exception/InvalidDateFormatException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "acyang97"
        },
        "content": "package seedu.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "acyang97"
        },
        "content": "public class InvalidDateFormatException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "acyang97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "acyang97": 4
    }
  },
  {
    "path": "src/main/java/seedu/exception/InvalidDateRangeException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "package seedu.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "public class InvalidDateRangeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haroic1997": 4
    }
  },
  {
    "path": "src/main/java/seedu/exception/InvalidFrequencyException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "acyang97"
        },
        "content": "package seedu.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "acyang97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "acyang97"
        },
        "content": " * Class for InvalidFrequencyException. Thrown when user inputs an invalid frequency integer when adding a lesson."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "acyang97"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "acyang97"
        },
        "content": "public class InvalidFrequencyException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "acyang97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "acyang97": 7
    }
  },
  {
    "path": "src/main/java/seedu/exception/InvalidModuleCodeException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "t170815518"
        },
        "content": "package seedu.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "acyang97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "acyang97"
        },
        "content": " * Class for InvalidModuleCodeException. Thrown when user inputs an Invalid NUS Module Code."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "acyang97"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "t170815518"
        },
        "content": "public class InvalidModuleCodeException extends Exception{"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "t170815518"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "t170815518": 4,
      "acyang97": 3
    }
  },
  {
    "path": "src/main/java/seedu/exception/InvalidReplyException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "acyang97"
        },
        "content": "package seedu.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "acyang97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "acyang97"
        },
        "content": " * Class for InvalidReplyException. Thrown when user does not type in \u0027Yes\u0027 or \u0027No\u0027 when asked if he wants to"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "acyang97"
        },
        "content": " * continue adding a Task if there are clashes in timings detected."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "acyang97"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "acyang97"
        },
        "content": "public class InvalidReplyException extends Exception {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "acyang97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "acyang97": 8
    }
  },
  {
    "path": "src/main/java/seedu/exception/InvalidScoreException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "t170815518"
        },
        "content": "package seedu.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "t170815518"
        },
        "content": "public class InvalidScoreException extends Exception{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "t170815518"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "t170815518": 4
    }
  },
  {
    "path": "src/main/java/seedu/exception/InvalidStartEndDateException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "package seedu.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "public class InvalidStartEndDateException extends Exception{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haroic1997": 4
    }
  },
  {
    "path": "src/main/java/seedu/exception/InvalidTimeFormatException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "acyang97"
        },
        "content": "package seedu.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "acyang97"
        },
        "content": "public class InvalidTimeFormatException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "acyang97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "acyang97": 4
    }
  },
  {
    "path": "src/main/java/seedu/exception/MissingDeadlineDescriptionException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "acyang97"
        },
        "content": "package seedu.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "acyang97"
        },
        "content": "public class MissingDeadlineDescriptionException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "acyang97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "acyang97": 4
    }
  },
  {
    "path": "src/main/java/seedu/exception/MissingDeadlineTimingDetailsException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "acyang97"
        },
        "content": "package seedu.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "acyang97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "acyang97"
        },
        "content": " * Class for MissingDeadlineTimingDetailsException."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "acyang97"
        },
        "content": " * Thrown when user did not type in \u0027/on\u0027 when adding a Deadline."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "acyang97"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "acyang97"
        },
        "content": "public class MissingDeadlineTimingDetailsException extends Exception {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "acyang97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "acyang97": 8
    }
  },
  {
    "path": "src/main/java/seedu/exception/MissingDeleteDetailsException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "package seedu.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "public class MissingDeleteDetailsException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teachyourselfcoding": 4
    }
  },
  {
    "path": "src/main/java/seedu/exception/MissingEventDateAndTimeDetailsException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "acyang97"
        },
        "content": "package seedu.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "acyang97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "acyang97"
        },
        "content": " * Class for MissingEventDateAndTimeDetailsException."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "acyang97"
        },
        "content": " * Thrown when an event to be added is missing any date or time details."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "acyang97"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "acyang97"
        },
        "content": "public class MissingEventDateAndTimeDetailsException extends Exception {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "acyang97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "acyang97": 8
    }
  },
  {
    "path": "src/main/java/seedu/exception/MissingEventDescriptionException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "acyang97"
        },
        "content": "package seedu.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "acyang97"
        },
        "content": "public class MissingEventDescriptionException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "acyang97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "acyang97": 4
    }
  },
  {
    "path": "src/main/java/seedu/exception/MissingLessonDescriptionException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "acyang97"
        },
        "content": "package seedu.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "acyang97"
        },
        "content": "public class MissingLessonDescriptionException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "acyang97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "acyang97": 4
    }
  },
  {
    "path": "src/main/java/seedu/exception/MissingLessonTimingException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "t170815518"
        },
        "content": "package seedu.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "acyang97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "acyang97"
        },
        "content": " * Class for MissingLessonTimingException."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "acyang97"
        },
        "content": " * Thrown when user did not type in timing details of a lesson that he wants to add."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "acyang97"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "t170815518"
        },
        "content": "public class MissingLessonTimingException extends Exception {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "t170815518"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "t170815518": 4,
      "acyang97": 4
    }
  },
  {
    "path": "src/main/java/seedu/exception/MissingModuleCodeOrInvalidModuleCodeException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "acyang97"
        },
        "content": "package seedu.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "acyang97"
        },
        "content": "public class MissingModuleCodeOrInvalidModuleCodeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "acyang97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "acyang97": 4
    }
  },
  {
    "path": "src/main/java/seedu/exception/ModuleAlreadyExistsException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "t170815518"
        },
        "content": "package seedu.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "acyang97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "acyang97"
        },
        "content": " * Class for ModuleAlreadyExistsException."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "acyang97"
        },
        "content": " * Thrown when a module a user wants to add already exist."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "acyang97"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "t170815518"
        },
        "content": "public class ModuleAlreadyExistsException extends Exception {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "t170815518"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "t170815518": 4,
      "acyang97": 4
    }
  },
  {
    "path": "src/main/java/seedu/exception/ModuleDoesNotExistException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "acyang97"
        },
        "content": "package seedu.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "acyang97"
        },
        "content": "public class ModuleDoesNotExistException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "acyang97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "acyang97": 4
    }
  },
  {
    "path": "src/main/java/seedu/exception/ModuleNotExistsException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "t170815518"
        },
        "content": "package seedu.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "t170815518"
        },
        "content": "public class ModuleNotExistsException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "t170815518"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "t170815518": 4
    }
  },
  {
    "path": "src/main/java/seedu/exception/StartAndEndTimeSameException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "acyang97"
        },
        "content": "package seedu.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "acyang97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "acyang97"
        },
        "content": " * Class for StartAndEndTimeSameException."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haroic1997"
        },
        "content": " * Thrown when user keys in the same start time and end time when adding an Event or lesson, and display method"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "acyang97"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "acyang97"
        },
        "content": "public class StartAndEndTimeSameException extends Exception {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "acyang97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haroic1997": 1,
      "acyang97": 7
    }
  },
  {
    "path": "src/main/java/seedu/exception/StartTimeAndEndTimeTooEarlyException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "acyang97"
        },
        "content": "package seedu.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "acyang97"
        },
        "content": "public class StartTimeAndEndTimeTooEarlyException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "acyang97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "acyang97": 4
    }
  },
  {
    "path": "src/main/java/seedu/exception/StartTimeIsAfterEndTimeException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "acyang97"
        },
        "content": "package seedu.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "acyang97"
        },
        "content": "public class StartTimeIsAfterEndTimeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "acyang97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "acyang97": 4
    }
  },
  {
    "path": "src/main/java/seedu/exception/WrongDateFormatException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "t170815518"
        },
        "content": "package seedu.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "acyang97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "acyang97"
        },
        "content": " * Class for WrongDateFormatException."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "acyang97"
        },
        "content": " * Thrown when user types in a date in a wrong format as required."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "acyang97"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "t170815518"
        },
        "content": "public class WrongDateFormatException extends Exception {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "t170815518"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "t170815518": 4,
      "acyang97": 4
    }
  },
  {
    "path": "src/main/java/seedu/module/Assessment.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "t170815518"
        },
        "content": "package seedu.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "t170815518"
        },
        "content": "import seedu.exception.EmptyArgumentException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "t170815518"
        },
        "content": "import seedu.exception.InvalidScoreException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "t170815518"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "t170815518"
        },
        "content": " * Class represents assessments, including the title and score."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "t170815518"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "t170815518"
        },
        "content": "public class Assessment {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    public String title;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    private double attemptScore \u003d 0;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    private final double fullScore;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "t170815518"
        },
        "content": "     * Constructs assessment instance."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "t170815518"
        },
        "content": "     * @param title     the title of the assessment (e.g. Assignment 3)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "t170815518"
        },
        "content": "     * @param fullScore the full score of the assessment, which cannot be modified."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "t170815518"
        },
        "content": "     * @throws EmptyArgumentException if the title is empty string"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "t170815518"
        },
        "content": "     * @throws InvalidScoreException  if the full score is non-positive"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "t170815518"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    public Assessment(String title, double fullScore) throws EmptyArgumentException, InvalidScoreException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        if (title \u003d\u003d null || title.isEmpty() || title.trim().isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            throw new EmptyArgumentException();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            this.title \u003d title;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        if (fullScore \u003c\u003d 0) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            throw new InvalidScoreException();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            this.fullScore \u003d fullScore;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "t170815518"
        },
        "content": "     * Set attempt score for the assessment."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "t170815518"
        },
        "content": "     * @param attemptScore the actual score"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "t170815518"
        },
        "content": "     * @throws InvalidScoreException if the attempt score is larger than the full score or negative"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "t170815518"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    public void setAttemptScore(double attemptScore) throws InvalidScoreException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        if (attemptScore \u003c 0 || attemptScore \u003e this.fullScore) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            throw new InvalidScoreException();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            this.attemptScore \u003d attemptScore;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    public double getAttemptScore() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        return attemptScore;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    public double getFullScore() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        return fullScore;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        return String.format(\"%s(%.2f/%.2f)\", this.title, this.attemptScore, this.fullScore);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "t170815518"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "t170815518": 59,
      "haroic1997": 2
    }
  },
  {
    "path": "src/main/java/seedu/module/Module.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "t170815518"
        },
        "content": "package seedu.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "t170815518"
        },
        "content": "import seedu.task.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "t170815518"
        },
        "content": "import seedu.task.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "t170815518"
        },
        "content": "import seedu.task.Lesson;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "t170815518"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "t170815518"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "t170815518"
        },
        "content": " * Class for Module."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "t170815518"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "t170815518"
        },
        "content": " * Examples:"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "acyang97"
        },
        "content": " * moduleCode e.g. ST2132."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "acyang97"
        },
        "content": " * title e.g. Statistics."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "acyang97"
        },
        "content": " * aUNumber e.g. 4."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "acyang97"
        },
        "content": " * teachingStaffs: e.g. [\"Dr.Lim(lim@e.nus.sg)\",]"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "acyang97"
        },
        "content": " * listOfTasks. e.g.list of tasks in the module."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "t170815518"
        },
        "content": " * \u003c/p\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "t170815518"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "t170815518"
        },
        "content": "public class Module {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    private int auNumber;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    private ArrayList\u003cString\u003e teachingStaffs \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    private ArrayList\u003cTask\u003e listOfTasks;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    public ArrayList\u003cAssessment\u003e assessments \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * Constructor when I am adding a task that has a module code that has not exist yet."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "t170815518"
        },
        "content": "     * TODO: check if moduleCode and other info is null."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    public Module(String moduleCode, String title, int auNumber, ArrayList\u003cString\u003e teachingStaffs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        this.auNumber \u003d auNumber;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        this.teachingStaffs \u003d teachingStaffs;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        this.listOfTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    public Module(String moduleCode) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        this.listOfTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        listOfTasks.add(task);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    public ArrayList\u003cTask\u003e getListOfTasks() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        return listOfTasks;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    public String getModuleCode() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        return this.moduleCode;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    public void setModuleCode(String moduleCode) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    public void setModuleAu(String auNumber) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        this.auNumber \u003d Integer.parseInt(auNumber);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    public void setTitle(String title) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        String information \u003d \"\\nCourse: \""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                + this.moduleCode"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                + \"Title: \""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                + this.title"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                + \"AU: \""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                + this.auNumber"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                + \"Teaching Staffs: \""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                + teachingStaffs.toString()"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                + \"\\n\" + \"Assessment : \\n\""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                + printAssessment();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        return information;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    public void setListOfTasks(ArrayList\u003cTask\u003e listOfTasks) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        this.listOfTasks \u003d listOfTasks;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    public boolean equals(Module module) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        return module.getModuleCode().equals(this.moduleCode);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "t170815518"
        },
        "content": "     * Deletes the task with the specified description from the list."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "     * @param description of the task to be deleted"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "t170815518"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    public void deleteTask(String description) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        for (int i \u003d 0; i \u003c this.listOfTasks.size(); i++) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            Task t \u003d this.listOfTasks.get(i);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            if (t.getDescription().equals(description)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "t170815518"
        },
        "content": "                this.listOfTasks.remove(t);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    public void deleteTask(String description, LocalDate date) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        for (int i \u003d 0; i \u003c this.listOfTasks.size(); i++) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            Task t \u003d this.listOfTasks.get(i);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            if (t.getDescription().equals(description) \u0026\u0026 date.isEqual(t.getDate())) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "t170815518"
        },
        "content": "                this.listOfTasks.remove(t);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    public void addAssessment(Assessment assessment) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        this.assessments.add(assessment);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    public String printAssessment() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        String content \u003d \"\";"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        for (Assessment assessment : assessments) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            content +\u003d assessment.toString() + \u0027\\n\u0027;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        return content;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    public ArrayList\u003cAssessment\u003e getAssessments() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        return assessments;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    /**."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "t170815518"
        },
        "content": "     * TODO: task list?"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "t170815518"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "t170815518"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    public String export() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        assert !this.moduleCode.isEmpty();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        String export \u003d \"module c/\" + this.moduleCode;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        if (this.title !\u003d null) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            export +\u003d \" t/\" + this.title;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        if (this.auNumber \u003e\u003d 0) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "            export +\u003d \" a/\" + this.auNumber;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        if (!this.teachingStaffs.isEmpty()) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            for (int i \u003d 0; i \u003c this.teachingStaffs.size(); i++) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "t170815518"
        },
        "content": "                export +\u003d \" s/\" + this.teachingStaffs.get(i);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        export +\u003d \u0027\\n\u0027;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        for (int i \u003d 0; i \u003c this.listOfTasks.size(); i++) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            Task currentTask \u003d this.listOfTasks.get(i);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            if (currentTask instanceof Lesson) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                export +\u003d \"lesson \""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                        + currentTask.getDescription()"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                        + \" \" + this.moduleCode"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                        + \" /on \""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                        + currentTask.getFrequency()"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                        + \" \""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                        + ((Lesson) currentTask).getStartTime()"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                        + \" \""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                        + ((Lesson) currentTask).getEndTime()"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                        + \u0027\\n\u0027;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            } else if (currentTask instanceof Event) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                export +\u003d \"event \" + this.moduleCode"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                        + \" \""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                        + currentTask.getDescription()"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                        + \" /at \" + ((Event) currentTask).getDateOfEvent()"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                        + \" \""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                        + ((Event) currentTask).getStartTimeOfEvent()"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                        + \" \" + ((Event) currentTask).getEndTimeOfEvent()"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                        + \" \""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                        + ((Event) currentTask).getAt() + \u0027\\n\u0027;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            } else if (currentTask instanceof Deadline) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                export +\u003d \"deadline \""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                        + this.moduleCode"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                        + \" \" + currentTask.getDescription()"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                        + \" /by \""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                        + ((Deadline) currentTask).getDeadline() + \u0027\\n\u0027;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        for (Assessment assessment : this.assessments) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "            export +\u003d \"assessment \""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                    + this.moduleCode"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                    + \" \""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                    + assessment.title"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                    + \" \""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                    + assessment.getFullScore()"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                    + \u0027\\n\u0027;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        return export;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "t170815518"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "t170815518": 104,
      "haroic1997": 66,
      "sunxiuqi-stacked": 4,
      "teachyourselfcoding": 2,
      "acyang97": 27
    }
  },
  {
    "path": "src/main/java/seedu/task/Deadline.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "package seedu.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "acyang97"
        },
        "content": " * Inherited from Task object, Deadline class has additional attributes."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "acyang97"
        },
        "content": " * to store deadline timing."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haroic1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    public Deadline(String description, String by) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        super.taskType \u003d \"D\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    public Deadline(String moduleCode, String description, String by) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        super(description, moduleCode);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    public String getDeadline() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        return by;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        return \"[D] \" + super.toString() + \" - \" + super.moduleCode + \" \"  + \" (by: \" + by + \")\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        return convertStringToDate(by);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    public LocalDate convertStringToDate(String stringDate) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        LocalDate date \u003d LocalDate.parse(stringDate.trim());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        Deadline deadline \u003d (Deadline) o;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        return Objects.equals(deadline.getDate(), this.getDate())"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                \u0026\u0026 Objects.equals(deadline.getModuleCode(), super.getModuleCode())"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                \u0026\u0026 Objects.equals(deadline.getDescription(), super.getDescription());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haroic1997": 33,
      "acyang97": 21
    }
  },
  {
    "path": "src/main/java/seedu/task/Event.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "package seedu.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "acyang97"
        },
        "content": " * Inherited from Task object, Event class has additional attributes."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "acyang97"
        },
        "content": " * to store logistical information."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haroic1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    private String at;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    private String startTimeOfEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    private String dateOfEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    private String endTimeOfEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    public Event(String description, String moduleCode, String at, String startTimeOfEvent,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                 String endTimeOfEvent, String dateOfEvent) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        super(description, moduleCode);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        super.taskType \u003d \"E\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        this.startTimeOfEvent \u003d startTimeOfEvent;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        this.endTimeOfEvent \u003d endTimeOfEvent;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        this.dateOfEvent \u003d dateOfEvent;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        //this.isDone \u003d false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * toString method for the Event object."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * @return a string representing an Event."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        return \"[E] \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                + super.moduleCode"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                + \" \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                + super.description"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                + \" (\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                + this.startTimeOfEvent"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                + \" \" + this.dateOfEvent"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                + \" at \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                + this.at"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                + \")\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "        return LocalDate.parse(dateOfEvent);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sunxiuqi-stacked"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    public String getAt() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        return at;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    public String getStartTimeOfEvent() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        return startTimeOfEvent;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    public LocalTime getStartTimeOfEventInLocalTime() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        return LocalTime.parse(this.startTimeOfEvent);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    public String getDateOfEvent() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        return dateOfEvent;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    public String getLocation() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        return at;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    public String getEndTimeOfEvent() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        return endTimeOfEvent;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    public LocalTime getEndTimeOfEventInLocalTime() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        return LocalTime.parse(this.endTimeOfEvent);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    public LocalDate getDateOfEventInLocalDate() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        return convertStringToDate(dateOfEvent);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    public LocalDate convertStringToDate(String stringDate) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        LocalDate date \u003d LocalDate.parse(stringDate.trim());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        Event event \u003d (Event) o;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        return Objects.equals(at, event.at)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                \u0026\u0026 Objects.equals(startTimeOfEvent, event.startTimeOfEvent)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                \u0026\u0026 Objects.equals(dateOfEvent, event.dateOfEvent)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                \u0026\u0026 Objects.equals(endTimeOfEvent, event.endTimeOfEvent)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                \u0026\u0026 Objects.equals(description, event.getDescription());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "acyang97"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "t170815518": 1,
      "haroic1997": 31,
      "sunxiuqi-stacked": 3,
      "acyang97": 70
    }
  },
  {
    "path": "src/main/java/seedu/task/Lesson.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "acyang97"
        },
        "content": "package seedu.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "acyang97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "acyang97"
        },
        "content": " * Represents a Lesson class that handles lessons that have occur on a weekly basis."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "acyang97"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "acyang97"
        },
        "content": "public class Lesson extends Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    private String startTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    private String endTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "t170815518"
        },
        "content": "     * Constructor of Lesson object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * @param description to say if it is a lecture or tutorial or lab etc."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * @param moduleCode  module code."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * @param frequency   tells us the day of the week. The lesson will be added to that particular day in every week."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * @param startTime   the start time of the lesson."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * @param endTime     the end time of the lesson."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    public Lesson(String description, String moduleCode, int frequency, String startTime, String endTime) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        super(description, moduleCode, frequency);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        super.taskType \u003d \"L\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        this.frequency \u003d frequency;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * Method to get the day of the week where which the lesson will be held on."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * @return this will return me the day in DayOfWeek. eg, return MONDAY, TUESDAY, WEDNESDAY, etc."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    public DayOfWeek getLessonDayInDayOfWeek() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        return DayOfWeek.of(this.frequency);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        return \"[L] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                + description"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                + \" - \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                + moduleCode"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                + \" \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                + this.getLessonDayInDayOfWeek()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                + \" \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                + startTime"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                + \" \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                + endTime;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    public String getStartTime() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        return startTime;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    public LocalTime getStartTimeInLocalTime() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        return LocalTime.parse(this.startTime);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    public String getEndTime() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        return endTime;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    public LocalTime getEndTimeInLocalTime() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        return LocalTime.parse(this.endTime);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        Lesson lesson \u003d (Lesson) o;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        return Objects.equals(startTime, lesson.startTime)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                \u0026\u0026 Objects.equals(endTime, lesson.endTime)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                \u0026\u0026 Objects.equals(lesson.getModuleCode(), super.getModuleCode())"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                \u0026\u0026 Objects.equals(lesson.getFrequency(), super.getFrequency())"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                \u0026\u0026 Objects.equals(lesson.getDescription(), super.getDescription());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "acyang97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "t170815518": 2,
      "haroic1997": 27,
      "acyang97": 57
    }
  },
  {
    "path": "src/main/java/seedu/task/Task.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "package seedu.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "t170815518"
        },
        "content": " * Class that needs to be accessed by Schedule object."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "acyang97"
        },
        "content": " * Task is a parent class for three child classes, Lesson and Deadline."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "acyang97"
        },
        "content": " * Lesson helps to keep track of tasks that have a frequency (weekly)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "acyang97"
        },
        "content": " * Deadline acts like normal Deadline like in IP."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haroic1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    protected String taskType; // can be E or D for our project"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    protected String moduleCode; // Module this task belongs to"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    protected String time; //Time of the event in HH:MM format"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    protected int frequency;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "    protected String by;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    public Task(String description, String moduleCode) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "t170815518"
        },
        "content": "     * Creates new Task object, without frequency."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "t170815518"
        },
        "content": "     * Error message will be printed if the module with the moduleCode doesn\u0027t exist."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * @param description the task description."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     * @param moduleCode  the code of the module this task relates to."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     *                    - add searching module based on moduleCode(String). Need to search through the ModuleManager."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "acyang97"
        },
        "content": "     *                    - add error handling."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "t170815518"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    public Task(String description, String moduleCode, int frequency) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        this.frequency \u003d frequency;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        this.date \u003d null;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    public String getModuleCode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        return this.moduleCode;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    public int getFrequency() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        return this.frequency;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    public void setDescription(String description) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    public void setModulecode(String newModulecode) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        this.moduleCode \u003d newModulecode;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "    public void setDate(String newDate) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "        this.by \u003d newDate;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTime(String newTime) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        int time \u003d Integer.parseInt(newTime);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (time \u003e 2359 | (time / 100) \u003e 23 | (time % 100) \u003e 59) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.println(\"Invalid Time format\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            this.time \u003d newTime;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTasktype(String newTasktype) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (newTasktype.equals(\"D\") | newTasktype.equals(\"E\")) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            this.taskType \u003d newTasktype;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.println(\"Invalid Task type\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    public void setFrequency(int newFrequency) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        this.frequency \u003d newFrequency;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "t170815518": 9,
      "haroic1997": 31,
      "teachyourselfcoding": 6,
      "-": 18,
      "acyang97": 35
    }
  },
  {
    "path": "src/test/java/seedu/AddModuleTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "t170815518"
        },
        "content": "package seedu;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "t170815518"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "t170815518"
        },
        "content": "import seedu.command.AddModuleCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "t170815518"
        },
        "content": "import seedu.exception.InvalidArgumentsException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "t170815518"
        },
        "content": "import seedu.exception.ModuleAlreadyExistsException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "t170815518"
        },
        "content": "import seedu.module.Module;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "t170815518"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "t170815518"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "t170815518"
        },
        "content": "public class AddModuleTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    void addModuleConstructor_emptyArgument_throwsInvalidArgumentsException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        assertThrows(InvalidArgumentsException.class, () -\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            String input \u003d \"module\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            String[] words \u003d input.split(\" \");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            new AddModuleCommand(Arrays.copyOfRange(words, 1, input.length()));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        });"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    void addModuleConstructor_invalidModuleCode_throwsInvalidArgumentsException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        assertThrows(InvalidArgumentsException.class, () -\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            String input \u003d \"module c/[a,b]\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            String[] words \u003d input.split(\" \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            new AddModuleCommand(Arrays.copyOfRange(words, 1, input.length()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        });"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        assertThrows(InvalidArgumentsException.class, () -\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            String input \u003d \"module c/\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            String[] words \u003d input.split(\" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            new AddModuleCommand(Arrays.copyOfRange(words, 1, input.length()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        });"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        assertThrows(InvalidArgumentsException.class, () -\u003e {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            String input \u003d \"module c/STAAAAA\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            String[] words \u003d input.split(\" \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            new AddModuleCommand(Arrays.copyOfRange(words, 1, input.length()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        });"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    void addModuleExecute_caseInsensitive_throwsModuleAlreadyExistsException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        assertThrows(ModuleAlreadyExistsException.class, () -\u003e {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            ModuleManager moduleManager \u003d new ModuleManager();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            Module a \u003d new Module(\"ST2132\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            Module b \u003d new Module(\"st2132\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            moduleManager.addModule(a);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            moduleManager.addModule(b);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        });"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    void addModuleConstructor_invalidAu_throwsInvalidArgumentsException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        assertThrows(InvalidArgumentsException.class, () -\u003e {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            String input \u003d \"module c/ST2115 a/-0.3\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            String[] words \u003d input.split(\" \");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            new AddModuleCommand(Arrays.copyOfRange(words, 1, input.length()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        });"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        assertThrows(InvalidArgumentsException.class, () -\u003e {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            String input \u003d \"module c/ST2115 a/\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            String[] words \u003d input.split(\" \");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            new AddModuleCommand(Arrays.copyOfRange(words, 1, input.length()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        });"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        assertThrows(InvalidArgumentsException.class, () -\u003e {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            String input \u003d \"module c/ST2115 a/+4.9\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            String[] words \u003d input.split(\" \");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            new AddModuleCommand(Arrays.copyOfRange(words, 1, input.length()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        });"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        assertThrows(InvalidArgumentsException.class, () -\u003e {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            String input \u003d \"module c/ST2115 a/+4Yes\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            String[] words \u003d input.split(\" \");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            new AddModuleCommand(Arrays.copyOfRange(words, 1, input.length()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        });"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "t170815518"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "t170815518": 77,
      "haroic1997": 4
    }
  },
  {
    "path": "src/test/java/seedu/AssessmentTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "t170815518"
        },
        "content": "package seedu;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "t170815518"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "t170815518"
        },
        "content": "import seedu.command.AddAssessmentCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "t170815518"
        },
        "content": "import seedu.command.DeleteAssessmentCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "t170815518"
        },
        "content": "import seedu.exception.EmptyArgumentException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "t170815518"
        },
        "content": "import seedu.exception.InvalidArgumentsException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "t170815518"
        },
        "content": "import seedu.exception.InvalidScoreException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "t170815518"
        },
        "content": "import seedu.exception.ModuleAlreadyExistsException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "t170815518"
        },
        "content": "import seedu.exception.ModuleDoesNotExistException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "t170815518"
        },
        "content": "import seedu.module.Assessment;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "t170815518"
        },
        "content": "import seedu.module.Module;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "t170815518"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "t170815518"
        },
        "content": "public class AssessmentTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    void constructor_InvalidInput_throwsException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        assertThrows(EmptyArgumentException.class, () -\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            new Assessment(null, 5);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        });"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        assertThrows(EmptyArgumentException.class, () -\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            new Assessment(\"\", 5);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        });"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        assertThrows(EmptyArgumentException.class, () -\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            new Assessment(\"     \", 5);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        });"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        assertThrows(InvalidScoreException.class, () -\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            new Assessment(\"test\", 0);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        });"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        assertThrows(InvalidScoreException.class, () -\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            new Assessment(\"test\", -5);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        });"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    void setAttemptScore_InvalidScore_throwsInvalidScoreException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            Assessment a \u003d new Assessment(\"test\", 100);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            assertThrows(InvalidScoreException.class, () -\u003e {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "t170815518"
        },
        "content": "                a.setAttemptScore(-10);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            });"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            assertThrows(InvalidScoreException.class, () -\u003e {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "t170815518"
        },
        "content": "                a.setAttemptScore(100.1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            });"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        } catch (EmptyArgumentException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        } catch (InvalidScoreException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    void setAttemptScore_validScore_successfullyAdded() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            Assessment a \u003d new Assessment(\"test\", 100);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            a.setAttemptScore(0);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            a.setAttemptScore(100.0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        } catch (EmptyArgumentException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        } catch (InvalidScoreException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    void addAssessmentCommandExecute_invalidModule_throwsModuleNotExistsException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        ModuleManager moduleManager \u003d new ModuleManager();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        ScheduleManager scheduleManager \u003d new ScheduleManager();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            AddAssessmentCommand a \u003d new AddAssessmentCommand(\"test\", \"100\", \"CZ2003\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            assertThrows(ModuleDoesNotExistException.class, () -\u003e a.execute(scheduleManager, moduleManager, ui));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        } catch (InvalidArgumentsException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    void deleteAssessmentCommandExecute_NoSuchAssessmentAndModule() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        ModuleManager moduleManager \u003d new ModuleManager();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        ScheduleManager scheduleManager \u003d new ScheduleManager();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        Module module \u003d new Module(\"CS2113\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            moduleManager.addModule(module);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            DeleteAssessmentCommand d1 \u003d new DeleteAssessmentCommand(\"CS2113\", \"test\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            d1.execute(scheduleManager, moduleManager, ui);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            DeleteAssessmentCommand d2 \u003d new DeleteAssessmentCommand(\"CS2113T\", \"test\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            assertThrows(ModuleDoesNotExistException.class, () -\u003e d2.execute(scheduleManager, moduleManager, ui));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        } catch (ModuleAlreadyExistsException | ModuleDoesNotExistException | EmptyArgumentException"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "t170815518"
        },
        "content": "                | InvalidScoreException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "t170815518"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    void parserValidateAddCommand_wrongSyntax_throwsInvalidArgumentsException() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        assertThrows(InvalidArgumentsException.class, () -\u003e Parser.validateAddAssessmentCommand(\"assessment \"));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        assertThrows(InvalidArgumentsException.class, () -\u003e Parser.validateAddAssessmentCommand(\"assessment 100\"));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "t170815518"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    void parserValidateDeleteCommand_wrongSyntax_throwsInvalidArgumentsException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        assertThrows(InvalidArgumentsException.class, () -\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "                Parser.validateDeleteAssessmentCommand(\"delete_assessment \"));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "t170815518"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "t170815518": 103,
      "haroic1997": 7
    }
  },
  {
    "path": "src/test/java/seedu/ModuleManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "acyang97"
        },
        "content": "package seedu;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.exception.EmptyArgumentException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.exception.InvalidDateException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.exception.InvalidModuleCodeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.exception.InvalidTimeFormatException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.exception.MissingDeadlineDescriptionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.exception.MissingDeadlineTimingDetailsException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.exception.MissingEventDateAndTimeDetailsException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.exception.MissingEventDescriptionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.exception.ModuleDoesNotExistException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.exception.ModuleNotExistsException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.exception.MissingModuleCodeOrInvalidModuleCodeException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.exception.StartAndEndTimeSameException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.exception.StartTimeAndEndTimeTooEarlyException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.exception.StartTimeIsAfterEndTimeException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.exception.WrongDateFormatException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "import seedu.exception.ModuleAlreadyExistsException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "t170815518"
        },
        "content": "import seedu.module.Module;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "t170815518"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "t170815518"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "acyang97"
        },
        "content": "class ModuleManagerTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "    void checkIfModuleExist_module_trueIfExist() throws ModuleAlreadyExistsException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        ModuleManager moduleManager \u003d new ModuleManager();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        Module module1 \u003d new Module(\"CS2113\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        Module module2 \u003d new Module(\"MA4270\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            moduleManager.addModule(module1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            assertEquals(moduleManager.checkIfModuleExist(module1), true);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            assertEquals(moduleManager.checkIfModuleExist(module2), false);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        } catch (Exception e) {  // ignore exception because this is a valid case"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": "    void getTotalNumberOfModules_modules_numberOfModulesInModuleManager() throws ModuleAlreadyExistsException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        ModuleManager moduleManager \u003d new ModuleManager();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        Module module1 \u003d new Module(\"CS2113\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        Module module2 \u003d new Module(\"MA4270\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        Module module3 \u003d new Module(\"CS2102\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertEquals(moduleManager.getNumberOfModules(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            moduleManager.addModule(module1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            assertEquals(moduleManager.getNumberOfModules(), 1);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            moduleManager.addModule(module1);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            assertEquals(moduleManager.getNumberOfModules(), 1);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            moduleManager.addModule(module2);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            assertEquals(moduleManager.getNumberOfModules(), 2);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            moduleManager.addModule(module2);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            assertEquals(moduleManager.getNumberOfModules(), 2);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            moduleManager.addModule(module1);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            assertEquals(moduleManager.getNumberOfModules(), 2);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            moduleManager.addModule(module3);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            assertEquals(moduleManager.getNumberOfModules(), 3);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            moduleManager.addModule(module3);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            assertEquals(moduleManager.getNumberOfModules(), 3);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            moduleManager.addModule(module2);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            assertEquals(moduleManager.getNumberOfModules(), 3);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            moduleManager.addModule(module1);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            assertEquals(moduleManager.getNumberOfModules(), 3);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    void display_displayNonExistentModule_expectException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        ModuleManager mm \u003d new ModuleManager();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(ModuleNotExistsException.class,() -\u003e mm.display(\"CS2113\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    void display_displayNonExistentModuleWithDate_expectException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        ModuleManager mm \u003d new ModuleManager();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(ModuleNotExistsException.class,() -\u003e mm.display(\"CS2113\", LocalDate.now()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    void deleteModuleTasks_deleteModuleTasks_returnsTrue() throws ModuleAlreadyExistsException,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            MissingEventDateAndTimeDetailsException, MissingEventDescriptionException,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            MissingModuleCodeOrInvalidModuleCodeException, InvalidDateException,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            StartTimeIsAfterEndTimeException, InvalidTimeFormatException, EmptyArgumentException,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            StartAndEndTimeSameException, StartTimeAndEndTimeTooEarlyException, WrongDateFormatException,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            ModuleDoesNotExistException, MissingDeadlineTimingDetailsException, MissingDeadlineDescriptionException,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            InvalidModuleCodeException, ModuleNotExistsException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        ScheduleManager scheduleManager \u003d new ScheduleManager();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        ModuleManager moduleManager \u003d new ModuleManager();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        moduleManager.addModule(new Module(\"CS2113\"));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        moduleManager.addModule(new Module(\"CS2102\"));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input1 \u003d \"event CS2113 final exam /at 2021-05-03 14:00 16:00 LT14\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        scheduleManager.addEvent(Parser.validateEvent(input1), moduleManager, ui);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input2 \u003d \"deadline CS2102 TP version 1 /by 2021-05-03\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        scheduleManager.addDeadline(Parser.validateDeadline(input2), moduleManager);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        moduleManager.deleteModuleTasks(\"TP version 1\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertEquals(0, moduleManager.getModule(\"CS2102\").getListOfTasks().size());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    void deleteModuleTasks_deleteModuleTasksAtDate_returnsTrue() throws ModuleAlreadyExistsException,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            MissingEventDateAndTimeDetailsException, MissingEventDescriptionException,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            MissingModuleCodeOrInvalidModuleCodeException, InvalidDateException,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            StartTimeIsAfterEndTimeException, InvalidTimeFormatException, EmptyArgumentException,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            StartAndEndTimeSameException, StartTimeAndEndTimeTooEarlyException, WrongDateFormatException,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            ModuleDoesNotExistException, MissingDeadlineTimingDetailsException, MissingDeadlineDescriptionException,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            InvalidModuleCodeException, ModuleNotExistsException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        ScheduleManager scheduleManager \u003d new ScheduleManager();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        ModuleManager moduleManager \u003d new ModuleManager();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        moduleManager.addModule(new Module(\"CS2113\"));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        moduleManager.addModule(new Module(\"CS2102\"));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input1 \u003d \"event CS2113 final exam /at 2021-05-03 14:00 16:00 LT14\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        scheduleManager.addEvent(Parser.validateEvent(input1), moduleManager, ui);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input2 \u003d \"deadline CS2102 final exam /by 2021-05-03\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        scheduleManager.addDeadline(Parser.validateDeadline(input2), moduleManager);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        moduleManager.deleteModuleTasks(\"final exam\", LocalDate"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                .of(2021, 5, 3));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertEquals(0, moduleManager.getModule(\"CS2102\").getListOfTasks().size());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertEquals(0, moduleManager.getModule(\"CS2113\").getListOfTasks().size());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    void deleteModuleTasks_deleteTasksWithDate_returnsTrue() throws ModuleAlreadyExistsException,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            MissingEventDateAndTimeDetailsException, MissingEventDescriptionException,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            MissingModuleCodeOrInvalidModuleCodeException, InvalidDateException,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            StartTimeIsAfterEndTimeException, InvalidTimeFormatException, EmptyArgumentException,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            StartAndEndTimeSameException, StartTimeAndEndTimeTooEarlyException, WrongDateFormatException,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            ModuleDoesNotExistException, MissingDeadlineTimingDetailsException, MissingDeadlineDescriptionException,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            InvalidModuleCodeException, ModuleNotExistsException {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        ScheduleManager scheduleManager \u003d new ScheduleManager();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        ModuleManager moduleManager \u003d new ModuleManager();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        moduleManager.addModule(new Module(\"CS2113\"));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        moduleManager.addModule(new Module(\"CS2102\"));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input1 \u003d \"event CS2113 final exam /at 2021-05-03 14:00 16:00 LT14\";"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        scheduleManager.addEvent(Parser.validateEvent(input1), moduleManager, ui);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input2 \u003d \"deadline CS2102 final exam /by 2021-05-03\";"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        scheduleManager.addDeadline(Parser.validateDeadline(input2), moduleManager);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        moduleManager.delete(\"CS2102\", LocalDate.of(2021, 5, 3));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        moduleManager.delete(\"CS2113\", LocalDate.of(2021, 5, 4));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertEquals(0, moduleManager.getModule(\"CS2102\").getListOfTasks().size());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertEquals(1, moduleManager.getModule(\"CS2113\").getListOfTasks().size());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "acyang97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "t170815518": 8,
      "haroic1997": 11,
      "teachyourselfcoding": 4,
      "acyang97": 130
    }
  },
  {
    "path": "src/test/java/seedu/ParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "acyang97"
        },
        "content": "package seedu;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.exception.EmptyArgumentException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.exception.InvalidDateException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.exception.InvalidFrequencyException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.exception.InvalidModuleCodeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.exception.InvalidTimeFormatException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.exception.MissingDeadlineDescriptionException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.exception.MissingDeadlineTimingDetailsException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.exception.MissingEventDateAndTimeDetailsException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.exception.MissingEventDescriptionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.exception.MissingLessonDescriptionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.exception.MissingLessonTimingException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.exception.MissingModuleCodeOrInvalidModuleCodeException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.exception.StartAndEndTimeSameException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.exception.StartTimeAndEndTimeTooEarlyException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.exception.StartTimeIsAfterEndTimeException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.exception.WrongDateFormatException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.exception.EmptyArgumentException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teachyourselfcoding"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.task.Deadline;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.task.Event;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.task.Lesson;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "acyang97"
        },
        "content": "class ParserTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    void parseLesson_emptyArgumentLessonInput_expectEmptyArgumentException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input1 \u003d \"lesson\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(EmptyArgumentException.class, () -\u003e Parser.parseLesson(input1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input2 \u003d \"lesson  \";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(EmptyArgumentException.class, () -\u003e Parser.parseLesson(input2));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    void parseLesson_validLesson_returnsLesson() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input1 \u003d \"lesson online lecture CS2113 /on 5 16:00 18:00\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input2 \u003d \"lesson online lecture CS2113 5 16:00 18:00\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            Lesson lesson \u003d Parser.parseLesson(input1);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            assertEquals(lesson.getLessonDayInDayOfWeek(), DayOfWeek.FRIDAY);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            assertEquals(lesson.getDescription(), \"online lecture\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            assertEquals(lesson.getModuleCode(), \"CS2113\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            assertEquals(lesson.getStartTime(), \"16:00\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            assertEquals(lesson.getEndTime(), \"18:00\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        } catch (Exception e) {  // ignore exceptions because this is a valid case "
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(MissingLessonTimingException.class, () -\u003e Parser.parseLesson(input2));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    void parseLesson_lessonWithInvalidModuleCode_expectInvalidModuleCodeException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input1 \u003d \"lesson online lecture CS2113TTTT /on 5 16:00 18:00\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(InvalidModuleCodeException.class, () -\u003e Parser.parseLesson(input1));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input2 \u003d \"lesson online lecture CS2113a /on 5 16:00 18:00\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(InvalidModuleCodeException.class, () -\u003e Parser.parseLesson(input2));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input3 \u003d \"lesson online lecture ka /on 5 16:00 18:00\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(InvalidModuleCodeException.class, () -\u003e Parser.parseLesson(input3));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input4 \u003d \"lesson online lecture CAKSKS /on 5 16:00 18:00\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(InvalidModuleCodeException.class, () -\u003e Parser.parseLesson(input4));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input5 \u003d \"lesson online lecture 000000 /on 5 16:00 18:00\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(InvalidModuleCodeException.class, () -\u003e Parser.parseLesson(input5));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input6 \u003d \"lesson online lecture aa2222 /on 5 16:00 18:00\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(InvalidModuleCodeException.class, () -\u003e Parser.parseLesson(input6));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input7 \u003d \"lesson online lecture aa2222s /on 5 16:00 18:00\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(InvalidModuleCodeException.class, () -\u003e Parser.parseLesson(input7));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    void parseLesson_lessonWithMissingTimingDetails_expectMissingLessonTimingException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input1 \u003d \"lesson online lecture CS2113T /on 5 18:00\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input2 \u003d \"lesson online lecture CS2113T /on 1 20:00\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(MissingLessonTimingException.class, () -\u003e Parser.parseLesson(input1));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(MissingLessonTimingException.class, () -\u003e Parser.parseLesson(input2));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    void parseLesson_lessonWithMissingDescription_expectMissingLessonDescriptionException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input1 \u003d \"lesson  CS2113T /on 5 18:00 20:00\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input2 \u003d \"lesson CS2113T/on 5 18:00 20:00\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(MissingLessonDescriptionException.class, () -\u003e Parser.parseLesson(input1));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(MissingLessonDescriptionException.class, () -\u003e Parser.parseLesson(input2));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "t170815518"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    void parseLesson_lessonWithWrongFrequency_expectInvalidFrequencyException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input1 \u003d \"lesson online lecture CS2113T /on 9 18:00 20:00\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input2 \u003d \"lesson online lecture CS2113T /on a 18:00 20:00\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(InvalidFrequencyException.class, () -\u003e Parser.parseLesson(input1));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(InvalidFrequencyException.class, () -\u003e Parser.parseLesson(input2));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    void parseLesson_lessonWithSameStartTimeAndEndTime_expectStartAndEndTimeSameException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input1 \u003d \"lesson online lecture CS2113T /on 2 08:00 08:00\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input2 \u003d \"lesson online lecture CS2113T /on 2 23:00 23:00\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(StartAndEndTimeSameException.class, () -\u003e Parser.parseLesson(input1));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(StartAndEndTimeSameException.class, () -\u003e Parser.parseLesson(input2));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    void parseLesson_lessonWithStartTimeAfterEndTime_expectStartTimeIsAfterEndTimeException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input1 \u003d \"lesson online lecture CS2113T /on 2 09:00 08:00\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input2 \u003d \"lesson online lecture CS2113T /on 2 23:00 00:00\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input3 \u003d \"lesson online lecture CS2113T /on 2 23:00 01:00\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(StartTimeIsAfterEndTimeException.class, () -\u003e Parser.parseLesson(input1));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(StartTimeIsAfterEndTimeException.class, () -\u003e Parser.parseLesson(input2));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(StartTimeIsAfterEndTimeException.class, () -\u003e Parser.parseLesson(input3));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    void parseLesson_lessonWithStartOrEndTimeTooEarly_expectStartTimeAndEndTimeTooEarlyException() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input1 \u003d \"lesson online lecture CS2113T /on 2 00:00 08:00\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input2 \u003d \"lesson online lecture CS2113T /on 2 01:00 08:00\";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input3 \u003d \"lesson online lecture CS2113T /on 2 04:00 05:00\";"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(StartTimeAndEndTimeTooEarlyException.class, () -\u003e  Parser.parseLesson(input1));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(StartTimeAndEndTimeTooEarlyException.class, () -\u003e  Parser.parseLesson(input2));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(StartTimeAndEndTimeTooEarlyException.class, () -\u003e  Parser.parseLesson(input3));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    void parseLesson_inputWithInvalidTime_expectInvalidTimeFormatException() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input1 \u003d \"lesson online lecture CS2113T /on 2 25:00 20:00\";"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(InvalidTimeFormatException.class, () -\u003e Parser.parseLesson(input1));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input2 \u003d \"lesson online lecture CS2113T /on 2 10:000 20:00\";"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(InvalidTimeFormatException.class, () -\u003e Parser.parseLesson(input2));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input3 \u003d \"lesson online lecture CS2113T /on 2 2s:aa 20:00\";"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(InvalidTimeFormatException.class, () -\u003e Parser.parseLesson(input3));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input4 \u003d \"lesson online lecture CS2113T /on 2 10:00 aa:aa\";"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(InvalidTimeFormatException.class, () -\u003e Parser.parseLesson(input4));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input5 \u003d \"lesson online lecture CS2113T /on 2 12:69 20:00\";"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(InvalidTimeFormatException.class, () -\u003e Parser.parseLesson(input5));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input6 \u003d \"lesson online lecture CS2113T /on 2 12:00 20:69\";"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(InvalidTimeFormatException.class, () -\u003e Parser.parseLesson(input6));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input7 \u003d \"lesson online lecture CS2113T /on 2 12:00 20:00a\";"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(InvalidTimeFormatException.class, () -\u003e Parser.parseLesson(input7));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input8 \u003d \"lesson online lecture CS2113T /on 2 12:00 30:00\";"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(InvalidTimeFormatException.class, () -\u003e Parser.parseLesson(input8));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input9 \u003d \"lesson online lecture CS2113T /on 2 12:00 20:10\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(InvalidTimeFormatException.class, () -\u003e Parser.parseLesson(input9));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input10 \u003d \"lesson online lecture CS2113T /on 2 12:01 20:00\";"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(InvalidTimeFormatException.class, () -\u003e Parser.parseLesson(input10));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    void parseLesson_lessonWithWrongTimeFormat_expectException() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input \u003d \"lesson online lecture CS2113T /on 4 18:000 20:00\";"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(InvalidTimeFormatException.class, () -\u003e Parser.parseLesson(input));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    void verifyModuleCode_validModule_returnsTrue() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String moduleCode1 \u003d \"MA2101\";"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertTrue(Parser.verifyModuleCode(moduleCode1));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String moduleCode2 \u003d \"CS2113T\";"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertTrue(Parser.verifyModuleCode(moduleCode2));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String moduleCode3 \u003d \"DSA4211\";"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertTrue(Parser.verifyModuleCode(moduleCode3));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    void verifyModuleCode_invalidModuleWithAt_returnsFalse() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String moduleCode \u003d \"MA2101/at\";"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertFalse(Parser.verifyModuleCode(moduleCode));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    void verifyModuleCode_invalidModule_returnsFalse() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String moduleCode1 \u003d \"A1234\";"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertFalse(Parser.verifyModuleCode(moduleCode1));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String moduleCode2 \u003d \"CS2113TTTT\";"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertFalse(Parser.verifyModuleCode(moduleCode2));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String moduleCode3 \u003d \"CS99999\";"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertFalse(Parser.verifyModuleCode(moduleCode3));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String moduleCode4 \u003d \"CS21a3T\";"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertFalse(Parser.verifyModuleCode(moduleCode4));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String moduleCode5 \u003d \"dsa4211\";"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertFalse(Parser.verifyModuleCode(moduleCode5));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    void parseLesson_validLesson_returnsTrue() throws"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            EmptyArgumentException, MissingLessonTimingException, InvalidModuleCodeException,"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            InvalidTimeFormatException, InvalidFrequencyException, StartAndEndTimeSameException,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            MissingLessonDescriptionException, StartTimeAndEndTimeTooEarlyException,"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            StartTimeIsAfterEndTimeException {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input \u003d \"lesson online lecture CS2113 /on 5 16:00 18:00\";"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        Lesson expectedLesson \u003d Parser.parseLesson(input);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        Lesson actualLesson \u003d new Lesson(\"online lecture\", \"CS2113\","
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                5, \"16:00\", \"18:00\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        Lesson wrongLesson \u003d new Lesson(\"online lecture \", \"CS2113\","
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                5, \"16:00\", \"18:00\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertEquals(expectedLesson, actualLesson);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertFalse(expectedLesson.equals(wrongLesson));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    void validateEvent_validEvent_returnsTrue() throws MissingEventDateAndTimeDetailsException,"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            MissingEventDescriptionException, MissingModuleCodeOrInvalidModuleCodeException, InvalidDateException,"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "            StartTimeIsAfterEndTimeException, InvalidTimeFormatException, EmptyArgumentException,"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "            StartAndEndTimeSameException, StartTimeAndEndTimeTooEarlyException, WrongDateFormatException {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input1 \u003d \"event CS2113 final exam /at 2021-05-03 14:00 16:00 LT14\";"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        Event expectedEvent \u003d Parser.validateEvent(input1);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        Event actualEvent \u003d new Event(\"final exam\", \"CS2113\","
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                \"LT14\", \"14:00\", \"16:00\", \"2021-05-03\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertEquals(LocalDate.of(2021, 5, 3), expectedEvent.getDate());"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertEquals(expectedEvent.getDescription(), actualEvent.getDescription());"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertEquals(expectedEvent, actualEvent);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    void validateDeadline_validDeadlineLineInput_returnsDeadline() throws InvalidDateException,"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            WrongDateFormatException, MissingDeadlineTimingDetailsException,"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            EmptyArgumentException, InvalidModuleCodeException, MissingDeadlineDescriptionException {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input \u003d \"deadline CS2113 TP version 1 /by 2021-04-04\";"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        Deadline deadline \u003d Parser.validateDeadline(input);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertEquals(deadline.getModuleCode(), \"CS2113\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertEquals(LocalDate.of(2021, 4, 4), deadline.getDate());"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertEquals(deadline.getDescription(), \"TP version 1\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    void validateDeadline_deadlineInputWithoutDescription_exceptException() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input \u003d \"deadline   \";"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(EmptyArgumentException.class, () -\u003e Parser.validateDeadline(input));"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    void validateDeadline_deadlineWithoutDescription_expectMissingDeadlineDescriptionException() {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input1 \u003d \"deadline CS2113 /by 2021-04-04\";"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(MissingDeadlineDescriptionException.class, () -\u003e Parser.validateDeadline(input1));"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input2 \u003d \"deadline CS2113/by 2021-04-04\";"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(MissingDeadlineDescriptionException.class, () -\u003e Parser.validateDeadline(input2));"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input3 \u003d \"deadline /by 2021-04-04\";"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(MissingDeadlineDescriptionException.class, () -\u003e Parser.validateDeadline(input3));"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    void validateDeadline_deadlineWithInvalidModuleCode_expectInvalidModuleCodeException() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input1 \u003d \"deadline CS2113TTTT TP /by 2021-04-04\";"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(InvalidModuleCodeException.class, () -\u003e Parser.validateDeadline(input1));"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input2 \u003d \"deadline CS2113a TP /by 2021-04-04\";"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(InvalidModuleCodeException.class, () -\u003e Parser.validateDeadline(input2));"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input3 \u003d \"deadline ka TP /by 2021-04-04\";"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(InvalidModuleCodeException.class, () -\u003e Parser.validateDeadline(input3));"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input4 \u003d \"deadline CAKSKS TP /by 2021-04-04\";"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(InvalidModuleCodeException.class, () -\u003e Parser.validateDeadline(input4));"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input5 \u003d \"deadline 000000 TP /by 2021-04-04\";"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(InvalidModuleCodeException.class, () -\u003e Parser.validateDeadline(input5));"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input6 \u003d \"deadline aa2222 TP /by 2021-04-04\";"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(InvalidModuleCodeException.class, () -\u003e Parser.validateDeadline(input6));"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input7 \u003d \"deadline aa2222s TP /by 2021-04-04\";"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(InvalidModuleCodeException.class, () -\u003e Parser.validateDeadline(input7));"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    void validateDeadline_deadlineWithWrongDateFormat_expectWrongDateFormatException() {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input1 \u003d \"deadline CS2113 TP /by 2021-00-00\";"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(WrongDateFormatException.class, () -\u003e Parser.validateDeadline(input1));"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input2 \u003d \"deadline CS2113 TP /by 2021-13-01\";"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(WrongDateFormatException.class, () -\u003e Parser.validateDeadline(input2));"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input3 \u003d \"deadline CS2113 TP /by 2021-12-32\";"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(WrongDateFormatException.class, () -\u003e Parser.validateDeadline(input3));"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input4 \u003d \"deadline CS2113 TP /by 20211-04-04\";"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(WrongDateFormatException.class, () -\u003e Parser.validateDeadline(input4));"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input5 \u003d \"deadline CS2113 TP /by 202-04-04\";"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(WrongDateFormatException.class, () -\u003e Parser.validateDeadline(input5));"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input6 \u003d \"deadline CS2113 TP /by 2021-04-0a\";"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(WrongDateFormatException.class, () -\u003e Parser.validateDeadline(input6));"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input7 \u003d \"deadline CS2113 TP /by 2021-0a-04\";"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(WrongDateFormatException.class, () -\u003e Parser.validateDeadline(input7));"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input8 \u003d \"deadline CS2113 TP /by 202a-0a-04\";"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(WrongDateFormatException.class, () -\u003e Parser.validateDeadline(input8));"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input9 \u003d \"deadline CS2113 TP /by abcdefg\";"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(WrongDateFormatException.class, () -\u003e Parser.validateDeadline(input9));"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input10 \u003d \"deadline CS2113 TP /by 0\";"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(WrongDateFormatException.class, () -\u003e Parser.validateDeadline(input10));"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    void validateDeadline_inputWithoutProperDeadline_expectMissingDeadlineTimingDetailsException() {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input \u003d \"deadline MA3333 20-04-04\";"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(MissingDeadlineTimingDetailsException.class, () -\u003e Parser.validateDeadline(input));"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    void validateDeadline_inputWithDateOutsideRange_expectInvalidDateException() {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input1 \u003d \"deadline CS2113 TP version 1 /by 2021-10-10\";"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input2 \u003d \"deadline CS2113 TP version 1 /by 2019-10-10\";"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(InvalidDateException.class, () -\u003e Parser.validateDeadline(input1));"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(InvalidDateException.class, () -\u003e Parser.validateDeadline(input2));"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    void validateDeadline_validDeadline_returnsTrue() throws"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            WrongDateFormatException, InvalidDateException,"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            EmptyArgumentException, MissingDeadlineTimingDetailsException, InvalidModuleCodeException,"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            MissingDeadlineDescriptionException {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input \u003d \"deadline CS2113 TP version 1 /by 2021-04-04\";"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        Deadline expectedDeadline \u003d Parser.validateDeadline(input);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        Deadline actualDeadline \u003d new Deadline(\"CS2113\", \"TP version 1\", \"2021-04-04\");"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertEquals(expectedDeadline, actualDeadline);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    void validateEvent_validEventLineInput_returnsEvent() throws InvalidDateException,"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            MissingEventDateAndTimeDetailsException, WrongDateFormatException, InvalidTimeFormatException,"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            EmptyArgumentException, StartAndEndTimeSameException,"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            MissingEventDescriptionException, StartTimeIsAfterEndTimeException, StartTimeAndEndTimeTooEarlyException,"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            MissingModuleCodeOrInvalidModuleCodeException {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input \u003d \"event CS2113 final exam /at 2021-05-03 14:00 16:00 LT14\";"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        Event event \u003d Parser.validateEvent(input);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertEquals(event.getDateOfEvent(), \"2021-05-03\");"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertEquals(event.getDateOfEventInLocalDate(), LocalDate.of(2021, 5, 3));"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertEquals(event.getEndTimeOfEvent(), \"16:00\");"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertEquals(event.getAt(), \"LT14\");"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertEquals(event.getModuleCode(), \"CS2113\");"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertEquals(event.getDescription(), \"final exam\");"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    void validateEvent_emptyEventInput_expectEmptyArgumentException() {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input \u003d \"event   \";"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(EmptyArgumentException.class, () -\u003e Parser.validateEvent(input));"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    void validateEvent_eventWithInvalidModuleCode_expectMissingModuleCodeOrInvalidModuleCodeException() {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input1 \u003d \"event CS2113TTTT final exam /at 2021-05-03 14:00 16:00 LT14\";"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(MissingModuleCodeOrInvalidModuleCodeException.class, () -\u003e Parser.validateEvent(input1));"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input2 \u003d \"event CS2113a final exam /at 2021-05-03 14:00 16:00 LT14\";"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(MissingModuleCodeOrInvalidModuleCodeException.class, () -\u003e Parser.validateEvent(input2));"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input3 \u003d \"event k final exam /at 2021-05-03 14:00 16:00 LT14\";"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(MissingModuleCodeOrInvalidModuleCodeException.class, () -\u003e Parser.validateEvent(input3));"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input4 \u003d \"event 00000 final exam /at 2021-05-03 14:00 16:00 LT14\";"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(MissingModuleCodeOrInvalidModuleCodeException.class, () -\u003e Parser.validateEvent(input4));"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input5 \u003d \"event aa2222 final exam /at 2021-05-03 14:00 16:00 LT14\";"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(MissingModuleCodeOrInvalidModuleCodeException.class, () -\u003e Parser.validateEvent(input5));"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input6 \u003d \"event aa2222s final exam /at 2021-05-03 14:00 16:00 LT14\";"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(MissingModuleCodeOrInvalidModuleCodeException.class, () -\u003e Parser.validateEvent(input6));"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input7 \u003d \"event CAHSAS2 final exam /at 2021-05-03 14:00 16:00 LT14\";"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(MissingModuleCodeOrInvalidModuleCodeException.class, () -\u003e Parser.validateEvent(input7));"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    void validateEvent_eventWithoutDescription_expectMissingEventDescriptionException() {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input1 \u003d \"event CS2113T /at 2021-05-03 14:00 16:00 LT14\";"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(MissingEventDescriptionException.class, () -\u003e  Parser.validateEvent(input1));"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input2 \u003d \"event CS2113T/at 2021-05-03 14:00 16:00 LT14\";"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(MissingEventDescriptionException.class, () -\u003e  Parser.validateEvent(input2));"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    void validateEvent_eventWithWrongDateFormat_expectWrongDateFormatException() {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input1 \u003d \"event CS2113T final exam /at 2021-00-00 14:00 16:00 LT14\";"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(WrongDateFormatException.class, () -\u003e Parser.validateEvent(input1));"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input2 \u003d \"event CS2113T final exam /at 2021-13-01 14:00 16:00 LT14\";"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(WrongDateFormatException.class, () -\u003e Parser.validateEvent(input2));"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input3 \u003d \"event CS2113T final exam /at 2021-12-32 14:00 16:00 LT14\";"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(WrongDateFormatException.class, () -\u003e Parser.validateEvent(input3));"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input4 \u003d \"event CS2113T final exam /at 20211-04-04 14:00 16:00 LT14\";"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(WrongDateFormatException.class, () -\u003e Parser.validateEvent(input4));"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input5 \u003d \"event CS2113T final exam /at 202-04-04 14:00 16:00 LT14\";"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(WrongDateFormatException.class, () -\u003e Parser.validateEvent(input5));"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input6 \u003d \"event CS2113T final exam /at 2021-04-0a 14:00 16:00 LT14\";"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(WrongDateFormatException.class, () -\u003e Parser.validateEvent(input6));"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input7 \u003d \"event CS2113T final exam /at 2021-0a-04 14:00 16:00 LT14\";"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(WrongDateFormatException.class, () -\u003e Parser.validateEvent(input7));"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input8 \u003d \"event CS2113T final exam /at 202a-0a-04 14:00 16:00 LT14\";"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(WrongDateFormatException.class, () -\u003e Parser.validateEvent(input8));"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input9 \u003d \"event CS2113T final exam /at abcdefg 14:00 16:00 LT14\";"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(WrongDateFormatException.class, () -\u003e Parser.validateEvent(input9));"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input10 \u003d \"event CS2113T final exam /at 0 14:00 16:00 LT14\";"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(WrongDateFormatException.class, () -\u003e Parser.validateEvent(input10));"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    void validateEvent_eventWithInvalidStartOrEndTime_expectInvalidTimeFormatException() {"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input1 \u003d \"event CS2113 final exam /at 2021-05-03 25:00 20:00 LT14\";"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(InvalidTimeFormatException.class, () -\u003e Parser.validateEvent(input1));"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input2 \u003d \"event CS2113 final exam /at 2021-05-03 10:000 20:00 LT14\";"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(InvalidTimeFormatException.class, () -\u003e Parser.validateEvent(input2));"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input3 \u003d \"event CS2113 final exam /at 2021-05-03 2s:aa 20:00 LT14\";"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(InvalidTimeFormatException.class, () -\u003e Parser.validateEvent(input3));"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input4 \u003d \"event CS2113 final exam /at 2021-05-03 10:00 aa:aa LT14\";"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(InvalidTimeFormatException.class, () -\u003e Parser.validateEvent(input4));"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input5 \u003d \"event CS2113 final exam /at 2021-05-03 12:69 20:00 LT14\";"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(InvalidTimeFormatException.class, () -\u003e Parser.validateEvent(input5));"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input6 \u003d \"event CS2113 final exam /at 2021-05-03 12:00 20:69 LT14\";"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(InvalidTimeFormatException.class, () -\u003e Parser.validateEvent(input6));"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input7 \u003d \"event CS2113 final exam /at 2021-05-03 12:00 20:00a LT14\";"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(InvalidTimeFormatException.class, () -\u003e Parser.validateEvent(input7));"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input8 \u003d \"event CS2113 final exam /at 2021-05-03 12:00 30:00 LT14\";"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(InvalidTimeFormatException.class, () -\u003e Parser.validateEvent(input8));"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input9 \u003d \"event CS2113 final exam /at 2021-05-03 12:00 20:60 LT14\";"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(InvalidTimeFormatException.class, () -\u003e Parser.validateEvent(input9));"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input10 \u003d \"event CS2113 final exam /at 2021-05-03 12:01 20:00 LT14\";"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(InvalidTimeFormatException.class, () -\u003e Parser.validateEvent(input10));"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input11 \u003d \"event CS2113 final exam /at 2021-05-03 12:00 20:10 LT14\";"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(InvalidTimeFormatException.class, () -\u003e Parser.validateEvent(input11));"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    void validateEvent_eventWithoutModuleCOde_expectMissingModuleCodeOrInvalidModuleCodeException() {"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input1 \u003d \"event final exam/at 2021-05-03 14:00 16:00 LT14\";"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(MissingModuleCodeOrInvalidModuleCodeException.class, () -\u003e Parser.validateEvent(input1));"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input2 \u003d \"event final exam /at 2021-05-03 14:00 16:00 LT14\";"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(MissingModuleCodeOrInvalidModuleCodeException.class, () -\u003e Parser.validateEvent(input2));"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    void validateEvent_missingAtEventInput_expectMissingEventDateAndTimeDetailsException() {"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input1 \u003d \"event CS2113 final exam 2021-05-03 14:00 16:00 LT14\";"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(MissingEventDateAndTimeDetailsException.class, () -\u003e Parser.validateEvent(input1));"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input2 \u003d \"event CS2113final exam2021-05-03 14:00 16:00 LT14\";"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(MissingEventDateAndTimeDetailsException.class, () -\u003e Parser.validateEvent(input2));"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input3 \u003d \"event CS2113 final exam /at 2021-05-03 14:00 16:00\";"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(MissingEventDateAndTimeDetailsException.class, () -\u003e Parser.validateEvent(input3));"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    void validateEvent_missingEventDateTimeDetails_expectMissingEventDateAndTimeDetailsException() {"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input \u003d \"event CS2113 final exam /at 2021-05-03 14:00 LT14\";"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(MissingEventDateAndTimeDetailsException.class, () -\u003e Parser.validateEvent(input));"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    void validateEvent_eventWithSameStartAndEndTime_expectStartAndEndTimeSameException() {"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input1 \u003d \"event CS2113 final exam /at 2021-05-03 14:00 14:00 LT14\";"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(StartAndEndTimeSameException.class, () -\u003e Parser.validateEvent(input1));"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input2 \u003d \"event CS2113 final exam /at 2021-05-03 10:00 10:00 LT14\";"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(StartAndEndTimeSameException.class, () -\u003e Parser.validateEvent(input2));"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    void validateEvent_eventWithStartTimeAfterEndTime_expectStartTimeIsAfterEndTimeException() {"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input1 \u003d \"event CS2113 final exam /at 2021-05-03 09:00 08:00 LT14\";"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(StartTimeIsAfterEndTimeException.class, () -\u003e Parser.validateEvent(input1));"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input2 \u003d \"event CS2113 final exam /at 2021-05-03 23:00 00:00 LT14\";"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(StartTimeIsAfterEndTimeException.class, () -\u003e Parser.validateEvent(input2));"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input3 \u003d \"event CS2113 final exam /at 2021-05-03 23:00 01:00 LT14\";"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(StartTimeIsAfterEndTimeException.class, () -\u003e Parser.validateEvent(input3));"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    void validateEvent_eventWithStartOrEndTimeTooEarly_expectStartTimeAndEndTimeTooEarlyException() {"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input1 \u003d \"event CS2113 final exam /at 2021-05-03 00:00 08:00 LT14\";"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(StartTimeAndEndTimeTooEarlyException.class, () -\u003e Parser.validateEvent(input1));"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input2 \u003d \"event CS2113 final exam /at 2021-05-03 01:00 08:00 LT14\";"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(StartTimeAndEndTimeTooEarlyException.class, () -\u003e Parser.validateEvent(input2));"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input3 \u003d \"event CS2113 final exam /at 2021-05-03 04:00 05:00 LT14\";"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(StartTimeAndEndTimeTooEarlyException.class, () -\u003e Parser.validateEvent(input3));"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    void validateEvent_invalidEventDate_expectException() {"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input1 \u003d \"event CS2113 final exam /at 2021-10-03 12:00 14:00 LT14\";"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(InvalidDateException.class, () -\u003e Parser.validateEvent(input1));"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input2 \u003d \"event CS2113 final exam /at 2018-10-03 12:00 14:00 LT14\";"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(InvalidDateException.class, () -\u003e Parser.validateEvent(input2));"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    void validateEvent_invalidEventTime_expectInvalidTimeFormatException() {"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input1 \u003d \"event CS2113 final exam /at 2021-05-03 12:002 14:00 LT14\";"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(InvalidTimeFormatException.class, () -\u003e Parser.validateEvent(input1));"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input2 \u003d \"event CS2113 final exam /at 2021-05-03 12:00 14:003 LT14\";"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(InvalidTimeFormatException.class, () -\u003e Parser.validateEvent(input2));"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input3 \u003d \"event CS2113 final exam /at 2021-05-03 25:19 14:00 LT14\";"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(InvalidTimeFormatException.class, () -\u003e Parser.validateEvent(input3));"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input4 \u003d \"event CS2113 final exam /at 2021-05-03 12:00 bbbbs LT14\";"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(InvalidTimeFormatException.class, () -\u003e Parser.validateEvent(input4));"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "acyang97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "t170815518": 1,
      "haroic1997": 2,
      "teachyourselfcoding": 2,
      "acyang97": 483
    }
  },
  {
    "path": "src/test/java/seedu/ScheduleManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "package seedu;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.exception.EmptyArgumentException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.exception.InvalidDateException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.exception.InvalidFrequencyException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.exception.InvalidModuleCodeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.exception.InvalidTimeFormatException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.exception.MissingDeadlineDescriptionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.exception.MissingDeadlineTimingDetailsException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.exception.MissingEventDateAndTimeDetailsException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.exception.MissingEventDescriptionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.exception.MissingLessonDescriptionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.exception.MissingLessonTimingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.exception.MissingModuleCodeOrInvalidModuleCodeException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.exception.StartAndEndTimeSameException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.exception.StartTimeAndEndTimeTooEarlyException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.exception.StartTimeIsAfterEndTimeException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.exception.WrongDateFormatException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.exception.InvalidStartEndDateException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.exception.ModuleAlreadyExistsException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.exception.ModuleDoesNotExistException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "t170815518"
        },
        "content": "import seedu.module.Module;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.task.Event;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.task.Lesson;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "class ScheduleManagerTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    public void display_longAgoDate_expectExceptions() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        ScheduleManager sm \u003d new ScheduleManager();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(InvalidDateException.class, () -\u003e sm.displayDate(LocalDate.parse(\"2010-10-10\")));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    public void display_TooFarAhead_expectExceptions() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        ScheduleManager sm \u003d new ScheduleManager();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(InvalidDateException.class, () -\u003e sm.displayDate(LocalDate.parse(\"2100-10-10\")));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    public void display_startAndEndDateSwap_expectExceptions() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "        ScheduleManager sm \u003d new ScheduleManager();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertThrows(InvalidStartEndDateException.class, () -\u003e sm.display(LocalDate.parse(\"2020-11-28\"),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                LocalDate.parse(\"2020-10-20\")));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    public void checkIfLessonToBeAddedClashesWithCurrentTimetable_validLesson_true() throws"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            MissingLessonTimingException, EmptyArgumentException, InvalidModuleCodeException,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            InvalidTimeFormatException, InvalidFrequencyException, StartAndEndTimeSameException,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            MissingLessonDescriptionException, StartTimeAndEndTimeTooEarlyException, StartTimeIsAfterEndTimeException,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            ModuleDoesNotExistException, ModuleAlreadyExistsException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input1 \u003d \"lesson online lecture CS2113 /on 5 16:00 18:00\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        Lesson lesson \u003d Parser.parseLesson(input1);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        ScheduleManager scheduleManager \u003d new ScheduleManager();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        ModuleManager moduleManager \u003d new ModuleManager();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        moduleManager.addModule(new Module(\"CS2113\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        scheduleManager.addLesson(lesson, moduleManager, ui);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        boolean result \u003d scheduleManager.checkIfLessonToBeAddedClashesWithCurrentTimetable(lesson);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertEquals(result, true);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "haroic1997"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    public void checkIfLessonToBeAddedClashesInADate_validLessonAndDate_true() throws"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            MissingLessonTimingException, EmptyArgumentException, InvalidModuleCodeException,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            InvalidTimeFormatException, InvalidFrequencyException, InvalidDateException,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            MissingEventDateAndTimeDetailsException, WrongDateFormatException,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            StartAndEndTimeSameException, MissingLessonDescriptionException,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            MissingEventDescriptionException, StartTimeAndEndTimeTooEarlyException, StartTimeIsAfterEndTimeException,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            MissingModuleCodeOrInvalidModuleCodeException, ModuleDoesNotExistException, ModuleAlreadyExistsException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input1 \u003d \"lesson online lecture CS2113 /on 5 16:00 18:00\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input2 \u003d \"event CS2113 final exam /at 2021-01-15 14:00 16:00 LT14\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        Lesson lesson \u003d Parser.parseLesson(input1);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        Event event \u003d Parser.validateEvent(input2);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        ScheduleManager scheduleManager \u003d new ScheduleManager();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        ModuleManager moduleManager \u003d new ModuleManager();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        moduleManager.addModule(new Module(\"CS2113\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        scheduleManager.addLesson(lesson, moduleManager, ui);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        scheduleManager.addEvent(event, moduleManager, ui);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input3 \u003d \"lesson tutorial CS2113 /on 5 14:00 16:00\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        Lesson lesson2 \u003d Parser.parseLesson(input3);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertEquals(true, scheduleManager.checkIfLessonToBeAddedClashesInADate("
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                lesson2, LocalDate.of(2021, 1, 15)));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input4 \u003d \"lesson tutorial CS2113 /on 5 14:00 17:00\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        Lesson lesson3 \u003d Parser.parseLesson(input4);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertEquals(true, scheduleManager.checkIfLessonToBeAddedClashesInADate("
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                lesson3, LocalDate.of(2021, 1, 15)));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input5 \u003d \"lesson tutorial CS2113 /on 5 13:00 17:00\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        Lesson lesson4 \u003d Parser.parseLesson(input5);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertEquals(true, scheduleManager.checkIfLessonToBeAddedClashesInADate("
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                lesson4, LocalDate.of(2021, 1, 15)));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    void deleteTask_deleteTaskViaDescription_returnsTrue() throws ModuleAlreadyExistsException,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            StartTimeAndEndTimeTooEarlyException, MissingLessonDescriptionException, StartTimeIsAfterEndTimeException,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            InvalidTimeFormatException, EmptyArgumentException, InvalidModuleCodeException, InvalidFrequencyException,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            StartAndEndTimeSameException, MissingLessonTimingException, ModuleDoesNotExistException,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            InvalidDateException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        ScheduleManager scheduleManager \u003d new ScheduleManager();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        ModuleManager moduleManager \u003d new ModuleManager();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        moduleManager.addModule(new Module(\"CS2113\"));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input1 \u003d \"lesson online lecture CS2113 /on 5 16:00 18:00\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        scheduleManager.addLesson(Parser.parseLesson(input1), moduleManager, ui);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertEquals(1, scheduleManager.getSemesterSchedule().get(LocalDate"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                .of(2021, 1, 15)).size());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        scheduleManager.deleteTask(\"online lectur\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertEquals(1, scheduleManager.getSemesterSchedule().get(LocalDate"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                .of(2021, 1, 15)).size());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        scheduleManager.deleteTask(\"online lecture\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertEquals(0, scheduleManager.getSemesterSchedule().get(LocalDate"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                .of(2021, 1, 15)).size());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    void deleteTask_deleteTaskViaDescriptionAndModuleCode_returnsTrue() throws ModuleAlreadyExistsException,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            StartTimeAndEndTimeTooEarlyException, MissingLessonDescriptionException, StartTimeIsAfterEndTimeException,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            InvalidTimeFormatException, EmptyArgumentException, InvalidModuleCodeException, InvalidFrequencyException,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            StartAndEndTimeSameException, MissingLessonTimingException, ModuleDoesNotExistException,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            InvalidDateException {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        ScheduleManager scheduleManager \u003d new ScheduleManager();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        ModuleManager moduleManager \u003d new ModuleManager();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        moduleManager.addModule(new Module(\"CS2113\"));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input1 \u003d \"lesson online lecture CS2113 /on 5 16:00 18:00\";"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        scheduleManager.addLesson(Parser.parseLesson(input1), moduleManager, ui);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertEquals(1, scheduleManager.getSemesterSchedule().get(LocalDate"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                .of(2021, 1, 15)).size());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        scheduleManager.deleteTask(\"online lecture\", \"CS2115\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertEquals(1, scheduleManager.getSemesterSchedule().get(LocalDate"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                .of(2021, 1, 15)).size());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        scheduleManager.deleteTask(\"online lecture\", \"CS2113\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertEquals(0, scheduleManager.getSemesterSchedule().get(LocalDate"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                .of(2021, 1, 15)).size());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    void deleteTask_deleteTaskViaModuleCodeAndDate_returnsTrue() throws ModuleAlreadyExistsException,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            StartTimeAndEndTimeTooEarlyException, StartTimeIsAfterEndTimeException, InvalidTimeFormatException,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            EmptyArgumentException, StartAndEndTimeSameException,  ModuleDoesNotExistException,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            InvalidDateException, MissingEventDateAndTimeDetailsException, WrongDateFormatException,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            MissingModuleCodeOrInvalidModuleCodeException, MissingEventDescriptionException {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        ScheduleManager scheduleManager \u003d new ScheduleManager();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        ModuleManager moduleManager \u003d new ModuleManager();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        moduleManager.addModule(new Module(\"CS2113\"));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input1 \u003d \"event CS2113 final exam /at 2021-05-03 14:00 16:00 LT14\";"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        scheduleManager.addEvent(Parser.validateEvent(input1), moduleManager, ui);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertEquals(1, scheduleManager.getSemesterSchedule().get(LocalDate"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                .of(2021, 5, 3)).size());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        scheduleManager.deleteTask(LocalDate.of(2021, 5, 3), \"CS2112\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertEquals(1, scheduleManager.getSemesterSchedule().get(LocalDate"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                .of(2021, 5, 3)).size());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        scheduleManager.deleteTask(LocalDate.of(2021, 5, 3), \"CS2113\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertEquals(0, scheduleManager.getSemesterSchedule().get(LocalDate"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                .of(2021, 5, 3)).size());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    void deleteTask_deleteTaskViaModuleCodeDescriptionAndDate_returnsTrue() throws ModuleAlreadyExistsException,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            StartTimeAndEndTimeTooEarlyException, StartTimeIsAfterEndTimeException, InvalidTimeFormatException,"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            EmptyArgumentException, StartAndEndTimeSameException,  ModuleDoesNotExistException,"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            InvalidDateException, MissingEventDateAndTimeDetailsException, WrongDateFormatException,"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            MissingModuleCodeOrInvalidModuleCodeException, MissingEventDescriptionException {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        ScheduleManager scheduleManager \u003d new ScheduleManager();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        ModuleManager moduleManager \u003d new ModuleManager();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        moduleManager.addModule(new Module(\"CS2113\"));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input1 \u003d \"event CS2113 final exam /at 2021-05-03 14:00 16:00 LT14\";"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        scheduleManager.addEvent(Parser.validateEvent(input1), moduleManager, ui);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertEquals(1, scheduleManager.getSemesterSchedule().get(LocalDate"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                .of(2021, 5, 3)).size());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        scheduleManager.deleteTask(\"CS2113\", \"final exam\", LocalDate"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                .of(2021, 5, 2));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertEquals(1, scheduleManager.getSemesterSchedule().get(LocalDate"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                .of(2021, 5, 3)).size());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        scheduleManager.deleteTask(\"CS2113\", \"final exam\", LocalDate"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                .of(2021, 5, 3));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertEquals(0, scheduleManager.getSemesterSchedule().get(LocalDate"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                .of(2021, 5, 3)).size());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    void deleteTask_deleteTaskViaDescriptionAndDate_returnsTrue() throws ModuleAlreadyExistsException,"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            StartTimeAndEndTimeTooEarlyException, StartTimeIsAfterEndTimeException, InvalidTimeFormatException,"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            EmptyArgumentException, StartAndEndTimeSameException, ModuleDoesNotExistException,"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            InvalidDateException, MissingEventDateAndTimeDetailsException, WrongDateFormatException,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            MissingModuleCodeOrInvalidModuleCodeException, MissingEventDescriptionException,"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            MissingDeadlineTimingDetailsException, MissingDeadlineDescriptionException,"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            InvalidModuleCodeException {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        ScheduleManager scheduleManager \u003d new ScheduleManager();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        ModuleManager moduleManager \u003d new ModuleManager();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        moduleManager.addModule(new Module(\"CS2113\"));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input1 \u003d \"event CS2113 final exam /at 2021-05-03 14:00 16:00 LT14\";"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        scheduleManager.addEvent(Parser.validateEvent(input1), moduleManager, ui);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input2 \u003d \"deadline CS2113 TP version 1 /by 2021-05-03\";"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        scheduleManager.addDeadline(Parser.validateDeadline(input2), moduleManager);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertEquals(2, scheduleManager.getSemesterSchedule().get(LocalDate"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                .of(2021, 5, 3)).size());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        scheduleManager.deleteTask(\"TP version 1\", LocalDate.of(2021, 5, 3));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertEquals(1, scheduleManager.getSemesterSchedule().get(LocalDate"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                .of(2021, 5, 3)).size());"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    void editTask_editDateOfTask_returnsTrue() throws ModuleAlreadyExistsException,"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            MissingEventDateAndTimeDetailsException, MissingEventDescriptionException,"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            MissingModuleCodeOrInvalidModuleCodeException, InvalidDateException,"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            StartTimeIsAfterEndTimeException, InvalidTimeFormatException, EmptyArgumentException,"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            StartAndEndTimeSameException, StartTimeAndEndTimeTooEarlyException, WrongDateFormatException,"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            ModuleDoesNotExistException, MissingDeadlineTimingDetailsException, MissingDeadlineDescriptionException,"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            InvalidModuleCodeException {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        ScheduleManager scheduleManager \u003d new ScheduleManager();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        ModuleManager moduleManager \u003d new ModuleManager();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        moduleManager.addModule(new Module(\"CS2113\"));"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input1 \u003d \"event CS2113 final exam /at 2021-05-03 14:00 16:00 LT14\";"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        scheduleManager.addEvent(Parser.validateEvent(input1), moduleManager, ui);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input2 \u003d \"deadline CS2113 TP version 1 /by 2021-05-03\";"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        scheduleManager.addDeadline(Parser.validateDeadline(input2), moduleManager);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        scheduleManager.editTask(\"final exam\", LocalDate.of(2021, 5, 3),"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                \"\", LocalDate.of(2021, 5, 5));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertEquals(1, scheduleManager.getSemesterSchedule().get(LocalDate"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                .of(2021, 5, 3)).size());"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertEquals(1, scheduleManager.getSemesterSchedule().get(LocalDate"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                .of(2021, 5, 5)).size());"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    void editTask_editDateOfModuleTask_returnsTrue() throws ModuleAlreadyExistsException,"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            MissingEventDateAndTimeDetailsException, MissingEventDescriptionException,"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            MissingModuleCodeOrInvalidModuleCodeException, InvalidDateException,"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            StartTimeIsAfterEndTimeException, InvalidTimeFormatException, EmptyArgumentException,"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            StartAndEndTimeSameException, StartTimeAndEndTimeTooEarlyException, WrongDateFormatException,"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            ModuleDoesNotExistException, MissingDeadlineTimingDetailsException, MissingDeadlineDescriptionException,"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            InvalidModuleCodeException, InvalidDateException {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        ScheduleManager scheduleManager \u003d new ScheduleManager();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        ModuleManager moduleManager \u003d new ModuleManager();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        moduleManager.addModule(new Module(\"CS2113\"));"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input1 \u003d \"event CS2113 final exam /at 2021-05-03 14:00 16:00 LT14\";"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        scheduleManager.addEvent(Parser.validateEvent(input1), moduleManager, ui);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input2 \u003d \"deadline CS2113 TP version 1 /by 2021-05-03\";"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        scheduleManager.addDeadline(Parser.validateDeadline(input2), moduleManager);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        scheduleManager.editTask(\"final exam\", LocalDate.of(2021, 5, 3),"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                \"\", LocalDate.of(2021, 5, 5), \"CS2112\");"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertEquals(2, scheduleManager.getSemesterSchedule().get(LocalDate"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                .of(2021, 5, 3)).size());"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertEquals(0, scheduleManager.getSemesterSchedule().get(LocalDate"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                .of(2021, 5, 5)).size());"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        scheduleManager.editTask(\"final exam\", LocalDate.of(2021, 5, 3),"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                \"\", LocalDate.of(2021, 5, 5), \"CS2113\");"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertEquals(1, scheduleManager.getSemesterSchedule().get(LocalDate"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                .of(2021, 5, 3)).size());"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertEquals(1, scheduleManager.getSemesterSchedule().get(LocalDate"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                .of(2021, 5, 5)).size());"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "t170815518": 1,
      "haroic1997": 25,
      "acyang97": 243
    }
  },
  {
    "path": "src/test/java/seedu/duequest/DueQuestTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "acyang97"
        },
        "content": "package seedu.duequest;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.DueQuestException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "t170815518"
        },
        "content": "import seedu.module.Module;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.command.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.exception.EmptyArgumentException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.exception.ModuleDoesNotExistException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.exception.ModuleAlreadyExistsException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.exception.ModuleNotExistsException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import seedu.exception.InvalidScoreException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "acyang97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "acyang97"
        },
        "content": "class DueQuestTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void sampleTest() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(true);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    public void addingLesson_addAValidLesson_true() throws ModuleNotExistsException,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            ModuleAlreadyExistsException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        DueQuest dq \u003d new DueQuest();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String fullCommand \u003d \"lesson online lecture CS2113 /on 5 16:00 18:00\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        LocalDate date \u003d LocalDate.of(2021, 1, 15);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        dq.getModuleManager().addModule(new Module(\"CS2113\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            Command c \u003d  Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            c.execute(dq.getScheduleManager(), dq.getModuleManager(), dq.getUi());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        } catch (DueQuestException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        } catch (NullPointerException e) {  // this has been handled within parser"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        } catch (ModuleDoesNotExistException | EmptyArgumentException | InvalidScoreException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertEquals(dq.getScheduleManager().getNumberOfTaskInADay(date), 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertEquals(dq.getModuleManager().getNumberOfModules(), 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        Module module \u003d dq.getModuleManager().getModule(\"CS2113\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertEquals(1, module.getListOfTasks().size());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    void addModule_addAModuleThatALreadyExists_expectModuleAlreadyExistsException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        DueQuest dq \u003d new DueQuest();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String addModuleInput1 \u003d \"module c/CS2113 a/4 s/Dr.Akshay s/ChengChen\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            Command c \u003d Parser.parse(addModuleInput1);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            c.execute(dq.getScheduleManager(), dq.getModuleManager(), dq.getUi());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        } catch (DueQuestException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        } catch (ModuleDoesNotExistException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        } catch (EmptyArgumentException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        } catch (InvalidScoreException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String addModuleInput2 \u003d \"module c/CS2113 a/4 s/Dr.Akshay s/ChengChen\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            Command c \u003d Parser.parse(addModuleInput2);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            c.execute(dq.getScheduleManager(), dq.getModuleManager(), dq.getUi());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        } catch (DueQuestException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        } catch (NullPointerException | EmptyArgumentException | InvalidScoreException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        } catch (ModuleDoesNotExistException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertEquals(1, dq.getModuleManager().getNumberOfModules());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    void addEvent_addAValidEvent_returnsTrue() throws ModuleAlreadyExistsException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        DueQuest dq \u003d new DueQuest();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String addModuleInput \u003d \"module c/CS2113 a/4 s/Dr.Akshay s/ChengChen\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            Command c \u003d Parser.parse(addModuleInput);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            c.execute(dq.getScheduleManager(), dq.getModuleManager(), dq.getUi());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        } catch (DueQuestException | EmptyArgumentException | InvalidScoreException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        } catch (ModuleDoesNotExistException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String fullCommand \u003d \"event CS2113 final exam /at 2021-05-03 14:00 16:00 LT14\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        LocalDate date \u003d LocalDate.of(2021, 5, 3);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            Command c \u003d  Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            c.execute(dq.getScheduleManager(), dq.getModuleManager(), dq.getUi());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        } catch (DueQuestException e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        } catch (ModuleDoesNotExistException | EmptyArgumentException | InvalidScoreException e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertEquals(1, dq.getScheduleManager().getNumberOfTaskInADay(date));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    void addingDeadline_addAValidDeadline_returnsTrue() throws ModuleAlreadyExistsException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        DueQuest dq \u003d new DueQuest();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String addModuleInput \u003d \"module c/CS2113 a/4 s/Dr.Akshay s/ChengChen\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            Command c \u003d Parser.parse(addModuleInput);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            c.execute(dq.getScheduleManager(), dq.getModuleManager(), dq.getUi());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        } catch (DueQuestException e) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        } catch (ModuleDoesNotExistException | EmptyArgumentException | InvalidScoreException e) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String fullCommand \u003d \"deadline CS2113 TP version 1 /by 2021-04-04\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        LocalDate date \u003d LocalDate.of(2021, 4, 4);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            Command c \u003d  Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            c.execute(dq.getScheduleManager(), dq.getModuleManager(), dq.getUi());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        } catch (DueQuestException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        } catch (ModuleDoesNotExistException | EmptyArgumentException | InvalidScoreException e) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertEquals(1, dq.getScheduleManager().getNumberOfTaskInADay(date));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    void addLesson_addLessonWhenModuleHasNotBeenCreated_expectModuleDoesNotExistException()"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            throws ModuleNotExistsException {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        DueQuest dq \u003d new DueQuest();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input1 \u003d \"lesson online lecture CS2113 /on 5 16:00 18:00\";"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            Command c \u003d Parser.parse(input1);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            c.execute(dq.getScheduleManager(), dq.getModuleManager(), dq.getUi());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        } catch (DueQuestException e) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        } catch (NullPointerException | EmptyArgumentException | InvalidScoreException e) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        } catch (ModuleDoesNotExistException e) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertEquals(0, dq.getModuleManager().getNumberOfModules());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input2 \u003d \"module c/CS2113 a/4 s/Dr.Akshay s/ChengChen\";"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            Command c \u003d Parser.parse(input2);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            c.execute(dq.getScheduleManager(), dq.getModuleManager(), dq.getUi());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        } catch (DueQuestException e) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        } catch (ModuleDoesNotExistException | EmptyArgumentException | InvalidScoreException e) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertEquals(1, dq.getModuleManager().getNumberOfModules());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            Command c \u003d Parser.parse(input1);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            c.execute(dq.getScheduleManager(), dq.getModuleManager(), dq.getUi());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        } catch (DueQuestException e) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "t170815518"
        },
        "content": "        } catch (ModuleDoesNotExistException | EmptyArgumentException | InvalidScoreException e) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertEquals(1, dq.getModuleManager().getModule(\"CS2113\").getListOfTasks().size());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    void addLesson_addLessonWithClashes_returnsTrue() throws ModuleAlreadyExistsException {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        DueQuest dq \u003d new DueQuest();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        dq.getModuleManager().addModule(new Module(\"CS2113\"));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input1 \u003d \"lesson online lecture CS2113 /on 5 16:00 18:00\";"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            Command c \u003d Parser.parse(input1);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            c.execute(dq.getScheduleManager(), dq.getModuleManager(), dq.getUi());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        } catch (DueQuestException e) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        } catch (NullPointerException | EmptyArgumentException | InvalidScoreException e) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        } catch (ModuleDoesNotExistException e) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertEquals(1, dq.getScheduleManager().getSemesterSchedule()"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                .get(LocalDate.of(2021, 1, 15)).size());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input2 \u003d \"lesson online lecture CS2113 /on 5 14:00 18:00\";"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            Command c \u003d Parser.parse(input2);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            c.execute(dq.getScheduleManager(), dq.getModuleManager(), dq.getUi());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        } catch (DueQuestException e) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        } catch (NullPointerException | EmptyArgumentException | InvalidScoreException e) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        } catch (ModuleDoesNotExistException e) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertEquals(1, dq.getScheduleManager().getSemesterSchedule()"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                .get(LocalDate.of(2021, 1, 15)).size());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input3 \u003d \"lesson online lecture CS2113 /on 5 16:00 20:00\";"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            Command c \u003d Parser.parse(input3);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            c.execute(dq.getScheduleManager(), dq.getModuleManager(), dq.getUi());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        } catch (DueQuestException e) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        } catch (NullPointerException | EmptyArgumentException | InvalidScoreException e) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        } catch (ModuleDoesNotExistException e) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertEquals(1, dq.getScheduleManager().getSemesterSchedule()"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                .get(LocalDate.of(2021, 1, 15)).size());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input4 \u003d \"lesson extra class CS2113 /on 5 20:00 22:00\";"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            Command c \u003d Parser.parse(input4);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            c.execute(dq.getScheduleManager(), dq.getModuleManager(), dq.getUi());"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        } catch (DueQuestException e) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        } catch (NullPointerException | EmptyArgumentException | InvalidScoreException e) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        } catch (ModuleDoesNotExistException e) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertEquals(2, dq.getScheduleManager().getSemesterSchedule()"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                .get(LocalDate.of(2021, 1, 15)).size());"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input5 \u003d \"event CS2113 final exam /at 2021-01-15 14:00 17:00 LT14\";"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            Command c \u003d Parser.parse(input5);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            c.execute(dq.getScheduleManager(), dq.getModuleManager(), dq.getUi());"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        } catch (DueQuestException e) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        } catch (NullPointerException | EmptyArgumentException | InvalidScoreException e) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        } catch (ModuleDoesNotExistException e) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertEquals(2, dq.getScheduleManager().getSemesterSchedule()"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                .get(LocalDate.of(2021, 1, 15)).size());"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input6 \u003d \"event CS2113 final exam /at 2021-01-15 14:00 16:00 LT14\";"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            Command c \u003d Parser.parse(input6);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            c.execute(dq.getScheduleManager(), dq.getModuleManager(), dq.getUi());"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        } catch (DueQuestException e) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        } catch (NullPointerException | EmptyArgumentException | InvalidScoreException e) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        } catch (ModuleDoesNotExistException e) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertEquals(3, dq.getScheduleManager().getSemesterSchedule()"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "acyang97"
        },
        "content": "                .get(LocalDate.of(2021, 1, 15)).size());"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "acyang97"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    void deleteTask_deleteTaskWithDescription_returnTrue() throws ModuleAlreadyExistsException,"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    ModuleNotExistsException {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        DueQuest dq \u003d new DueQuest();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        dq.getModuleManager().addModule(new Module(\"CS2113\"));"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input1 \u003d \"deadline CS2113 tp /by 2020-10-16\";"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            Command c \u003d Parser.parse(input1);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            c.execute(dq.getScheduleManager(), dq.getModuleManager(), dq.getUi());"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        } catch (DueQuestException e) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        } catch (NullPointerException | EmptyArgumentException | InvalidScoreException e) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        } catch (ModuleDoesNotExistException e) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertEquals(1, dq.getModuleManager().getNumberOfModules());"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        String input2 \u003d \"delete tp\";"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            Command c \u003d Parser.parse(input2);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "acyang97"
        },
        "content": "            c.execute(dq.getScheduleManager(), dq.getModuleManager(), dq.getUi());"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        } catch (DueQuestException e) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        } catch (NullPointerException | EmptyArgumentException | InvalidScoreException e) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        } catch (ModuleDoesNotExistException e) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "acyang97"
        },
        "content": "        assertEquals(0, dq.getModuleManager().getModule(\"CS2113\").getListOfTasks().size());"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "acyang97"
        },
        "content": "    */"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "t170815518": 12,
      "-": 8,
      "acyang97": 271
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "haroic1997": 1
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# change to script directory"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "cd \"${0%/*}\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "cd .."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "./gradlew clean shadowJar"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "cd text-ui-test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "java  -jar $(find ../build/libs/ -mindepth 1 -print -quit) \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haroic1997"
        },
        "content": "#dos2unix EXPECTED-UNIX.TXT ACTUAL.TXT"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "diff EXPECTED-UNIX.TXT ACTUAL.TXT"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test passed!\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test failed!\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "haroic1997": 1,
      "-": 22
    }
  }
]
