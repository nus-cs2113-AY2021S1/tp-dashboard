[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "# PlanNUS"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003e\u003cdiv style\u003d\"text-align:center\"\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    \u003cimg src\u003d\"docs/images/PlanNUSLogo.png\" /\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "\u003c/div\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Khenus"
        },
        "content": "#### Foreword"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "PlanNUS is a greenfield project which aims to solve the gap in undergraduate academic planning in NUS."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "With the Academic Calendar Planner, PlanNUS will be able to assist undergraduate students in forecasting their academic journey for their 4 or 5 years in NUS."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "With the CAP Calculator , PlanNUS will be able to tell you your current CAP and forecast future grades needed to achieve your target CAP."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "## Target User Profile"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "1. All Fresh NUS Undergraduates"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "1. NUS Undergraduates who have completed at least 1 semester of study"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "## Feature List (for V2.1)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "* Academic Calendar Planner"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "  * Add module"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "  * Edit module"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "  * Remove module"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "  * View module details"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "  * Search for module by keyword"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "  * Print Calendar"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    * Full Calendar"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    * Semester Calendar"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "* CAP Calculator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "  * Get current CAP"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "  * Get results need for target CAP"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "  * See possible CAP when setting as grade-less"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "* General"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "  * Saving of Academic Calendar into text file"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "  * Loading of Academic Calendar from text file"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "  "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "## Features Coming Soon (V3.0 and beyond)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "* Logging of program to separate folders"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "* Support retaking of modules"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "* Support max limit for the `Set SU` function in `capcalc`"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "* Saving data after every command"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "* Support discontinued modules from NUS"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "* Support shortened commands for parsers"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "* Support validation of requirements for modules"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Khenus"
        },
        "content": "## Useful Links"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "* [**About Us**](https://ay2021s1-cs2113t-f12-1.github.io/tp/AboutUs.html)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Khenus"
        },
        "content": "* [**Configuration guide**](https://ay2021s1-cs2113t-f12-1.github.io/tp/ConfigurationGuide.html)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "* [**Developer guide**](https://ay2021s1-cs2113t-f12-1.github.io/tp/DeveloperGuide.html)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Khenus"
        },
        "content": "* [**DevOps guide**](https://ay2021s1-cs2113t-f12-1.github.io/tp/DevOpsGuide.html)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Khenus"
        },
        "content": "* [**Documentation guide**](https://ay2021s1-cs2113t-f12-1.github.io/tp/DocumentationGuide.html)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "* [**Logging guide**](https://ay2021s1-cs2113t-f12-1.github.io/tp/LoggingGuide.html)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "* [**Testing guide**](https://ay2021s1-cs2113t-f12-1.github.io/tp/TestingGuide.html)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "* [**User guide**](https://ay2021s1-cs2113t-f12-1.github.io/tp/UserGuide.html)"
      }
    ],
    "authorContributionMap": {
      "jerroldlam": 50,
      "Khenus": 6
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    implementation \u0027com.google.code.gson:gson:2.8.6\u0027  //Google Json serialzation library"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    implementation \u0027org.apache.commons:commons-lang3:3.11\u0027 //Apache commons lang for Class builder"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    mainClassName \u003d \"seedu.duke.PlanNus\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    archiveBaseName \u003d \"PlanNus\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Khenus"
        },
        "content": "jar {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    manifest {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        attributes("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                \u0027Main-Class\u0027: \u0027seedu.duke.PlanNus\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        )"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Khenus": 12,
      "-": 45
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003e\u003cdiv style\u003d\"text-align:center\"\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    \u003cimg src\u003d\"images/PlanNUSLogo.png\" /\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "\u003c/div\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "Display | Name | Github Profile | Portfolio"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "---|:---:|:---:|:---:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "![](./images/Profile/Jerrold.JPG) | Lam Tian Yu Jerrold |  [jerroldlam](https://github.com/jerroldlam \"Github User Profile\") | [Portfolio](team/jerroldlam.md)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "![](https://avatars3.githubusercontent.com/u/56764814?s\u003d100) | Khenus Tan Jia Liang |  [Khenus](https://github.com/Khenus \"Github User Profile\") | [Portfolio](team/khenus.md)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "![](https://avatars3.githubusercontent.com/u/60414537?s\u003d100) | Harry Lee Chien Pong |  [harryleecp](https://github.com/harryleecp \"Github User Profile\") | [Portfolio](team/harryleecp.md)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "![](https://avatars3.githubusercontent.com/u/57383789?s\u003d100) | Ju Zihao |  [JuZihao](https://github.com/JuZihao \"Github User Profile\") | [Portfolio](team/juzihao.md)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "![](https://avatars3.githubusercontent.com/u/49282734?s\u003d400) | Vanessa Kang Rui |  [Vanessa-Kang](https://github.com/vanessa-kang \"Github User Profile\") | [Portfolio](team/vanessa-kang.md)"
      }
    ],
    "authorContributionMap": {
      "jerroldlam": 11,
      "-": 2
    }
  },
  {
    "path": "docs/ConfigurationGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Khenus"
        },
        "content": "# Configuration Guide for PlanNUS"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003e\u003cdiv style\u003d\"text-align:center\"\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    \u003cimg src\u003d\"images/PlanNUSLogo.png\" /\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "\u003c/div\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "## Table of contents"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Khenus"
        },
        "content": "* Table of contents"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Khenus"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "## Configuration Guide"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "Certain properties of the application can be controlled (e.g user saved modules file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Khenus"
        },
        "content": "## Useful Links"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "* [**About Us**](https://ay2021s1-cs2113t-f12-1.github.io/tp/AboutUs.html)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Khenus"
        },
        "content": "* [**Developer guide**](https://ay2021s1-cs2113t-f12-1.github.io/tp/DeveloperGuide.html)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Khenus"
        },
        "content": "* [**DevOps guide**](https://ay2021s1-cs2113t-f12-1.github.io/tp/DevOpsGuide.html)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Khenus"
        },
        "content": "* [**Documentation guide**](https://ay2021s1-cs2113t-f12-1.github.io/tp/DocumentationGuide.html)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "* [**Logging guide**](https://ay2021s1-cs2113t-f12-1.github.io/tp/LoggingGuide.html)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "* [**Testing guide**](https://ay2021s1-cs2113t-f12-1.github.io/tp/TestingGuide.html)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "* [**User guide**](https://ay2021s1-cs2113t-f12-1.github.io/tp/UserGuide.html)"
      }
    ],
    "authorContributionMap": {
      "jerroldlam": 16,
      "Khenus": 8
    }
  },
  {
    "path": "docs/DevOpsGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Khenus"
        },
        "content": "# DevOps Guide for PlanNUS"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003e\u003cdiv style\u003d\"text-align:center\"\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    \u003cimg src\u003d\"images/PlanNUSLogo.png\" /\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "\u003c/div\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "## Table of contents"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Khenus"
        },
        "content": "* Table of contents"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Khenus"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Khenus"
        },
        "content": "## Build Automation"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Khenus"
        },
        "content": "PlanNUS uses `Gradle` for build automation and dependency management. "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Khenus"
        },
        "content": "Below shows how `Gradle` is being used in PlanNUS for important project tasks"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Khenus"
        },
        "content": "* **`test`**: Runs all available test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Khenus"
        },
        "content": "  * Command: `./gradlew clean test`: Cleans the project before running the test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Khenus"
        },
        "content": "  * Command: `./gradlew test`: Runs all the test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Khenus"
        },
        "content": "* **`shadowJar`**: ShadowJar plugin is responsible for packaging PlanNUS into a *fat* JAR file, which is located under `build/lib` folder. If applicable, ShadowJar will replace previous versions of `PlanNUS.jar` with the latest version."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Khenus"
        },
        "content": "  * Command: `./gradlew shadowJar`"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Khenus"
        },
        "content": "* **`clean`**: Deletes the files created during the previous build (i.e. files and folders that are in the `build` folder)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Khenus"
        },
        "content": "  * Command: `./gradlew clean`"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Khenus"
        },
        "content": "* **`checkstyle`**: Checks for styling compliance across the whole project"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Khenus"
        },
        "content": "  * Command: `./gradlew checkstyleMain`: Checks for styling compliance in the `main` package of PlanNUS"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Khenus"
        },
        "content": "  * Command: `./gradlew checkstyleTest`: Checks for styling compliance in the `test` package of PlanNUS"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Khenus"
        },
        "content": "* **`build`**: Runs all available `tests` and `checkstyle` before packaging PlanNUS with `ShadowJar` if project passed all test cases and style check without issue."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Khenus"
        },
        "content": "  * Command: `./gradlew build`"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Khenus"
        },
        "content": "## Continuous Integration (CI)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Khenus"
        },
        "content": "PlanNUS uses GitHub Actions for continuous integration. The necessary GitHub Actions configuration files exist as `.github/workflows/gradle.yml`. This file does not require further set up."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Khenus"
        },
        "content": "## I/O Testing"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Khenus"
        },
        "content": "PlanNUS uses automated scripts located in the `./text-ui-test` folder to test for the correct output given a sequence of inputs. "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Khenus"
        },
        "content": "To test for the input/output of PlanNUS"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Khenus"
        },
        "content": "1. Change needed input in `input.txt` located in `./text-ui-test` folder"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Khenus"
        },
        "content": "2. Change the expected output in `EXPECTED.TXT` located in `./text-ui-test` folder"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Khenus"
        },
        "content": "3. Run the scripts for testing"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Khenus"
        },
        "content": "   * On windows, run `runtest.bat`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Khenus"
        },
        "content": "   * On UNIX systems, run `runtest.sh`"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Khenus"
        },
        "content": "4. The scripts will run and throws a warning message if the actual output differs from the expected output"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Khenus"
        },
        "content": "5. The actual output will be stored in `ACTUAL.TXT` located in `./text-ui-test` folder"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Khenus"
        },
        "content": "## Making a release"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Khenus"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Khenus"
        },
        "content": "1. Generate a fat JAR file using Gradle with the command`gradlew build`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Khenus"
        },
        "content": "2. Tag the repo with the version number. e.g. `V2.0`"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Khenus"
        },
        "content": "3. [Create a new release using GitHub](https://help.github.com/articles/creating-releases/). Upload the JAR file you created."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Khenus"
        },
        "content": "## Useful Links"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Khenus"
        },
        "content": "* [**About Us**](https://ay2021s1-cs2113t-f12-1.github.io/tp/AboutUs.html)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Khenus"
        },
        "content": "* [**Configuration guide**](https://ay2021s1-cs2113t-f12-1.github.io/tp/ConfigurationGuide.html)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Khenus"
        },
        "content": "* [**Developer guide**](https://ay2021s1-cs2113t-f12-1.github.io/tp/DeveloperGuide.html)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Khenus"
        },
        "content": "* [**Documentation guide**](https://ay2021s1-cs2113t-f12-1.github.io/tp/DocumentationGuide.html)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Khenus"
        },
        "content": "* [**Logging guide**](https://ay2021s1-cs2113t-f12-1.github.io/tp/LoggingGuide.html)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Khenus"
        },
        "content": "* [**Testing guide**](https://ay2021s1-cs2113t-f12-1.github.io/tp/TestingGuide.html)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Khenus"
        },
        "content": "* [**User guide**](https://ay2021s1-cs2113t-f12-1.github.io/tp/UserGuide.html)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jerroldlam": 7,
      "Khenus": 60
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "# Developer Guide for PlanNUS"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003e\u003cdiv style\u003d\"text-align:center\"\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    \u003cimg src\u003d\"images/PlanNUSLogo.png\" /\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003c/div\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "Before reading this document, you are recommended to read through the [user guide](https://ay2021s1-cs2113t-f12-1.github.io/tp/UserGuide.html) first."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "## 1. Table of contents "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "* Table of contents"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "## 2. Setting up PlanNUS"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "First and foremost, the following steps are assuming that you already have a [GitHub](https://github.com) account set up beforehand. Once this has been done, proceed to __fork__ this [repo](https://github.com/AY2021S1-CS2113T-F12-1/tp), and __clone__ the fork into your computer using [Sourcetree](https://sourcetreeapp.com) or any other _Git GUI_."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "The _IDE_ to be used should contain the latest version of _Java_ as this is the main programming language for this application. Thus you are highly recommended to use Intellij IDEA."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "The following are remaining steps to be taken to finish the set up:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "1. Make sure that the version is configured as __JDK 11__."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "2. When prompted, __import__ the project as a __Gradle project__ (could take minutes to complete)."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "3. Enter commands to ensure that PlanNUS functions as expected. You may refer to the _User Guide_ for valid commands."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "## 3. Design"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "### 3.1. Architecture"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003cdiv style\u003d\"text-align:center\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    \u003cimg src\u003d\"./images/DeveloperGuide/Architecture.png\" alt\u003d\"Architecture diagram of PlanNUS\"/\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "The ***Architecture Diagram*** given above explains the high-level design of PlanNUS. Below is a quick overview of each component."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "### 3.2. Overview"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "#### 3.2.1. PlanNus"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "`PlanNus` class contains the `main` and `run` method, which is responsible for"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "  * At launch"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "       * Loading all modules for AY2020/21 into PlanNUS"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "       * Loading previous save file into PlanNUS if available"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "       * Creation of entry point to available apps in PlanNUS"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "  * While running"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "       * Continuously prompt user for app selection"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "  * At shut down"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "       * Saving of user data into save file"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "       * Clean up methods where necessary"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "#### 3.2.2. Global, Ui, Parser, Storage, Apps"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "* The `global` package contains classes, exceptions and objects that are required across the whole app. "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "* The `ui` package contains the class that is responsible for sharing one `scanner` class across the whole app to prevent multiple IO streams"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "* The `parser` package contains the class that handles user\u0027s app selection"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "* The `storage` package handles loading and saving of user\u0027s data to a save file."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "* Packages for Available apps such as Academic Planner and CAP Calculator are stored within `apps` package"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "### 3.3. Project Structure"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "Each package in the PlanNUS as given above follows the following file structure where applicable:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "* A functional class that acts as the entry point to that module"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "* A parser class that parses user input into executable commands by PlanNUS"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "* `commands`: A package that handles all executable commands given by parser"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "* `commons`: A package with the utilities and shared classes across the parent package"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "* `exceptions`: A package to handle all exceptions thrown across the parent package"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "The interaction within each package should ideally be as shown below."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003cdiv style\u003d\"text-align:center\"\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    \u003cimg src\u003d\"./images/DeveloperGuide/Project_structure.png\" alt\u003d\"Architecture diagram for ideal project structure in PlanNUS\"/\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "*Note that while this is the ideal case, packages such as* `global`, `parser` *and* `ui` *might not strictly follow this structure due to these package serving a different function altogether (Refer to the sections below for more details.)*"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "### 3.4. Life cycle of PlanNUS"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "The [*sequence diagram*](#sequence-diagram) below shows how different packages and classes interact with each other throughout the whole [life cycle](#life-cycle) of PlanNUS."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003cdiv style\u003d\"text-align:center\"\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    \u003cimg src\u003d\"./images/DeveloperGuide/Packages_Interaction.png\" alt\u003d\"Sequence diagram for lifecycle of PlanNUS\"/\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "### 3.5. Details"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "\u003cdiv style\u003d\"text-align:center\"\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    \u003cimg src\u003d\"./images/DeveloperGuide/Details_architecture.png\" alt\u003d\"Details architecture diagram of PlanNUS\"/\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "#### 3.5.1. Global Component"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Khenus"
        },
        "content": "\u003cdiv style\u003d\"text-align:center\"\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    \u003cimg src\u003d\"./images/DeveloperGuide/Global_Diagram.png\" alt\u003d\"Storage architecture diagram of PlanNUS\"/\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Khenus"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "Classes used by multiple components part of the `global` component of PlanNUS. This includes classes such as `App`,`Command` and `LoggingTool`. The main object classes `PartialModule`, `FullModule` and `Person` are also within the global component."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "**API** : `src.main.java.global`"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "#### 3.5.2. Storage Component"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "\u003cdiv style\u003d\"text-align:center\"\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    \u003cimg src\u003d\"./images/DeveloperGuide/Storage_architecture.png\" alt\u003d\"Storage architecture diagram of PlanNUS\"/\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "The `Storage` component is responsible for the loading and saving of information from text files."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "**API** : `src.main.java.seedu.duke.storage`"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "#### 3.5.3. Parser Component"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "For the architecture of PlanNUS, the `Parser` classes will belong under the application they will be parsing for. The role "
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "of these parsers is to process the user\u0027s input and return the appropriate command with required parameters to initialise the command. The newly created objects will then be returned to the main command to be executed and thereafter, terminated. "
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "**API** : `src.main.java.seedu.duke.parser.AppParser`, `src.main.java.seedu.duke.apps.academicplanner.AcademicPlannerParser`, `src.main.java.seedu.duke.apps.capcalculator.CapCalculatorParser` and `src.main.java.seedu.duke.apps.capcalculator.SetSuParser`"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "#### 3.5.4. Ui Component"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "\u003cdiv style\u003d\"text-align:center\"\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    \u003cimg src\u003d\"./images/DeveloperGuide/Ui_architecture.png\" alt\u003d\"Architecture diagram for Ui\"/\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "In PlanNUS, the `Ui` component is integral in initialising a `Scanner` class and passing it to methods where they require them. `Ui` also provides functions to output formatted lines to console to improve readability for the user."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "**API** : `src.main.java.seedu.duke.ui.Ui`"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "## 4. Implementation"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "### 4.1. Academic Calendar Planner: Add Module feature"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "#### 4.1.1. Current implementation"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "Add module command is executed by `AcademicPlannerParser`. It allows users to add modules into their Academic Planner by instantiating a new `PartialModule` object and adding it into the `userModuleList` and `userModuleMap`. Both the list and hashmap are the _java API_, which are used by importing them. The `Person` object is used to encapsulate both `userModuleList` and `userModuleMap`."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "Additionally, the add module command extends the `Command` class and overrides its `execute()` command. An external class, `ModuleValidator` is called upon to validate the various parameters that the user has entered, as to only allow valid modules to be added to the user."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "Given below is an example usage scenario and how add module command behaves at each step."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003cdiv style\u003d\"text-align:center\"\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    \u003cimg src\u003d\"./images/DeveloperGuide/addModuleCommand_initialState.png\" alt\u003d\"Initial state diagram for AddModuleCommand\"/\u003e"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "__Step 1__ : The user calls the add module command from the `AcademicPlannerParser`, which will initialise a "
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "`AddModuleCommand`. `AddModuleCommand`\u0027s constructor takes in parameters of `ModuleLoader`, `Person`,`Ui`, "
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "and `String`. Below is a table of what each parameter corresponds to in the state diagram of the program."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "|Parameter\u003cbr /\u003e(Class Name)|Corresponds to\u003cbr /\u003e(Function of Class)|Referred to as\u003cbr /\u003e(Variable Name)|"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "|:---:|:---:|:---:|"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "|`ModuleLoader`| Class representing all modules offered by NUS | `allModules` |"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "|`Person`| Class representing current user\u0027s information | `currentPerson`|"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "|`Ui`| Class representing java\u0027s default scanner class | `in`|"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "|`String` | Class representing the module code to be added | `moduleCode`|"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003cdiv style\u003d\"text-align:center\"\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    \u003cimg src\u003d\"./images/DeveloperGuide/addModuleCommand_state2.png\" alt\u003d\"State diagram for AddModuleCommand Step 2\"/\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "__Step 2__ : `execute()` is called from the instance of `AddModuleCommand`. It can throw `AcademicException` "
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "or `IOException`. `FileHandler` and `Logger` classes from the _java API_ are instantiated to handle logging for the remainder of the `execute()` method. "
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "__Step 3__ : `in` then reads in the next two lines of input, which is the user\u0027s input for the desired semester for the `moduleCode` and `moduleCode`\u0027s grades."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "__Step 4__ : `validateInputs()` is called from `ModuleValidator` to validate the user entered data against `allModules`."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "__Step 5__ : `AddUtils` is called upon to return module credit for `moduleCode` by `getModuleCreditForModule()`."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003cdiv style\u003d\"text-align:center\"\u003e"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    \u003cimg src\u003d\"./images/DeveloperGuide/addModuleCommand_state6.png\" alt\u003d\"State diagram for AddModuleCommand Step 6\"/\u003e"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "__Step 6__ :  `AddUtils` is called upon again to add the module\u0027s data to the user, by instantiating a new"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "`PartialModule` and storing it in both `userModuleList` and `userModuleMap` via `Person`."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003cdiv style\u003d\"text-align:center\"\u003e"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    \u003cimg src\u003d\"./images/DeveloperGuide/addModuleCommand_finalState.png\" alt\u003d\"Final state diagram for AddModuleCommand\"/\u003e"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "__Step 7__ : `FileHandler`, `Logger`, `PartialModule`, `ModuleValidator`, `AddUtils` and `AddModuleCommand` are terminated."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "The following sequence diagram shows how the `AddModuleCommand` works:"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003cdiv style\u003d\"text-align:center\"\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    \u003cimg src\u003d\"./images/DeveloperGuide/addModuleCommand_sequence.png\" alt\u003d\"Sequence diagram for AddModuleCommand\"/\u003e"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "The following activity diagram summarizes what happens when the user executes a `AddModuleCommand` :"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003cdiv style\u003d\"text-align:center\"\u003e"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    \u003cimg src\u003d\"./images/DeveloperGuide/addModuleCommand_activity.png\" alt\u003d\"Activity diagram for AddModuleCommand\"/\u003e"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "#### 4.1.2. Design consideration"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "The following options were considered when implementing commands:"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "* Option 1 (Current Implementation): Implementing each command as a class by itself"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    * Pros: Increases modularity of code, higher overall code quality "
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    * Cons: More complicated to implement"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "* Option 2: Implementing each command as a method in a class"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    * Pros: Easier to implement"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    * Cons: Class needs to be instantiated and increases coupling, reducing testability. This method also decreases SLAP."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "### 4.2. Academic Calendar Planner: Edit Module Feature"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "#### 4.2.1. Current implementation"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "Similar to the add module command, the edit module command is also executed by `AcademicPlannerParser`. It allows the user to edit the existing modules added to their `Academic Planner` by accessing the specified `PartialModule` object within the `userModuleList`and `userModuleMap`. "
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "Given below is an example usage scenario and how add module command behaves at each step."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003cdiv style\u003d\"text-align:center\"\u003e"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    \u003cimg src\u003d\"./images/DeveloperGuide/editModuleCommand_initialState.png\" alt\u003d\"Initial state diagram for Edit Module Command\"/\u003e"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "__Step 1:__ The user calls the edit module command from the `AcademicPlannerParser` and  then `EditModuleCommand` will be initialized where its constructor would take in the same parameters as that of `AddModuleCommand`."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "__Step 2:__ The `execute()` method is called from the instance of `EditModuleCommand` which only throws `AcademicException` if applicable."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "__Step 3:__ Method `isModTakenByUser()` of the `ModuleValidator` is called to check if the `moduleCode` entered by the user exists within the `userModuleList` and `userModuleMap`."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "__Step 4:__ `in` reads the next line of input for user\u0027s choice of modifying either the semester or grade of the selected `moduleCode`."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "__Step 5:__ `isValidSemester()` or `isValidGrade()` is called to validate the semester or grade entered by the user."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "__Step 6:__ `updateModuleSemester()` or `updateModuleGrade()` is then called to conduct necessary changes to the information by accessing the module from `userModuleMap` and `userModuleList`."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003cdiv style\u003d\"text-align:center\"\u003e"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    \u003cimg src\u003d\"./images/DeveloperGuide/editModuleCommand_finalState.png\" alt\u003d\"Final state diagram for Edit Module Command\"/\u003e"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "__Step 7:__ `EditModuleCommand`, `EditUtils` and `ModuleValidator` are terminated."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "The following sequence diagram shows how `EditModuleCommand` works."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003cdiv style\u003d\"text-align:center\"\u003e"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    \u003cimg src\u003d\"./images/DeveloperGuide/editModuleCommand_sequence.png\" alt\u003d\"Sequence diagram for Edit Module Command\"/\u003e"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "The following diagram summarizes what happens when the user executes a `EditModuleCommand`: "
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003cdiv style\u003d\"text-align:center\"\u003e"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    \u003cimg src\u003d\"./images/DeveloperGuide/editModuleCommand_activity.png\" alt\u003d\"Activity diagram for Edit Module Command\"/\u003e"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "### 4.3. Academic Calendar Planner: Remove Module Feature"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "#### 4.3.1. Current implementation"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "The remove module command is executed by `AcademicPlannerParser` just like the commands for add and edit. This feature allows the user to delete any existing modules added to their Academic Planner.  by first accessing the specified `PartialModule` object within the `userModuleList`and `userModuleMap`."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "Given below is an example usage scenario and how remove module command behaves at each step."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003cdiv style\u003d\"text-align:center\"\u003e"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    \u003cimg src\u003d\"./images/DeveloperGuide/removeModuleCommand_initialState.png\" alt\u003d\"Initial state diagram for Remove Module Command\"/\u003e"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "__Step 1:__ The user calls the remove module command from the `AcademicPlannerParser` and  then `RemoveModuleCommand` will be initialized where its constructor would take in the same parameters as that of `AddModuleCommand` and `EditModuleCommand`."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "__Step 2:__ The `execute()` method is called from the instance of `RemoveModuleCommand` which only throws `AcademicException` if applicable."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "__Step 3:__ Method `isModTakenByUser()` of the `ModuleValidator` is called to check if the `moduleCode` entered by the user exists within the `userModuleList` and `userModuleMap`."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "__Step 4:__ `removeModuleFromUserModuleList()` of `removeUtils` is then called to delete the specified `moduleCode`."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "__Step 5:__ The`depopulate()` method deletes the module object by accessing it from `userModuleMap` and `userModuleList` before updating the both the hashmap and the array list."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003cdiv style\u003d\"text-align:center\"\u003e"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    \u003cimg src\u003d\"./images/DeveloperGuide/removeModuleCommand_finalState.png\" alt\u003d\"Final state diagram for Remove Module Command\"/\u003e"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "__Step 6:__ `RemoveModuleCommand`, `RemoveUtils` and `ModuleValidator` are terminated."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "The following sequence diagram shows how `RemoveModuleCommand` works."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003cdiv style\u003d\"text-align:center\"\u003e"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    \u003cimg src\u003d\"./images/DeveloperGuide/removeModuleCommand_sequence.png\" alt\u003d\"Sequence diagram for Remove Module Command\"/\u003e"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "The following diagram summarizes what happens when the user executes a `RemoveModuleCommand`: "
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003cdiv style\u003d\"text-align:center\"\u003e"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    \u003cimg src\u003d\"./images/DeveloperGuide/removeModuleCommand_activity.png\" alt\u003d\"Activity diagram for Remove Module Command\"/\u003e"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "### 4.4. Academic Calendar Planner: View Module Details Feature"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "#### 4.4.1. Current implementation"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "View module details command is executed by `AcademicPlannerParser`. It allows the user to view the full details of any module offered by NUS, by accessing the specified `FullModule` object that corresponds to the module code entered by the user, and printing its attributes."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "Additionally, the view module details command extends the `Command` class and overrides its `execute()` command. An external class, `ModuleValidator` is called upon to validate the module code that the user has entered, as only the details of valid NUS modules can be displayed."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "Given below is an example usage scenario and how add module command behaves at each step."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003cdiv style\u003d\"text-align:center\"\u003e"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    \u003cimg src\u003d\"./images/DeveloperGuide/moduleDetailsCommand_initialState.png\" alt\u003d\"Initial state diagram for Module Details Command\"/\u003e"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "__Step 1:__ The user calls the view module details command from the `AcademicPlannerParser`, which will initialise a `ModuleDetailsCommand`. `ModuleDetailsCommand`\u0027s constructor takes in parameters of  `ModuleLoader` and `String`. Below is a table of what each parameter corresponds to in the state diagram of the program."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "| Parameter\u003cbr /\u003e(Class Name) |        Corresponds to\u003cbr /\u003e(Function of Class)         | Referred to as\u003cbr /\u003e(Variable Name) |"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "| :-------------------------: | :----------------------------------------------------: | :---------------------------------: |"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "|       `ModuleLoader`        |     Class representing all modules offered by NUS      |            `allModules`             |"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "|          `String`           | Class representing the module code to print details of |            `moduleCode`             |"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "__Step 2:__ `execute()` is called from the instance of `ModuleDetailsCommand`. It can throw `AcademicException`."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "__Step 3:__ `validateModuleCode()` is called to validate the user input, `moduleCode`, against `allModules`."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "__Step 4:__ `PrintUtils` is called to print the details of the module."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003cdiv style\u003d\"text-align:center\"\u003e"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    \u003cimg src\u003d\"./images/DeveloperGuide/moduleDetailsCommand_finalState.png\" alt\u003d\"Final state diagram for Module Details Command\"/\u003e"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "__Step 5:__ `ModuleDetailsCommand`, `ModuleLoader` and `PrintUtils` are terminated."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "The following sequence diagram shows how `ModuleDetailsCommand` works."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003cdiv style\u003d\"text-align:center\"\u003e"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    \u003cimg src\u003d\"./images/DeveloperGuide/moduleDetailsCommand_sequence.png\"/\u003e"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "The following diagram summarizes what happens when the user executes a `ModuleDetailsCommand`: "
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003cdiv style\u003d\"text-align:center\"\u003e"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    \u003cimg src\u003d\"./images/DeveloperGuide/moduleDetailsCommand_activity.png\" alt\u003d\"Activity diagram for View Module Details Command\"/\u003e"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "### 4.5. CAP Calculator feature : Set S/U by semester feature"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "#### 4.5.1. Current implementation"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "`SetSuBySemesterCommand` is executed by `CapCalculatorApp`. It provides users with a suggestion on how they can S/U their modules added in `AcademicPlannerApp` by retrieving the `userModuleList` from  the `Person` object and filter the list according to the semester provided to get a `suList`."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "`suList` will then be analysed to provide user with a list of suggested S/U modules to achieve the best CAP."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": " Given below is an example usage scenario and how `SetSuBySemesterCommand` behaves at each step."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003cdiv style\u003d\"text-align:center\"\u003e"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    \u003cimg src\u003d\"./images/DeveloperGuide/setSuBySemesterCommand_initialState.png\"/\u003e"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003c/div\u003e    "
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "__Step 1:__ The user calls the set S/U command from the `CapCalculatorParser` and the parameters `currentPerson` and `in` will be parsed into `SetSuParser`. `SetSuParser` will then ask for a set S/U method to be parsed. "
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "__Step 2:__ `in` will read in the next line of input, which decides either `SetSuBySemesterCommand` or `SetSuByModulesCommand` to be parsed into `CapCalculatorApp`. Taking that the user decides to parse the `SetSuBySemesterCommand` by entering _1_."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "__Step 3:__ The `execute()` method is called from the instance of `SetSuBySemesterCommand` which only throws `CapCalculatorException` if applicable."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "__Step 4:__ `SetSuUtils` is created and the method `promptUserForSemester()` of `SetSuUtils` is called to read the next line of input for user\u0027s choice of a semester to S/U."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "__Step 5:__  The method `getSuListBySemester()` of `SetSuUtils` is then called to get a list of valid modules that the user can S/U."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003cdiv style\u003d\"text-align:center\"\u003e"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    \u003cimg src\u003d\"./images/DeveloperGuide/setSuBySemesterCommand_State5.png\"/\u003e"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003c/div\u003e    "
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "__Step 6:__  The method `showResultsToUser()` of `SetSuUtils` is then called to display the suggestions to user."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "__Step 7:__  `SetSuBySemesterCommmand` and `SetSuUltils` are terminated."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003cdiv style\u003d\"text-align:center\"\u003e"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    \u003cimg src\u003d\"./images/DeveloperGuide/setSuBySemesterCommand_finalState.png\"/\u003e"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003c/div\u003e    "
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "The following sequence diagram shows how `SetSuBySemesterCommand` works."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003cdiv style\u003d\"text-align:center\"\u003e"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    \u003cimg src\u003d\"./images/DeveloperGuide/setSuBySemesterCommand_sequence.png\"/\u003e"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "The following diagram summarizes what happens when the user executes a `SetSuBySemesterCommand`: "
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003cdiv style\u003d\"text-align:center\"\u003e"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    \u003cimg src\u003d\"./images/DeveloperGuide/setSuBySemesterCommand_activity.png\"/\u003e"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003c/div\u003e    "
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "## 5. Useful Links"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "* [**About Us**](https://ay2021s1-cs2113t-f12-1.github.io/tp/AboutUs.html)"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "* [**Configuration guide**](https://ay2021s1-cs2113t-f12-1.github.io/tp/ConfigurationGuide.html)"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "* [**DevOps guide**](https://ay2021s1-cs2113t-f12-1.github.io/tp/DevOpsGuide.html)"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "* [**Documentation guide**](https://ay2021s1-cs2113t-f12-1.github.io/tp/DocumentationGuide.html)"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "* [**Logging guide**](https://ay2021s1-cs2113t-f12-1.github.io/tp/LoggingGuide.html)"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "* [**Testing guide**](https://ay2021s1-cs2113t-f12-1.github.io/tp/TestingGuide.html)"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "* [**User guide**](https://ay2021s1-cs2113t-f12-1.github.io/tp/UserGuide.html)"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "## 6. Appendix: Requirements"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "### 6.1. Product scope"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "__Target user profile:__"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "* has adequate level of familiarization with CLI applications"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "* requires a clear outlook of academic journey with the modules offered by NUS"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "* wants to keep track of his or her results and set target grades for the upcoming semester(s)"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "* prefers using desktop or laptop instead of other electronic devices"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "__Value proposition:__"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "Provides NUS undergraduates with a platform to keep track of their academic progress and explore other possibilities with the plethora of modules available. In addition, provides NUS undergraduates with an avenue to have an automatic calculation"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "of their scores and receive information regarding the use of their Satisfactory / Unsatisfactory options. "
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "### 6.2. User stories"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "| Version | As a ...                                                  | I want to ...                                                             | So that I can ...                                                                     |"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "| :-----: | --------------------------------------------------------- | ------------------------------------------------------------------------- | ------------------------------------------------------------------------------------- |"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "| v1.0    | fresh undergraduate                                       | visualize the modules in the recommended schedule and course requirements | better plan out my academic journey for the next 4-5 years in NUS                     |"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "| v1.0    | undergraduate with at least 1 semester of study completed | calculate my CAP easily                                                   | forecast my own expected graduation CAP and if they match my expected CAP             |"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "| v1.0    | undergraduate with at least 1 semester of study completed | print out a personalized list of modules taken so far and grades obtained | track my academic progression in NUS                                                  |"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "| v2.0    | user of PlanNUS                                           | find modules I have completed in a particular semester                    | view specific information I require about that semester without redundant information |"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "| V2.0    | user of PlanNUS                                           | easily access my last made list                                           | save time on retyping my academic calendar after each use                             |"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "| V2.0    | user of PlanNUS                                           | view module details                                                       | make an informed decision on which modules to take up during the semester             |"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "| V2.0    | user of PlanNUS                                           | search modules by their partial keys                                      | view more modules with similar subject codes                                          |"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "| V2.0    | undergraduate with at least 1 semester of study completed | have suggestions on which modules to mark as S/U                          | make an informed decision on which modules to S/U                                     |"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "### 6.3. Use cases"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "__Use case 1: Add a module to academic calendar__"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "**Preconditions: User is in the Academic Planner app.**"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "__MSS__ "
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "1. User chooses to add a module to their academic calendar."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "2. PlanNUS prompts user to enter semeseter that they plan to take the module."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "3. User enters semester that they plan to take the module."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "4. PlanNUS prompts user to enter grade received for the module."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "5. User enters grade received for the module."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "6. PlanNUS adds the module to the user\u0027s academic calendar, and displays a confirmation message"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "__Extensions__"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "- 1a. User did not specify a module code while adding a module."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "  - 1a1. PlanNUS shows a _missing parameter_ error message."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    "
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "  "
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "- 1b. User enters a module code that is not offered by NUS."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "  - 1b1. PlanNUS shows an _invalid module code_ error message."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    "
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "  "
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "- 3a. User enters an invalid semester."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "  "
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "  - 3a1. PlanNUS shows an _invalid semester_ error message."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "  "
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "  "
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "- 5a. User enters an invalid grade."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "  "
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "  - 5a1. PlanNUS shows an _invalid grade_ error message."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    "
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "**Use case 2: Edit a module in academic calendar**"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "**Preconditions: User is in the Academic Planner app.**"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "__MSS__ "
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "1. User chooses to edit a module currently in their academic calendar."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "2. PlanNUS prompts user to indicate the feature (semester/grade) that they would like to edit."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "3. User chooses feature to edit."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "4. PlanNUS prompts user to enter updated value for chosen feature."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "5. User enters updated value."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "6. PlanNUS edits the value accordingly, stores the updated value in the user\u0027s academic calendar, and displays a confirmation message."
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "__Extensions__"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "- 1a. User did not specify a module code while editing a module."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "  - 1a1. PlanNUS shows a _missing parameter_ error message."
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    "
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "  "
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "- 1b. User enters a module code that is not offered by NUS."
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "  "
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "  - 1b1.  PlanNUS shows an _invalid module code_ error message."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    "
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "- 1c. User enters a module code that is offered by NUS, but is not currently in the user\u0027s academic calendar."
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "  "
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "  - 1c1. PlanNUS shows a _module not in calendar_ error message."
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    "
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "- 3a. User chooses a feature that is invalid."
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "  "
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "  - 3a1. PlanNUS shows an _invalid feature_ error message."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    "
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "- 5a. User enters an updated value that is invalid."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "  "
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "  - 5a1. PlanNUS shows an _invalid value_ error message."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    "
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "**Use case 3: Remove a module from academic calendar**"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "**Preconditions: User is in the Academic Planner app.**"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "__MSS__ "
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "1. User chooses to remove a module currently in their academic calendar."
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "2. PlanNUS removes the corresponding module from the user\u0027s academic calendar, and displays a confirmation message."
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "__Extensions__"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "- 1a. User did not specify a module code while removing a module."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "  - 1a1. PlanNUS shows a _missing parameter_ error message."
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    "
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "  "
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "- 1b. User enters a module code that is not offered by NUS."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "  "
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "  - 1b1.  PlanNUS shows an _invalid module code_ error message."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    "
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "- 1c. User enters a module code that is offered by NUS, but is not currently in the user\u0027s academic calendar."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "  "
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "  - 1c1. PlanNUS shows a _module not in calendar_ error message."
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    "
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "**Use case 4: View details of a module**"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "**Preconditions: User is in the Academic Planner app.**"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "__MSS__"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "1. User chooses to view details of a module."
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "2. PlanNUS prints the details of the corresponding module."
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "__Extensions__"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "- 1a. User did not specify a module code while viewing details of a module."
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "  - 1a1. PlanNUS shows a _missing parameter_ error message."
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    "
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "  "
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "- 1b. User enters a module code that is not offered by NUS."
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "  - 1b1.  PlanNUS shows an _invalid module code_ error message."
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    "
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "**Use case 5: Search for a module**"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "**Preconditions: User is in the Academic Planner app.**"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "__MSS__"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "1. User searches for a module, based on the module code."
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "2. PlanNUS displays the search results, up to and including the first 10 results."
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "__Extensions__"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "- 1a. User did not specify a module code while searching for a module."
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "  - 1a1. PlanNUS shows a _missing parameter_ error message."
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    "
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "**Use case 6: View academic calendar**"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "**Preconditions: User is in the Academic Planner app.**"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "__MSS__"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "1. User chooses to view their current academic calendar."
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "2. PlanNUS prompts user to indicate their desired viewing timeframe, i.e. "
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "   a) the full academic calendar, or "
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "   b) view a particular semester only."
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "3. User specifies their desired timeframe."
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "4. PlanNUS displays the academic calendar accordingly."
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "__Extensions__"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "- 1a. User\u0027s academic calendar is currently empty."
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "  - 1a1. PlanNUS shows an _empty calendar_ error message."
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    "
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "- 3a. User did not specify a valid timeframe."
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "  - 3a1. PlanNUS shows an _invalid timeframe_ error message."
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    "
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "- 3b. User specifies a valid semester, but there are no modules added to that semester yet."
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "  - 3b1. PlanNUS shows an _empty semester_ error message."
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    "
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "**Use case 7: View list of available commands**"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "**Preconditions: User is in the Academic Planner app.**"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "__MSS__"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "1. User chooses to view the list of available commands in the Academic Planner app."
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "2. PlanNUS displays the list of available commands."
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "**Use case 8: Exit back to PlanNUS**"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "**Preconditions: User is in the Academic Planner app.**"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "__MSS__"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "1. User chooses to exit from the Academic Planner app back to the PlanNUS main menu."
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "2. PlanNUS exits back to the PlanNUS main menu."
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "### 6.4. Non-Functional Requirements"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "* General"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    * Should work on any [mainstream OS](#mainstream-os) as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    * Commands entered should be short and intuitive to reduce mistyping of commands"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    * Program should be compatible on a wide range of devices"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "* Academic Planner"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    * Viewing of Academic Calendar should be intuitive as a complicated or messy output compromises usability of PlanNUS"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    * Only verified modules offered by NUS should be able to be added to prevent confusion"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    * The navigation between applications should be intuitive"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "* CAP Calculator"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    * Data should be shared between applications in order to reduce redundant typing from the user"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "### 6.5. Glossary"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "#### Mainstream OS"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "#### Life cycle"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "The duration in which the object is running and alive."
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "#### Sequence Diagram"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "A UML diagram that captures the interactions between multiple objects for a given scenario."
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "## 7. Features Coming Soon (V3.0 and beyond)"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "* Logging of program to separate folders"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "* Support retaking of modules"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "* Support max limit for the `Set SU` function in `capcalc`"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "* Saving data after every command"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "* Support discontinued modules from NUS"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "* Support shortened commands for parsers"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "* Support validation of requirements for modules"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "## 8. Appendix: Instructions for manual testing"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "ℹ️ **Note:** These instructions only provide a starting point for testers to work on; testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "**Launch and shutdown**"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "   1.  Download the jar file and copy it into an empty folder."
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "   2.  Open a command prompt and navigate to the folder."
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "   3.  Enter `java -jar PlanNus.jar` and press enter to launch the app."
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "       Expected: The PlanNUS main menu is displayed, and the save file is loaded. If a save file does not exist, a new one is created."
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "2. Shutdown"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "   1. Test case: `exit`"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "      Expected: PlanNUS saves data from the current session, prints a goodbye message, and exits the app entirely."
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "**Entering and exiting the various apps**"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "1. Entering the _Academic Planner_ app from the main menu"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "   1. Test case: `acadplan` or `a`"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "      Expected: PlanNUS enters the _Academic Planner_ app."
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "2. Entering the _CAP Calculator_ app from the main menu"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "   1. Test case: `capcalc` or `c`"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "      Expected: PlanNUS enters the _CAP Calculator_ app."
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "3. Switching to the _CAP Calculator_ app while in the _Academic Planner_ app"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "   1. Test case: `capcalc`"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "      Expected: PlanNUS enters the _CAP Calculator_ app."
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "4. Switching to the _Academic Planner_ app while in the _CAP Calculator_ app"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "   1. Test case: `acadplan`"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "      Expected: PlanNUS enters the _Academic Planner_ app."
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "5. Exiting to the main menu while in either the _Academic Planner_ or _CAP Calculator_ app"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "   1. Test case: `exit`"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "      Expected: PlanNUS exits to the main menu."
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "**Adding a module to the academic calendar**"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "1. Prerequisites: User is currently in the _Academic Planner_ app."
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "2. Test case - all inputs are valid"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "   Input: `add cs1010`"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "   Expected: PlanNUS prompts user to enter semester that they plan to take the module."
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "   Input: `2`"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "   Expected: PlanNUS prompts user to enter grade received for the module."
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "   Input: `B+`"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "   Expected: PlanNUS adds the module, with the associated semester and grade information, to the user\u0027s academic calendar. Prints a _module added_ confirmation message."
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "3. Test case - invalid module code"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "   Input: `add cs1111`"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "   Expected: PlanNUS shows a _module not offered by NUS_ error message, and exits back to the _Academic Planner_ app."
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "4. Other incorrect inputs to try: no module code, invalid semester indexes, invalid grades."
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "   Expected: PlanNUS shows an error message, and exits back to the _Academic Planner_ app. No module is added to the user\u0027s academic calendar."
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "**Editing a module currently in the academic calendar**"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "1. Prerequisites: User is currently in the _Academic Planner_ app."
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "2. Test case - all inputs are valid. "
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "   Input: `edit cs1010`"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "   Expected: PlanNUS prompts user to enter number corresponding to feature to be edited (1 - semester, 2 - grade)."
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "   Input: `1`"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "   Expected: PlanNUS prompts user to enter new semester value."
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "   Input: `5`"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "   Expected: PlanNUS edits semester accordingly, and prints a _update successful_ confirmation message."
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "3. Other incorrect inputs to try: no module code, invalid module codes, valid module codes that are not in the user\u0027s academic calendar, invalid features, invalid semester indexes, invalid grades."
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "   Expected: PlanNUS shows an error message, and exits back to the _Academic Planner_ app. No module features are edited."
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "**Removing a module from the academic calendar**"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "1. Prerequisites: User is currently in the _Academic Planner_ app."
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "2. Test case - all inputs are valid"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "   Input: `remove cs1010`"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "   Expected: PlanNUS removes module from user\u0027s academic calendar, and prints a _remove successful_ confirmation message."
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "3. Other incorrect inputs to try: no module code, invalid module codes, valid module codes that are not in the user\u0027s academic calendar."
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "   Expected: PlanNUS shows an error message, and exits back to the _Academic Planner_ app. No module is removed from the user\u0027s academic calendar."
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "**Viewing the details of a module**"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "1. Prerequisites: User is currently in the _Academic Planner_ app."
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "2. Test case - all inputs are valid."
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "   Input: `details cs1231`"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "   Expected: PlanNUS prints the details of the corresponding module."
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "3. Other incorrect inputs to try: no module code, invalid module codes."
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "   Expected: PlanNUS shows an error message, and exits back to the _Academic Planner_ app. No module details are printed."
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "**Searching for modules that contain a keyword**"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "1. Prerequisites: User is currently in the _Academic Planner_ app."
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "2. Test case - all inputs are valid."
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "   Input: `search cg2`"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "   Expected: PlanNUS prints the modules that contain the keyword, up to the first 10 results."
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "3. Other incorrect inputs to try: no search key."
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "   Expected: PlanNUS shows an error message, and exits back to the _Academic Planner_ app. No search results are printed."
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "**Viewing the academic calendar**"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "1. Prerequisites: User is currently in the _Academic Planner_ app."
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "2. Test case - all inputs are valid"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "   Input: `view`"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "   Expected: PlanNUS prompts user to choose a viewing timeframe - the full academic calendar, or a specific semester."
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "   Input: `full`"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "   Expected: PlanNUS prints the user\u0027s full academic calendar."
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "3. Other incorrect inputs to try: `view` when the academic calendar is empty, invalid viewing timeframe chosen. "
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "   Expected: PlanNUS shows an error message, and exits back to the _Academic Planner_ app. No academic planner is printed."
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "**Printing help for academic calendar**"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "1. Prerequisites: User is currently in the _Academic Planner_ app."
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "2. Test case - all inputs are valid"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "   Input: `help`"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "   Expected: PlanNUS prints a list of available commands in the _Academic Planner_ app."
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "vanessa-kang": 866,
      "jerroldlam": 31,
      "harryleecp": 10,
      "JuZihao": 2,
      "Khenus": 5,
      "-": 21
    }
  },
  {
    "path": "docs/DocumentationGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Khenus"
        },
        "content": "# Documentation Guide for PlanNUS"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003e\u003cdiv style\u003d\"text-align:center\"\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    \u003cimg src\u003d\"images/PlanNUSLogo.png\" /\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "\u003c/div\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "## Table of contents"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Khenus"
        },
        "content": "* Table of contents"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Khenus"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Khenus"
        },
        "content": "## Setting up and maintaining the project website"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "* We use [**Github Pages**](https://pages.github.com/) to manage our product documentation."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "* The `docs/` folder in the repository is used for documentation."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "* To learn how set it up and maintain the project website, follow the guide [**Getting started with GitHub Pages**](https://docs.github.com/en/free-pro-team@latest/github/working-with-github-pages/getting-started-with-github-pages)."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Khenus"
        },
        "content": "## Style guidance"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "* Refer to [_[se-edu/guides]_ **Markdown Coding Standard**](https://se-education.org/guides/conventions/markdown.html) for details about the implemented documentation style."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Khenus"
        },
        "content": "## Diagrams"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "* The UML diagrams were generated using [**draw.io**](https://app.diagrams.net/) (See the [**step-by-step guides**](https://drawio-app.com/learning/step-by-step-guides/view-all-exercises/))."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Khenus"
        },
        "content": "## Converting a web document into PDF format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "* Refer to the following guide [_[se-edu/guides]_ **Saving web documents as PDF files**](https://se-education.org/addressbook-level3/Documentation.html)."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Khenus"
        },
        "content": "## Useful Links"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Khenus"
        },
        "content": "* [**About Us**](https://ay2021s1-cs2113t-f12-1.github.io/tp/AboutUs.html)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Khenus"
        },
        "content": "* [**Configuration guide**](https://ay2021s1-cs2113t-f12-1.github.io/tp/ConfigurationGuide.html)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Khenus"
        },
        "content": "* [**Developer guide**](https://ay2021s1-cs2113t-f12-1.github.io/tp/DeveloperGuide.html)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Khenus"
        },
        "content": "* [**DevOps guide**](https://ay2021s1-cs2113t-f12-1.github.io/tp/DevOpsGuide.html)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Khenus"
        },
        "content": "* [**Logging guide**](https://ay2021s1-cs2113t-f12-1.github.io/tp/LoggingGuide.html)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Khenus"
        },
        "content": "* [**Testing guide**](https://ay2021s1-cs2113t-f12-1.github.io/tp/TestingGuide.html)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Khenus"
        },
        "content": "* [**User guide**](https://ay2021s1-cs2113t-f12-1.github.io/tp/UserGuide.html)"
      }
    ],
    "authorContributionMap": {
      "jerroldlam": 6,
      "harryleecp": 14,
      "Khenus": 23
    }
  },
  {
    "path": "docs/LoggingGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Khenus"
        },
        "content": "# Logging Guide for PlanNUS"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003e\u003cdiv style\u003d\"text-align:center\"\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    \u003cimg src\u003d\"images/PlanNUSLogo.png\" /\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "\u003c/div\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "## Table of contents"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Khenus"
        },
        "content": "* Table of contents"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Khenus"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Khenus"
        },
        "content": "## Using Logging Tool in PlanNUS"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Khenus"
        },
        "content": "`LoggingTool` is available to use for accessible logging at the package `src.main.java.seedu.duke.global`. `LoggingTool`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Khenus"
        },
        "content": "constructor takes in a parameter `String` and `FileHandler`. `String` represents `loggerName` and `FileHandler` represents"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Khenus"
        },
        "content": "the object `fh`, which is the _java API_. `initialise()` will automatically return a fully configured `Logger` object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Khenus"
        },
        "content": "with the following parameters :"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Khenus"
        },
        "content": "* `addHandler(fh)`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Khenus"
        },
        "content": "  * `logger` will log to an external file as defined by `fh`"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Khenus"
        },
        "content": "* `setUseParentHandlers(false)`"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Khenus"
        },
        "content": "  * Disables logging on the console output"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Khenus"
        },
        "content": "* `setLevel(Level.INFO)`"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Khenus"
        },
        "content": "  * Any message logged `Level.INFO` and above will be logged"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Khenus"
        },
        "content": "After initialising, the `logger` can be used as per _java API_ constraints. Below shows an example code snippet that can be used to initialise a `logger`:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Khenus"
        },
        "content": "```"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Khenus"
        },
        "content": "FileHandler fh \u003d new FileHandler(\u003cYOUR_LOG_FILE_NAME\u003e);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Khenus"
        },
        "content": "Logger logger \u003d new LoggingTool(\u003cYOUR_LOGGER_NAME\u003e,fh).initialize();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Khenus"
        },
        "content": "```"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Khenus"
        },
        "content": "## Useful Links"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Khenus"
        },
        "content": "* [**About Us**](https://ay2021s1-cs2113t-f12-1.github.io/tp/AboutUs.html)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Khenus"
        },
        "content": "* [**Configuration guide**](https://ay2021s1-cs2113t-f12-1.github.io/tp/ConfigurationGuide.html)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Khenus"
        },
        "content": "* [**Developer guide**](https://ay2021s1-cs2113t-f12-1.github.io/tp/DeveloperGuide.html)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Khenus"
        },
        "content": "* [**DevOps guide**](https://ay2021s1-cs2113t-f12-1.github.io/tp/DevOpsGuide.html)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Khenus"
        },
        "content": "* [**Documentation guide**](https://ay2021s1-cs2113t-f12-1.github.io/tp/DocumentationGuide.html)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "* [**Testing guide**](https://ay2021s1-cs2113t-f12-1.github.io/tp/TestingGuide.html)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Khenus"
        },
        "content": "* [**User guide**](https://ay2021s1-cs2113t-f12-1.github.io/tp/UserGuide.html)"
      }
    ],
    "authorContributionMap": {
      "jerroldlam": 7,
      "Khenus": 35
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "# PlanNUS"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003e\u003cdiv style\u003d\"text-align:center\"\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    \u003cimg src\u003d\"images/PlanNUSLogo.png\" /\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "\u003c/div\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "#### Foreword"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "PlanNUS is a greenfield, CLI-based project which aims to solve the gap in undergraduate academic planning in NUS."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Khenus"
        },
        "content": "With the Academic Calendar Planner, PlanNUS will be able to assist undergraduate students in forecasting their academic journey for their 4 or 5 years in NUS."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "With the CAP Calculator , PlanNUS will be able to tell you your current CAP and forecast future grades needed to achieve your target CAP."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "## Target User Profile"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "1. All Fresh NUS Undergraduates"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "1. NUS Undergraduates who have completed at least 1 semester of study"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "## Feature List (for V2.1)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "* Academic Calendar Planner"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    * Add module"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    * Edit module"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    * Remove module"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    * View module details"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    * Search for module by keyword"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    * Print Calendar"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        * Full Calendar"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        * Semester Calendar"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "* CAP Calculator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    * Get current CAP"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    * Get results need for target CAP"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    * See possible CAP when setting as grade-less"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "* General"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    * Saving of Academic Calendar into text file"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    * Loading of Academic Calendar from text file"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "## Features Coming Soon (V3.0 and beyond)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "* Logging of program to separate folders"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "* Support retaking of modules"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "* Support max limit for the `Set SU` function in `capcalc`"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "* Saving data after every command"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "* Support discontinued modules from NUS"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "* Support shortened commands for parsers"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "* Support validation of requirements for modules"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Khenus"
        },
        "content": "## Useful Links"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Khenus"
        },
        "content": "* [**About Us**](https://ay2021s1-cs2113t-f12-1.github.io/tp/AboutUs.html)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Khenus"
        },
        "content": "* [**Configuration guide**](https://ay2021s1-cs2113t-f12-1.github.io/tp/ConfigurationGuide.html)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Khenus"
        },
        "content": "* [**Developer guide**](https://ay2021s1-cs2113t-f12-1.github.io/tp/DeveloperGuide.html)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Khenus"
        },
        "content": "* [**DevOps guide**](https://ay2021s1-cs2113t-f12-1.github.io/tp/DevOpsGuide.html)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Khenus"
        },
        "content": "* [**Documentation guide**](https://ay2021s1-cs2113t-f12-1.github.io/tp/DocumentationGuide.html)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Khenus"
        },
        "content": "* [**Logging guide**](https://ay2021s1-cs2113t-f12-1.github.io/tp/LoggingGuide.html)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "* [**Testing guide**](https://ay2021s1-cs2113t-f12-1.github.io/tp/TestingGuide.html)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Khenus"
        },
        "content": "* [**User guide**](https://ay2021s1-cs2113t-f12-1.github.io/tp/UserGuide.html)"
      }
    ],
    "authorContributionMap": {
      "jerroldlam": 44,
      "Khenus": 9,
      "-": 2
    }
  },
  {
    "path": "docs/TestingGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "# Testing Guide for PlanNUS"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003e\u003cdiv style\u003d\"text-align:center\"\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    \u003cimg src\u003d\"images/PlanNUSLogo.png\" /\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "\u003c/div\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "## Table of content"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "* Table of contents"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "## Running Tests"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "There are 2 ways to run tests on the code base of PlanNUS."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "* **Method 1:** Using IntelliJ JUnit test runner"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    * To run all tests, right-click on the `src/test/java` folder and choose `Run All Tests`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    * To run a subset of tests, you can right-click on a test package, test class or a single test and choose `Run \u003cTEST NAME\u003e`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "* **Method 2:** Using Gradle"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    * Open a console and run the command "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        * `gradlew clean test` for Windows"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        * `./gradlew clean test` for Mac and Linux"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    * For more information about using Gradle, take a look at [this tutorial](https://se-education.org/guides/tutorials/gradle.html \"Gradle Tutorial\"). "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "## Types of test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "This project contains three types of tests:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "* _Unit tests_ target the lowest level of methods or classes"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    * e.g. `src.test.java.seedu.duke.apps.academicplanner.commons.AddUtilsTest`"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "* _Integration tests_ that are check the integration of multiple code units"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    * e.g. `src.test.java.seedu.duke.apps.academicplanner.AcademicPlannerParserTest`"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "* Hybrids of unit and integration tests that check multiple code units as well as how they are connected together"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Khenus"
        },
        "content": "## Useful Links"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "* [**About Us**](https://ay2021s1-cs2113t-f12-1.github.io/tp/AboutUs.html)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Khenus"
        },
        "content": "* [**Configuration guide**](https://ay2021s1-cs2113t-f12-1.github.io/tp/ConfigurationGuide.html)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "* [**Developer guide**](https://ay2021s1-cs2113t-f12-1.github.io/tp/DeveloperGuide.html)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Khenus"
        },
        "content": "* [**DevOps guide**](https://ay2021s1-cs2113t-f12-1.github.io/tp/DevOpsGuide.html)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Khenus"
        },
        "content": "* [**Documentation guide**](https://ay2021s1-cs2113t-f12-1.github.io/tp/DocumentationGuide.html)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "* [**Logging guide**](https://ay2021s1-cs2113t-f12-1.github.io/tp/LoggingGuide.html)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "* [**User guide**](https://ay2021s1-cs2113t-f12-1.github.io/tp/UserGuide.html)"
      }
    ],
    "authorContributionMap": {
      "jerroldlam": 41,
      "Khenus": 4
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Khenus"
        },
        "content": "# User Guide for PlanNUS"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003e\u003cdiv style\u003d\"text-align:center\"\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    \u003cimg src\u003d\"images/PlanNUSLogo.png\" /\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "\u003c/div\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "Hello user of PlanNUS! Welcome to our user guide for our software. In this user guide, you can find information regarding how to use PlanNUS and the common questions asked with regards to the usage of PlanNUS. We hope you find this software"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "useful and we wish you all the best for your academic journey in NUS."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "## 1. Overview"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "PlanNUS is a __desktop application for planning academic journey__ with modules offered by National University of Singapore (NUS). The __Command Line Interface (CLI)__ will be required for the program to work."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "PlanNUS aims to patch the gap for students in NUS by providing an avenue for students to plan their full academic journey in NUS. "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "PlanNUS can also generate CAP statistics and even suggest to user which modules to mark as satisfactory/unsatisfactory(S/U) to have the highest CAP possible. "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "PlanNUS also has saving and loading features which would reduce the hassle of entering the full academic calendar for each use."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "The sections below explain how PlanNUS should be used, and the common errors faced by users. Sections can be easily navigated to by clicking on the hyperlinks in the table of contents."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "## 2. Table of contents"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "## 3. Feature List (for V2.1)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "* Academic Calendar Planner"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    * Add module"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    * Edit module"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    * Remove module"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    * View module details"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    * Search for module by keyword"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    * Print Calendar"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        * Full Calendar"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        * Semester Calendar"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "* CAP Calculator"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    * Get current CAP"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    * Get results need for target CAP"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    * See possible CAP when setting as grade-less"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "* General"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    * Saving of Academic Calendar into text file"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    * Loading of Academic Calendar from text file"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "## 4. Quick Start"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure that you have Java 11 or above installed."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "1. Download the latest version of `PlanNUS` [here](https://github.com/AY2021S1-CS2113T-F12-1/tp/releases \"PlanNUS releases\")."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "1. Double click on _PlanNUS.jar_ to start up the program."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "1. If the previous step does not work, open up the command prompt."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "1. Go to the directory where the jar file is saved."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "1. Enter the following command `java -jar PlanNus.jar`"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "## 5. Command Summary"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "Note: All commands are **case-insensitive**."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "* Initiate the __Academic Calendar Planner__: `acadplan`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Khenus"
        },
        "content": "| __Action__                                  | __Command__                                                  |"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Khenus"
        },
        "content": "| ------------------------------------------- | ------------------------------------------------------------ |"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Khenus"
        },
        "content": "| Adding a module into the calendar           | `add \u003cmodule code\u003e`​ \u003cbr\u003e e.g., `add CS1010, ADD cs1231 , ADD CS2040` |"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Khenus"
        },
        "content": "| Editing an existing module in the calendar  | `edit \u003cmodule code\u003e`​ \u003cbr\u003e e.g., `edit CS1010, EDIT cs1231 , EDIT CS2040` |"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "| Removing an existing module in the calendar | `remove \u003cmodule code\u003e`​ \u003cbr\u003e e.g., `remove CS1010, REMOVE cs1231 , REMOVE CS2040` |"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "| Viewing the details of a module             | `details \u003cmodule code\u003e` \u003cbr\u003ee.g. `details CS1010`, `DETAILS cs1231`, `DETAILS CS2040` |"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "| Searching for modules by keyword            | `search \u003cmodule code key`\u003cbr\u003ee.g. `search CS`, `SEARCH cs12`, `SEARCH CS2040` |"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Khenus"
        },
        "content": "| Printing the academic calendar              | `view`                                                       |"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "| Printing help information for Academic Planner| `help`                                                       |"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "| Switching to the _CAP Calculator_ app       | `capcalc`                                                    |"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Khenus"
        },
        "content": "| Exiting the Academic Planner                | `exit`                                                       |"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "**Note:** `acadplan` can be called from both the `PlanNUS` main menu, and from within the _CAP Calculator_ app."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "* Initiate the __CAP Calculator__: `capcalc`"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Khenus"
        },
        "content": "| __Action__                              | __Command__  |"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "| --------------------------------------- | :----------- |"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Khenus"
        },
        "content": "| Printing current CAP and MCs taken      | `current`    |"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "| Setting target CAP                      | `set target` |"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "| Marking a module grade as S/U           | `set su`     |"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "| Printing help information for CAP Calculator| `help`       |"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "| Switching to the _Academic Planner_ app | `acadplan`   |"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Khenus"
        },
        "content": "| Exiting the CAP Calculator              | `exit`       |"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "**Note:** `capcalc` can be called from both the `PlanNUS` main menu, and from within the _Academic Planner_ app."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "## 6. Features "
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "PlanNUS has two separate commands at the main page where the users can either choose to:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "1. Have outlook of their potential academic journey"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "1. Calculate their CAP"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "For each of these commands, there are more specific functions for configuration of your desired choices."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Khenus"
        },
        "content": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003e\u003cdiv style\u003d\"text-align:center\"\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    \u003cimg src\u003d\"images/UserGuide/Main_Page_Features.png\" /\u003e  "
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Khenus"
        },
        "content": "\u003c/div\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "### 6.1. Academic Calendar Planner: `acadplan`"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "Directs user to the page where he/she can plan a personalized academic journey in NUS by using `add`, `remove` , `view` or `edit` features as shown below."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "Input format: `acadplan`  or `a`"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Khenus"
        },
        "content": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003e\u003cdiv style\u003d\"text-align:center\"\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    \u003cimg src\u003d\"images/UserGuide/acadplan_features.png\" /\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Khenus"
        },
        "content": "\u003c/div\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "#### 6.1.1. Adding a module into the calendar: `add`"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "Input format: `add \u003cmodule code\u003e`"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "**Example of proper usage:**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "* `add CS2113T`"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "* `ADD cs2101`"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "Upon entering the add command with the module code, you will be prompted to enter the semester you wish to take the module and the corresponding grade attained."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Khenus"
        },
        "content": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003e\u003cdiv style\u003d\"text-align:center\"\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    \u003cimg src\u003d\"images/UserGuide/add_module.png\" /\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Khenus"
        },
        "content": "\u003c/div\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "__\u003cins\u003eCaution\u003c/ins\u003e:__ "
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "* Invalid module codes (i.e. Modules not offered by NUS) cannot be added into the calendar."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "* Duplicate module codes cannot be added into the calendar as well."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "* Invalid semester indexes will be rejected by PlanNUS. For more information, visit [Appendix](#101-naming-convention-for-semester-indexes) for a list of valid semester indexes."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "* Invalid grade values will be rejected by PlanNUS. For more information, visit [Appendix](#102-grade-values) for a list of valid grade values."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "* When an invalid command is entered, you will be brought back to the main page of the academic planner, where you can re-enter the command with the correct information again.   "
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "#### 6.1.2. Editing an existing module in the calendar: `edit`"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "Input format: `edit \u003cmodule code\u003e`"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "* `edit CS2113T`"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "* `EDIT cs2101`"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Khenus"
        },
        "content": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003e\u003cdiv style\u003d\"text-align:center\"\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    \u003cimg src\u003d\"images/UserGuide/edit_module.png\" /\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Khenus"
        },
        "content": "\u003c/div\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "As shown in the image, user can choose to edit either the _Semester_ or _Grade_ of the selected module. (__Note:__ Enter either `1` or `2` instead of the component\u0027s name)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "Expected output when user wishes to change the _Semester_."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Khenus"
        },
        "content": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003e\u003cdiv style\u003d\"text-align:center\"\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    \u003cimg src\u003d\"images/UserGuide/edit_module_semester.png\" /\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Khenus"
        },
        "content": "\u003c/div\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "Expected output when user wishes to change the _Grade_."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Khenus"
        },
        "content": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003e\u003cdiv style\u003d\"text-align:center\"\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    \u003cimg src\u003d\"images/UserGuide/edit_module_grade.png\" /\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Khenus"
        },
        "content": "\u003c/div\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "__\u003cins\u003eCaution:\u003c/ins\u003e__ "
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "* Only modules that have been added into the calendar can be edited"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "#### 6.1.3. Removing an existing module in the calendar: `remove`"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Khenus"
        },
        "content": "Input format: `remove \u003cmodule code\u003e`"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Khenus"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Khenus"
        },
        "content": "* `remove cs2113T`"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Khenus"
        },
        "content": "* `REMOVE CS2101`"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Khenus"
        },
        "content": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003e\u003cdiv style\u003d\"text-align:center\"\u003e"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    \u003cimg src\u003d\"images/UserGuide/remove_module.png\" /\u003e"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Khenus"
        },
        "content": "\u003c/div\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Khenus"
        },
        "content": "__\u003cins\u003eCaution:\u003c/ins\u003e__ "
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Khenus"
        },
        "content": "* Only modules that have been added into the calendar can be removed"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Khenus"
        },
        "content": "  "
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "#### 6.1.4. Viewing the details of a module: `details`"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "Input format: `details \u003cmodule code\u003e`"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "* `details CS2101`"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "* `DETAILS cs2113t`"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Khenus"
        },
        "content": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003e\u003cdiv style\u003d\"text-align:center\"\u003e"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    \u003cimg src\u003d\"images/UserGuide/acadplan_details.png\" /\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Khenus"
        },
        "content": "\u003c/div\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "As shown in the image, users can input the module that they wish to view further details about."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "__\u003cins\u003eCaution:\u003c/ins\u003e__ "
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "* No information will be printed if the module is not offered by NUS."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "#### 6.1.5. Searching for module codes containing a keyword: `search`"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "Input format: `search \u003cmodule code key\u003e`"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "* `search CS21`"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "* `SEARCH cg4002`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Khenus"
        },
        "content": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003e\u003cdiv style\u003d\"text-align:center\"\u003e"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    \u003cimg src\u003d\"images/UserGuide/acadplan_search_part.png\" /\u003e"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Khenus"
        },
        "content": "\u003c/div\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Khenus"
        },
        "content": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003e\u003cdiv style\u003d\"text-align:center\"\u003e"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    \u003cimg src\u003d\"images/UserGuide/acadplan_search_full.png\"/\u003e"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Khenus"
        },
        "content": "\u003c/div\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "As shown above, users can enter a search key that contains either part of, or the whole module code."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "__\u003cins\u003eCaution:\u003c/ins\u003e__ "
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "* This feature currently only supports searching by module code."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "* Only up to the first 10 results are displayed.  "
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "#### 6.1.6. Printing the academic calendar: `view`"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Khenus"
        },
        "content": "Input format: `view`"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Khenus"
        },
        "content": "Users can choose from printing the full calendar by typing `full` or printing a specific semester by typing a number from 1-10, inclusive."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "Expected output when user wishes to print the `full` calendar:"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Khenus"
        },
        "content": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003e\u003cdiv style\u003d\"text-align:center\"\u003e"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    \u003cimg src\u003d\"images/UserGuide/acadplan_viewfull.png\" /\u003e"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Khenus"
        },
        "content": "\u003c/div\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "Expected output when user wishes to print a specific semester:"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Khenus"
        },
        "content": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003e\u003cdiv style\u003d\"text-align:center\"\u003e"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    \u003cimg src\u003d\"images/UserGuide/acadplan_viewsem.png\" /\u003e"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Khenus"
        },
        "content": "\u003c/div\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "#### 6.1.7. Printing help for academic calendar: `help`"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "Input format: `help`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Khenus"
        },
        "content": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003e\u003cdiv style\u003d\"text-align:center\"\u003e"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    \u003cimg src\u003d\"images/UserGuide/acadplan_help.png\" /\u003e"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Khenus"
        },
        "content": "\u003c/div\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "#### 6.1.8. Switching to the _CAP Calculator_ app: `capcalc`"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "Users can choose to switch to the _CAP Calculator_ app from within the _Academic Planner_ app."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "Input format: `capcalc`"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003e\u003cdiv style\u003d\"text-align:center\"\u003e"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    \u003cimg src\u003d\"images/UserGuide/acadplan_capcalcswitch.png\" /\u003e"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "\u003c/div\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "### 6.2. Cap Calculator: `capcalc`"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Khenus"
        },
        "content": "Directs user to the page where he/she can view the `current` CAP or even `set target` CAP to be met in the upcoming semester(s) from **Main Menu**. "
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "Input format: `capcalc` or `c`"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Khenus"
        },
        "content": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003e\u003cdiv style\u003d\"text-align:center\"\u003e"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    \u003cimg src\u003d\"images/UserGuide/capcalc_features.png\"  /\u003e"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Khenus"
        },
        "content": "\u003c/div\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "#### 6.2.1. Printing current CAP and MCs taken: `current`"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "Input format: `current`"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Khenus"
        },
        "content": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003e\u003cdiv style\u003d\"text-align:center\"\u003e"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    \u003cimg src\u003d\"images/UserGuide/capcalc_current.png\" /\u003e"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Khenus"
        },
        "content": "\u003c/div\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "__\u003cins\u003eCaution:\u003c/ins\u003e__"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "* The value of CAP depends entirely on the modules and with corresponding grades added by the user in Academic Calendar Planner."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "* If there are no modules added, the current CAP and graded MCs are set to 0."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "#### 6.2.2. Set target CAP: `set target`"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "This is for the user to set a target CAP that he or she wishes to obtain for the next specified graded MCs."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "Input format: `set target`"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Khenus"
        },
        "content": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003e\u003cdiv style\u003d\"text-align:center\"\u003e"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    \u003cimg src\u003d\"images/UserGuide/capcalc_set_target.png\" /\u003e"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Khenus"
        },
        "content": "\u003c/div\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "__\u003cins\u003eCaution:\u003c/ins\u003e__"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "* CAP should be between 0.00 to 5.00 inclusive."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "* MC should be between than 1 to 180 inclusive."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "#### 6.2.3. Set S/U modules: `set su`"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "This is for the user to set modules that he or she wishes to S/U."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Khenus"
        },
        "content": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003e\u003cdiv style\u003d\"text-align:center\"\u003e"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    \u003cimg src\u003d\"images/UserGuide/capcalc_set_su_module.png\" /\u003e"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Khenus"
        },
        "content": "\u003c/div\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "As shown in the image, user can choose to S/U by either a _Semester_ or some selected _Modules_. (__Note:__ Enter either `1` or `2` instead of the component\u0027s name)"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "##### Set S/U by semester"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Khenus"
        },
        "content": "Below shows the expected output when user wishes to S/U by _Semester_."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Khenus"
        },
        "content": "User will be prompted to enter a specific semester that he or she wishes to S/U. The following will show if the entered *Semester* is valid."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Khenus"
        },
        "content": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003e\u003cdiv style\u003d\"text-align:center\"\u003e"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    \u003cimg src\u003d\"images/UserGuide/capcalc_set_su_semester_output1.png\" /\u003e"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Khenus"
        },
        "content": "\u003c/div\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e "
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "User is first displayed with *S/U list* which consists of a sorted list of valid modules according to their grades and the user’s current Cap and graded MCs."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "__\u003cins\u003eCaution:\u003c/ins\u003e__ "
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "* Only modules that can be S/Ued are added into the S/U list."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "* Modules with special grades are filtered out."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003e\u003cdiv style\u003d\"text-align:center\"\u003e"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    \u003cimg src\u003d\"images/UserGuide/capcalc_set_su_semester_output2.png\" /\u003e"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "\u003c/div\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e "
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "Modules will be S/Ued starting from the lowest grade and display the corresponding updated cap to user."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "User will also be displayed with the highest Cap possible that the user can obtained."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003e\u003cdiv style\u003d\"text-align:center\"\u003e"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    \u003cimg src\u003d\"images/UserGuide/capcalc_set_su_semester_output3.png\" /\u003e"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "\u003c/div\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e "
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "Lastly, user will be displayed with the modules that he or she should S/U in order to obtain the highest Cap possible."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "##### Set S/U by modules"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Khenus"
        },
        "content": "Below shows the expected output when user wishes to S/U by _Modules_."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Khenus"
        },
        "content": "User will then be prompted to enter a specific number of modules to S/Ued and the module codes to be S/Ued. The following will show if the all the fields are valid."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Khenus"
        },
        "content": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003e\u003cdiv style\u003d\"text-align:center\"\u003e"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    \u003cimg src\u003d\"images/UserGuide/capcalc_set_su_modules_output1.png\" /\u003e"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Khenus"
        },
        "content": "\u003c/div\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "User is first displayed with *S/U list* which consists of a sorted list of valid modules according to their grades and the user’s current Cap and graded MCs."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "__\u003cins\u003eCaution:\u003c/ins\u003e__ "
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "* Duplicate modules are not allowed."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "* Number of modules to be S/Ued should not be greater than number of modules taken by the user."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "JuZihao"
        },
        "content": " \u003ctable\u003e\u003ctr\u003e\u003ctd\u003e\u003cdiv style\u003d\"text-align:center\"\u003e"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    \u003cimg src\u003d\"images/UserGuide/capcalc_set_su_modules_output2.png\" /\u003e"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "\u003c/div\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "Modules will be S/Ued starting from the lowest grade and display the corresponding updated cap to user."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "User will also be displayed with the highest Cap possible that the user can obtained."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003e\u003cdiv style\u003d\"text-align:center\"\u003e"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    \u003cimg src\u003d\"images/UserGuide/capcalc_set_su_modules_output3.png\" /\u003e"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "\u003c/div\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "Lastly, user will be displayed with the modules that he or she should S/U in order to obtain the highest Cap possible."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "#### 6.2.4. Printing help for CAP Calculator: `help`"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "Input format: `help`"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003e\u003cdiv style\u003d\"text-align:center\"\u003e"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    \u003cimg src\u003d\"images/UserGuide/capcalc_help.png\" /\u003e"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003c/div\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "#### 6.2.5. Switching to the _Academic Planner_ app: `acadplan`"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "Input format: `acadplan`"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "Users can choose to switch to the _Academic Planner_ app from within the _CAP Calculator_ app."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003e\u003cdiv style\u003d\"text-align:center\"\u003e"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    \u003cimg src\u003d\"images/UserGuide/capcalc_acadplanswitch.png\" /\u003e"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003c/div\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "### 6.3. Exiting from a feature or PlanNUS: `exit`"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "This command directs user back to the main page of PlanNUS after they are done using a feature or exits from the entire application itself."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "Input format: `exit`"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "When user exits from the Academic Planner, expected output is as shown below."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "Khenus"
        },
        "content": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003e\u003cdiv style\u003d\"text-align:center\"\u003e"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    \u003cimg src\u003d\"images/UserGuide/exit_acadplan.png\" /\u003e"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "Khenus"
        },
        "content": "\u003c/div\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e "
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "When user exits from the CAP calculator, expected output will be as follows:"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "Khenus"
        },
        "content": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003e\u003cdiv style\u003d\"text-align:center\"\u003e"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    \u003cimg src\u003d\"images/UserGuide/exit_capcalc.png\" /\u003e"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "Khenus"
        },
        "content": "\u003c/div\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e "
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "Last but not least, the expected output for exiting PlanNUS will be as such:"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "Khenus"
        },
        "content": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003e\u003cdiv style\u003d\"text-align:center\"\u003e"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    \u003cimg src\u003d\"images/UserGuide/exit_PlanNUS.png\" /\u003e"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "Khenus"
        },
        "content": "\u003c/div\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e "
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "​    "
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "## 7. Loading and Saving "
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "Upon running PlanNUS in command prompt, the program automatically looks for a text file with the name _PlanNUS.txt_ within the same folder as _PlanNUS.jar_. "
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "If the text file cannot be found, then the output will be as shown at the main page of PlanNUS after the list of commands."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "Khenus"
        },
        "content": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003e\u003cdiv style\u003d\"text-align:center\"\u003e"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    \u003cimg src\u003d\"images/UserGuide/file_not_found.png\" /\u003e"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "Khenus"
        },
        "content": "\u003c/div\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e "
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "Khenus"
        },
        "content": "If an empty save file exist, the follow output will be displayed instead."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "Khenus"
        },
        "content": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003e\u003cdiv style\u003d\"text-align:center\"\u003e"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    \u003cimg src\u003d\"images/UserGuide/file_is_empty.png\" /\u003e"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "Khenus"
        },
        "content": "\u003c/div\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e "
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "All the modules selected will be saved into _PlanNUS.txt_ after the user exits from the program. The next time when user runs the program again, it will load the configurations that were saved previously which will generate the below output."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "Khenus"
        },
        "content": "\u003ctable\u003e\u003ctr\u003e\u003ctd\u003e\u003cdiv style\u003d\"text-align:center\"\u003e"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    \u003cimg src\u003d\"images/UserGuide/module_loaded.png\" /\u003e"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "Khenus"
        },
        "content": "\u003c/div\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e "
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "Note that the image above is just an example because it depends on the number of modules saved in the text file."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "## 8. FAQ"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "Question Type|Question|Answer"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ":---:|---|---"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "General | How do I check which modules are offered by NUS? | For more info on which modules are offered by NUS, visit [here](https://nusmods.com/modules?sem[0]\u003d1\u0026sem[1]\u003d2\u0026sem[2]\u003d3\u0026sem[3]\u003d4 \"NUSMODS\")."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "General | What is a valid semester index? | For the purpose of this planning software, we have come to a decision to limit the maximum number of semesters an undergraduate can take to 10, which is 5 academic years. The notation they are represented by is by an integer of value 1 to 10. For a fresh undergraduate, they will begin at semester index of 1. For a year 3 student who is currently in semester 1, the semester index will be 5. Please refer to the appendix for more information."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "General | What is a valid grade? | **Letter Grades**: A+, A, B+, B, B-, C+, C, D+, D, F , **Special Grades**: CS, CU, S, U, W, IC, IP, AUD, WU, EXE, **If you have yet to have a grade for the module**: NT"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "General | What is the name of the saved file? | The name of the saved file is `PlanNUS.txt` and can be found at the base of the folder, in the same location as your PlanNUS.jar. "
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "## 9. Useful Links"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "Khenus"
        },
        "content": "* [**About Us**](https://ay2021s1-cs2113t-f12-1.github.io/tp/AboutUs.html)"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "Khenus"
        },
        "content": "* [**Configuration guide**](https://ay2021s1-cs2113t-f12-1.github.io/tp/ConfigurationGuide.html)"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "Khenus"
        },
        "content": "* [**Developer guide**](https://ay2021s1-cs2113t-f12-1.github.io/tp/DeveloperGuide.html)"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "Khenus"
        },
        "content": "* [**DevOps guide**](https://ay2021s1-cs2113t-f12-1.github.io/tp/DevOpsGuide.html)"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "Khenus"
        },
        "content": "* [**Documentation guide**](https://ay2021s1-cs2113t-f12-1.github.io/tp/DocumentationGuide.html)"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "Khenus"
        },
        "content": "* [**Logging guide**](https://ay2021s1-cs2113t-f12-1.github.io/tp/LoggingGuide.html)"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "Khenus"
        },
        "content": "* [**Testing guide**](https://ay2021s1-cs2113t-f12-1.github.io/tp/TestingGuide.html)"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "## 10. Appendix"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "### 10.1. Naming convention for semester indexes"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "For the purpose of this planning software, we have decided to limit the maximum number of semesters an undergraduate can take to 10, which is equivalent to 5 academic years. Each semester is indexed by an integer between 1 and 10. For a fresh undergraduate, they will begin at semester index of 1. For a year 3 student who is currently in semester 1, the semester index will be 5. Below is a table which illustrates the corresponding semester indexes for undergraduates."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "| Academic Year | Semester (as of Academic Year) | Semester Index |"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "| :-----------: | :----------------------------: | :------------: |"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "|       1       |               1                |       1        |"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "|       1       |               2                |       2        |"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "|       2       |               1                |       3        |"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "|       2       |               2                |       4        |"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "|       3       |               1                |       5        |"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "|       3       |               2                |       6        |"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "|       4       |               1                |       7        |"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "|       4       |               2                |       8        |"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "|       5       |               1                |       9        |"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "|       5       |               2                |       10       |"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "### 10.2. Grade values"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "As per NUS [Grade Policy](http://www.nus.edu.sg/registrar/academic-information-policies/undergraduate-students/modular-system \"NUS Official Site\"), letter grades will have a corresponding Academic Point attached to them. Special cases such as Satisfactory/Unsatisfactory (SU) grades can be captured by our software as well. Below is a table of grades and their corresponding grade value. Do note that the grades of forecasted modules should be declared as NT, short for Not Taken."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "|            Grade            | Academic Points |"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "| :-------------------------: | :-------------: |"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "|             A+              |       5.0       |"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "|              A              |       5.0       |"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "|             A-              |       4.5       |"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "|             B+              |       4.0       |"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "|              B              |       3.5       |"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "|             B-              |       3.0       |"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "|             C+              |       2.5       |"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "|              C              |       2.0       |"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "|             D+              |       1.5       |"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "|              D              |       1.0       |"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "|              F              |       0.0       |"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "| Additional Grading Options* |        -        |"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "*Additional Grading options include S,U,CS,CU,IC,IP,AUD,EXE,W,WU. They hold no Academic Point Value."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "## 11. Features Coming Soon (V3.0 and beyond)"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "* Logging of program to separate folders"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "* Support retaking of modules"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "* Support max limit for the `Set SU` function in `capcalc`"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "* Saving data after every command"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "* Support discontinued modules from NUS"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "* Support shortened commands for parsers"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "* Support validation of requirements for modules"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "# End of user guide"
      }
    ],
    "authorContributionMap": {
      "jerroldlam": 58,
      "vanessa-kang": 266,
      "JuZihao": 74,
      "Khenus": 144,
      "-": 31
    }
  },
  {
    "path": "docs/team/harryleecp.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "# Harry Lee - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "PlanNUS is a desktop application used for planning academic journey in NUS. This provides an offline platform for undergraduates to keep track of their grades and modules taken while also able to find out more information about other modules when drafting their schedules for upcoming semesters. The user interacts with PlanNUS using a CLI and the program is written in Java."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "* __New Feature:__ Added the ability to edit the module details within user\u0027s modules list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "  * What it does: Allows the user to change either the semester at which the selected module is taken, or its grade value."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "  * Justification: This feature is essential for the user to make amendments to his/her list of modules as the semester and grade may not be made known beforehand."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "  * Highlights: This feature incorporates functionalities of multiple classes to validate user\u0027s input for the values of semester and grade. Moreover, it is necessary to check that the module selected exists within the user\u0027s list before changing the details."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "* __New Feature:__ Added the ability to remove a module within user\u0027s modules list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "  * What it does: Allows the user to discard unwanted module(s) within the list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "  * Justification: Assuming that the user added wrong module(s) on accident or failed to obtain specific module(s) due to lack of slots, these can be deleted using this feature."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "  * Highlights: Similar to the previous feature, it is necessary to check that the module to be deleted exists within the user\u0027s list such that errors will not occur. "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "* __New Functionality:__ Created the storage class to save user\u0027s selections."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "  * What it does: Allows the user to save their list of modules into a text file such that he/she does not have to add in the configurations all over again. "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "  * Justification: As this application is meant to provide ease of access for the user\u0027s personal academic record, there should be persistent storage for keeping data to be loaded whenever PlanNUS is launched in the CLI. Apart from that user can also access the text file without the need for using the application."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "  * Highlights: User\u0027s list of modules interacts with the sorting class to arrange the modules according to semester before writing to a text file with a simpler format. This increases the efficiency in both loading and saving of the persistent data as it would be easier to read and write."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "* __Code contributed:__ [**Reposense link**](https://nus-cs2113-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dharryleecp\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-09-27\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dharryleecp\u0026tabRepo\u003dAY2021S1-CS2113T-F12-1%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "* __Documentation:__ "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    * Added documentation for the features `edit` and `remove` "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    * Set up the basic structure of the guide [**#57**](https://github.com/AY2021S1-CS2113T-F12-1/tp/pull/57)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    * Added implementation info and sequence diagrams for `edit` and `remove` command [**#135**](https://github.com/AY2021S1-CS2113T-F12-1/tp/pull/135)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    * Added the documentation guide for the project [**#164**](https://github.com/AY2021S1-CS2113T-F12-1/tp/pull/164)"
      }
    ],
    "authorContributionMap": {
      "jerroldlam": 5,
      "harryleecp": 24
    }
  },
  {
    "path": "docs/team/jerroldlam.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "# Jerrold Lam - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "PlanNUS is a greenfield, CLI-based project which aims to solve the gap in undergraduate academic planning in NUS."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "With the Academic Calendar Planner, PlanNUS will be able to assist undergraduate students in forecasting their academic journey for their 4 or 5 years in NUS."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "With the CAP Calculator , PlanNUS will be able to tell you your current CAP and forecast future grades needed to achieve your target CAP."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "### Summary of Contributions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "* Code contributed: [Reposense Link](https://nus-cs2113-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003djerroldlam \"Link to contributed code\")"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "* **New Feature:** Added the ability to add modules into their unique academic planner."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    * What it does: Allows the user to add a module which is offered by NUS into their academic calendar, one at a time."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    * Justification: This feature is one of the core features of PlanNUS and forms the basis of which PlanNUS is built upon."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    * Highlights: The implementation of this feature needed to be foolproof and complex to implement as it required multiple interactions with multiple classes in order to validate and properly store the required variables."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "* **New Feature:** Added the ability to view modules from a specific semester of the user\u0027s academic calendar."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    * What it does: Allows the user to view all modules, and their grades from a specific semester that they input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    * Justification: This feature improves PlanNUS significantly as the user need not be overloaded with the information of their whole academic calendar should they only want to view a semester\u0027s information."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    * Highlights: This enhancement affects the existing view command and needed to be neatly and coherently integrated with the current view command. This required in depth analysis of the possible integration solutions to make the more intuitive program flow for the ease of use for the user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "* **New Functionality:** Created the main object classes to be used in PlanNUS."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    * What it does: Through the `Person` and `PartialModule` object classes, PlanNUS is able to store required variables efficiently to be utilised throughout the program."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    * Justification: By encapsulating the variables and creating a facade for the private variables, it reduces the risk of a rogue function modifying the variables. This would make our program more robust and reduces the opportunity for bugs to appear."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    * Highlights: The implementation of these object classes need to be thought of at a high level as it forms the foundation of the functionality of PlanNUS. This meant that uses cases needed to be thought out to account for the various usage type. These classes also need to be easily modifiable as the classes can be easily augmented to encapsulate more data should the program require."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "* **New Functionality:** Created the parser class to be used in the academic planner app."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    * What it does: Processes user input data and returns the correct command to be executed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    * Justification: Raises the coding standard of the PlanNUS code base as more object-oriented-programming can be implemented."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    * Highlights: The parser needs to be able to handle all sorts of output and handle them gracefully without fail. Hence, much thought was put into designing the parser to account for the various possible different inputs."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    * Credits: Referenced from teammate Khenus\u0027s app parser."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "* **New Functionality:** Added `ModuleValidator` class to easily validate inputs from user."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    * What it does: Easily validates critical information such as Module Codes, Semester indexes and Grade values."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    * Justification: This enhances the credibility of PlanNUS by rejecting random inputs, maintaining the data integrity of the information that will be stored in PlanNUS."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    * Highlights: As there are many parameters that need to be verified, careful implementation of the verification methods is conducted. This forms the core of PlanNUS\u0027 data integrity checks, as a mistake here would result in unintended values to be accepted as valid."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "* **New Functionality:** Added `LoggingTool` class to easily initialise a `Logger` for use within PlanNUS."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    * What it does: Easy initialisation of `Logger` to assist in logging the runtime execution of PlanNUS."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    * Justification: Logging will be widely used in PlanNUS to assist in tracking its events, hence by creating this class, developers can easily initialise a standardised logger which will output `.log` files for the developer to understand what is going on in the program. "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    * Highlights: Following careful consideration of how logging will be used, the parameters are set up to allow different codes to easily log without requiring a huge chunk of code to initialise it."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "* **Documentation**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    * User Guide"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        * Added documentation for `AddModuleCommand` [#37](https://github.com/AY2021S1-CS2113T-F12-1/tp/pull/37)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        * Added Overview and introduction to user guide [#137](https://github.com/AY2021S1-CS2113T-F12-1/tp/pull/152)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        * Wrote appendix for relevant information regarding NUS modules and semester indexes [#57](https://github.com/AY2021S1-CS2113T-F12-1/tp/pull/57)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    * Developer Guide"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        * Added documentation for `AddModuleCommand` and its flow in the program [#114](https://github.com/AY2021S1-CS2113T-F12-1/tp/pull/114)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        * Added details of the `Ui` class [#172](https://github.com/AY2021S1-CS2113T-F12-1/tp/pull/172), [#175](https://github.com/AY2021S1-CS2113T-F12-1/tp/pull/175)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        * Added Logging guide [#130](https://github.com/AY2021S1-CS2113T-F12-1/tp/pull/130)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "* **Team-Based Tasks**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    * Maintained issue tracker on the team\u0027s repository"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    * Made necessary code quality enhancements [#36](https://github.com/AY2021S1-CS2113T-F12-1/tp/pull/59) ,[#65](https://github.com/AY2021S1-CS2113T-F12-1/tp/pull/65), [#100](https://github.com/AY2021S1-CS2113T-F12-1/tp/pull/100), [#101](https://github.com/AY2021S1-CS2113T-F12-1/tp/pull/101)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    * Resolved coding standard violations"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    * Made numerous bug fixes for the code and found bugs to be resolved"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        * [#43](https://github.com/AY2021S1-CS2113T-F12-1/tp/pull/43), [#59](https://github.com/AY2021S1-CS2113T-F12-1/tp/pull/59), [#72](https://github.com/AY2021S1-CS2113T-F12-1/tp/pull/72), [#103](https://github.com/AY2021S1-CS2113T-F12-1/tp/pull/103), [#111](https://github.com/AY2021S1-CS2113T-F12-1/tp/pull/111), [#115](https://github.com/AY2021S1-CS2113T-F12-1/tp/pull/115), [#127](https://github.com/AY2021S1-CS2113T-F12-1/tp/pull/127), [#147](https://github.com/AY2021S1-CS2113T-F12-1/tp/pull/147), \\"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        [#170](https://github.com/AY2021S1-CS2113T-F12-1/tp/pull/170), [#220](https://github.com/AY2021S1-CS2113T-F12-1/tp/pull/220), [#222](https://github.com/AY2021S1-CS2113T-F12-1/tp/pull/222)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "* **Contributions to the User Guide (Extracts)**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    * Semester Naming Conventions"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        * For the purpose of this planning software, we have decided to limit the maximum number of semesters an undergraduate can take to 10, which is equivalent to 5 academic years. Each semester is indexed by an integer between 1 and 10. For a fresh undergraduate, they will begin at semester index of 1. For a year 3 student who is currently in semester 1, the semester index will be 5. Below is a table which illustrates the corresponding semester indexes for undergraduates."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "          "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "          | Academic Year | Semester (as of Academic Year) | Semester Index |"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "          | :-----------: | :----------------------------: | :------------: |"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "          |       1       |               1                |       1        |"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "          |       1       |               2                |       2        |"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "          |       2       |               1                |       3        |"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "          |       2       |               2                |       4        |"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "          |       3       |               1                |       5        |"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "          |       3       |               2                |       6        |"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "          |       4       |               1                |       7        |"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "          |       4       |               2                |       8        |"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "          |       5       |               1                |       9        |"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "          |       5       |               2                |       10       |"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    * Grade Value Covention"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        * As per NUS [Grade Policy](http://www.nus.edu.sg/registrar/academic-information-policies/undergraduate-students/modular-system \"NUS Official Site\"), letter grades will have a corresponding Academic Point attached to them. Special cases such as Satisfactory/Unsatisfactory (SU) grades can be captured by our software as well. Below is a table of grades and their corresponding grade value. Do note that the grades of forecasted modules should be declared as NT, short for Not Taken."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "          "
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "          |            Grade            | Academic Points |"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "          | :-------------------------: | :-------------: |"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "          |             A+              |       5.0       |"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "          |              A              |       5.0       |"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "          |             A-              |       4.5       |"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "          |             B+              |       4.0       |"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "          |              B              |       3.5       |"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "          |             B-              |       3.0       |"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "          |             C+              |       2.5       |"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "          |              C              |       2.0       |"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "          |             D+              |       1.5       |"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "          |              D              |       1.0       |"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "          |              F              |       0.0       |"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "          | Additional Grading Options* |        -        |"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "          "
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "          *Additional Grading options include S,U,CS,CU,IC,IP,AUD,EXE,W,WU. They hold no Academic Point Value."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    * Introduction"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        * Hello user of PlanNUS! Welcome to our user guide for our software. In this user guide, you can find information regarding how to use PlanNUS and the common questions asked with regards to the usage of PlanNUS. We hope you find this software"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "         useful and we wish you all the best for your academic journey in NUS."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        * PlanNUS is a __desktop application for planning academic journey__ with modules offered by National University of Singapore (NUS). The __Command Line Interface (CLI)__ will be required for the program to work."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "          "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "          PlanNUS aims to patch the gap for students in NUS by providing an avenue for students to plan their full academic journey in NUS. "
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "          "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "          PlanNUS can also generate CAP statistics and even suggest to user which modules to mark as satisfactory/unsatisfactory(S/U) to have the highest CAP possible. "
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "          "
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "          PlanNUS also has saving and loading features which would reduce the hassle of entering the full academic calendar for each use."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "          "
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "          The sections below explain how PlanNUS should be used, and the common errors faced by users. Sections can be easily navigated to by clicking on the hyperlinks in the table of contents."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "* Contributions to the Developer Guide (Extracts)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    * Implementation for `AddModuleCommand`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        * Add module command is executed by `AcademicPlannerParser`. It allows users to add modules into their Academic Planner by instantiating a new `PartialModule` object and adding it into the `userModuleList` and `userModuleMap`. Both the list and hashmap are the _java API_, which are used by importing them. The `Person` object is used to encapsulate both `userModuleList` and `userModuleMap`."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "          "
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "          Additionally, the add module command extends the `Command` class and overrides its `execute()` command. An external class, `ModuleValidator` is called upon to validate the various parameters that the user has entered, as to only allow valid modules to be added to the user."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "          "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "          Given below is an example usage scenario and how add module command behaves at each step."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "  "
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "          __Step 1__ : The user calls the add module command from the `AcademicPlannerParser`, which will initialise a "
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "          `AddModuleCommand`. `AddModuleCommand`\u0027s constructor takes in parameters of `ModuleLoader`, `Person`,`Ui`, "
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "          and `String`. Below is a table of what each parameter corresponds to in the state diagram of the program."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "          "
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "          |Parameter\u003cbr /\u003e(Class Name)|Corresponds to\u003cbr /\u003e(Function of Class)|Referred to as\u003cbr /\u003e(Variable Name)|"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "          |:---:|:---:|:---:|"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "          |`ModuleLoader`| Class representing all modules offered by NUS | `allModules` |"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "          |`Person`| Class representing current user\u0027s information | `currentPerson`|"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "          |`Ui`| Class representing java\u0027s default scanner class | `in`|"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "          |`String` | Class representing the module code to be added | `moduleCode`|"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "          "
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "          __Step 2__ : `execute()` is called from the instance of `AddModuleCommand`. It can throw `AcademicException` "
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "          or `IOException`. `FileHandler` and `Logger` classes from the _java API_ are instantiated to handle logging for the remainder of the `execute()` method. "
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "          "
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "          __Step 3__ : `in` then reads in the next two lines of input, which is the user\u0027s input for the desired semester for the `moduleCode` and `moduleCode`\u0027s grades."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "          "
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "          __Step 4__ : `validateInputs()` is called from `ModuleValidator` to validate the user entered data against `allModules`."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "          "
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "          __Step 5__ : `AddUtils` is called upon to return module credit for `moduleCode` by `getModuleCreditForModule()`."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "          "
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "          __Step 6__ :  `AddUtils` is called upon again to add the module\u0027s data to the user, by instantiating a new"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "          `PartialModule` and storing it in both `userModuleList` and `userModuleMap` via `Person`."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "          "
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "          __Step 7__ : `FileHandler`, `Logger`, `PartialModule`, `ModuleValidator`, `AddUtils` and `AddModuleCommand` are terminated."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "          "
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "          The following sequence diagram shows how the `AddModuleCommand` works:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "          "
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "          The following activity diagram summarizes what happens when the user executes a `AddModuleCommand` :"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        "
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        * Design Considerations"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            * Option 1 (Current Implementation): Implementing each command as a class by itself"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "              * Pros: Increases modularity of code, higher overall code quality "
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "              * Cons: More complicated to implement"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "          * Option 2: Implementing each command as a method in a class"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "              * Pros: Easier to implement"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "              * Cons: Class needs to be instantiated and increases coupling, reducing testability. This method also decreases SLAP."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        "
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    * Logging guide"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "       * `LoggingTool` is available to use for accessible logging at the package `src.main.java.seedu.duke.global`. `LoggingTool`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "              constructor takes in a parameter `String` and `FileHandler`. `String` represents `loggerName` and `FileHandler` represents"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "              the object `fh`, which is the _java API_. `initialise()` will automatically return a fully configured `Logger` object"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "              with the following parameters :"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "              "
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "          * `addHandler(fh)`"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            * `logger` will log to an external file as defined by `fh`"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "          * `setUseParentHandlers(false)`"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            * Disables logging on the console output"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "          * `setLevel(Level.INFO)`"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            * Any message logged `Level.INFO` and above will be logged"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "              "
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "          After initialising, the `logger` can be used as per _java API_ constraints. Below shows an example code snippet that can be used to initialise a `logger`:"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "              "
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "          ```"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "          FileHandler fh \u003d new FileHandler(\u003cYOUR_LOG_FILE_NAME\u003e);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "          Logger logger \u003d new LoggingTool(\u003cYOUR_LOGGER_NAME\u003e,fh).initialize();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "          ```"
      }
    ],
    "authorContributionMap": {
      "jerroldlam": 163
    }
  },
  {
    "path": "docs/team/juzihao.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "# Ju Zihao - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "PlanNUS is a greenfield, CLI-based project which aims to solve the gap in undergraduate academic planning in NUS."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "With the Academic Calendar Planner, PlanNUS will be able to assist undergraduate students in forecasting their academic journey for their 4 or 5 years in NUS."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "With the CAP Calculator , PlanNUS will be able to tell you your current CAP and forecast future grades needed to achieve your target CAP."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "### Summary of Contributions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "* [Code Contributed](https://nus-cs2113-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dZihao\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-09-27\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026zFR\u003dfalse\u0026tabAuthor\u003dJuZihao\u0026tabRepo\u003dAY2021S1-CS2113T-F12-1%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "* **New Feature:** Added the ability to view the user\u0027s current Cap, graded MCs and total MCs."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "   * What it does: Allows the user to display his or her current Cap, graded MCs and total MCs after adding some modules inside Academic Planner."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "   * Justification: This feature is the basic feature for Cap Calculator and it provides the details user needed for the rest of the other features."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "   * Highlights: The implementation of this feature was initally set to have a time complexity of O(n) where n is the number of moudules that the user has added. The time complexity is then improved to be O(1) after some updates."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "   * Credits: Improvements are made due to Khenus\u0027s `CalculatorUtils`."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "   "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "* **New Feature:** Added the ability to set a target Cap given some graded MCs."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "   * What it does: Informs the user what his or her Cap have to be for a given graded MCs in order to achieve his or her target Cap."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "   * Justification: This feature is allows the user to plan for upcoming semester or even for the rest of his or her university curriculum."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "   * Highlights: This enhancement takes CAP and MC information that is provided by the user in Acadamic Planner. Thus, it is important that this enhancement is extracting the correct information for its purpose to avoid a wrongly displayed result. "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "   "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "* **New Feature:** Added the ability to provide suggestion on S/U to users."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "   * What it does: Provide details on what modules to S/U in order to achieve the highest Cap possible."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "   * Justification: This feature is allows the user to plan for S/U modules after result release."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "   * Highlights: This enhancement is affected by the module list in the `Person` object. Thus, it is cruicial to filter out modules that cannot be S/Ued to provide user with the correct information and suggestion that allows them to achieve the best Cap."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "   "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "* **Documentation**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    * User Guide"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "      * Added documentation for features `set target` and `set su`. [#16](https://github.com/AY2021S1-CS2113T-F12-1/tp/issues/16)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    * Developer Guide"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "      * Added documentation for `set su` and its flow. [#89](https://github.com/AY2021S1-CS2113T-F12-1/tp/issues/89)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "      * Added documentation for Glossary. [#177](https://github.com/AY2021S1-CS2113T-F12-1/tp/issues/171)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "      * Added documentation for Configuration Guide."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "      "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "* **Team-Based Tasks**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "  * Made bug fixes to the code and bugs to be resolved."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    * [#25](https://github.com/AY2021S1-CS2113T-F12-1/tp/issues/25), [#38](https://github.com/AY2021S1-CS2113T-F12-1/tp/issues/38), [#71](https://github.com/AY2021S1-CS2113T-F12-1/tp/issues/71), [#107](https://github.com/AY2021S1-CS2113T-F12-1/tp/issues/107), [#162](https://github.com/AY2021S1-CS2113T-F12-1/tp/issues/162), [#184](https://github.com/AY2021S1-CS2113T-F12-1/tp/issues/184), [#185](https://github.com/AY2021S1-CS2113T-F12-1/tp/issues/185), [#194](https://github.com/AY2021S1-CS2113T-F12-1/tp/issues/194), [#195](https://github.com/AY2021S1-CS2113T-F12-1/tp/issues/195), [#202](https://github.com/AY2021S1-CS2113T-F12-1/tp/issues/202), [#203](https://github.com/AY2021S1-CS2113T-F12-1/tp/issues/203), [#216](https://github.com/AY2021S1-CS2113T-F12-1/tp/issues/216) , [#217](https://github.com/AY2021S1-CS2113T-F12-1/tp/issues/217)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "   * Improve code quality and standards. [#45](https://github.com/AY2021S1-CS2113T-F12-1/tp/issues/45)"
      }
    ],
    "authorContributionMap": {
      "jerroldlam": 6,
      "JuZihao": 33
    }
  },
  {
    "path": "docs/team/khenus.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Khenus"
        },
        "content": "# Khenus Tan - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Khenus"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Khenus"
        },
        "content": "PlanNUS is a CLI-based project which aims to provide a centralised solution for NUS student to plan their Academic Journey. It provides important applications such as Academic Planner and CAP Calculator to assist students. "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Khenus"
        },
        "content": "### Summary of Contributions"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Khenus"
        },
        "content": "* Code contributed: [Reposense Link](https://nus-cs2113-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dkhenus\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-09-27\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other \"Link to contributed code\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Khenus"
        },
        "content": "* **New Feature:** Added the ability to navigate between different apps within PlanNUS."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    * What it does: Allow users to select between Academic Planner or CAP Calulator at any point while using PlanNus."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    * Justification: This feature allow users to fully utilise all other features offered by PlanNUS with great ease. It also serve as an entry point for **users** when using PlanNUS."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    * Highlights: This feature handles the flow of data within PlanNUS to provide users with the ability to toggle between apps seamlessly. It also ensures proper allocation and usage of memory space to prevent unexpected crashes due to memory leak."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Khenus"
        },
        "content": "* **New Functionality:** Created a JavaScript program to clean up all module information retrieve from NUSMODS API."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    * What it does: Removal of extra information and reformatting needed information to allow for ease of conversion from Javascript Object Notation (JSON) to Plain Old Java Object (POJO)."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    * Justification: The creation of this program is to assist in removing irrelevant data and reformatting nested objects from all 12436 modules within the JSON file retrieved from NUSMODS API to improve both spatial and temporal efficiencies during the eventual conversion of JSON into POJO in PlanNUS."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    * Highlights: This program allows for the formatting of specific output fields, removal of irrelevant information from the final list, counting of total number of modules offered, finding the length of the longest module name, the minimum MC across all modules offered and searching of a specific module within the final list."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Khenus"
        },
        "content": "* **New Functionality:** Creation of `ModuleLoader` class"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    * What it does: The `ModuleLoader` class allows for the creation of a POJO and HashMap from the formatted JSON file containing all NUS module information using GSON library from Google."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    * Justification: This class creates an ArrayList named `allModules` for fellow developers to access module information when needed.  It also creates a HashMap named `moduleMap` that stores the Module Code and the index of said module in `allModules`. This allows for efficient retrieval of module information from `allModules`."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    * Highlights: This implementation allows for near $o(1)$ access of the huge `allModules` array with 12436 entries, preventing PlanNUS from feeling sluggish. "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Khenus"
        },
        "content": "* **New Functionality:** Creation of `AppParser` class"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    * What it does: The `AppParser` class parses user input and starts the correct application for users. `AppParser` also handles the passing of user data between different application. "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    * Justification:  This class is created to allow for new applications to be added into PlanNUS easily. It also allows for formatting of user input before it is verified against the list of known command and acts as a centralised entry point for their individual applications."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Khenus"
        },
        "content": "* **New Functionality:** Creation of `Ui` class"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    * What it does: This class acts as an interface between the user and PlanNUS. It is also responsible to initialising a single `Scanner` class to be shared across the whole of PlanNUS."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    * Justification:  A unified `Scanner` class is needed to prevent multiple unclosed streams from causing unexpected `EOF` errors. "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Khenus"
        },
        "content": "* **New Functionality:**  Creation of `CalculatorUtils` class"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    * What it does: This class updates user\u0027s CAP after each module operation such as `add`, `edit` and `remove`"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    * Justification: This calculation is needed after each operation to ensure that the current CAP of the user is updated. It also prevents miscalculation of CAP due to Special Grades such as SU."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    * Highlights: These operations improves overall efficiency of CAP Calculator as these operation execute within $o(1)$ time and allows `current` command in CAP Calculator to be $o(1)$."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Khenus"
        },
        "content": "* **New Functionality:** Creation of `FieldValidator` class"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    * What it does: `FieldValidator` is responsible for ensuring that each entry from the save file is valid. It also gives information regarding which specific field within that entry is corrupted."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    * Justification: This class is needed to ensure that corrupted entries within the save file can be handled by PlanNUS gracefully."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Khenus"
        },
        "content": "* **New Functionality:** Creation of `App`, `Command`, and `FullModule` classes in `global` folder"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    * What it does: These classes are essential as it forms the parent class for every App and Command within PlanNUS. The `FullModule` class is responsible for storing information of each module after being converted into POJO by GSON."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    * Justification: These classes are created to ensure that every App and Command within PlanNUS follows a certain format to allow for ease of adaptation into `main`."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Khenus"
        },
        "content": "* **Documentation**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    * User Guide"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        * Took and formatted all images [#159](https://github.com/AY2021S1-CS2113T-F12-1/tp/pull/159)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        * Proofreading of User Guide"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    * Developer Guide"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        * Added documentation for Architecture, Overview: PlanNUS, Project Structure and Lifecycle of PlanNUS [#105](https://github.com/AY2021S1-CS2113T-F12-1/tp/pull/105), [#141](https://github.com/AY2021S1-CS2113T-F12-1/tp/pull/141), [#142](https://github.com/AY2021S1-CS2113T-F12-1/tp/pull/142), [#143](https://github.com/AY2021S1-CS2113T-F12-1/tp/pull/143), [#144](https://github.com/AY2021S1-CS2113T-F12-1/tp/pull/144), [#145](https://github.com/AY2021S1-CS2113T-F12-1/tp/pull/145)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        * Proofreading of Developer Guide"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Khenus"
        },
        "content": "* **Team-Based Tasks**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Khenus"
        },
        "content": "  * Reviewing and accepting most pull requests."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Khenus"
        },
        "content": "  * Setting up Gradle with extra dependencies, namely Apache Commons and GSON. [#2](https://github.com/AY2021S1-CS2113T-F12-1/tp/pull/2)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Khenus"
        },
        "content": "  * Made code quality enhancements [#34](https://github.com/AY2021S1-CS2113T-F12-1/tp/pull/34), [#98](https://github.com/AY2021S1-CS2113T-F12-1/tp/pull/98)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Khenus"
        },
        "content": "  * Created templates for standardisation of coding format across PlanNUS [#42](https://github.com/AY2021S1-CS2113T-F12-1/tp/pull/42), [#53](https://github.com/AY2021S1-CS2113T-F12-1/tp/pull/53)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Khenus"
        },
        "content": "  * Efficiency improvements across PlanNUS [#85](https://github.com/AY2021S1-CS2113T-F12-1/tp/pull/85)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Khenus"
        },
        "content": "  * General Bug Fixes [#33](https://github.com/AY2021S1-CS2113T-F12-1/tp/pull/33), [#117](https://github.com/AY2021S1-CS2113T-F12-1/tp/pull/117)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Khenus"
        },
        "content": "  * Release Management ([V2.0](https://github.com/AY2021S1-CS2113T-F12-1/tp/releases/tag/V2.0))"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Khenus"
        },
        "content": "* ***Note that the Contributions for User Guide cannot be extracted as it spans the whole document***"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Khenus"
        },
        "content": "* **Contributions to the Developer Guide (Extract)** "
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Khenus"
        },
        "content": "  * ## 3. Design"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    ### 3.1. Architecture"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    \u003cdiv style\u003d\"text-align:center\"\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        \u003cimg src\u003d\"../images/DeveloperGuide/Architecture.png\" alt\u003d\"Architecture diagram of PlanNUS\"/\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    \u003c/div\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    The ***Architecture Diagram*** given above explains the high-level design of PlanNUS. Below is a quick overview of each component."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    \u003cbr\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    "
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    ### 3.2. Overview"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    "
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    #### 3.2.1. PlanNus"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    `PlanNus` class contains the `main` and `run` method, which is responsible for"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    "
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Khenus"
        },
        "content": "      * At launch"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    "
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        * Loading all modules for AY2020/21 into PlanNUS"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    "
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        * Loading previous save file into PlanNUS if available"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        * Creation of entry point to available apps in PlanNUS"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    "
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Khenus"
        },
        "content": "      * While running"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    "
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        * Continuously prompt user for app selection"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    "
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Khenus"
        },
        "content": "      * At shut down"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    "
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        * Saving of user data into save file"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        * Clean up methods where necessary"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    \u003cbr\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    "
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    #### 3.2.2. Global, Ui, Parser, Storage, Apps"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    "
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    * The `global` package contains classes, exceptions and objects that are required across the whole app. "
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    * The `ui` package contains the class that is responsible for sharing one `scanner` class across the whole app to prevent multiple IO streams"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    * The `parser` package contains the class that handles user\u0027s app selection"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    * The `storage` package handles loading and saving of user\u0027s data to a save file."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    * Packages for Available apps such as Academic Planner and CAP Calculator are stored within `apps` package"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    "
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    \u003cbr\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    "
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    ### 3.3. Project Structure"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    "
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    Each package in the PlanNUS as given above follows the following file structure where applicable:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    "
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    * A functional class that acts as the entry point to that module"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    * A parser class that parses user input into executable commands by PlanNUS"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    "
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    * `commands`: A package that handles all executable commands given by parser"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    * `commons`: A package with the utilities and shared classes across the parent package"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    * `exceptions`: A package to handle all exceptions thrown across the parent package"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    "
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    The interaction within each package should ideally be as shown below."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    "
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    \u003cdiv style\u003d\"text-align:center\"\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        \u003cimg src\u003d\"../images/DeveloperGuide/Project_structure.png\" alt\u003d\"Architecture diagram for ideal project structure in PlanNUS\"/\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    \u003c/div\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    "
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    *Note that while this is the ideal case, packages such as* `global`, `parser` *and* `ui` *might not strictly follow this structure due to these package serving a different function altogether (Refer to the sections below for more details.)*"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    "
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    \u003cbr\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    "
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    ### 3.4. Life cycle of PlanNUS"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    "
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    The [*sequence diagram*](#sequence-diagram) below shows how different packages and classes interact with each other throughout the whole [life cycle](#life-cycle) of PlanNUS."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    "
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    \u003cdiv style\u003d\"text-align:center\"\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        \u003cimg src\u003d\"../images/DeveloperGuide/Packages_Interaction.png\" alt\u003d\"Sequence diagram for lifecycle of PlanNUS\"/\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    \u003c/div\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    "
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    \u003cbr\u003e"
      }
    ],
    "authorContributionMap": {
      "Khenus": 136
    }
  },
  {
    "path": "docs/team/vanessa-kang.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "# Vanessa - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "### \u003cbr\u003eSummary of Contributions"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "#### \u003cbr\u003eCode contributed"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "- Academic calendar printer"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "- View details of a module"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "- Search for modules containing keywords"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "#### \u003cbr\u003eEnhancements implemented"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "#### \u003cbr\u003eContributions to documentation"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "#### \u003cbr\u003eContributions to the DG"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "- "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "#### \u003cbr\u003eContributions to team-based tasks"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "#### \u003cbr\u003eReview/mentoring contributions"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "#### \u003cbr\u003eContributions beyond the project team"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "#### \u003cbr\u003e[Optional] Contributions to the User Guide (Extracts)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "#### [Optional] Contributions to the Developer Guide (Extracts)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "vanessa-kang": 31,
      "jerroldlam": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/PlanNus.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.apps.moduleloader.ModuleLoader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.global.App;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.global.objects.Person;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.parser.AppParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import static seedu.duke.parser.AppParser.MENU_PAGE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Khenus"
        },
        "content": "//@@author Khenus"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Khenus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Khenus"
        },
        "content": " * Class representing main function of PlanNUS."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Khenus"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Khenus"
        },
        "content": "public class PlanNus {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private ModuleLoader allModules;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private Person currentPerson;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private boolean isExit;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * Default constructor for PlanNus."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public PlanNus() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            this.allModules \u003d new ModuleLoader();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            this.currentPerson \u003d new Person(\"Bob\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            this.storage \u003d new Storage(allModules);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            isExit \u003d false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            isExit \u003d true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * Main entry function for PlanNUS."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        assert isExit : \"Startup is unsuccessful\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        boolean isChangeApp \u003d false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        int currentApp \u003d MENU_PAGE;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        storage.loader(currentPerson);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        ui.showWelcomeMessage();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                App selectedApp;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                if (isChangeApp) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                    selectedApp \u003d AppParser.specialParse(currentApp, allModules, currentPerson, ui, storage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                    isChangeApp \u003d false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                    currentApp \u003d MENU_PAGE;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                    ui.showAwaitCommand();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                    ui.printLine();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                    String userInput \u003d ui.getScanner().nextLine();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                    selectedApp \u003d AppParser.parse(userInput, allModules, currentPerson, ui, storage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                selectedApp.run();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                isExit \u003d selectedApp.getIsExit();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                isChangeApp \u003d selectedApp.getIsChangeApp();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                currentApp \u003d selectedApp.getCurrentApp();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                if (!isExit \u0026\u0026 !isChangeApp) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                    ui.printLine();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                    ui.showWelcomeBackMessage();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        ui.closeScanner();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        storage.saver(currentPerson);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        ui.showExitMessage();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * Main executable code."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * @param args arguments from command line"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        new PlanNus().run();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Khenus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerroldlam": 2,
      "harryleecp": 1,
      "Khenus": 92
    }
  },
  {
    "path": "src/main/java/seedu/duke/apps/academicplanner/AcademicPlannerApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "package seedu.duke.apps.academicplanner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "import seedu.duke.apps.moduleloader.ModuleLoader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "import seedu.duke.global.App;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "import seedu.duke.global.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "import seedu.duke.global.objects.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import static seedu.duke.parser.AppParser.ACADEMIC_PLANNER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Khenus"
        },
        "content": "//@@author Khenus"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Khenus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Khenus"
        },
        "content": " * Class representing the Academic Planner Application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Khenus"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Khenus"
        },
        "content": "public class AcademicPlannerApp extends App {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private static final String NEW_LINE \u003d \"\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private static final String WELCOME_MESSAGE \u003d \"Welcome to Academic Planner!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private static final String EXIT_MESSAGE \u003d \"Thank you for using Academic Planner!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private static final String COMMANDS_LIST \u003d \"Available commands are:\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            + \"\\tadd \u003cmodule code\u003e\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            + \"\\tedit \u003cmodule code\u003e\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            + \"\\tremove \u003cmodule code\u003e\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            + \"\\tdetails \u003cmodule code\u003e\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            + \"\\tsearch \u003cmodule code key\u003e\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            + \"\\tcapcalc\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            + \"\\tview\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            + \"\\thelp\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            + \"\\texit\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private final ModuleLoader allModules;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private final Person currentPerson;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * Default constructor for Academic Planner App."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * @param allModules all modules offered by NUS"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * @param currentPerson current user"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * @param ui ui of PlanNUS"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public AcademicPlannerApp(ModuleLoader allModules, Person currentPerson, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        this.allModules \u003d allModules;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        this.currentPerson \u003d currentPerson;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * Main entry point for the Academic Planner Application."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        showWelcomeMessage();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                ui.showAcademicAwaitCommand();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                ui.printLine();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                String userInput \u003d ui.getScanner().nextLine();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                Command commandInput \u003d AcademicPlannerParser.parse(userInput, allModules, currentPerson, ui, storage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                commandInput.execute();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                if (commandInput.getIsChangeApp()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                    setIsChangeApp(commandInput.getIsChangeApp());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                    setCurrentApp(commandInput.getNewApp());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                    setIsChangeApp(false);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                    setCurrentApp(ACADEMIC_PLANNER);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                isExit \u003d commandInput.getIsExit();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        showExitMessage();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * Prints welcome message for Academic Planner."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private void showWelcomeMessage() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        System.out.println(WELCOME_MESSAGE + NEW_LINE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        System.out.println(COMMANDS_LIST);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * Prints exit message for Academic Planner."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private void showExitMessage() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        System.out.println(EXIT_MESSAGE);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Khenus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vanessa-kang": 8,
      "harryleecp": 1,
      "Khenus": 88
    }
  },
  {
    "path": "src/main/java/seedu/duke/apps/academicplanner/AcademicPlannerParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "package seedu.duke.apps.academicplanner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import seedu.duke.apps.academicplanner.commands.AddModuleCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import seedu.duke.apps.academicplanner.commands.EditModuleCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import seedu.duke.apps.academicplanner.commands.RemoveModuleCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import seedu.duke.apps.academicplanner.commands.SearchModulesCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import seedu.duke.apps.academicplanner.commands.ModuleDetailsCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import seedu.duke.apps.academicplanner.commands.PrintCalenderCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import seedu.duke.apps.academicplanner.commands.PrintHelpCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "import seedu.duke.apps.moduleloader.ModuleLoader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "import seedu.duke.global.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import seedu.duke.global.exceptions.CommandParserException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "import seedu.duke.global.objects.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import static seedu.duke.parser.AppParser.CAP_CALCULATOR;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "//@@author jerroldlam"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": " * Class representing the parser for the academic parser. Used in the academic parser app."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "public class AcademicPlannerParser {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private static final int COMMAND_INDEX \u003d 0;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private static final int MODULE_CODE_INDEX \u003d 1;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private static final int CORRECT_COMMAND_LENGTH \u003d 2;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    public static final String NEW_LINE \u003d \"\\n\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private static final String EXITING_CURRENT_COMMAND \u003d \"Exiting current command back to Academic Planner Main Menu.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private static final String ERROR_INVALID_COMMAND \u003d \"INVALID COMMAND\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private static final String ERROR_NO_PARAMETER \u003d \" NO PARAMETER AFTER COMMAND\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private static final String ERROR_IN_ACADPLAN \u003d \"Sorry, you are already in Academic Planner!\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private static final String ADD_COMMAND \u003d \"ADD\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private static final String EDIT_COMMAND \u003d \"EDIT\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private static final String REMOVE_COMMAND \u003d \"REMOVE\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private static final String VIEW_COMMAND \u003d \"VIEW\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private static final String SEARCH_COMMAND \u003d \"SEARCH\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private static final String HELP_COMMAND \u003d \"HELP\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private static final String EXIT_COMMAND \u003d \"EXIT\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private static final String DETAILS_COMMAND \u003d \"DETAILS\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private static final String ACADEMIC_PLANNER_COMMAND \u003d \"ACADPLAN\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private static final String TO_CAP_CALCULATOR_COMMAND \u003d \"CAPCALC\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * Command to process the user inputs and to return the intended command with the correct parameters."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * @param userInput input of user"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * @param allModules data of all modules offered by NUS"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * @param currentPerson person using the app"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * @param ui ui for output"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * @return Command to be executed"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * @throws CommandParserException to return with error message"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    public static Command parse(String userInput, ModuleLoader allModules, Person currentPerson, Ui ui, Storage storage)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        throws CommandParserException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        String[] inputs \u003d processInput(userInput);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        String userCommand \u003d inputs[COMMAND_INDEX];"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        Scanner in \u003d ui.getScanner();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        if (userCommand.equals(ADD_COMMAND) \u0026\u0026 hasParameter(inputs)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            return new AddModuleCommand(allModules, currentPerson, ui, inputs[MODULE_CODE_INDEX], storage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        } else if (userCommand.equals(EDIT_COMMAND) \u0026\u0026 hasParameter(inputs)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            return new EditModuleCommand(allModules, currentPerson, ui, inputs[MODULE_CODE_INDEX], storage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        } else if (userCommand.equals(REMOVE_COMMAND) \u0026\u0026 hasParameter(inputs)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            return new RemoveModuleCommand(allModules, currentPerson, inputs[MODULE_CODE_INDEX], storage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        } else if (userCommand.equals(VIEW_COMMAND)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            return new PrintCalenderCommand(currentPerson, in);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        } else if (userCommand.equals(HELP_COMMAND)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            return new PrintHelpCommand();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        } else if (userCommand.equals(DETAILS_COMMAND) \u0026\u0026 hasParameter(inputs)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            return new ModuleDetailsCommand(allModules, inputs[MODULE_CODE_INDEX]);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        } else if (userCommand.equals(SEARCH_COMMAND) \u0026\u0026 hasParameter(inputs)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            return new SearchModulesCommand(allModules, inputs[MODULE_CODE_INDEX]);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        } else if (userCommand.equals(TO_CAP_CALCULATOR_COMMAND)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            return new Command(true, true, CAP_CALCULATOR);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        } else if (userCommand.equals(EXIT_COMMAND)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            return new Command(true);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            String errorMessage \u003d determineError(inputs);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            throw new CommandParserException(errorMessage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * Processes user input to remove whitespaces and return a string array."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * @param userInput user input"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * @return string array"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private static String[] processInput(String userInput) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        userInput \u003d userInput.replaceAll(\"\\\\s+\",\" \");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        String[] inputs \u003d userInput.toUpperCase().split(\" \",2);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        return inputs;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * Checks for the type of error and returns corresponding message."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * @param inputs user input"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * @return error message"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private static String determineError(String[] inputs) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        switch (inputs[COMMAND_INDEX]) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        case ADD_COMMAND:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            return (\"ADD COMMAND :\" + ERROR_NO_PARAMETER"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "                    + NEW_LINE + EXITING_CURRENT_COMMAND);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        case EDIT_COMMAND:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            return (\"EDIT COMMAND :\" + ERROR_NO_PARAMETER"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "                    + NEW_LINE + EXITING_CURRENT_COMMAND);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        case REMOVE_COMMAND:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            return (\"REMOVE COMMAND :\" + ERROR_NO_PARAMETER"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "                    + NEW_LINE + EXITING_CURRENT_COMMAND);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        case SEARCH_COMMAND:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            return (\"SEARCH COMMAND :\" + ERROR_NO_PARAMETER"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "                    + NEW_LINE + EXITING_CURRENT_COMMAND);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        case DETAILS_COMMAND:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            return (\"DETAILS COMMAND :\" + ERROR_NO_PARAMETER"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "                    + NEW_LINE + EXITING_CURRENT_COMMAND);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        case ACADEMIC_PLANNER_COMMAND:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            return (ERROR_IN_ACADPLAN"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "                    + NEW_LINE + EXITING_CURRENT_COMMAND);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            return (ERROR_INVALID_COMMAND + NEW_LINE + EXITING_CURRENT_COMMAND);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * Returns true if input has parameter attached at the end after command,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * else returns false."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * @param inputs user input"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * @return true or false"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private static boolean hasParameter(String[] inputs) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        return inputs.length \u003d\u003d CORRECT_COMMAND_LENGTH;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vanessa-kang": 8,
      "jerroldlam": 128,
      "harryleecp": 10,
      "Khenus": 2
    }
  },
  {
    "path": "src/main/java/seedu/duke/apps/academicplanner/commands/AddModuleCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Khenus"
        },
        "content": "package seedu.duke.apps.academicplanner.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.apps.academicplanner.commons.AddUtils;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.apps.academicplanner.commons.ModuleValidator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.apps.academicplanner.exceptions.AcademicException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import seedu.duke.apps.moduleloader.ModuleLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.global.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.global.LoggingTool;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.global.objects.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "//@@author jerroldlam"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": " * Class representing an add module command from the academic planner."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "public class AddModuleCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    public static final String ERROR_INVALID_INTEGER \u003d \"INVALID INTEGER\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private static final String ERROR_INVALID_SEMESTER_INDEX \u003d \"INVALID SEMESTER INDEX\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private static final String ERROR_INVALID_GRADE \u003d \"INVALID GRADE VALUE\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private static final String ERROR_NOT_OFFERED \u003d \" IS NOT OFFERED BY NUS\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private static final String ERROR_DUPLICATE_MOD \u003d \"You already have this mod on your calendar!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private static final String VALID_GRADES \u003d \"Valid grades are:\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            + \"\\tLetter Grades: A+, A, A-, B+, B, B-, C+, C, D+, D, F\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            + \"\\tSpecial Grades: CS, CU, S, U, W, IC, IP, AUD, WU, EXE\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            + \"\\tIf you have yet to have a grade for the module: NT\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private static final String VALID_SEMESTERS \u003d \"\\tValid semesters are integers from 1 to 10, inclusive\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private static final String LOG_FILE_NAME \u003d \"AddModuleCommand.log\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private static final String LOGGER_NAME \u003d \"AddModuleCommand\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private static Logger logger;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private static FileHandler fh;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private AddUtils addUtils;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private ModuleValidator moduleValidator;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private Person currentPerson;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private Scanner in;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * Default constructor for Add Module command."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * @param allModules all modules offered by NUS"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * @param currentPerson current user"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * @param ui Ui"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * @param moduleCode module code"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    public AddModuleCommand(ModuleLoader allModules, Person currentPerson, Ui ui, String moduleCode, Storage storage) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        this.addUtils \u003d new AddUtils(allModules, currentPerson);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        this.moduleValidator \u003d new ModuleValidator(allModules, currentPerson);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        this.in \u003d ui.getScanner();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        this.currentPerson \u003d currentPerson;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * Adds a module to the user\u0027s academic calendar if it exists in FullModule,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * else does not add module into user\u0027s academic calendar."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * Validates user\u0027s input semester and grade."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * If either is invalid, does not add module into user\u0027s academic calendar."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * Updates user\u0027s statistics as well."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    public void execute() throws AcademicException, IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        initialiseLogger();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        logger.log(Level.INFO,\"Executing add command.\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        validateModuleCode();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        int semesterValue \u003d getSemesterValue();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        String gradeValue \u003d getGradeValue();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        int moduleCredit \u003d addUtils.getModuleCreditForModule(moduleCode);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        assertInputs(semesterValue, moduleCredit);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        addUtils.addModuleToUser(moduleCode, semesterValue, gradeValue, moduleCredit);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        logger.log(Level.INFO,\"Finished executing add command.\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        fh.close();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        storage.saver(currentPerson);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * Prompts and accepts user input for grade value."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * Also checks for grade value validity."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * @return Valid Grade value"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * @throws AcademicException when invalid grade value is given"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private String getGradeValue() throws AcademicException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        promptUserToEnterGrade();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        String gradeValue \u003d in.nextLine().trim().toUpperCase();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        validateInputGrade(gradeValue);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        return gradeValue;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * Prompts and accepts user input for semester value."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * Also checks for semester value validity."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * @return valid semester value"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * @throws AcademicException when invalid semester value is given"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private int getSemesterValue() throws AcademicException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        promptUserToEnterSemester();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        String userInput \u003d in.nextLine().trim();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        int semesterValue \u003d validateInputSemester(userInput);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        return semesterValue;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * Initialises logger for use."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * @throws IOException when logger fails to initialise"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private void initialiseLogger() throws IOException {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        fh \u003d new FileHandler(LOG_FILE_NAME);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        logger \u003d new LoggingTool(LOGGER_NAME,fh).initialize();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * Validates critical inputs via assertions."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * @param semesterValue input semester value"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * @param moduleCredit module credit retrieved from NUSMODS API"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private void assertInputs(int semesterValue, int moduleCredit) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        assert semesterValue \u003e 0;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        assert moduleCredit \u003e\u003d 0;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * Throws AcademicException if the module code is not offered by NUS,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * or module is already taken by user."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * @throws AcademicException thrown when invalid module code is requested to be added"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private void validateModuleCode() throws AcademicException {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        if (!moduleValidator.isModOfferedByNus(moduleCode)) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            logger.log(Level.WARNING,\"Module entered not offered by NUS.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            fh.close();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            throw new AcademicException(moduleCode + ERROR_NOT_OFFERED);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        if (moduleValidator.isModTakenByUser(moduleCode)) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            logger.log(Level.WARNING,\"Module entered is duplicated.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            fh.close();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            throw new AcademicException(ERROR_DUPLICATE_MOD);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * Validates user inputs and returns semester value if inputs are valid,"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * else throws Academic Exception."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * @param userInput semester value"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * @return semesterIndex"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * @throws AcademicException thrown when any input is invalid"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private int validateInputSemester(String userInput) throws AcademicException {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        int semesterValue;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            semesterValue \u003d Integer.parseInt(userInput);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            logger.log(Level.WARNING,\"Semester entered is not an integer.\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            fh.close();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            throw new AcademicException(ERROR_INVALID_INTEGER);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        if (!ModuleValidator.isValidSemester(semesterValue)) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            logger.log(Level.WARNING,\"Semester entered is invalid.\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            fh.close();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            throw new AcademicException(ERROR_INVALID_SEMESTER_INDEX);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        return semesterValue;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * Prints prompt and help messages for user to enter module\u0027s grade."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private void promptUserToEnterGrade() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        System.out.println(\"Grade received for \" + moduleCode.toUpperCase() + \"?\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        System.out.println(VALID_GRADES);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * Prints prompt and help messages for user to enter module\u0027s semester taken."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private void promptUserToEnterSemester() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        System.out.println(\"Semester you plan to take \" + moduleCode.toUpperCase() + \"?\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        System.out.println(VALID_SEMESTERS);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * Throws exception if invalid grade is entered."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * @param gradeValue user input grade"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * @throws AcademicException thrown when invalid grade is entered"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private void validateInputGrade(String gradeValue) throws AcademicException {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        if (!moduleValidator.isValidGrade(gradeValue)) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            logger.log(Level.WARNING,\"Grade entered is invalid.\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            fh.close();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            throw new AcademicException(ERROR_INVALID_GRADE);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerroldlam": 203,
      "harryleecp": 3,
      "Khenus": 10
    }
  },
  {
    "path": "src/main/java/seedu/duke/apps/academicplanner/commands/EditModuleCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Khenus"
        },
        "content": "package seedu.duke.apps.academicplanner.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.apps.academicplanner.commons.EditUtils;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.apps.academicplanner.commons.ModuleValidator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.apps.academicplanner.exceptions.AcademicException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import seedu.duke.apps.moduleloader.ModuleLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.global.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.global.objects.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "//@@author harryleecp"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harryleecp"
        },
        "content": " * Class representing an edit module command from the academic planner."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harryleecp"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "public class EditModuleCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    private static final String EDIT_SEMESTER \u003d \"1\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    private static final String EDIT_GRADE \u003d \"2\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    private static final String ERROR_INVALID_MODULE \u003d \"The module you entered is not offered by NUS\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    private static final String ERROR_NOT_ADDED \u003d \"You have not added this module into your list yet\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    private static final String ERROR_EDIT_OPTION \u003d \"Number entered does not correspond to any feature\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public static final String PROMPT_EDIT_CHOICES \u003d \"Enter the number corresponding to the feature you wish to edit:\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            + \"\\t1) Semester\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            + \"\\t2) Grade\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    private EditUtils editUtils;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    private ModuleValidator moduleValidator;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    private Person currentPerson;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    private Scanner in;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public EditModuleCommand(ModuleLoader allModules, Person currentPerson, Ui ui, String moduleCode, Storage storage) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        this.editUtils \u003d new EditUtils(allModules, currentPerson);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        this.moduleValidator \u003d new ModuleValidator(allModules, currentPerson);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        this.in \u003d ui.getScanner();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        this.currentPerson \u003d currentPerson;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     * Allows user to edit the module entry of his academic calendar."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     * Parameters allowed to change are semesterIndex or Grade."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public void execute() throws AcademicException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        if (!moduleValidator.isModOfferedByNus(moduleCode)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            throw new AcademicException(ERROR_INVALID_MODULE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        } else if (moduleValidator.isModTakenByUser(moduleCode)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            System.out.println(PROMPT_EDIT_CHOICES);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            String choice \u003d in.nextLine().trim();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            if (choice.equals(EDIT_SEMESTER)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                editUtils.editModuleSemester(in, moduleCode);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                storage.saver(currentPerson);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            } else if (choice.equals(EDIT_GRADE)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                editUtils.editModuleGrade(in, moduleCode);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                storage.saver(currentPerson);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                throw new AcademicException(ERROR_EDIT_OPTION);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            throw new AcademicException(ERROR_NOT_ADDED);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerroldlam": 1,
      "harryleecp": 61,
      "Khenus": 9
    }
  },
  {
    "path": "src/main/java/seedu/duke/apps/academicplanner/commands/ModuleDetailsCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "package seedu.duke.apps.academicplanner.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "import seedu.duke.apps.academicplanner.commons.ModuleValidator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "import seedu.duke.apps.academicplanner.commons.PrintUtils;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "import seedu.duke.apps.academicplanner.exceptions.AcademicException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "import seedu.duke.apps.moduleloader.ModuleLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "import seedu.duke.global.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "import seedu.duke.global.objects.FullModule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "//@@author vanessa-kang"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "public class ModuleDetailsCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    private static final String ERROR_NOT_OFFERED \u003d \" IS NOT OFFERED BY NUS\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    private final ModuleLoader allModules;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    private ModuleValidator moduleValidator;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    private PrintUtils printUtils \u003d new PrintUtils();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    FullModule module;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    public ModuleDetailsCommand(ModuleLoader allModules, String moduleCode) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        this.allModules \u003d allModules;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        this.moduleValidator \u003d new ModuleValidator(allModules);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    public void execute() throws AcademicException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        validateModuleCode();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        int mapIndex \u003d allModules.getModuleMap().get(moduleCode);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        module \u003d allModules.getModuleFullDetails()[mapIndex];"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        printUtils.printModuleDetails(module);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    private void validateModuleCode() throws AcademicException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        if (!moduleValidator.isModOfferedByNus(moduleCode)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "            throw new AcademicException(moduleCode + ERROR_NOT_OFFERED);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vanessa-kang": 41
    }
  },
  {
    "path": "src/main/java/seedu/duke/apps/academicplanner/commands/PrintCalenderCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "package seedu.duke.apps.academicplanner.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "import seedu.duke.apps.academicplanner.commons.AcademicCalendarSorter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "import seedu.duke.apps.academicplanner.commons.ModuleValidator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "import seedu.duke.apps.academicplanner.commons.PrintUtils;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "import seedu.duke.apps.academicplanner.exceptions.AcademicException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "import seedu.duke.global.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "import seedu.duke.global.objects.PartialModule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "import seedu.duke.global.objects.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "//@@author vanessa-kang"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": " * Class representing a print module command from the academic planner."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "public class PrintCalenderCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    private static final String FULL_PRINT_COMMAND \u003d \"Full\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    private static final String EMPTY_MODULE_LIST \u003d \"Your academic calendar is currently empty!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    private static final String ERROR_INVALID_COMMAND \u003d \"Invalid command entered\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    private static final String ERROR_INVALID_SEMESTER \u003d \"Invalid semester entered.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    private static final String PROMPT_USER \u003d \"Printing command received.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "            + \"\\tTo print the whole Academic Calendar, type \u003cFull\u003e\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "            + \"\\tTo print the desired semester only, type a number from 1 to 10, inclusive.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    private PrintUtils printUtils \u003d new PrintUtils();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    private final ArrayList\u003cPartialModule\u003e modulesList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    private Scanner in;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    private AcademicCalendarSorter sorter;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "     * Default constructor for print calendar command."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "     * @param currentPerson current user"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "     * @param in PlanNUS ui"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    public PrintCalenderCommand(Person currentPerson, Scanner in) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        this.modulesList \u003d currentPerson.getModulesList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        sorter \u003d new AcademicCalendarSorter(modulesList);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        this.in \u003d in;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "     * Execution of print command where user will be prompted of choice for full calendar or semester."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    public void execute() throws AcademicException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        if (modulesList.size() \u003e 0) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "            System.out.println(PROMPT_USER);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "            String userInput \u003d in.nextLine().trim();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "            if (userInput.equalsIgnoreCase(FULL_PRINT_COMMAND)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "                printFullCalendar();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "                    int selectedSemester \u003d Integer.parseInt(userInput);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "                    if (ModuleValidator.isValidSemester(selectedSemester)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "                        sortAndPrint(selectedSemester);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "                        throw new AcademicException(ERROR_INVALID_SEMESTER);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "                } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "                    throw new AcademicException(ERROR_INVALID_COMMAND);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "            System.out.println(EMPTY_MODULE_LIST);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    //@@author jerroldlam"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * Prints full academic calendar."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private void printFullCalendar() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        ArrayList\u003cPartialModule\u003e sortedBySem \u003d new ArrayList\u003c\u003e(modulesList);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        sortedBySem.sort(Comparator.comparing(PartialModule::getSemesterIndex));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        printUtils.printFullCalendar(sortedBySem);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * Sorts and prints the semester\u0027s module."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * @param selectedSemester semester to print"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private void sortAndPrint(int selectedSemester) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        ArrayList\u003cPartialModule\u003e sortedList \u003d sorter.sortBySemester(selectedSemester);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        printUtils.printBySemester(sortedList, selectedSemester);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vanessa-kang": 71,
      "jerroldlam": 20
    }
  },
  {
    "path": "src/main/java/seedu/duke/apps/academicplanner/commands/PrintHelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "package seedu.duke.apps.academicplanner.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "import seedu.duke.global.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "//@@author jerroldlam"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": " * Class representing a print help command from the academic planner."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "public class PrintHelpCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private static final String COMMANDS_LIST \u003d \"____________________________________________________________\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            + \"Available commands are:\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            + \"\\tadd \u003cmodule code\u003e\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            + \"\\tedit \u003cmodule code\u003e\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            + \"\\tremove \u003cmodule code\u003e\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            + \"\\tdetails \u003cmodule code\u003e\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            + \"\\tsearch \u003cmodule code key\u003e\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            + \"\\tcapcalc\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            + \"\\tview\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            + \"\\thelp\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            + \"\\texit\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    public PrintHelpCommand() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        //Constructor is intentionally left blank"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * Prints commands list for academic planner."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        System.out.println(COMMANDS_LIST);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vanessa-kang": 4,
      "jerroldlam": 29
    }
  },
  {
    "path": "src/main/java/seedu/duke/apps/academicplanner/commands/RemoveModuleCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Khenus"
        },
        "content": "package seedu.duke.apps.academicplanner.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.apps.academicplanner.commons.ModuleValidator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.apps.academicplanner.commons.RemoveUtils;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.apps.academicplanner.exceptions.AcademicException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import seedu.duke.apps.moduleloader.ModuleLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.global.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.global.objects.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "//@@author harryleecp"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harryleecp"
        },
        "content": " * Class representing an remove module command from the academic planner."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harryleecp"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "public class RemoveModuleCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    private static final String ERROR_INVALID_MODULE \u003d \"The module you entered is not offered by NUS\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    private static final String ERROR_NOT_ADDED \u003d \"You have not added this module into your list yet\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    private static final String MODULE_REMOVED \u003d \"Module removed successfully.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    private RemoveUtils removeUtils;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    private ModuleValidator moduleValidator;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    private Person currentPerson;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public RemoveModuleCommand(ModuleLoader allModules, Person currentPerson, String moduleCode, Storage storage) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        this.removeUtils \u003d new RemoveUtils(currentPerson);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        this.moduleValidator \u003d new ModuleValidator(allModules, currentPerson);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        this.currentPerson \u003d currentPerson;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     * Removes moduleCode from user\u0027s academic calendar if it exists,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     * else prompts user of error."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public void execute() throws AcademicException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        if (!moduleValidator.isModOfferedByNus(moduleCode)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            throw new AcademicException(ERROR_INVALID_MODULE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        } else if (moduleValidator.isModTakenByUser(moduleCode)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            removeUtils.removeModuleFromUserModuleList(moduleCode);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            System.out.println(MODULE_REMOVED);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            storage.saver(currentPerson);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            throw new AcademicException(ERROR_NOT_ADDED);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "harryleecp": 43,
      "Khenus": 7
    }
  },
  {
    "path": "src/main/java/seedu/duke/apps/academicplanner/commands/SearchModulesCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "package seedu.duke.apps.academicplanner.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "import seedu.duke.apps.moduleloader.ModuleLoader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "import seedu.duke.apps.academicplanner.commons.PrintUtils;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "import seedu.duke.global.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "import seedu.duke.global.objects.FullModule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "//@@author vanessa-kang"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "public class SearchModulesCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    private final ModuleLoader allModules;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    final ArrayList\u003cString\u003e matchList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    private final int maxResults \u003d 10;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    private PrintUtils printUtils \u003d new PrintUtils();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    public SearchModulesCommand(ModuleLoader allModules, String keyword) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        this.allModules \u003d allModules;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        FullModule[] modules \u003d allModules.getModuleFullDetails();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        for (FullModule item: modules) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "            if (item.getModuleCode().contains(keyword)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "                matchList.add(item.getModuleCode());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "            if (matchList.size() \u003d\u003d maxResults) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        printUtils.printMatchModules(matchList, maxResults);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vanessa-kang": 37
    }
  },
  {
    "path": "src/main/java/seedu/duke/apps/academicplanner/commons/AcademicCalendarSorter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "package seedu.duke.apps.academicplanner.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.global.objects.PartialModule;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "//@@author jerroldlam"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": " * Class representing sorter for academic calendar."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "public class AcademicCalendarSorter {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private static final String ERROR_EMPTY_CALENDAR \u003d \"Your academic calendar is empty.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private ArrayList\u003cPartialModule\u003e userModuleList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    public AcademicCalendarSorter(ArrayList\u003cPartialModule\u003e moduleList) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        userModuleList \u003d moduleList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * Sorts module list by semester index and return module list of chosen semester."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * @param semesterIndex semesterIndex to search for"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * @return module list of the chosen semester"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    public ArrayList\u003cPartialModule\u003e sortBySemester(int semesterIndex) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        if (userModuleList.size() \u003c 1) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            System.out.println(ERROR_EMPTY_CALENDAR);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        ArrayList\u003cPartialModule\u003e sortedList \u003d processCalendar(semesterIndex);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        return sortedList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * Collects modules which are from a given semester into an arraylist and returns it."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * @param semesterIndex semester to sort by"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * @return sortedList"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    public ArrayList\u003cPartialModule\u003e processCalendar(int semesterIndex) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        ArrayList\u003cPartialModule\u003e sortedList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        for (PartialModule m : userModuleList) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            if (m.getSemesterIndex() \u003d\u003d semesterIndex) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "                sortedList.add(m);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        return sortedList;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerroldlam": 47,
      "Khenus": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/apps/academicplanner/commons/AddUtils.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Khenus"
        },
        "content": "package seedu.duke.apps.academicplanner.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.apps.moduleloader.ModuleLoader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.apps.capcalculator.commons.CalculatorUtils;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.global.objects.PartialModule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.global.objects.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "//@@author jerroldlam"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": " * Class representing add module utilities from the add module command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "public class AddUtils {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private static final int FROM_ADD \u003d 1;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private final ModuleLoader allModules;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private final ArrayList\u003cPartialModule\u003e modulesList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private final HashMap\u003cString, Integer\u003e modulesAddedMap;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private final CalculatorUtils calculatorUtils;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * Default constructor for AddUtils."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * @param allModules all modules offered by NUS"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * @param currentPerson current User"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    public AddUtils(ModuleLoader allModules, Person currentPerson) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        this.allModules \u003d allModules;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        this.modulesList \u003d currentPerson.getModulesList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        this.modulesAddedMap \u003d currentPerson.getModulesAddedMap();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        this.calculatorUtils \u003d new CalculatorUtils(currentPerson);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * Creates a new instance of a module of the parameters and adds it into the"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * hashmap and array list of user modules."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * @param moduleCode module to be added"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * @param semesterValue semester that module is taken in"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * @param gradeValue grade achieved for module"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * @param moduleCredit module\u0027s credit weightage"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    public void addModuleToUser(String moduleCode, int semesterValue,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "                                String gradeValue, int moduleCredit, int... from) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        PartialModule newModuleToAdd \u003d new PartialModule(moduleCode, semesterValue, gradeValue, moduleCredit);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        populate(moduleCode, newModuleToAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        calculatorUtils.updateCap(FROM_ADD, newModuleToAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        if (from.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            System.out.println(newModuleToAdd.getModuleCode()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "                    + \" added into Semester \" + semesterValue + \".\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * Populates the user\u0027s arraylist and hashmap with the new module."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * @param moduleCode module code to be entered"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * @param newModuleToAdd module object to be added"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private void populate(String moduleCode, PartialModule newModuleToAdd) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        modulesList.add(newModuleToAdd);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        modulesAddedMap.put(moduleCode, modulesList.size() - 1);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * Function to return module credits for module code."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * @param moduleCode string of module code"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * @return int of module credit"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    public int getModuleCreditForModule(String moduleCode) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        int mapIndex \u003d allModules.getModuleMap().get(moduleCode);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        int moduleCredit \u003d allModules.getModuleFullDetails()[mapIndex].getModuleCredit();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        assert moduleCredit \u003e\u003d 0;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        return moduleCredit;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerroldlam": 69,
      "Khenus": 9
    }
  },
  {
    "path": "src/main/java/seedu/duke/apps/academicplanner/commons/EditUtils.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "package seedu.duke.apps.academicplanner.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "import seedu.duke.apps.moduleloader.ModuleLoader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "import seedu.duke.apps.capcalculator.commons.CalculatorUtils;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "import seedu.duke.apps.academicplanner.exceptions.AcademicException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.global.objects.PartialModule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.global.objects.Person;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "//@@author harryleecp"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harryleecp"
        },
        "content": " * Class representing edit module utilities from the edit module command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harryleecp"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "public class EditUtils {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    private final ArrayList\u003cPartialModule\u003e modulesList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    private final HashMap\u003cString, Integer\u003e modulesAddedMap;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    private final ModuleValidator modChecker;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    private final CalculatorUtils calculatorUtils;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     * Default constructor for EditUtils."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     * @param allModules all modules offered by NUS"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     * @param currentPerson current User"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public EditUtils(ModuleLoader allModules, Person currentPerson) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        this.modulesList \u003d currentPerson.getModulesList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        this.modulesAddedMap \u003d currentPerson.getModulesAddedMap();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        this.modChecker \u003d new ModuleValidator(allModules, currentPerson);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        this.calculatorUtils \u003d new CalculatorUtils(currentPerson);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    private static final int FROM_EDIT \u003d 2;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    private static final String PROMPT_NEW_SEMESTER_VALUE \u003d \"Enter the new semester value: \";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    private static final String PROMPT_NEW_GRADE \u003d \"Enter the new grade: \";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    private static final String ERROR_INVALID_SEMESTER_INDEX \u003d \"INVALID SEMESTER INDEX\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    private static final String ERROR_INVALID_GRADE \u003d \"INVALID GRADE VALUE\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    private static final String VALID_GRADES \u003d \"Valid grades are:\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            + \"\\tLetter Grades: A+, A, A-, B+, B, B-, C+, C, D+, D, F\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            + \"\\tSpecial Grades: CS, CU, S, U, W, IC, IP, AUD, WU, EXE\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            + \"\\tIf you have yet to have a grade for the module: NT\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    private static final String VALID_SEMESTERS \u003d \"Valid semesters are integers from 1 to 10, inclusive\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     * Changes the current grade of module to the input of the user."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     * PartialModule must exist in user\u0027s list and hashmap"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     * @param in scanner"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     * @param moduleCode code of module to edit the grade"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     * @throws AcademicException invalid grade"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public void editModuleGrade(Scanner in, String moduleCode) throws AcademicException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        System.out.println(PROMPT_NEW_GRADE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        System.out.println(VALID_GRADES);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        String gradeValue \u003d in.nextLine().trim().toUpperCase();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        if (!modChecker.isValidGrade(gradeValue)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            throw new AcademicException(ERROR_INVALID_GRADE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        updateModuleGrade(moduleCode, gradeValue);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        System.out.println(\"Grade for \" + moduleCode + \" successfully updated!\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     * Updates user\u0027s module with new grade and updates user\u0027s Cap."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     * @param moduleCode module to edit"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     * @param gradeValue grade to edit to"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public void updateModuleGrade(String moduleCode, String gradeValue) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        Integer moduleIndex \u003d modulesAddedMap.get(moduleCode);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        PartialModule module \u003d modulesList.get(moduleIndex);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        updateCurrentModuleGrade(gradeValue, module);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     * Updates module to reflect the new grade."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     * @param gradeValue new grade value to reflect"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     * @param module module to edit"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    private void updateCurrentModuleGrade(String gradeValue, PartialModule module) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        double oldCap \u003d module.getCap();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        module.setGrade(gradeValue);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        double newCap \u003d module.getCap();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        calculatorUtils.updateCap(FROM_EDIT, module, oldCap, newCap);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     * Edits module semester taken when module is in user\u0027s list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     * PartialModule must exist in user\u0027s module list and hashmap."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     * @param in scanner"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     * @param moduleCode module to edit"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     * @throws AcademicException invalid semester index"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public void editModuleSemester(Scanner in, String moduleCode) throws AcademicException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        System.out.println(PROMPT_NEW_SEMESTER_VALUE);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        System.out.println(VALID_SEMESTERS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        String newValue \u003d in.nextLine().trim();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        if (!ModuleValidator.isValidSemester(Integer.parseInt(newValue))) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            throw new AcademicException(ERROR_INVALID_SEMESTER_INDEX);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        updateModuleSemester(moduleCode, newValue);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        System.out.println(\"Semester for \" + moduleCode + \" successfully updated!\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     * Finds the module and updates the semester taken."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     * @param moduleCode module to edit"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     * @param newValue new semester index"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public void updateModuleSemester(String moduleCode, String newValue) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        Integer moduleIndex \u003d modulesAddedMap.get(moduleCode);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        PartialModule item \u003d modulesList.get(moduleIndex);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        item.setSemesterIndex(Integer.parseInt(newValue));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        assert item.getSemesterIndex() \u003d\u003d Integer.parseInt(newValue);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vanessa-kang": 9,
      "harryleecp": 115,
      "Khenus": 2
    }
  },
  {
    "path": "src/main/java/seedu/duke/apps/academicplanner/commons/ModuleValidator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "package seedu.duke.apps.academicplanner.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "import seedu.duke.apps.moduleloader.ModuleLoader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.global.objects.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "//@@author jerroldlam"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": " * Class of a module validation object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "public class ModuleValidator {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private static final int STARTING_SEMESTER_INDEX \u003d 1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private static final int FINAL_SEMESTER_INDEX \u003d 10;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private final ModuleLoader allModules;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private final HashMap\u003cString, Integer\u003e modulesAddedMap;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * Default constructor for ModuleValidator."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * @param allModules all modules offered by NUS"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * @param currentPerson current User"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    public ModuleValidator(ModuleLoader allModules, Person currentPerson) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        this.allModules \u003d allModules;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        this.modulesAddedMap \u003d currentPerson.getModulesAddedMap();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * Overload constructor for EditUtils."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * @param allModules all modules offered by NUS"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    public ModuleValidator(ModuleLoader allModules) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        this.allModules \u003d allModules;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        this.modulesAddedMap \u003d null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * Returns true if module code is offered by NUS,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * else returns false."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * @param moduleCode input module code"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * @return boolean of module code in FullModule"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    public boolean isModOfferedByNus(String moduleCode) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        boolean isOffered \u003d allModules.getModuleMap().get(moduleCode) !\u003d null;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        return (isOffered);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * Returns true if module is in the user\u0027s academic calendar,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * else returns false."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * @param moduleCode moduleCode to check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    public boolean isModTakenByUser(String moduleCode) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        return (modulesAddedMap.containsKey(moduleCode));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * Returns true if semsesterIndex is a valid semesterIndex,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * else returns false."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * @param semesterIndex semesterIndex to check"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    public static boolean isValidSemester(int semesterIndex) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        return (semesterIndex \u003e\u003d STARTING_SEMESTER_INDEX \u0026\u0026 semesterIndex \u003c\u003d FINAL_SEMESTER_INDEX);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * Returns true if grade is a Grade option offered by NUS,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * else returns false."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * @param grade grade to check"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    public boolean isValidGrade(String grade) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        switch (grade.toUpperCase()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        case \"A+\":"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            //Fallthrough"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        case \"A\":"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            //Fallthrough"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        case \"A-\":"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            //Fallthrough"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        case \"B+\":"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            //Fallthrough"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        case \"B\":"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            //Fallthrough"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        case \"B-\":"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            //Fallthrough"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        case \"C+\":"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            //Fallthrough"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        case \"C\":"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            //Fallthrough"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        case \"D+\":"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            //Fallthrough"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        case \"D\":"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            //Fallthrough"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        case \"F\":"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            //Fallthrough"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        case \"CS\":           //Completed Satisfactorily"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            //Fallthrough"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        case \"CU\":           //Completed Unsatisfactorily"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            //Fallthrough"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        case \"S\":            //Satisfactory"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            //Fallthrough"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        case \"U\":            //Unsatisfactory"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            //Fallthrough"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        case \"W\":            //Withdrawn"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            //Fallthrough"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        case \"IC\":           //Incomplete"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            //Fallthrough"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        case \"IP\":           //In progress"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            //Fallthrough"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        case \"AUD\":          //Audit"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            //Fallthrough"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        case \"WU\":           //Withdrawn from University"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            //Fallthrough"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        case \"EXE\" :         //Exempted"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            //Fallthrough"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        case \"NT\":           //Not taken"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vanessa-kang": 5,
      "jerroldlam": 123,
      "Khenus": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/apps/academicplanner/commons/PrintUtils.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "package seedu.duke.apps.academicplanner.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "import seedu.duke.global.objects.PartialModule;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "import seedu.duke.global.objects.FullModule;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "//@@author jerroldlam"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": " * Class representing the common print methods."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "public class PrintUtils {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private static final String INDENT \u003d \"     \";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private static final String ERROR_NO_MODULES \u003d \"You have no modules added in the semester you requested!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    public PrintUtils() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        //Constructor is intentionally left blank"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * Prints out the sorted list of modules."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * @param sortedList list to be printed"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * @param selectedSemester semester chosen."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    public void printBySemester(ArrayList\u003cPartialModule\u003e sortedList, int selectedSemester) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        if (sortedList.size() \u003c 1) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            System.out.println(ERROR_NO_MODULES);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        System.out.println(INDENT + \"SEMESTER \" + selectedSemester);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        for (PartialModule item : sortedList) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            printCalendarLine(item);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    //@@author vanessa-kang"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "     * Prints a single entry of item."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "     * @param item module details to be printed"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    private void printCalendarLine(PartialModule item) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        int spacing \u003d 8 + (8 - item.getModuleCode().length());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        System.out.println(item.getModuleCode()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "                + printSpace(spacing)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "                + item.getGrade());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "     * Prints out contents of the Array list of partial modules in an intuitive format."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "     * @param sortedBySem arraylist of modules"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    public void printFullCalendar(ArrayList\u003cPartialModule\u003e sortedBySem) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        int newSem;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        int currentSem \u003d 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        for (PartialModule item : sortedBySem) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "            newSem \u003d item.getSemesterIndex();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "            if (newSem !\u003d currentSem) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "                currentSem \u003d newSem;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "                System.out.println(INDENT + \"SEMESTER \" + currentSem);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "            printCalendarLine(item);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "     * Prints out detailed information about a module."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "     * @param module FullModule object, contains all information about a module."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    public void printModuleDetails(FullModule module) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        String semOfferedStr \u003d module.getSemester().toString();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        System.out.println(module.getModuleCode() + \" \" + module.getTitle());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        System.out.println(\"\\t\" + \"Department: \" + module.getDepartment());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        System.out.println(\"\\t\" + \"Faculty: \" + module.getFaculty());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        System.out.println(\"\\t\" + \"Credits: \" + module.getModuleCredit() + \"MCs\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        System.out.println(\"\\t\" + \"Semesters offered: \" + semOfferedStr.substring(1,semOfferedStr.length() - 1));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        System.out.println(\"\\t\" + \"Prerequisites: \""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "                                + module.getPrerequisite().replaceAll(\"\\n\",\"\\n\\t\" + printSpace(15)));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        System.out.println(\"\\t\" + \"Corequisites: \""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "                                + module.getCorequisite().replaceAll(\"\\n\",\"\\n\\t\" + printSpace(13)));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        System.out.println(\"\\t\" + \"Preclusions: \""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "                                + module.getPreclusion().replaceAll(\"\\n\",\"\\n\\t\"  + printSpace(13)));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "     * Prints out list of module codes that matches the user\u0027s search key."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "     * @param matchList arrayList of module codes that matches the search key."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "     * @param maxResults maximum number of results to be printed."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    public void printMatchModules(ArrayList\u003cString\u003e matchList, int maxResults) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        String grammar \u003d matchList.size() \u003d\u003d 1 ? \"module.\" : \"modules.\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        System.out.println(\"Note: Only up to the first \" + maxResults + \" results are displayed.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        System.out.println(\"Found \" + matchList.size() + \" matching \" + grammar);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        for (String matches: matchList) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "            System.out.println(matches);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "     * Prints num spaces for indentation."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "     * @param num int of spaces to print"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "     * @return string of spaces"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    private String printSpace(int num) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        String space \u003d \"\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        for (int i \u003d 0; i \u003c num; i++) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "            space +\u003d \" \";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        return space;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerroldlam": 34,
      "vanessa-kang": 86
    }
  },
  {
    "path": "src/main/java/seedu/duke/apps/academicplanner/commons/RemoveUtils.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "package seedu.duke.apps.academicplanner.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "import seedu.duke.apps.capcalculator.commons.CalculatorUtils;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.global.objects.PartialModule;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.global.objects.Person;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "//@@author harryleecp"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harryleecp"
        },
        "content": " * Class representing remove module utilities from the remove module command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harryleecp"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "public class RemoveUtils {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    private static final int FROM_REMOVE \u003d 3;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    private final Map\u003cString, Integer\u003e modulesAddedMap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    private final ArrayList\u003cPartialModule\u003e modulesList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    private final CalculatorUtils calculatorUtils;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    private final Person currentPerson;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     * Default constructor for RemoveUtils."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     * @param currentPerson current user"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public RemoveUtils(Person currentPerson) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        this.modulesList \u003d currentPerson.getModulesList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        this.calculatorUtils \u003d new CalculatorUtils(currentPerson);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        this.modulesAddedMap \u003d currentPerson.getModulesAddedMap();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        this.currentPerson \u003d currentPerson;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     * Removes module from user\u0027s module list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     * PartialModule must exist in user\u0027s module list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     * @param moduleCode module to remove."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public void removeModuleFromUserModuleList(String moduleCode) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        final int totalNumberOfModules \u003d modulesList.size();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        Integer moduleIndex \u003d modulesAddedMap.get(moduleCode);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        PartialModule module \u003d modulesList.get(moduleIndex);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        calculatorUtils.updateCap(FROM_REMOVE, module);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        depopulate(module);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        assert modulesList.size() \u003d\u003d totalNumberOfModules - 1;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     * Removes module from both arraylist and hashmap of the user."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     * @param module module object to remove"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    private void depopulate(PartialModule module) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        modulesList.remove(module);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        updateHashmap();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     * Updates hashmap with the new module list."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    private void updateHashmap() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        HashMap\u003cString, Integer\u003e newModuleAddedMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        for (int i \u003d 0; i \u003c modulesList.size(); i++) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            newModuleAddedMap.put(modulesList.get(i).getModuleCode(), i);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        currentPerson.setModulesAddedMap(newModuleAddedMap);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vanessa-kang": 5,
      "harryleecp": 63,
      "Khenus": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/apps/academicplanner/exceptions/AcademicException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Khenus"
        },
        "content": "package seedu.duke.apps.academicplanner.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Khenus"
        },
        "content": "//@@author Khenus"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Khenus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Khenus"
        },
        "content": " * Signals that an invalid command has been given in the Academic Planner App."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Khenus"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Khenus"
        },
        "content": "public class AcademicException extends Exception {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private String errorMessage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private static final String NEW_LINE \u003d \"\\n\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private static final String EXITING_CURRENT_COMMAND \u003d \"Exiting current command back to Academic Planner Main Menu.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * Default constructor for Academic Exception."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * @param errorMessage accompanying message"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public AcademicException(String errorMessage) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        String stringToPrint \u003d errorMessage + NEW_LINE + EXITING_CURRENT_COMMAND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        this.errorMessage \u003d stringToPrint;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        return this.errorMessage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Khenus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Khenus": 27
    }
  },
  {
    "path": "src/main/java/seedu/duke/apps/capcalculator/CapCalculatorApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "package seedu.duke.apps.capcalculator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.global.App;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.global.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.global.objects.Person;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import java.math.RoundingMode;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import java.text.DecimalFormat;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import static seedu.duke.parser.AppParser.CAP_CALCULATOR;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "//@@author JuZihao"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JuZihao"
        },
        "content": " * Class representing the CAP Calculator app in PlanNUS."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JuZihao"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "public class CapCalculatorApp extends App {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private static final String NEW_LINE \u003d \"\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private static final String EXITING_CURRENT_COMMAND \u003d \"Exiting current command back to Cap Calculator Main Menu.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private static final String ERROR_INVALID_COMMAND \u003d \"INVALID COMMAND\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private static final String EXIT_MESSAGE \u003d \"Thank you for using Cap Calculator!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private static final String WELCOME_MESSAGE \u003d \"Welcome to CAP Calculator!\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            + \"Initializing your CAP...\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private static final String COMMANDS_LIST \u003d \"Available commands are:\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            + \"\\tcurrent\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            + \"\\tset target\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            + \"\\tset su\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            + \"\\tacadplan\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            + \"\\thelp\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            + \"\\texit\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private final Person currentPerson;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private final Ui ui;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private final DecimalFormat formatFinalCap \u003d new DecimalFormat(\"#.##\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    public CapCalculatorApp(Person currentPerson, Ui ui) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        this.currentPerson \u003d currentPerson;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * Main function for CAP Calculator."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        showWelcomeMessage();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        formatFinalCap.setRoundingMode(RoundingMode.UP);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "                ui.showCalculatorAwaitCommand();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "                ui.printLine();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "                String userInput \u003d ui.getScanner().nextLine();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "                Command commandInput \u003d CapCalculatorParser.parse(userInput, currentPerson, ui);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "                commandInput.execute();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "                if (commandInput.getIsChangeApp()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "                    setIsChangeApp(commandInput.getIsChangeApp());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "                    setCurrentApp(commandInput.getNewApp());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "                    setIsChangeApp(false);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "                    setCurrentApp(CAP_CALCULATOR);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "                }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "                isExit \u003d commandInput.getIsExit();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "                System.out.println(ERROR_INVALID_COMMAND + NEW_LINE + EXITING_CURRENT_COMMAND);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "                System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        showExitMessage();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * Prints out welcome message when user enters CAP Calculator."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private void showWelcomeMessage() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        System.out.println(WELCOME_MESSAGE + NEW_LINE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        System.out.println(COMMANDS_LIST);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * Prints out exit message when user enters CAP Calculator."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private void showExitMessage() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        System.out.println(EXIT_MESSAGE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JuZihao": 87,
      "Khenus": 5
    }
  },
  {
    "path": "src/main/java/seedu/duke/apps/capcalculator/CapCalculatorParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "package seedu.duke.apps.capcalculator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import seedu.duke.apps.capcalculator.commands.CurrentCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import seedu.duke.apps.capcalculator.commands.PrintHelpCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import seedu.duke.apps.capcalculator.commands.SetTargetCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.global.exceptions.CommandParserException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.global.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.global.objects.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import static seedu.duke.parser.AppParser.ACADEMIC_PLANNER;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import static seedu.duke.parser.AppParser.CAP_CALCULATOR;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "//@@author JuZihao"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JuZihao"
        },
        "content": " * Class representing the parser used in the CAP Calculator app."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JuZihao"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "public class CapCalculatorParser {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private static final String PROMPT_SU_CHOICES \u003d \"Enter the number corresponding to the method you wish to S/U:\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            + \"\\t1) Semester\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            + \"\\t2) Modules\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private static final String INVALID_COMMAND_MESSAGE \u003d \"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private static final String CURRENT_COMMAND \u003d \"CURRENT\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private static final String SET_TARGET_COMMAND \u003d \"SET TARGET\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private static final String SET_SU_COMMAND \u003d \"SET SU\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private static final String EXIT_COMMAND \u003d \"EXIT\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private static final String HELP_COMMAND \u003d \"HELP\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private static final String TO_ACADEMIC_PLANNER \u003d \"ACADPLAN\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private static final String CAP_CALCULATOR_COMMAND \u003d \"CAPCALC\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * Processes user input command and returns command to be executed."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * @param userInput user input"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * @param currentPerson user of PlanNUS"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * @param ui ui"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * @return Command to be executed"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * @throws CommandParserException thrown when an invalid command is entered"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    public static Command parse(String userInput, Person currentPerson, Ui ui) throws CommandParserException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        Scanner in \u003d ui.getScanner();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        userInput \u003d userInput.replaceAll(\"\\\\s+\",\" \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        userInput \u003d userInput.trim().toUpperCase();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        if (userInput.equals(CURRENT_COMMAND)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            return new CurrentCommand(currentPerson);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        } else if (userInput.equals(SET_TARGET_COMMAND)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            return new SetTargetCommand(currentPerson, in);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        } else if (userInput.equals((SET_SU_COMMAND))) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            promptUserForSuCommand();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            String choice \u003d in.nextLine().trim();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            return SetSuParser.parse(choice, currentPerson, ui);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        } else if (userInput.equals(HELP_COMMAND)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            return new PrintHelpCommand();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        } else if (userInput.equals(TO_ACADEMIC_PLANNER)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            return new Command(true, true, ACADEMIC_PLANNER);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        } else if (userInput.equals(EXIT_COMMAND)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            return new Command(true);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            switch (userInput) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            case CAP_CALCULATOR_COMMAND:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "                throw new CommandParserException(\"Sorry, you are already in CAP calculator!\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "                throw new CommandParserException(INVALID_COMMAND_MESSAGE);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * Prompt user to enter which S/U command to be parsed."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private static void promptUserForSuCommand() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        System.out.println(PROMPT_SU_CHOICES);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JuZihao": 71,
      "Khenus": 6
    }
  },
  {
    "path": "src/main/java/seedu/duke/apps/capcalculator/SetSuParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "package seedu.duke.apps.capcalculator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import seedu.duke.apps.capcalculator.commands.SetSuByModuleCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import seedu.duke.apps.capcalculator.commands.SetSuBySemesterCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.global.exceptions.CommandParserException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.global.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.global.objects.Person;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "//@@author JuZihao"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JuZihao"
        },
        "content": " * Class representing the parser used for set su command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JuZihao"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "public class SetSuParser {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private static final String BY_MODULES \u003d \"2\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private static final String BY_SEMESTER \u003d \"1\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private static final String INVALID_SU_ERROR \u003d \"Number entered does not correspond to any S/U method.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * Processes user input command and returns which set su command to be parsed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * @param currentPerson user of PlanNUS"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * @return Command to be executed"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * @throws CommandParserException thrown when an invalid input is entered"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    public static Command parse(String choice, Person currentPerson, Ui ui) throws CommandParserException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        if (choice.equals(BY_SEMESTER)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            return new SetSuBySemesterCommand(currentPerson, ui);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        } else if (choice.equals(BY_MODULES)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            return new SetSuByModuleCommand(currentPerson, ui);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            throw new CommandParserException(INVALID_SU_ERROR);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JuZihao": 32,
      "Khenus": 3
    }
  },
  {
    "path": "src/main/java/seedu/duke/apps/capcalculator/commands/CurrentCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "package seedu.duke.apps.capcalculator.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.global.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.global.objects.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import static seedu.duke.apps.capcalculator.commons.CalculatorUtils.formatCapToString;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "//@@author JuZihao"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JuZihao"
        },
        "content": " * Class representing the Current CAP command for CAP Calculator."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JuZihao"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "public class CurrentCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private Person currentPerson;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    public CurrentCommand(Person currentPerson) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        this.currentPerson \u003d currentPerson;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * Prints out user\u0027s current cap obtained from his/her academic calendar."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        double currentCap \u003d getCurrentCap();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        System.out.println(\"Your current now CAP is: \" + formatCapToString(currentCap));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        System.out.println(\"Number of graded MCs taken is: \" + currentPerson.getCurrentMcAfterSU());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        System.out.println(\"Total number of MCs taken is: \" + currentPerson.getCurrentMc());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * Returns user current cap."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * @return CAP"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    public double getCurrentCap() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        return currentPerson.getCurrentTotalMcxGrade() / (double) currentPerson.getCurrentMcAfterSU();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JuZihao": 36,
      "Khenus": 2
    }
  },
  {
    "path": "src/main/java/seedu/duke/apps/capcalculator/commands/PrintHelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "package seedu.duke.apps.capcalculator.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import seedu.duke.global.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "//@author Ju Zihao"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JuZihao"
        },
        "content": " * Class representing a print help command from the academic planner."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JuZihao"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "public class PrintHelpCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private static final String COMMANDS_LIST \u003d \"Available commands are:\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            + \"\\tcurrent\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            + \"\\tset target\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            + \"\\tset su\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "            + \"\\tacadplan\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            + \"\\thelp\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            + \"\\texit\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    public PrintHelpCommand() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        //Constructor is intentionally left blank"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * Prints commands list for academic planner."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        System.out.println(COMMANDS_LIST);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vanessa-kang": 1,
      "JuZihao": 28
    }
  },
  {
    "path": "src/main/java/seedu/duke/apps/capcalculator/commands/SetSuByModuleCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "package seedu.duke.apps.capcalculator.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import seedu.duke.apps.capcalculator.commons.SetSuUtils;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import seedu.duke.apps.capcalculator.exceptions.CapCalculatorException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.global.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.global.objects.PartialModule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.global.objects.Person;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "//@@author JuZihao"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JuZihao"
        },
        "content": " * Class representing the set S/U by modules command for CAP Calculator."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JuZihao"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "public class SetSuByModuleCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private SetSuUtils setSuUtils;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private ArrayList\u003cPartialModule\u003e suList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    public SetSuByModuleCommand(Person currentPerson, Ui ui) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        this.setSuUtils \u003d new SetSuUtils(currentPerson, ui);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * Function to calculate the best CAP after S/Uing some specific modules."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            int numberOfModulesToSu \u003d setSuUtils.promptUserForNumberOfModules();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            suList \u003d setSuUtils.getSuListByModule(numberOfModulesToSu);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            setSuUtils.showSuListToUser(suList);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            setSuUtils.showResultsToUser(suList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        } catch (CapCalculatorException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JuZihao": 37,
      "Khenus": 3
    }
  },
  {
    "path": "src/main/java/seedu/duke/apps/capcalculator/commands/SetSuBySemesterCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "package seedu.duke.apps.capcalculator.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import seedu.duke.apps.capcalculator.commons.SetSuUtils;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import seedu.duke.apps.capcalculator.exceptions.CapCalculatorException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.global.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.global.objects.PartialModule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.global.objects.Person;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "//@@author JuZihao"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JuZihao"
        },
        "content": " * Class representing the set S/U by semester command for CAP Calculator."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JuZihao"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "public class SetSuBySemesterCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private SetSuUtils setSuUtils;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private ArrayList\u003cPartialModule\u003e suList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    public SetSuBySemesterCommand(Person currentPerson, Ui ui) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        this.setSuUtils \u003d new SetSuUtils(currentPerson, ui);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * Function to calculate the best CAP after S/Uing a specific semester."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            int semesterToSu \u003d setSuUtils.promptUserForSemester();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            suList \u003d setSuUtils.getSuListBySemester(semesterToSu);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            setSuUtils.showSuListToUser(suList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            setSuUtils.showResultsToUser(suList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        } catch (CapCalculatorException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JuZihao": 35,
      "Khenus": 3
    }
  },
  {
    "path": "src/main/java/seedu/duke/apps/capcalculator/commands/SetTargetCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "package seedu.duke.apps.capcalculator.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import seedu.duke.apps.capcalculator.exceptions.InvalidCapException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import seedu.duke.apps.capcalculator.exceptions.InvalidCreditException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.global.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.global.LoggingTool;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.global.objects.Person;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import seedu.duke.apps.capcalculator.commons.SetTargetUtils;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "//@@author JuZihao"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JuZihao"
        },
        "content": " * Class representing the Set target CAP command for CAP Calculator."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JuZihao"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "public class SetTargetCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private static final double MAXIMUM_CAP \u003d 5.00;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private static final String LOG_FILE_NAME \u003d \"SetTargetCommand.log\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private static final String LOGGER_NAME \u003d \"SetTargetCommand\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private static Logger logger;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private static FileHandler fh;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private SetTargetUtils setTargetUtils;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    public SetTargetCommand(Person currentPerson, Scanner in) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        this.setTargetUtils \u003d new SetTargetUtils(currentPerson, in);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * Function to calculate CAP needed to obtain target grades."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            fh \u003d new FileHandler(LOG_FILE_NAME);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            logger \u003d new LoggingTool(LOGGER_NAME,fh).initialize();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            logger.log(Level.INFO,\"Executing set target command.\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            double targetCap \u003d setTargetUtils.getTargetCap();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            int targetMCs \u003d setTargetUtils.getTargetGradedMC();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            assert targetCap \u003c\u003d MAXIMUM_CAP;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            assert targetMCs \u003e 0;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            setTargetUtils.showResultsToUser(targetCap, targetMCs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            logger.log(Level.INFO,\"Finish executing set target command.\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            fh.close();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        } catch (InvalidCapException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            logger.log(Level.WARNING,\"Cap entered is more than 5.00.\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            fh.close();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        } catch (InvalidCreditException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            logger.log(Level.WARNING,\"MC entered is less than 0.\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            fh.close();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerroldlam": 2,
      "JuZihao": 56,
      "Khenus": 3
    }
  },
  {
    "path": "src/main/java/seedu/duke/apps/capcalculator/commons/CalculatorUtils.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Khenus"
        },
        "content": "package seedu.duke.apps.capcalculator.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.global.objects.PartialModule;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.global.objects.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import java.math.RoundingMode;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import java.text.DecimalFormat;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Khenus"
        },
        "content": "//@@author Khenus"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Khenus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Khenus"
        },
        "content": " * Class representing common functions for the CAP Calculator."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Khenus"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Khenus"
        },
        "content": "public class CalculatorUtils {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private static final int FROM_ADD \u003d 1;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private static final int FROM_EDIT \u003d 2;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private static final int FROM_REMOVE \u003d 3;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private static final DecimalFormat formatFinalCap \u003d new DecimalFormat(\"#.##\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    protected static final double MAXIMUM_CAP \u003d 5.00;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private final Person currentPerson;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public CalculatorUtils(Person currentPerson) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        this.currentPerson \u003d currentPerson;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * Update Cap after every change in current module list."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * @param type An int storing the type of function calling update cap"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * @param currentModule A PartialModule object storing current module"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * @param caps An optional number of double storing old cap and new cap (If you send in old, must send in new also)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public void updateCap(int type, PartialModule currentModule, double... caps) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        // Caps is an array, 0 being oldCap, 1 being newCap"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        if (type \u003d\u003d FROM_ADD \u0026\u0026 !isNonGraded(currentModule.getCap())) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            updateCapFromAdd(currentModule);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        } else if (type \u003d\u003d FROM_REMOVE) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            if (!isNonGraded(currentModule.getCap())) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                //Decreasing total MC regardless of SU"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                currentPerson.setCurrentMc(currentPerson.getCurrentMc()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                        - currentModule.getModuleCredit());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                //Decreasing total MC after SU only if module is not SU"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                if (!isSu(currentModule.getCap())) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                    editCapGradedToSu(currentModule, currentModule.getCap());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        } else if (type \u003d\u003d FROM_EDIT) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            if (isFromSuToGraded(caps)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                //Case where previously was SU but new is not SU"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                editCapSuToGraded(currentModule, caps[1]);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            }  else if (isFromGradedToSu(caps)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                //Case where previously was not SU but now is SU"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                editCapGradedToSu(currentModule, caps[0]);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            } else if (isFromGradedToGraded(caps)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                //Case where previously and new cap are not SU but not the same"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                editCapGradedToGraded(currentModule, caps);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            } else if (isFromGradedToNonGraded(caps)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                //Case where previously was graded but new is special"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                currentPerson.setCurrentMc(currentPerson.getCurrentMc()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                        - currentModule.getModuleCredit());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                editCapGradedToSu(currentModule, caps[0]);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            } else if (isFromSuToNonGraded(caps)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                //Case where previously was S/U but new is special"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                currentPerson.setCurrentMc(currentPerson.getCurrentMc()"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                        - currentModule.getModuleCredit());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            } else if (isFromNonGradedToGraded(caps)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                //Case where previously was special but new is graded or S/U"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                updateCapFromAdd(currentModule);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * Returns true if the module provided was from a letter grade,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * else returns false."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * @param cap Academic points of original and edited module"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private boolean isGraded(double cap) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        return cap \u003e -1.00;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * Returns true if the module provided was from a S/U grade,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * else returns false."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * @param cap Academic points of original and edited module"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private boolean isSu(double cap) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        return cap \u003d\u003d -1.00;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * Returns true if the module provided was from a special grade,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * else returns false."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * @param cap Academic points of original and edited module"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private boolean isNonGraded(double cap) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        return cap \u003d\u003d -2.00;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * Returns true if edited module was from a letter grade to letter grade,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * else returns false."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * @param caps Academic points of original and edited module"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private boolean isFromGradedToGraded(double[] caps) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        return caps[0] !\u003d caps[1] \u0026\u0026 isGraded(caps[0]) \u0026\u0026 isGraded(caps[1]);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * Returns true if edited module was from a letter grade to S/U grade,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * else returns false."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * @param caps Academic points of original and edited module"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private boolean isFromGradedToSu(double[] caps) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        return isGraded(caps[0]) \u0026\u0026 isSu(caps[1]);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * Returns true if edited module was from a letter grade to a special grade,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * else returns false."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * @param caps Academic points of original and edited module"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private boolean isFromGradedToNonGraded(double[] caps) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        return isGraded(caps[0]) \u0026\u0026 isNonGraded(caps[1]);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * Returns true if edited module was from a S/U grade to letter grade,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * else returns false."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * @param caps Academic points of original and edited module"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private boolean isFromSuToGraded(double[] caps) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        return isSu(caps[0]) \u0026\u0026 isGraded(caps[1]);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * Returns true if edited module was from a S/U grade to special grade,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * else returns false."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * @param caps Academic points of original and edited module"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private boolean isFromSuToNonGraded(double[] caps) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        return isSu(caps[0]) \u0026\u0026 isNonGraded(caps[1]);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * Returns true if edited module was from a special grade to graded grade,"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * else returns false."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * @param caps Academic points of original and edited module"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private boolean isFromNonGradedToGraded(double[] caps) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        return isNonGraded(caps[0]) \u0026\u0026 !isNonGraded(caps[1]);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * Updates CAP when User edits module from a letter grade to a letter grade."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * @param currentModule module that was edited"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * @param caps array of previous and new cap"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private void editCapGradedToGraded(PartialModule currentModule, double[] caps) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        double oldMCxGrade \u003d caps[0] * currentModule.getModuleCredit();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        double newMCxGrade \u003d caps[1] * currentModule.getModuleCredit();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        double mcxGradeToSet \u003d newMCxGrade - oldMCxGrade;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        //Updating total academic points to this point"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        currentPerson.setCurrentTotalMcxGrade(currentPerson.getCurrentTotalMcxGrade()"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                + mcxGradeToSet);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * Updates CAP when User edits module from a letter grade to a S/U grade."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * @param currentModule module that was edited"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * @param cap user\u0027s CAP"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private void editCapGradedToSu(PartialModule currentModule, double cap) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        double mcxGradeToMinus \u003d cap * currentModule.getModuleCredit();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        //Updating total MCs"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        currentPerson.setCurrentMcAfterSU(currentPerson.getCurrentMcAfterSU()"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                - currentModule.getModuleCredit());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        //Updated total Academic Points"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        currentPerson.setCurrentTotalMcxGrade(currentPerson.getCurrentTotalMcxGrade()"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                - mcxGradeToMinus);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * Updates CAP when User edits module from a S/U grade to a letter grade."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * @param currentModule module that was edited"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * @param cap user\u0027s CAP"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private void editCapSuToGraded(PartialModule currentModule, double cap) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        double newMCxGrade \u003d cap * currentModule.getModuleCredit();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        //Updating total MCs"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        currentPerson.setCurrentMcAfterSU(currentPerson.getCurrentMcAfterSU()"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                + currentModule.getModuleCredit());"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        //Updated total Academic Points"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        currentPerson.setCurrentTotalMcxGrade(currentPerson.getCurrentTotalMcxGrade()"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                + newMCxGrade);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * Updates CAP when User adds in a new module."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * @param currentModule module that is newly added"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private void updateCapFromAdd(PartialModule currentModule) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        //Incrementing total MC regardless of SU"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        int moduleCredit \u003d currentModule.getModuleCredit();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        currentPerson.setCurrentMc(currentPerson.getCurrentMc() + moduleCredit);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        //Incrementing total MC after SU only if module is not SU"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        if (currentModule.getCap() !\u003d -1.00) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            editCapSuToGraded(currentModule, currentModule.getCap());"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    //@@author JuZihao"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * Returns CAP score as a string."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * @param academicPoint academic point to parse"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * @return string of academic point"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    public static String formatCapToString(double academicPoint) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        if (isNaN(academicPoint)) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            return \"0\";"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        return formatFinalCap.format(academicPoint);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * Returns true if CAP is NaN"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * else returns false."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * @param academicPoint academic point to check"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    public static boolean isNaN(double academicPoint) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        return (academicPoint !\u003d academicPoint);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * Returns a double value that has been rounded at a given decimal place."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * @param value to be rounded"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * @param places number of decimal points to be rounded"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * @return a double value that has been rounded"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    public static double round(double value, int places) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        if (places \u003c 0) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        BigDecimal bd \u003d BigDecimal.valueOf(value);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        bd \u003d bd.setScale(places, RoundingMode.HALF_UP);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        return bd.doubleValue();"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerroldlam": 1,
      "JuZihao": 47,
      "Khenus": 244
    }
  },
  {
    "path": "src/main/java/seedu/duke/apps/capcalculator/commons/SetSuUtils.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "package seedu.duke.apps.capcalculator.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import seedu.duke.apps.capcalculator.exceptions.CapCalculatorException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.global.objects.PartialModule;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.global.objects.Person;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import static java.util.stream.Collectors.toList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import static seedu.duke.apps.capcalculator.commons.CalculatorUtils.formatCapToString;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "//@@author JuZihao"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JuZihao"
        },
        "content": " * Class representing common functions for the set S/U commands."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JuZihao"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "public class SetSuUtils {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private static final String VALID_SEMESTERS \u003d \"Valid semesters are integers from 1 to 10, inclusive.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private static final String PROMPT_SU_SEMESTER_VALUE \u003d \"Please enter a semester you wish to S/U.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private static final String SU_SUGGESTION_PROMPT \u003d \"In order to obtain the highest Cap possible,\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            + \"the modules you should be S/Uing are:\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private static final String SINGLE_SU_SUGGESTION_PROMPT \u003d \"In order to obtain the highest Cap possible,\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            + \"the module you should be S/Uing is:\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private static final String NO_SUGGESTION_PROMPT \u003d \"Looks like you do not have to S/U any modules!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private static final String PROMPT_MODULE_VALUE \u003d \"Please enter how many modules you wish to S/U.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private static final String INVALID_SEMESTER_ERROR \u003d \"Looks like the semester you entered is not valid!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private static final String NOT_NUMBER_ERROR \u003d \"Looks like the semester you entered is not an integer!\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private static final String INVALID_NUMBER_ERROR \u003d \"Looks like the number of modules you \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            + \"entered is not an integer!\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private static final String INVALID_MODULE_ERROR \u003d \"Looks like you did not take the module you entered \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            + \"or the module you entered has a grade that cannot be S/Ued!\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private static final String NUMBER_OUT_OF_BOUND_ERROR \u003d \"Looks like the number you entered \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            + \"is more than the numbers of modules you took.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private static final String EMPTY_LIST_ERROR \u003d \"Looks like your S/U list is empty!\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private static final String DUPLICATE_MODULE_ERROR \u003d \"Looks like you have already added this module!\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private static final int STARTING_SEMESTER_INDEX \u003d 1;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private static final int FINAL_SEMESTER_INDEX \u003d 10;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private static final int DISPLAY_PREFIX \u003d 1;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private Person currentPerson;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private Scanner in;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * Instantiates a new Set su utils."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * @param currentPerson the current person"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * @param ui that deals with interaction with user"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    public SetSuUtils(Person currentPerson, Ui ui) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        this.currentPerson \u003d currentPerson;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        this.in \u003d ui.getScanner();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * Prints prompt and help messages for user to enter module\u0027s grade."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * @return the semester entered by user"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * @throws CapCalculatorException if the semester entered is not valid"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    public int promptUserForSemester() throws CapCalculatorException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            System.out.println(PROMPT_SU_SEMESTER_VALUE);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            System.out.println(VALID_SEMESTERS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            int semester \u003d Integer.parseInt(in.nextLine().trim());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            if (isValidSemester(semester)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "                return semester;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "                throw new CapCalculatorException(INVALID_SEMESTER_ERROR);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            throw new CapCalculatorException(NOT_NUMBER_ERROR);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * Prompt user to enter number of modules."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * @return number of modules entered by user"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * @throws CapCalculatorException if the number entered is not valid"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    public int promptUserForNumberOfModules() throws CapCalculatorException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            System.out.println(PROMPT_MODULE_VALUE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            int numberOfModules \u003d Integer.parseInt(in.nextLine().trim());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            if (isValidNumber(numberOfModules)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "                return numberOfModules;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            throw new CapCalculatorException(NUMBER_OUT_OF_BOUND_ERROR);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            throw new CapCalculatorException(INVALID_NUMBER_ERROR);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * Returns a sorted S/U list by semester."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * @param semesterToSu the semester to S/U"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * @return the S/U list by semester"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * @throws CapCalculatorException if the S/U list is empty"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    public ArrayList\u003cPartialModule\u003e getSuListBySemester(int semesterToSu) throws CapCalculatorException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        ArrayList\u003cPartialModule\u003e suList \u003d (ArrayList\u003cPartialModule\u003e) currentPerson.getModulesList().stream()"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "                .filter((partialModule) -\u003e partialModule.getSemesterIndex() \u003d\u003d semesterToSu)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "                .filter(this::isValidSuModule)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "                .collect(toList());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        if (isEmptyList(suList)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            throw new CapCalculatorException(EMPTY_LIST_ERROR);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            suList.sort(Comparator.comparing(PartialModule::getCap));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            return suList;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * Given a S/U list, show results to user."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * @param suList the S/U list"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    public void showResultsToUser(ArrayList\u003cPartialModule\u003e suList) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        double currentCap \u003d currentPerson.getCurrentTotalMcxGrade() / (double)currentPerson.getCurrentMcAfterSU();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        int currentGradedMCs \u003d currentPerson.getCurrentMcAfterSU();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        showInitialCapToUser(currentCap, currentGradedMCs);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        ui.printStars();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        showCapAfterEachSu(suList, currentCap, currentPerson.getCurrentTotalMcxGrade(), currentGradedMCs);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * Display cap after each S/U."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * @param suList the S/U list"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * @param currentCap the current cap"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * @param totalMcxGrade the total MC multiply by the grade"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * @param currentGradedMCs the current graded MCs"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    public void showCapAfterEachSu(ArrayList\u003cPartialModule\u003e suList, double currentCap,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "                                    double totalMcxGrade, int currentGradedMCs) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        double bestCap \u003d currentCap;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        int bestGradedMCs \u003d currentGradedMCs;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        int numberOfModulesToSU \u003d 0;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        for (PartialModule module : suList) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            totalMcxGrade -\u003d module.getCap() * module.getModuleCredit();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            currentGradedMCs -\u003d module.getModuleCredit();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            System.out.println(\"S/U your module of \" + module.getModuleCode() + \" with grade \" + module.getGrade()"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "                    + \" will give you a CAP of: \" + formatCapToString(totalMcxGrade / (double)currentGradedMCs));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            System.out.println(\"Your graded MCs after S/Uing this module is: \" + currentGradedMCs);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            ui.printNewLine();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            if (bestCap \u003c (totalMcxGrade / (double)currentGradedMCs)) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "                bestCap \u003d totalMcxGrade / (double)currentGradedMCs;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "                bestGradedMCs \u003d currentGradedMCs;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "                numberOfModulesToSU++;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        showBestResultsForSu(bestCap, bestGradedMCs);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        ui.printStars();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        showSuggestedSuOptions(suList, numberOfModulesToSU);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * Display the suggested S/U options."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * @param suList the S/U list"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * @param numberOfModulesToSU the number of modules to S/U"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    public void showSuggestedSuOptions(ArrayList\u003cPartialModule\u003e suList, int numberOfModulesToSU) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        if (numberOfModulesToSU \u003e 1) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            System.out.println(SU_SUGGESTION_PROMPT);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            for (int i \u003d 0; i \u003c numberOfModulesToSU; i++) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "                PartialModule moduleToSu \u003d suList.get(i);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "                System.out.println(moduleToSu.getModuleCode() + \" with grade \" + moduleToSu.getGrade()"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "                        + \" and modular credit of \" + moduleToSu.getModuleCredit() + \".\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        } else if (numberOfModulesToSU \u003d\u003d 1) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            System.out.println(SINGLE_SU_SUGGESTION_PROMPT);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            PartialModule moduleToSu \u003d suList.get(0);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            System.out.println(moduleToSu.getModuleCode() + \" with grade \" + moduleToSu.getGrade()"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "                    + \" and modular credit of \" + moduleToSu.getModuleCredit() + \".\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            System.out.println(NO_SUGGESTION_PROMPT);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * Display best results after S/Uing."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * @param bestCap the best cap"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * @param bestGradedMCs the best graded MCs"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    public void showBestResultsForSu(double bestCap, int bestGradedMCs) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        System.out.println(\"Your highest CAP possible is: \" + formatCapToString(bestCap)"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "                + \" with a graded MC of \" + bestGradedMCs);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * Display initial cap to user."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * @param currentCap the current cap"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * @param currentGradedMCs the current graded MCs"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    public void showInitialCapToUser(double currentCap, int currentGradedMCs) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        System.out.println(\"Your CAP without S/U any module is: \" + formatCapToString(currentCap));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        System.out.println(\"Your graded MCs without S/U any module is: \" + currentGradedMCs);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * Display the S/U list to user."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * @param suList the S/U list"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    public void showSuListToUser(ArrayList\u003cPartialModule\u003e suList) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        System.out.println(\"Modules in your current S/U list: \");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        for (PartialModule modules : suList) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            System.out.println(\"   \" + modules.getModuleCode() + \"   \" + modules.getGrade());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * Main function to obtain the S/U list given some module codes."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * Returns the S/U list."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * @param numberOfModulesToSu number entered by user"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * @return the S/U list"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * @throws CapCalculatorException if the module is not valid"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    public ArrayList\u003cPartialModule\u003e getSuListByModule(int numberOfModulesToSu) throws CapCalculatorException {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        ArrayList\u003cPartialModule\u003e filteredList \u003d (ArrayList\u003cPartialModule\u003e) currentPerson.getModulesList().stream()"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "                .filter(this::isValidSuModule)"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "                .collect(toList());"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        ArrayList\u003cPartialModule\u003e suList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        for (int i \u003d 0; i \u003c numberOfModulesToSu; i++) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            promptUserForModuleCode(i + DISPLAY_PREFIX);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            String moduleCode \u003d in.nextLine().trim();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            PartialModule moduleToSu \u003d getSuModule(filteredList,moduleCode);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            addModuleToSuList(suList, moduleToSu);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        suList.sort(Comparator.comparing(PartialModule::getCap));"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        return suList;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * Add the module to be S/Ued into the list."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * @param suList the list of modules to be S/Ued"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * @param moduleToSu the module to be added into the list"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * @throws CapCalculatorException if the module is already in the list"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    public void addModuleToSuList(ArrayList\u003cPartialModule\u003e suList,"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "                                   PartialModule moduleToSu) throws CapCalculatorException {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        if (suList.contains(moduleToSu)) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            throw new CapCalculatorException(DUPLICATE_MODULE_ERROR);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        suList.add(moduleToSu);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * Returns the module that the user want to S/U given the module code."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * @param filteredList the list of valid modules to S/U"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * @param moduleCode the target module that user want to S/U"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * @return the module to be S/Ued"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * @throws CapCalculatorException if there is no valid module found"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    public PartialModule getSuModule(ArrayList\u003cPartialModule\u003e filteredList,"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "                                      String moduleCode) throws CapCalculatorException {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        for (PartialModule module : filteredList) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            if (module.getModuleCode().equalsIgnoreCase(moduleCode)) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "                return module;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        throw new CapCalculatorException(INVALID_MODULE_ERROR);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * Print prompt for user to enter the module code to S/U."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * @param displayIndex index to be displayed ot user"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private void promptUserForModuleCode(int displayIndex) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        System.out.println(\"What is your \" + getAbbreviations(displayIndex) + \"module?\");"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * Returns true when the number of modules entered by user is more than zero,"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * and less than the total modules taken by user, else return false."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * @param numberOfModulesToSu the number entered by user"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private boolean isValidNumber(int numberOfModulesToSu) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        return (numberOfModulesToSu \u003e 0 \u0026\u0026 numberOfModulesToSu \u003c\u003d currentPerson.getModulesList().size());"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * Returns true when the module is a valid modules to be S/Ued,"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * else return false."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * @param partialModule the modules to be checked"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private boolean isValidSuModule(PartialModule partialModule) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        return partialModule.getCap() \u003e\u003d 0;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * Returns true if the SU list is empty else false."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * @param suList the list of modules to be S/Ued"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * @return boolean boolean"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private boolean isEmptyList(ArrayList\u003cPartialModule\u003e suList) {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        return suList.size() \u003d\u003d 0;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * Function to return the abbreviation for the number."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * @param number number to return the abbreviation for"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * @return string"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private String getAbbreviations(int number) {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        if (number % 10 \u003d\u003d 1 \u0026 number !\u003d 11) {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            return number + \"st \";"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        } else if (number % 10 \u003d\u003d 2 \u0026 number !\u003d 12) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            return number + \"nd \";"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        } else if (number % 10 \u003d\u003d 3 \u0026 number !\u003d 13) {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            return number + \"rd \";"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            return number + \"th \";"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    //@@author jerroldlam"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * Returns true if semesterIndex is a valid semesterIndex,"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * else returns false."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * @param semesterIndex semesterIndex to check"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    public static boolean isValidSemester(int semesterIndex) {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        return (semesterIndex \u003e\u003d STARTING_SEMESTER_INDEX \u0026\u0026 semesterIndex \u003c\u003d FINAL_SEMESTER_INDEX);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerroldlam": 12,
      "JuZihao": 335,
      "Khenus": 2
    }
  },
  {
    "path": "src/main/java/seedu/duke/apps/capcalculator/commons/SetTargetUtils.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "package seedu.duke.apps.capcalculator.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import seedu.duke.apps.capcalculator.exceptions.InvalidCapException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import seedu.duke.apps.capcalculator.exceptions.InvalidCreditException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.global.objects.Person;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import static seedu.duke.apps.capcalculator.commons.CalculatorUtils.round;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import static seedu.duke.apps.capcalculator.commons.CalculatorUtils.formatCapToString;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import static seedu.duke.apps.capcalculator.commons.CalculatorUtils.MAXIMUM_CAP;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "//@@author JuZihao"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JuZihao"
        },
        "content": " * Class representing the common Set Target functions in CAP Calculator."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JuZihao"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "public class SetTargetUtils {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private static final String MAXIMUM_CAP_ERROR \u003d \"Your target CAP cannot be greater than the maximum CAP of 5!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private static final String MINIMUM_CAP_ERROR \u003d \"Your target CAP cannot be lower than the minimum CAP of 0!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private static final String MINIMUM_MC_ERROR \u003d \"Your target MC should be greater than 0!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private static final String MAXIMUM_MC_ERROR \u003d \"Your target MC should not be greater than 180!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private static final String NOT_NUMBER_ERROR \u003d \"Looks like you did not enter an valid integer!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private static final int MINIMUM_MC \u003d 0;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private static final int MAXIMUM_MC \u003d 180;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private Person currentPerson;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private Scanner in;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    public SetTargetUtils(Person currentPerson, Scanner in) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        this.currentPerson \u003d currentPerson;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        this.in \u003d in;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * Returns the target Cap obtained from the user."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * @throws InvalidCapException if the Cap given is greater than 5.00 or less than 0"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    public double getTargetCap() throws InvalidCapException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        System.out.println(\"What is your target CAP?\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            double targetCap \u003d Double.parseDouble(in.nextLine());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            if (isValidCap(targetCap)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "                return round(targetCap,2);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            } else if (targetCap \u003e MAXIMUM_CAP) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "                throw new InvalidCapException(MAXIMUM_CAP_ERROR);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "                throw new InvalidCapException(MINIMUM_CAP_ERROR);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            throw new InvalidCapException(NOT_NUMBER_ERROR);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * Returns the target MCs obtained from the user."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * @throws InvalidCreditException if the module credit given less than 0"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    public int getTargetGradedMC() throws InvalidCreditException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        System.out.println(\"How many graded MCs you are taking to achieve the target CAP?\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            int targetGradedMC \u003d Integer.parseInt(in.nextLine());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            if (isValidCredits(targetGradedMC)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "                return targetGradedMC;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            } else if (targetGradedMC \u003e MINIMUM_MC) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "                throw new InvalidCreditException(MAXIMUM_MC_ERROR);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "                throw new InvalidCreditException(MINIMUM_MC_ERROR);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            throw new InvalidCreditException(NOT_NUMBER_ERROR);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * Checks if the target Cap given by the user is valid."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * Returns true when the Cap provided is less than 5.00 and more or equals to 0."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * Returns false otherwise."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * @param cap Cap to be checked"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * @return boolean whether Cap is valid"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private boolean isValidCap(double cap) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        return cap \u003c\u003d MAXIMUM_CAP \u0026\u0026 cap \u003e\u003d 0;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * Checks if the target Cap given by the user is valid."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * Returns false when the MC provided is less than 0 else false."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     *  @param credits Module credits to be checked"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     *  @return boolean whether MC is valid"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private boolean isValidCredits(int credits) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        return credits \u003e MINIMUM_MC \u0026\u0026 credits \u003c\u003d MAXIMUM_MC;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * Calculate what should be the user\u0027s minimum CAP in order to achieve user\u0027s target CAP and display to user."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    public void showResultsToUser(double targetCap,int targetGradedMC) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        int totalMcToTarget \u003d currentPerson.getCurrentMcAfterSU() + targetGradedMC;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        double targetCapxTargetMC \u003d (double) totalMcToTarget * targetCap;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        double neededCap \u003d (targetCapxTargetMC - currentPerson.getCurrentTotalMcxGrade()) / (double) targetGradedMC;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        if (isValidCap(neededCap)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            printTargetResultPossible(targetCap, targetGradedMC, neededCap);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            printTargetResultImpossible(targetCap, targetGradedMC, neededCap);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * Prints out message for user when the target result cannot be achieved."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * @param targetCap user\u0027s targeted CAP."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * @param targetGradedMC user\u0027s targeted MC."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private void printTargetResultImpossible(double targetCap, int targetGradedMC, double neededCap) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        System.out.println(\"OOPS!! Looks like in order to achieve your target CAP of \" + targetCap"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "                + \" with you target MCs of \" + targetGradedMC + \".\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        System.out.println(\"You have to achieve a CAP of \" + formatCapToString(neededCap)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "                + \" for your next \" + targetGradedMC + \" MCs which is not possible!\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * Prints out message for user when the target result can be achieved."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * @param targetCap user\u0027s targeted CAP."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * @param targetGradedMC user\u0027s targeted MC."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * @param neededCap user\u0027s future CAP needed to reach targeted CAP"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private void printTargetResultPossible(double targetCap, int targetGradedMC, double neededCap) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        System.out.println(\"You should achieve a minimum CAP of \" + formatCapToString(neededCap) + \" for your next \""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "                + targetGradedMC + \" MCs to achieve your target CAP of \" + targetCap + \".\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JuZihao": 136,
      "Khenus": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/apps/capcalculator/exceptions/CapCalculatorException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Khenus"
        },
        "content": "package seedu.duke.apps.capcalculator.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "//@@author JuZihao"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JuZihao"
        },
        "content": " * Signals that an invalid command has been given in the CAP Calculator App."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JuZihao"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "public class CapCalculatorException extends Exception {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private String errorMessage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private static final String NEW_LINE \u003d \"\\n\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private static final String EXITING_CURRENT_COMMAND \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            \"Exiting current command back to CAP Calculator App Main Menu.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    public CapCalculatorException(String errorMessage) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        String stringToPrint \u003d errorMessage + NEW_LINE + EXITING_CURRENT_COMMAND;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        this.errorMessage \u003d stringToPrint;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        return this.errorMessage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JuZihao": 22,
      "Khenus": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/apps/capcalculator/exceptions/InvalidCapException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Khenus"
        },
        "content": "package seedu.duke.apps.capcalculator.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "//@@author JuZihao"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JuZihao"
        },
        "content": " * Signals that the given CAP is not valid."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JuZihao"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "public class InvalidCapException extends CapCalculatorException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    public InvalidCapException(String errorMessage) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JuZihao": 10,
      "Khenus": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/apps/capcalculator/exceptions/InvalidCreditException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Khenus"
        },
        "content": "package seedu.duke.apps.capcalculator.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "//@@author JuZihao"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JuZihao"
        },
        "content": " * Signals that the given MC is not valid."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JuZihao"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "public class InvalidCreditException extends CapCalculatorException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    public InvalidCreditException(String errorMessage) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JuZihao": 10,
      "Khenus": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/apps/moduleloader/ModuleLoader.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Khenus"
        },
        "content": "package seedu.duke.apps.moduleloader;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import com.google.gson.Gson;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.apps.moduleloader.exceptions.ModuleLoaderException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.global.LoggingTool;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.global.objects.FullModule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import java.io.Reader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Khenus"
        },
        "content": "//@@author Khenus"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Khenus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Khenus"
        },
        "content": " * Class representing function to load all modules offered by NUS."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Khenus"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Khenus"
        },
        "content": "public class ModuleLoader {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private static final int TOTAL_NUMBER_OF_MODULES \u003d 12436;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public static final String NEW_LINE \u003d \"\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public static final String MISSING_MODULE_DATA \u003d \"Data for Modules not found!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public static final String TERMINATION \u003d \"Terminating program...\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public static final String CORRUPTED_MODULE_DATA \u003d \"Data for Modules corrupted!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public static final String LOG_FILE_NAME \u003d \"ModuleLoader.log\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public static final String LOGGER_NAME \u003d \"ModuleLoader\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private Map\u003cString, Integer\u003e moduleMap;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private FullModule[] moduleFullDetails;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private static Logger logger;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private static FileHandler fh;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * Default constructor for to load all modules from JSON file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public ModuleLoader() throws ModuleLoaderException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            fh \u003d new FileHandler(LOG_FILE_NAME);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            logger \u003d new LoggingTool(LOGGER_NAME,fh).initialize();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            moduleMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            Gson gson \u003d new Gson();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            InputStream in \u003d ModuleLoader.class.getResourceAsStream(\"/ModuleData.json\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            Reader jsonReader \u003d new InputStreamReader(in);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            moduleFullDetails \u003d gson.fromJson(jsonReader, FullModule[].class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            for (int index \u003d 0; index \u003c moduleFullDetails.length; index++) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                moduleMap.put(moduleFullDetails[index].getModuleCode(), index);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            if (moduleFullDetails.length !\u003d TOTAL_NUMBER_OF_MODULES) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                throw new ModuleLoaderException(CORRUPTED_MODULE_DATA + NEW_LINE + TERMINATION);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            logger.log(Level.INFO, \"All Module successfully loaded\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            fh.close();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            logger.log(Level.WARNING, \"Error while loading all modules: \" + e.getMessage());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            fh.close();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            throw new ModuleLoaderException(MISSING_MODULE_DATA + NEW_LINE + TERMINATION);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            throw new ModuleLoaderException(\"Logger failed to initialize: \" + NEW_LINE + TERMINATION);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * Constructor for checking condition where loading all module from JSON file fails."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * Used in development only."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * @param isProperCreation boolean indicating non-proper creation of module initializer"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public ModuleLoader(boolean isProperCreation) throws ModuleLoaderException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        throw new ModuleLoaderException(CORRUPTED_MODULE_DATA + NEW_LINE + TERMINATION);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * Getter for module map."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * @return Map"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public Map\u003cString, Integer\u003e getModuleMap() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        return this.moduleMap;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * Getter for full module details."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * @return An Array of FullModule"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public FullModule[] getModuleFullDetails() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        return this.moduleFullDetails;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Khenus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerroldlam": 3,
      "Khenus": 94
    }
  },
  {
    "path": "src/main/java/seedu/duke/apps/moduleloader/exceptions/ModuleLoaderException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Khenus"
        },
        "content": "package seedu.duke.apps.moduleloader.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Khenus"
        },
        "content": "//@@author Khenus"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Khenus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Khenus"
        },
        "content": " * Signals that an error has occured when loading modules."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Khenus"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Khenus"
        },
        "content": "public class ModuleLoaderException extends Exception {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private String errorMessage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public ModuleLoaderException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        //Code is intentionally left blank"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public ModuleLoaderException(String errorMessage) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        this.errorMessage \u003d errorMessage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        return this.errorMessage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Khenus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Khenus": 22
    }
  },
  {
    "path": "src/main/java/seedu/duke/global/App.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Khenus"
        },
        "content": "package seedu.duke.global;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import static seedu.duke.parser.AppParser.MENU_PAGE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Khenus"
        },
        "content": "//@@author Khenus"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Khenus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Khenus"
        },
        "content": " * Class representing an application in PlanNUS."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Khenus"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Khenus"
        },
        "content": "public class App {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private boolean isExit \u003d false;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private boolean isChangeApp \u003d false;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private int currentApp \u003d MENU_PAGE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public App() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public App(boolean isExitCommand) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        this.isExit \u003d isExitCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        //Method is intentionally left blank"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public boolean getIsExit() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public boolean getIsChangeApp() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        return this.isChangeApp;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public int getCurrentApp() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        return this.currentApp;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public void setIsChangeApp(boolean isChangeApp) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        this.isChangeApp \u003d isChangeApp;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public void setCurrentApp(int newApp) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        this.currentApp \u003d newApp;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Khenus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Khenus": 45
    }
  },
  {
    "path": "src/main/java/seedu/duke/global/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Khenus"
        },
        "content": "package seedu.duke.global;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import static seedu.duke.parser.AppParser.MENU_PAGE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Khenus"
        },
        "content": "//@@author Khenus"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Khenus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Khenus"
        },
        "content": " * Class representing a command in PlanNUS."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Khenus"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Khenus"
        },
        "content": "public class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private boolean isExit;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private boolean isChangeApp;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private int newApp;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public Command() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        this.isExit \u003d false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        this.isChangeApp \u003d false;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        this.newApp \u003d MENU_PAGE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public Command(boolean isExit) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        this.isExit \u003d isExit;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        this.isChangeApp \u003d false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        this.newApp \u003d MENU_PAGE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public Command(boolean isExit, boolean isChangeApp, int changeAppTo) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        this.isExit \u003d isExit;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        this.isChangeApp \u003d isChangeApp;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        this.newApp \u003d changeAppTo;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public void execute() throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        //Method is intentionally left blank"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public boolean getIsExit() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public boolean getIsChangeApp() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        return this.isChangeApp;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public int getNewApp() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        return this.newApp;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Khenus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Khenus": 47
    }
  },
  {
    "path": "src/main/java/seedu/duke/global/LoggingTool.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Khenus"
        },
        "content": "package seedu.duke.global;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "//@@author jerroldlam"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": " * Class representing logging tool to log into text file without standard IO."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "public class LoggingTool {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    Logger logger;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    FileHandler fh;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * Default constructor for LoggingTool."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * @param loggerName name of logger"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * @param fh FileHandler for Logger to log to"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    public LoggingTool(String loggerName, FileHandler fh) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        logger \u003d Logger.getLogger(loggerName);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        this.fh \u003d fh;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * Sets up logger to log at destination file and disables conventional IO logging."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * Note: Only logging of INFO and above is recorded."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * @return logger is configured"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    public Logger initialize() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        formatHandlers();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        formatLogger();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        return logger;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * Formats handlers to log to file and not console with Level.INFO and higher."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private void formatHandlers() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        logger.addHandler(fh);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        logger.setLevel(Level.INFO);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * Sets format for logger."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private void formatLogger() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        SimpleFormatter formatter \u003d new SimpleFormatter();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        fh.setFormatter(formatter);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerroldlam": 55,
      "Khenus": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/global/exceptions/AppParserException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Khenus"
        },
        "content": "package seedu.duke.global.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Khenus"
        },
        "content": "//@@author Khenus"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Khenus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Khenus"
        },
        "content": " * Signals that an invalid command has been given in the App parser."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Khenus"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Khenus"
        },
        "content": "public class AppParserException extends Exception {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    String errorMessage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public AppParserException(String errorMessage) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        this.errorMessage \u003d errorMessage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        return this.errorMessage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Khenus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Khenus": 18
    }
  },
  {
    "path": "src/main/java/seedu/duke/global/exceptions/CommandParserException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Khenus"
        },
        "content": "package seedu.duke.global.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Khenus"
        },
        "content": "//@@author Khenus"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Khenus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Khenus"
        },
        "content": " * Signals that an invalid command has been given in the main command parser."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Khenus"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Khenus"
        },
        "content": "public class CommandParserException extends Exception {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    String errorMessage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public CommandParserException(String errorMessage) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        this.errorMessage \u003d errorMessage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        return this.errorMessage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Khenus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Khenus": 18
    }
  },
  {
    "path": "src/main/java/seedu/duke/global/objects/FullModule.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Khenus"
        },
        "content": "package seedu.duke.global.objects;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import org.apache.commons.lang3.builder.EqualsBuilder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import org.apache.commons.lang3.builder.ToStringBuilder;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import static org.apache.commons.lang3.builder.ToStringStyle.JSON_STYLE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Khenus"
        },
        "content": "//    \"moduleCode\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Khenus"
        },
        "content": "//    \"title\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Khenus"
        },
        "content": "//    \"moduleCredit\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Khenus"
        },
        "content": "//    \"department\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Khenus"
        },
        "content": "//    \"faculty\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Khenus"
        },
        "content": "//    \"semester\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Khenus"
        },
        "content": "//    \"preclusion\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Khenus"
        },
        "content": "//    \"attibutes\" \u003d ["
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Khenus"
        },
        "content": "//     su: false, Index 0 of attribute"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Khenus"
        },
        "content": "//     sfs: false, Index 1 of attribute"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Khenus"
        },
        "content": "//     ssgf: false, Index 2 of attribute"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Khenus"
        },
        "content": "//     ism: false, Index 3 of attribute"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Khenus"
        },
        "content": "//     fyp: false, Index 4 of attribute"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Khenus"
        },
        "content": "//     year: false, Index 5 of attribute"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Khenus"
        },
        "content": "//     grsu: false, Index 6 of attribute"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Khenus"
        },
        "content": "//     lab: false, Index 7 of attribute"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Khenus"
        },
        "content": "//     urop: false, Index 8 of attribute"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Khenus"
        },
        "content": "//    ],"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Khenus"
        },
        "content": "//    \"prerequisite\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Khenus"
        },
        "content": "//    \"corequisite\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Khenus"
        },
        "content": "//@@author Khenus"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Khenus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Khenus"
        },
        "content": " * A class created to store the full data of each mod after JSON conversion."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Khenus"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Khenus"
        },
        "content": "public class FullModule {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private Integer moduleCredit;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private String department;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private String faculty;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private List\u003cInteger\u003e semester \u003d new ArrayList\u003cInteger\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private String preclusion;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private List\u003cBoolean\u003e attributes \u003d new ArrayList\u003cBoolean\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private String prerequisite;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private String corequisite;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private Map\u003cString, Object\u003e additionalProperties \u003d new HashMap\u003cString, Object\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public String getModuleCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        return moduleCode;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public String getTitle() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public Integer getModuleCredit() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        return moduleCredit;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public String getDepartment() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        return department;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public String getFaculty() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        return faculty;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public List\u003cInteger\u003e getSemester() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        return semester;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public String getPreclusion() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        return preclusion;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public List\u003cBoolean\u003e getAttributes() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        return attributes;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public String getPrerequisite() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        return prerequisite;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public String getCorequisite() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        return corequisite;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        return ToStringBuilder.reflectionToString(this, JSON_STYLE);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        if ((other instanceof FullModule) \u003d\u003d false) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        FullModule rhs \u003d ((FullModule) other);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        return new EqualsBuilder().append(moduleCode, rhs.moduleCode).append(title, rhs.title)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                .append(moduleCredit, rhs.moduleCredit).append(department, rhs.department)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                .append(faculty, rhs.faculty).append(semester, rhs.semester).append(preclusion, rhs.preclusion)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                .append(attributes, rhs.attributes).append(prerequisite, rhs.prerequisite)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                .append(corequisite, rhs.corequisite).append(additionalProperties, rhs.additionalProperties).isEquals();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Khenus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Khenus": 111
    }
  },
  {
    "path": "src/main/java/seedu/duke/global/objects/PartialModule.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Khenus"
        },
        "content": "package seedu.duke.global.objects;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "import org.apache.commons.lang3.builder.ToStringBuilder;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "//@@author jerroldlam"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": " * Class representing module object to be stored in the Person object."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": " * It is a truncated version of FullModule with only relevant fields."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "public class PartialModule implements Comparable\u003cPartialModule\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private int semesterIndex; // 1 to 8"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private String grade;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private int moduleCredit;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private double cap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    public PartialModule(String moduleCode, int semesterIndex, String grade, int moduleCredit) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        setModuleCode(moduleCode);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        setSemesterIndex(semesterIndex);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        setGrade(grade);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        setModuleCredit(moduleCredit);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        setCap(grade);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    public String getModuleCode() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        return moduleCode;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    public Integer getModuleCredit() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        return moduleCredit;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    public String getGrade() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        return grade;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    public int getSemesterIndex() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        return semesterIndex;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    public void setModuleCredit(int moduleCredit) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        this.moduleCredit \u003d moduleCredit;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    public void setModuleCode(String moduleCode) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    public void setSemesterIndex(int semesterIndex) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        this.semesterIndex \u003d semesterIndex;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    public void setGrade(String grade) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        this.grade \u003d grade;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        setCap(grade);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    //@@author JuZihao"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * Returns Academic points associated with letter grades."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * If grade is a special grading option, returns -1.00."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * @param grade user grade to check"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    public void setCap(String grade) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        switch (grade.toUpperCase()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        case \"A+\":"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        case \"A\":"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            this.cap \u003d 5.00;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        case \"A-\":"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            this.cap \u003d 4.50;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        case \"B+\":"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            this.cap \u003d 4.00;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        case \"B\":"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            this.cap \u003d 3.50;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        case \"B-\":"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            this.cap \u003d 3.00;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        case \"C+\":"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            this.cap \u003d 2.50;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        case \"C\":"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            this.cap \u003d 2.00;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        case \"D+\":"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            this.cap \u003d 1.50;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        case \"D\":"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            this.cap \u003d 1.00;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        case \"F\":"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            this.cap \u003d 0.00;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        case \"CS\":           //Completed Satisfactorily"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            //Fallthrough"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        case \"CU\":           //Completed Unsatisfactorily"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            //Fallthrough"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        case \"S\":            //Satisfactory"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            //Fallthrough"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        case \"U\":            //Unsatisfactory"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            //Fallthrough "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        case \"IP\":           //In progress"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            this.cap \u003d -1.00;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        case \"W\":            //Withdrawn"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            //Fallthrough"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        case \"IC\":           //Incomplete"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            //Fallthrough"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        case \"AUD\":          //Audit"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            //Fallthrough"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        case \"WU\":           //Withdrawn from University"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            //Fallthrough"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        case \"EXE\":         //Exempted"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            //Fallthrough"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        case \"NT\":           //Not taken"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            this.cap \u003d -2.00;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            this.cap \u003d 0.00;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    public double getCap() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        return cap;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    public int compareTo(PartialModule module) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        return (Double.compare(this.getCap(), module.getCap()));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        return ToStringBuilder.reflectionToString(this);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerroldlam": 56,
      "JuZihao": 84,
      "Khenus": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/global/objects/Person.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Khenus"
        },
        "content": "package seedu.duke.global.objects;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "//@@author jerroldlam"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": " * Class representing the user for PlanNUS."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private String personName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private double currentTotalMcxGrade;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private int currentMc;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private int currentMcAfterSU;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private ArrayList\u003cPartialModule\u003e modulesList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private HashMap\u003cString, Integer\u003e modulesAddedMap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    public Person(String personName) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        this.currentTotalMcxGrade \u003d 0.0;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        this.currentMc \u003d 0;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        this.currentMcAfterSU \u003d 0;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        this.personName \u003d personName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        this.modulesList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        this.modulesAddedMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    public String getPersonName() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        return personName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    public double getCurrentTotalMcxGrade() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        return currentTotalMcxGrade;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    public void setCurrentTotalMcxGrade(double currentTotalMcxGrade) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        this.currentTotalMcxGrade \u003d currentTotalMcxGrade;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    public int getCurrentMc() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        return currentMc;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    public void setCurrentMc(int currentMc) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        this.currentMc \u003d currentMc;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    public int getCurrentMcAfterSU() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        return currentMcAfterSU;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    public void setCurrentMcAfterSU(int currentMcAfterSU) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        this.currentMcAfterSU \u003d currentMcAfterSU;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    public ArrayList\u003cPartialModule\u003e getModulesList() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        return modulesList;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    public HashMap\u003cString, Integer\u003e getModulesAddedMap() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        return modulesAddedMap;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    public void setModulesAddedMap(HashMap\u003cString, Integer\u003e modulesAddedMap) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        this.modulesAddedMap \u003d modulesAddedMap;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerroldlam": 66,
      "Khenus": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/parser/AppParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Khenus"
        },
        "content": "package seedu.duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.apps.academicplanner.AcademicPlannerApp;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.apps.capcalculator.CapCalculatorApp;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.apps.moduleloader.ModuleLoader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.global.App;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import seedu.duke.global.exceptions.AppParserException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.global.objects.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Khenus"
        },
        "content": "//@@author Khenus"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Khenus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Khenus"
        },
        "content": " * Class representing the parser for applications used in the main PlanNUS page."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Khenus"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Khenus"
        },
        "content": "public class AppParser {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public static final int MENU_PAGE \u003d 0;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public static final int ACADEMIC_PLANNER \u003d 1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public static final int CAP_CALCULATOR \u003d 2;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private static final String ACADEMIC_PLAN_COMMAND \u003d \"ACADPLAN\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private static final String CAP_CALCULATOR_COMMAND \u003d \"CAPCALC\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private static final String EXIT_COMMAND \u003d \"EXIT\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private static final String ACADEMIC_PLAN_SHORT_COMMAND \u003d \"A\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private static final String CAP_CALCULATOR_SHORT_COMMAND \u003d \"C\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private static final String EXIT_SHORT_COMMAND \u003d \"E\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private static final String INVALID_COMMAND_MESSAGE \u003d \"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * Processes user input command and returns app to be run."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * @param userInput user input"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * @param allModules variable containing all modules offered by NUS"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * @param currentPerson user of PlanNUS"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * @param ui Ui"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * @return app to be run"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * @throws AppParserException thrown when an invalid command is give"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public static App parse(String userInput, ModuleLoader allModules, Person currentPerson, Ui ui, Storage storage)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            throws AppParserException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        userInput \u003d userInput.trim().toUpperCase();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        if (userInput.equals(ACADEMIC_PLAN_COMMAND) || userInput.equals(ACADEMIC_PLAN_SHORT_COMMAND)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            return new AcademicPlannerApp(allModules, currentPerson, ui, storage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        } else if (userInput.equals(CAP_CALCULATOR_COMMAND) || userInput.equals(CAP_CALCULATOR_SHORT_COMMAND)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            return new CapCalculatorApp(currentPerson, ui);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        } else if (userInput.equals(EXIT_COMMAND) || userInput.equals(EXIT_SHORT_COMMAND)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            return new App(true);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            throw new AppParserException(INVALID_COMMAND_MESSAGE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * Processes toggle command and returns app to be run."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * @param newApp Index of app to be toggled to"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * @param allModules variable containing all modules offered by NUS"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * @param currentPerson user of PlanNUS"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * @param ui Ui"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * @return app to be run"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * @throws AppParserException thrown when an invalid command is give"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public static App specialParse(int newApp, ModuleLoader allModules, Person currentPerson, Ui ui, Storage storage)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            throws AppParserException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        if (newApp \u003d\u003d ACADEMIC_PLANNER) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            return new AcademicPlannerApp(allModules, currentPerson, ui, storage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        } else if (newApp \u003d\u003d CAP_CALCULATOR) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            return new CapCalculatorApp(currentPerson, ui);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        } else if (newApp \u003d\u003d MENU_PAGE) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            return new App(true);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            throw new AppParserException(INVALID_COMMAND_MESSAGE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Khenus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "harryleecp": 2,
      "Khenus": 75
    }
  },
  {
    "path": "src/main/java/seedu/duke/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "package seedu.duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import seedu.duke.apps.moduleloader.ModuleLoader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.global.objects.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.storage.commons.LoadUtils;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.storage.commons.SaveUtils;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.storage.exceptions.LoadFileException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.storage.exceptions.SaveFileException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "//@@author harryleecp"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    private static final String FILE_NAME \u003d \"PlanNUS.txt\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    private ModuleLoader allModules;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public Storage(ModuleLoader allModules) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        this.allModules \u003d allModules;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public void loader(Person currentPerson) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        LoadUtils loadHandler \u003d new LoadUtils(currentPerson, FILE_NAME, allModules);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            loadHandler.load();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        } catch (LoadFileException e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public void saver(Person currentPerson) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        SaveUtils saveHandler \u003d new SaveUtils(currentPerson, FILE_NAME);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            saveHandler.save();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        } catch (SaveFileException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "harryleecp": 33,
      "Khenus": 5
    }
  },
  {
    "path": "src/main/java/seedu/duke/storage/commons/FieldValidator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Khenus"
        },
        "content": "package seedu.duke.storage.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.apps.academicplanner.commons.ModuleValidator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.storage.exceptions.CorruptedSaveFileException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import static java.lang.Integer.parseInt;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Khenus"
        },
        "content": "//@@author Khenus"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Khenus"
        },
        "content": "public class FieldValidator {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private static final int SEMESTER_VALUE_POSITION \u003d 0;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private static final int MODULE_CODE_POSITION \u003d 1;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private static final int MODULE_GRADE_POSITION \u003d 2;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private static final int MODULE_CREDIT_POSITION \u003d 3;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private static final int MODULE_LOADED \u003d 0;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private static final int MODULE_LOADING_FAILED \u003d 1;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private static final int INVALID_SEMESTER \u003d 2;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private static final int INVALID_MODULE_CODE \u003d 3;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private static final int INVALID_GRADE \u003d 4;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private static final int INVALID_MC \u003d 5;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private ModuleValidator moduleValidator;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private boolean isAllFieldValid;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private int[] details;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private String[] lineItems;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * Default constructor for Field Validator."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * @param details An Array of int storing all the details of loading save file until current entry"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * @param lineItems Different fields of current entry from save file"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * @param moduleValidator Module validator to check validity of modules from save file"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public FieldValidator(int[] details, String[] lineItems, ModuleValidator moduleValidator) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        this.details \u003d details;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        this.lineItems \u003d lineItems;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        this.isAllFieldValid \u003d true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        this.moduleValidator \u003d moduleValidator;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * Validating all input fields from save file. Note that validator will terminate once"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * an entry fails one check, with priority:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * Semester \u003e Module code \u003e Grade \u003e Module Credit"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * @return A boolean for whether current entry is valid"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public boolean validate() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            int currentSem \u003d parseInt(lineItems[SEMESTER_VALUE_POSITION]);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            if (currentSem \u003e 10 || currentSem \u003c 1) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                isAllFieldValid \u003d false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                details[INVALID_SEMESTER]++;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            isAllFieldValid \u003d false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            details[INVALID_SEMESTER]++;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        if (isAllFieldValid \u0026\u0026 !moduleValidator.isModOfferedByNus(lineItems[MODULE_CODE_POSITION])) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            isAllFieldValid \u003d false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            details[INVALID_MODULE_CODE]++;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        if (isAllFieldValid \u0026\u0026 !moduleValidator.isValidGrade(lineItems[MODULE_GRADE_POSITION])) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            isAllFieldValid \u003d false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            details[INVALID_GRADE]++;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        if (isAllFieldValid) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                int currentModuleCredit \u003d parseInt(lineItems[MODULE_CREDIT_POSITION]);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                if (currentModuleCredit \u003c 0) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                    isAllFieldValid \u003d false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                    details[INVALID_MC]++;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                isAllFieldValid \u003d false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                details[INVALID_MC]++;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        if (isAllFieldValid) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            details[MODULE_LOADED]++;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            details[MODULE_LOADING_FAILED]++;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        return isAllFieldValid;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * Print full loading details after loading finishes."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * @param isAllEntryValid boolean stating whether all entries in save file is valid"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * @param modulesLoaded number of modules loaded successfully"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * @throws CorruptedSaveFileException throws an exception if save file is corrupted"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public static void printLoadDetails(boolean isAllEntryValid, int modulesLoaded) throws CorruptedSaveFileException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        if (isAllEntryValid) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            if (modulesLoaded \u003d\u003d 0) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                System.out.println(\"Save file is empty. No module loaded.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            } else if (modulesLoaded \u003d\u003d 1) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                System.out.println(modulesLoaded + \" module loaded.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                System.out.println(modulesLoaded + \" modules loaded.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            throw new CorruptedSaveFileException();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Khenus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Khenus": 115
    }
  },
  {
    "path": "src/main/java/seedu/duke/storage/commons/LoadUtils.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Khenus"
        },
        "content": "package seedu.duke.storage.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.apps.academicplanner.commons.AddUtils;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.apps.academicplanner.commons.ModuleValidator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.apps.moduleloader.ModuleLoader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.global.objects.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.storage.exceptions.CorruptedSaveFileException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.storage.exceptions.LoadFileException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import static java.lang.Integer.parseInt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import static seedu.duke.storage.commons.FieldValidator.printLoadDetails;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "//@@author harryleecp"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "public class LoadUtils {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    private static final String NEW_LINE \u003d \"\\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    private static final String TAB \u003d \"  \";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    private static final int SEMESTER_VALUE_POSITION \u003d 0;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    private static final int MODULE_CODE_POSITION \u003d 1;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    private static final int MODULE_GRADE_POSITION \u003d 2;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    private static final int MODULE_CREDIT_POSITION \u003d 3;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    private static final int MODULE_LOADED \u003d 0;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    private static final int MODULE_LOADING_FAILED \u003d 1;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    private static final int INVALID_SEMESTER \u003d 2;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    private static final int INVALID_MODULE_CODE \u003d 3;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    private static final int INVALID_GRADE \u003d 4;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    private static final int INVALID_MC \u003d 5;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    private static final int FROM_LOAD \u003d 1;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    private ModuleLoader allModules;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    private AddUtils addUtils;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    private ModuleValidator moduleValidator;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    private Person currentPerson;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    private String fileName;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     * Default constructor for handling loading."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     * @param currentPerson a Person object storing information for current person"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     * @param fileName a String for name of save file"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     * @param allModules A ModuleLoader containing all loaded modules"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public LoadUtils(Person currentPerson, String fileName, ModuleLoader allModules) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        this.currentPerson \u003d currentPerson;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        this.fileName \u003d fileName;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        this.allModules \u003d allModules;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        this.moduleValidator \u003d new ModuleValidator(allModules, currentPerson);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     * Function to load save file."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     * @throws LoadFileException Exception when the save file is corrupted or missing"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public void load() throws LoadFileException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        int[] details \u003d new int[6];"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        boolean isAllEntryValid \u003d true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        Scanner in;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            File f \u003d new File(fileName);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            in \u003d new Scanner(f);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            addUtils \u003d new AddUtils(allModules, currentPerson);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            while (in.hasNextLine()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                String line \u003d in.nextLine();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                String[] lineItems \u003d line.split(\"\\\\|\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                for (int i \u003d 0; i \u003c lineItems.length; i++) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                    lineItems[i] \u003d lineItems[i].trim().toUpperCase();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                boolean isEntryValid \u003d new FieldValidator(details, lineItems, moduleValidator).validate();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                if (!isEntryValid) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                    isAllEntryValid \u003d false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                if (isEntryValid) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                    int currentSem \u003d parseInt(lineItems[SEMESTER_VALUE_POSITION]);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                    String currentModuleCode \u003d lineItems[MODULE_CODE_POSITION];"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                    String currentModuleGrade \u003d lineItems[MODULE_GRADE_POSITION];"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                    int currentModuleCredit \u003d parseInt(lineItems[MODULE_CREDIT_POSITION]);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                    addUtils.addModuleToUser(currentModuleCode, currentSem,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                            currentModuleGrade, currentModuleCredit, FROM_LOAD);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            in.close();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            printLoadDetails(isAllEntryValid, details[MODULE_LOADED]);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            throw new LoadFileException(\"Save file not found!\\nIt will be automatically created.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        } catch (CorruptedSaveFileException e) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            throw new LoadFileException(\"Save file corrupted! \""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                    + \"Details:\" + NEW_LINE"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                    + TAB + \"Module loaded: \" + details[MODULE_LOADED] + NEW_LINE"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                    + TAB + \"Module failed loading: \" + details[MODULE_LOADING_FAILED] + NEW_LINE"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                    + TAB + TAB + \"- Invalid Semester: \" + details[INVALID_SEMESTER] + NEW_LINE"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                    + TAB + TAB + \"- Invalid Module Code: \" + details[INVALID_MODULE_CODE] + NEW_LINE"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                    + TAB + TAB + \"- Invalid Grade: \" + details[INVALID_GRADE] + NEW_LINE"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                    + TAB + TAB + \"- Invalid Module Credit: \" + details[INVALID_MC] + NEW_LINE"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                    + NEW_LINE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "harryleecp": 94,
      "Khenus": 16
    }
  },
  {
    "path": "src/main/java/seedu/duke/storage/commons/SaveUtils.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Khenus"
        },
        "content": "package seedu.duke.storage.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.global.objects.PartialModule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.global.objects.Person;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.storage.exceptions.SaveFileException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "//@@author harryleecp"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "public class SaveUtils {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    private static final String NEWLINE \u003d \"\\n\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    private static final String SEPARATOR \u003d \"|\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    private Person currentPerson;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    private String fileName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     * Default constructor for handling save."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     * @param currentPerson a Person object storing information for current person"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     * @param fileName a String for name of save file"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public SaveUtils(Person currentPerson, String fileName) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        this.currentPerson \u003d currentPerson;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        this.fileName \u003d fileName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     * Function to save person object into save file."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     * @throws SaveFileException Exception thrown if there is an error accessing save file"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public void save() throws SaveFileException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            FileWriter fw \u003d new FileWriter(fileName);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            ArrayList\u003cPartialModule\u003e sortedBySem \u003d currentPerson.getModulesList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            sortedBySem.sort(Comparator.comparing(PartialModule::getSemesterIndex));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            String textToSave \u003d \"\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            for (PartialModule item : sortedBySem) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                textToSave +\u003d item.getSemesterIndex() + SEPARATOR"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                        + item.getModuleCode() + SEPARATOR"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                        + item.getGrade() + SEPARATOR"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                        + item.getModuleCredit() + NEWLINE;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            fw.write(textToSave);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            System.out.println(\"Data successfully saved!\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            throw new SaveFileException(\"Error accessing save file!\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "harryleecp": 47,
      "Khenus": 9
    }
  },
  {
    "path": "src/main/java/seedu/duke/storage/exceptions/CorruptedSaveFileException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Khenus"
        },
        "content": "package seedu.duke.storage.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Khenus"
        },
        "content": "//@@author Khenus"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Khenus"
        },
        "content": "public class CorruptedSaveFileException extends Exception {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public CorruptedSaveFileException() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Khenus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Khenus": 8
    }
  },
  {
    "path": "src/main/java/seedu/duke/storage/exceptions/LoadFileException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Khenus"
        },
        "content": "package seedu.duke.storage.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "//@@author harryleecp"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "public class LoadFileException extends Exception {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    private String errorMessage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public LoadFileException(String errorMessage) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        this.errorMessage \u003d errorMessage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        return errorMessage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "harryleecp": 13,
      "Khenus": 2
    }
  },
  {
    "path": "src/main/java/seedu/duke/storage/exceptions/SaveFileException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Khenus"
        },
        "content": "package seedu.duke.storage.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "//@@author harryleecp"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "public class SaveFileException extends Exception {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    private String errorMessage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public SaveFileException(String errorMessage) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        this.errorMessage \u003d errorMessage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        return errorMessage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "harryleecp": 13,
      "Khenus": 2
    }
  },
  {
    "path": "src/main/java/seedu/duke/ui/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Khenus"
        },
        "content": "package seedu.duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Khenus"
        },
        "content": "//@@author Khenus"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Khenus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Khenus"
        },
        "content": " * Class representing the ui for PlanNUS."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Khenus"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Khenus"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private static final String LINE \u003d \"____________________________________________________________\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private static final String STARS \u003d \"************************************************************\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private static final String NEW_LINE \u003d \"\\n\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private static final String LOGO \u003d \"             \u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            + \"           \u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            + \"          \u0026\u0026\u0026\u0026\u0026                     \u0026\u0026\u0026\u0026\u0026\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            + \"        \u0026\u0026\u0026\u0026\u0026                        \u0026\u0026\u0026\u0026\u0026\u0026\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            + \"       \u0026\u0026\u0026\u0026\u0026            \u0026\u0026\u0026\u0026\u0026\u0026         \u0026\u0026\u0026\u0026\u0026\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            + \"     \u0026\u0026\u0026\u0026\u0026\u0026         \u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026      \u0026\u0026\u0026\u0026\u0026\u0026\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            + \"    \u0026\u0026\u0026\u0026\u0026         \u0026\u0026\u0026\u0026\u0026        \u0026\u0026\u0026\u0026       \u0026\u0026\u0026\u0026\u0026\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            + \"  \u0026\u0026\u0026\u0026\u0026\u0026          \u0026\u0026\u0026\u0026          \u0026\u0026\u0026        \u0026\u0026\u0026\u0026\u0026\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            + \" \u0026\u0026\u0026\u0026\u0026            \u0026\u0026\u0026\u0026          \u0026\u0026\u0026          \u0026\u0026\u0026\u0026\u0026\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            + \" \u0026\u0026\u0026\u0026\u0026            \u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026            \u0026\u0026\u0026\u0026\u0026\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            + \"  \u0026\u0026\u0026\u0026\u0026           \u0026\u0026\u0026\u0026  \u0026\u0026\u0026\u0026\u0026\u0026\u0026             \u0026\u0026\u0026\u0026\u0026\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            + \"   \u0026\u0026\u0026\u0026\u0026          \u0026\u0026\u0026\u0026                    \u0026\u0026\u0026\u0026\u0026\u0026\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            + \"     \u0026\u0026\u0026\u0026\u0026        \u0026\u0026\u0026\u0026                   \u0026\u0026\u0026\u0026\u0026\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            + \"      \u0026\u0026\u0026\u0026\u0026       \u0026\u0026\u0026\u0026                 \u0026\u0026\u0026\u0026\u0026\u0026\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            + \"        \u0026\u0026\u0026\u0026\u0026                         \u0026\u0026\u0026\u0026\u0026\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            + \"         \u0026\u0026\u0026\u0026\u0026                       \u0026\u0026\u0026\u0026\u0026\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            + \"          \u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            + \"            \u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private static final String WELCOME_MESSAGE \u003d \"Welcome to PlanNUS!\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private static final String WELCOME_BACK_MESSAGE \u003d \"Welcome back to PlanNUS Main Menu!\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private static final String AWAIT_COMMAND \u003d \"Type in a command to continue...\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private static final String ACADEMIC_AWAIT_COMMAND \u003d \"Type in an Academic Planner command to continue...\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private static final String CALCULATOR_AWAIT_COMMAND \u003d \"Type in an CAP Calculator command to continue...\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private static final String EXIT_MESSAGE \u003d \"Thanks for using PlanNUS! We hope to see you again!\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private static final String HELP_MESSAGE \u003d \"\\tFor academic planner, type \u0027acadplan\u0027 or \u0027a\u0027\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            + \"\\tFor CAP calculator, type \u0027capcalc\u0027 or \u0027c\u0027\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            + \"\\tTo exit PlanNUS, type \u0027exit\u0027 or \u0027e\u0027\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private Scanner scanner;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        this.scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public Scanner getScanner() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        return this.scanner;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public void closeScanner() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        this.scanner.close();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public void printLine() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public void printNewLine() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        System.out.println(NEW_LINE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public void printStars() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        System.out.println(NEW_LINE + STARS + NEW_LINE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * Prints exit message for user just before termination of program."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public void showExitMessage() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        System.out.println(LINE + NEW_LINE"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                + EXIT_MESSAGE + NEW_LINE"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                + LINE + NEW_LINE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * Prints welcome back message for user when user returns back to main menu."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public void showWelcomeBackMessage() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        System.out.println(WELCOME_BACK_MESSAGE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        System.out.println(HELP_MESSAGE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * Prints welcome message for user upon first entry into PlanNUS."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public void showWelcomeMessage() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        System.out.println(NEW_LINE + LOGO + NEW_LINE + NEW_LINE + WELCOME_MESSAGE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        System.out.println(HELP_MESSAGE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * Prints general await command."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public void showAwaitCommand() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        System.out.println(NEW_LINE + AWAIT_COMMAND);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * Prints await command for academic calendar."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public void showAcademicAwaitCommand() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        System.out.println(NEW_LINE + ACADEMIC_AWAIT_COMMAND);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * Prints await command for CAP calculator."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public void showCalculatorAwaitCommand() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        System.out.println(NEW_LINE + CALCULATOR_AWAIT_COMMAND);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Khenus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Khenus": 113
    }
  },
  {
    "path": "src/test/java/seedu/duke/PlanNus.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Khenus"
        },
        "content": "//@@author Khenus"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Khenus"
        },
        "content": "class PlanNus {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public void sampleTest() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        assertTrue(true);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Khenus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Khenus": 7,
      "-": 6
    }
  },
  {
    "path": "src/test/java/seedu/duke/apps/academicplanner/AcademicPlannerParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "package seedu.duke.apps.academicplanner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "import seedu.duke.apps.academicplanner.commands.AddModuleCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "import seedu.duke.apps.academicplanner.commands.EditModuleCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "import seedu.duke.apps.academicplanner.commands.RemoveModuleCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import seedu.duke.apps.academicplanner.commands.PrintHelpCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import seedu.duke.apps.academicplanner.commands.PrintCalenderCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "import seedu.duke.apps.academicplanner.commands.SearchModulesCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import seedu.duke.apps.academicplanner.commands.ModuleDetailsCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "import seedu.duke.apps.moduleloader.ModuleLoader;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "import seedu.duke.global.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "import seedu.duke.global.objects.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "//@@author jerroldlam"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "class AcademicPlannerParserTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private static final String ERROR_INVALID_COMMAND \u003d \"INVALID COMMAND\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    public static final String NEW_LINE \u003d \"\\n\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private static final String EXITING_CURRENT_COMMAND \u003d \"Exiting current command back to Academic Planner Main Menu.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private Person currentPerson;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private ModuleLoader allModules;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            currentPerson \u003d new Person(\"Bob\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            ui \u003d new Ui();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            allModules \u003d new ModuleLoader();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            storage \u003d new Storage(allModules);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    void parse_emptyInput_exceptionThrown() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            final String emptyInput \u003d \"\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            AcademicPlannerParser.parse(emptyInput,allModules,currentPerson,ui,storage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            assertEquals(ERROR_INVALID_COMMAND + NEW_LINE + EXITING_CURRENT_COMMAND, e.getMessage());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    void parse_randomInput_exceptionThrown() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            final String randomInput \u003d \"i am a gummy bear\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            AcademicPlannerParser.parse(randomInput,allModules,currentPerson,ui,storage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            assertEquals(ERROR_INVALID_COMMAND + NEW_LINE + EXITING_CURRENT_COMMAND, e.getMessage());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    void parse_addModuleCommand_correct() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        final String input \u003d \"add cs1010\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        parseAndAssertCommandType(input,AddModuleCommand.class,allModules,currentPerson,ui,storage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    void parse_editModuleCommand_correct() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        final String input \u003d \"edit cs1010\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        parseAndAssertCommandType(input, EditModuleCommand.class,allModules,currentPerson,ui,storage);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    void parse_moduleDetails_correct() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        final String input \u003d \"details cs1010\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        parseAndAssertCommandType(input,ModuleDetailsCommand.class,allModules,currentPerson,ui,storage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    void parse_printModuleCommand_correct() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        final String input \u003d \"view\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        parseAndAssertCommandType(input, PrintCalenderCommand.class,allModules,currentPerson,ui,storage);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    void parse_printHelpCommand_correct() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        final String input \u003d \"help\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        parseAndAssertCommandType(input, PrintHelpCommand.class,allModules,currentPerson,ui,storage);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    void parse_removeModuleCommand_correct() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        final String input \u003d \"remove cs1010\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        parseAndAssertCommandType(input, RemoveModuleCommand.class,allModules,currentPerson,ui,storage);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    void parse_searchModuleCommand_correct() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        final String input \u003d \"search cs10\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        parseAndAssertCommandType(input,SearchModulesCommand.class,allModules,currentPerson,ui,storage);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private \u003cT extends Command\u003e void parseAndAssertCommandType(String input, Class\u003cT\u003e expectedCommandClass,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "                                                               ModuleLoader allModules,Person currentPerson, Ui ui,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "                                                               Storage storage) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            final Command result \u003d AcademicPlannerParser.parse(input, allModules, currentPerson, ui, storage);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            assertTrue(result.getClass().isAssignableFrom(expectedCommandClass));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerroldlam": 113,
      "harryleecp": 4
    }
  },
  {
    "path": "src/test/java/seedu/duke/apps/academicplanner/commands/ModuleDetailsCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "package seedu.duke.apps.academicplanner.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "import seedu.duke.apps.academicplanner.exceptions.AcademicException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "import seedu.duke.apps.moduleloader.ModuleLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "//@@author vanessa-kang"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "class ModuleDetailsCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    private static final String VALID_CODE_TEST \u003d \"cs2101\".toUpperCase();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    private static final String VALID_CODE_RESULT_CODE \u003d \"CS2101\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    private static final String VALID_CODE_RESULT_TITLE \u003d \"Effective Communication for Computing Professionals\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    private static final String INVALID_CODE_TEST \u003d \"ccccc\".toUpperCase();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    private static final String INVALID_CODE_ERROR_MESSAGE \u003d INVALID_CODE_TEST"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "            + \" IS NOT OFFERED BY NUS\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "            + \"Exiting current command back to Academic Planner Main Menu.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    ModuleLoader allModules;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    ModuleDetailsCommand detailer;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    String moduleCode;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    void setup() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "            allModules \u003d new ModuleLoader();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    void moduledetails_validcode_success() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "            moduleCode \u003d VALID_CODE_TEST;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "            detailer \u003d new ModuleDetailsCommand(allModules, moduleCode);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "            detailer.execute();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "            assertEquals(VALID_CODE_RESULT_CODE,detailer.module.getModuleCode());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "            assertEquals(VALID_CODE_RESULT_TITLE,detailer.module.getTitle());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        } catch (AcademicException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    void moduledetails_invalidcode_exceptionThrown() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "            moduleCode \u003d INVALID_CODE_TEST;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "            detailer \u003d new ModuleDetailsCommand(allModules, moduleCode);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "            detailer.execute();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        } catch (AcademicException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "            assertEquals(INVALID_CODE_ERROR_MESSAGE, e.getMessage());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vanessa-kang": 58
    }
  },
  {
    "path": "src/test/java/seedu/duke/apps/academicplanner/commands/SearchModulesCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "package seedu.duke.apps.academicplanner.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "import seedu.duke.apps.moduleloader.ModuleLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "//@@author vanessa-kang"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "class SearchModulesCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    private static final String PARTIAL_CODE_TEST \u003d \"cg40\".toUpperCase();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    private static final int PARTIAL_CODE_RESULT \u003d 3;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    private static final ArrayList\u003cString\u003e PARTIAL_CODE_RESULT_LIST \u003d new ArrayList\u003c\u003e() {{"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "            add(\"CG4001\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "            add(\"CG4002\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "            add(\"CG4003\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        }};"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    private static final String FULL_CODE_TEST \u003d \"cs1010\".toUpperCase();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    private static final int FULL_CODE_RESULT \u003d 7;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    private static final ArrayList\u003cString\u003e FULL_CODE_RESULT_LIST \u003d new ArrayList\u003c\u003e() {{"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "            add(\"CS1010\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "            add(\"CS1010E\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "            add(\"CS1010J\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "            add(\"CS1010R\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "            add(\"CS1010S\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "            add(\"CS1010X\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "            add(\"CS1010XCP\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        }};"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    ModuleLoader allModules;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    SearchModulesCommand searcher;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    String keyword;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    ArrayList\u003cString\u003e testList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    void setup() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "            allModules \u003d new ModuleLoader();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    void searchmodules_partialcode_success() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        keyword \u003d PARTIAL_CODE_TEST;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        searcher \u003d new SearchModulesCommand(allModules,keyword);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        searcher.execute();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        testList \u003d searcher.matchList;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        assertEquals(PARTIAL_CODE_RESULT, testList.size());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        assertEquals(PARTIAL_CODE_RESULT_LIST, testList);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    void searchmodules_fullcode_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        keyword \u003d FULL_CODE_TEST;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        searcher \u003d new SearchModulesCommand(allModules,keyword);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        searcher.execute();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        testList \u003d searcher.matchList;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        assertEquals(FULL_CODE_RESULT, testList.size());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        assertEquals(FULL_CODE_RESULT_LIST, testList);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    void searchmodules_missingkey_exceptionThrown() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "            searcher \u003d new SearchModulesCommand(allModules,keyword);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "            searcher.execute();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "            testList \u003d searcher.matchList;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "            assertEquals(999, testList.size());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "            assertEquals(null, e.getMessage());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vanessa-kang": 78
    }
  },
  {
    "path": "src/test/java/seedu/duke/apps/academicplanner/commons/AcademicCalendarSorterTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "package seedu.duke.apps.academicplanner.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "import seedu.duke.apps.moduleloader.ModuleLoader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "import seedu.duke.apps.moduleloader.exceptions.ModuleLoaderException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "import seedu.duke.global.objects.PartialModule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "import seedu.duke.global.objects.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "//@@author jerroldlam"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "class AcademicCalendarSorterTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    Person currentPerson;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    AddUtils addUtils;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    ModuleLoader allModules;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    AcademicCalendarSorter sorter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    void setup() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            currentPerson \u003d new Person(\"Bobby\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            allModules \u003d new ModuleLoader();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            addUtils \u003d new AddUtils(allModules,currentPerson);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        } catch (ModuleLoaderException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    void processCalendar_mixedList_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        addUtils.addModuleToUser(\"CS1010\",1,\"A-\",4);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        addUtils.addModuleToUser(\"CS1231\",1,\"B\",4);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        addUtils.addModuleToUser(\"CG1111\",1,\"B+\",6);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        addUtils.addModuleToUser(\"MA1511\",1,\"S\",4);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        addUtils.addModuleToUser(\"MA1512\",1,\"S\",4);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        addUtils.addModuleToUser(\"CS2040C\",2,\"A-\",4);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        addUtils.addModuleToUser(\"CG1112\",2,\"B\",4);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        addUtils.addModuleToUser(\"MA1508E\",2,\"S\",4);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        sorter \u003d new AcademicCalendarSorter(currentPerson.getModulesList());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        ArrayList\u003cPartialModule\u003e testList \u003d sorter.processCalendar(1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        assertEquals(testList.size(),5);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        testList \u003d sorter.processCalendar(2);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        assertEquals(testList.size(),3);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerroldlam": 50
    }
  },
  {
    "path": "src/test/java/seedu/duke/apps/academicplanner/commons/AddUtilsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "package seedu.duke.apps.academicplanner.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.apps.moduleloader.ModuleLoader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.apps.moduleloader.exceptions.ModuleLoaderException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.global.objects.PartialModule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.global.objects.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "//@@author jerroldlam"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "class AddUtilsTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    ModuleLoader allModules;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    Person currentPerson;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    AddUtils addUtils;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    ModuleValidator moduleValidator;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    void setup() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            allModules \u003d new ModuleLoader();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            currentPerson \u003d new Person(\"Bob\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            addUtils \u003d new AddUtils(allModules,currentPerson);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            moduleValidator \u003d new ModuleValidator(allModules,currentPerson);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        } catch (ModuleLoaderException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    void addModuleToUser_emptyList_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        setup();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        ArrayList\u003cPartialModule\u003e modulesList \u003d currentPerson.getModulesList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        assertEquals(0,modulesList.size());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        addUtils.addModuleToUser(\"CS1010\",1,\"A+\",4);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        assertEquals(1,modulesList.size());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        for (PartialModule m : modulesList) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            if (m.getModuleCode().equalsIgnoreCase(\"CS1010\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "                assertEquals(\"CS1010\",m.getModuleCode());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "                assertEquals(1,m.getSemesterIndex());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "                assertEquals(\"A+\",m.getGrade());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "                assertEquals(4,m.getModuleCredit());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        assertTrue(moduleValidator.isModTakenByUser(\"CS1010\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        assertFalse(moduleValidator.isModTakenByUser(\"CS2113\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    void addModuleToUser_nonEmptyList_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        setup();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        ArrayList\u003cPartialModule\u003e modulesList \u003d currentPerson.getModulesList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        assertEquals(0,modulesList.size());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        addUtils.addModuleToUser(\"CS1010\",1,\"A+\",4);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        assertEquals(1,modulesList.size());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        addUtils.addModuleToUser(\"CS1231\",1,\"B-\",4);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        assertEquals(2,modulesList.size());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        for (PartialModule m : modulesList) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            if (m.getModuleCode().equalsIgnoreCase(\"CS1010\")) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "                assertEquals(\"CS1010\",m.getModuleCode());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "                assertEquals(1,m.getSemesterIndex());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "                assertEquals(\"A+\",m.getGrade());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "                assertEquals(4,m.getModuleCredit());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "                assertEquals(\"CS1231\",m.getModuleCode());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "                assertEquals(1,m.getSemesterIndex());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "                assertEquals(\"B-\",m.getGrade());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "                assertEquals(4,m.getModuleCredit());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        assertTrue(moduleValidator.isModTakenByUser(\"CS1010\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        assertTrue(moduleValidator.isModTakenByUser(\"CS1231\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        assertFalse(moduleValidator.isModTakenByUser(\"CS2113\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerroldlam": 80,
      "Khenus": 4
    }
  },
  {
    "path": "src/test/java/seedu/duke/apps/academicplanner/commons/EditUtilsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "package seedu.duke.apps.academicplanner.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import seedu.duke.apps.moduleloader.ModuleLoader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import seedu.duke.apps.moduleloader.exceptions.ModuleLoaderException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.global.objects.PartialModule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.global.objects.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "//@@author harryleecp"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "class EditUtilsTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    ModuleLoader allModules;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    ModuleValidator moduleValidator;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    Person currentPerson;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    AddUtils addUtils;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    EditUtils editUtils;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    ArrayList\u003cPartialModule\u003e modulesList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    void setup() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            allModules \u003d new ModuleLoader();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            currentPerson \u003d new Person(\"Bob\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            addUtils \u003d new AddUtils(allModules,currentPerson);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            moduleValidator \u003d new ModuleValidator(allModules,currentPerson);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            editUtils \u003d new EditUtils(allModules, currentPerson);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            modulesList \u003d currentPerson.getModulesList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            assertEquals(modulesList.size(),0);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            addUtils.addModuleToUser(\"CS1010\",1,\"A+\",4);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            assertEquals(modulesList.size(),1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        } catch (ModuleLoaderException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    void updateModuleGrade_nonEmptyList_success() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        setup();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        editUtils.updateModuleGrade(\"CS1010\", \"A-\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        assertEquals(modulesList.size(), 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        for (PartialModule m : modulesList) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            if (m.getModuleCode().equalsIgnoreCase(\"CS1010\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                assertEquals(m.getModuleCode(), \"CS1010\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                assertTrue(moduleValidator.isValidGrade(m.getGrade()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                assertEquals(m.getGrade(), \"A-\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                assertEquals(m.getSemesterIndex(), 1);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                assertEquals(m.getModuleCredit(), 4);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    void updateModuleSemester_nonEmptyList_success() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        setup();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        editUtils.updateModuleSemester(\"CS1010\", \"3\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        assertEquals(modulesList.size(), 1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        for (PartialModule m : modulesList) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            if (m.getModuleCode().equalsIgnoreCase(\"CS1010\")) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                assertEquals(m.getModuleCode(), \"CS1010\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                assertEquals(m.getGrade(), \"A+\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                assertTrue(moduleValidator.isValidSemester(m.getSemesterIndex()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                assertEquals(m.getSemesterIndex(), 3);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                assertEquals(m.getModuleCredit(), 4);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "harryleecp": 74,
      "Khenus": 2
    }
  },
  {
    "path": "src/test/java/seedu/duke/apps/academicplanner/commons/RemoveUtilsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "package seedu.duke.apps.academicplanner.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import seedu.duke.apps.moduleloader.ModuleLoader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import seedu.duke.apps.moduleloader.exceptions.ModuleLoaderException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.global.objects.PartialModule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.global.objects.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "//@@author harryleecp"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "class RemoveUtilsTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    ModuleLoader allModules;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    Person currentPerson;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    ModuleValidator moduleValidator;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    AddUtils addUtils;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    RemoveUtils removeUtils;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    void setup() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            allModules \u003d new ModuleLoader();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            currentPerson \u003d new Person(\"Bob\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            addUtils \u003d new AddUtils(allModules,currentPerson);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            moduleValidator \u003d new ModuleValidator(allModules,currentPerson);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            removeUtils \u003d new RemoveUtils(currentPerson);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        } catch (ModuleLoaderException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    void removeModuleFromUserModuleList_nonEmptyList_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        setup();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        ArrayList\u003cPartialModule\u003e modulesList \u003d currentPerson.getModulesList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        assertEquals(modulesList.size(),0);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        addUtils.addModuleToUser(\"CS1010\",1,\"A+\",4);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        assertEquals(modulesList.size(),1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        removeUtils.removeModuleFromUserModuleList(\"CS1010\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        assertEquals(modulesList.size(), 0);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "harryleecp": 44,
      "Khenus": 2
    }
  },
  {
    "path": "src/test/java/seedu/duke/apps/capcalculator/CapCalculatorAppParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "package seedu.duke.apps.capcalculator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import seedu.duke.apps.capcalculator.commands.CurrentCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import seedu.duke.apps.capcalculator.commands.SetTargetCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.global.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.global.objects.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "//@@author JuZihao"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "class CapCalculatorAppParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private static final String INVALID_COMMAND_MESSAGE \u003d \"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private Person currentPerson;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        currentPerson \u003d new Person(\"Bob\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    void parse_emptyInput_exceptionThrown() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            final String emptyInput \u003d \"\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            CapCalculatorParser.parse(emptyInput, currentPerson, ui);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            assertEquals(INVALID_COMMAND_MESSAGE, e.getMessage());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    void parse_unknownInput_exceptionThrown() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            final String unknownInput \u003d \"unknown command word\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            CapCalculatorParser.parse(unknownInput, currentPerson, ui);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            assertEquals(INVALID_COMMAND_MESSAGE, e.getMessage());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * Tests for commands. \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    public void parse_currentCommand_parsedCorrectly() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        final String input \u003d \"current\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        parseAndAssertCommandType(input, CurrentCommand.class, currentPerson, ui);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    public void parse_setTargetCommand_parsedCorrectly() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        final String input \u003d \"set target\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        parseAndAssertCommandType(input, SetTargetCommand.class, currentPerson, ui);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    public void parse_exitCommand_parsedCorrectly() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        final String input \u003d \"exit\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        parseAndAssertCommandType(input, Command.class, currentPerson, ui);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * Parses input and asserts the class/type of the returned command object."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * @param input to be parsed"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * @param expectedCommandClass expected class of returned command"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private \u003cT extends Command\u003e void parseAndAssertCommandType(String input, Class\u003cT\u003e expectedCommandClass,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "                                                            Person currentPerson, Ui ui) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            final Command result \u003d CapCalculatorParser.parse(input, currentPerson, ui);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            assertTrue(result.getClass().isAssignableFrom(expectedCommandClass));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JuZihao": 82,
      "Khenus": 2
    }
  },
  {
    "path": "src/test/java/seedu/duke/apps/capcalculator/SetSuParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "package seedu.duke.apps.capcalculator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import seedu.duke.apps.capcalculator.commands.SetSuByModuleCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import seedu.duke.apps.capcalculator.commands.SetSuBySemesterCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import seedu.duke.global.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import seedu.duke.global.objects.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "//@@author JuZihao"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "class SetSuParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private static final String INVALID_SU_ERROR \u003d \"Number entered does not correspond to any S/U method.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    Person currentPerson;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    Ui ui;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        currentPerson \u003d new Person(\"Bob\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    void parse_SetSuByModuleCommand_parsedCorrectly() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        final String choice \u003d \"2\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        parseAndAssertCommandType(choice, SetSuByModuleCommand.class, currentPerson, ui);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    void parse_SetSuBySemesterCommand_parsedCorrectly() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        final String choice \u003d \"1\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        parseAndAssertCommandType(choice, SetSuBySemesterCommand.class, currentPerson, ui);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    void parse_unknownChoice_exceptionThrown() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            final String unknownChoice \u003d \"unknown choice\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            SetSuParser.parse(unknownChoice, currentPerson, ui);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            assertEquals(INVALID_SU_ERROR, e.getMessage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * Parses input and asserts the class/type of the returned command object."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * @param choice to be parsed"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * @param expectedCommandClass expected class of returned command"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private \u003cT extends Command\u003e void parseAndAssertCommandType(String choice, Class\u003cT\u003e expectedCommandClass,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "                                                               Person currentPerson, Ui ui) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            final Command result \u003d SetSuParser.parse(choice, currentPerson, ui);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            assertTrue(result.getClass().isAssignableFrom(expectedCommandClass));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JuZihao": 64
    }
  },
  {
    "path": "src/test/java/seedu/duke/apps/capcalculator/commands/CurrentCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "package seedu.duke.apps.capcalculator.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "import seedu.duke.apps.academicplanner.commons.AddUtils;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import seedu.duke.apps.academicplanner.commons.EditUtils;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "import seedu.duke.apps.academicplanner.commons.RemoveUtils;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "import seedu.duke.apps.moduleloader.ModuleLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "import seedu.duke.apps.moduleloader.exceptions.ModuleLoaderException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.global.objects.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "//@@author jerroldlam"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "class CurrentCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    Person currentPerson;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    ModuleLoader allModules;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    AddUtils addUtils;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    RemoveUtils removeUtils;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    EditUtils editUtils;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    void setup() throws ModuleLoaderException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        currentPerson \u003d new Person(\"Bob\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        allModules \u003d new ModuleLoader();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        addUtils \u003d new AddUtils(allModules,currentPerson);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        removeUtils \u003d new RemoveUtils(currentPerson);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        editUtils \u003d new EditUtils(allModules, currentPerson);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    void execute_populatedList_result() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        addUtils.addModuleToUser(\"CS1010\",1,\"A-\",4);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        addUtils.addModuleToUser(\"CS1231\",1,\"B\",4);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        addUtils.addModuleToUser(\"CG1111\",1,\"B+\",6);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        addUtils.addModuleToUser(\"MA1511\",1,\"S\",4);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        addUtils.addModuleToUser(\"MA1512\",1,\"S\",4);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        CurrentCommand currentCommand \u003d new CurrentCommand(currentPerson);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        double currentCap \u003d currentCommand.getCurrentCap();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        assertEquals(4.0, currentCap);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    void execute_populatedListAllSU_fail() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        addUtils.addModuleToUser(\"CS1010\",1,\"S\",4);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        addUtils.addModuleToUser(\"CS1231\",1,\"S\",4);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        addUtils.addModuleToUser(\"CG1111\",1,\"S\",6);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        addUtils.addModuleToUser(\"MA1511\",1,\"S\",4);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        addUtils.addModuleToUser(\"MA1512\",1,\"S\",4);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        CurrentCommand currentCommand \u003d new CurrentCommand(currentPerson);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        double currentCap \u003d currentCommand.getCurrentCap();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        boolean isNan \u003d Double.isNaN(currentCap);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        assertTrue(isNan);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    void execute_emptyList_fail() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        CurrentCommand currentCommand \u003d new CurrentCommand(currentPerson);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        double currentCap \u003d currentCommand.getCurrentCap();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        boolean isNan \u003d Double.isNaN(currentCap);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        assertTrue(isNan);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    void execute_addOneRemoveOne_fail() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        addUtils.addModuleToUser(\"CS1010\",1,\"S\",4);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        removeUtils.removeModuleFromUserModuleList(\"CS1010\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        CurrentCommand currentCommand \u003d new CurrentCommand(currentPerson);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        double currentCap \u003d currentCommand.getCurrentCap();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        boolean isNan \u003d Double.isNaN(currentCap);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        assertTrue(isNan);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    void execute_addTwoRemoveOne_result() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        addUtils.addModuleToUser(\"CS1010\",1,\"S\",4);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        addUtils.addModuleToUser(\"CS2040\",1,\"A\",4);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        removeUtils.removeModuleFromUserModuleList(\"CS1010\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        CurrentCommand currentCommand \u003d new CurrentCommand(currentPerson);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        double currentCap \u003d currentCommand.getCurrentCap();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        assertEquals(5.0, currentCap);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    void execute_addTwoRemoveOne_fail() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        addUtils.addModuleToUser(\"CS1010\",1,\"A\",4);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        addUtils.addModuleToUser(\"CS2040\",1,\"S\",4);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        removeUtils.removeModuleFromUserModuleList(\"CS1010\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        CurrentCommand currentCommand \u003d new CurrentCommand(currentPerson);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        double currentCap \u003d currentCommand.getCurrentCap();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        boolean isNan \u003d Double.isNaN(currentCap);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        assertTrue(isNan);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    void execute_addOneEditOne_result() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        addUtils.addModuleToUser(\"CS1010\",1,\"A\",4);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        CurrentCommand currentCommand \u003d new CurrentCommand(currentPerson);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        double currentCap \u003d currentCommand.getCurrentCap();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        assertEquals(5, currentCap);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        editUtils.updateModuleGrade(\"CS1010\", \"A-\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        currentCap \u003d currentCommand.getCurrentCap();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        assertEquals(4.5, currentCap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    void execute_addOneEditOne_fail() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        addUtils.addModuleToUser(\"CS1010\",1,\"A\",4);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        CurrentCommand currentCommand \u003d new CurrentCommand(currentPerson);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        double currentCap \u003d currentCommand.getCurrentCap();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        assertEquals(5, currentCap);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        editUtils.updateModuleGrade(\"CS1010\", \"S\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        currentCap \u003d currentCommand.getCurrentCap();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        boolean isNan \u003d Double.isNaN(currentCap);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        assertTrue(isNan);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerroldlam": 118,
      "JuZihao": 1,
      "Khenus": 1
    }
  },
  {
    "path": "src/test/java/seedu/duke/apps/capcalculator/commons/CalculatorUtilsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Khenus"
        },
        "content": "package seedu.duke.apps.capcalculator.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Khenus"
        },
        "content": "class CalculatorUtilsTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    void updateCap() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    void formatCapToString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    void isNaN_not() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Khenus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Khenus": 18
    }
  },
  {
    "path": "src/test/java/seedu/duke/apps/capcalculator/commons/SetSuUtilsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "package seedu.duke.apps.capcalculator.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import seedu.duke.apps.academicplanner.commons.AddUtils;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import seedu.duke.apps.capcalculator.exceptions.CapCalculatorException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import seedu.duke.apps.moduleloader.ModuleLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import seedu.duke.apps.moduleloader.exceptions.ModuleLoaderException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import seedu.duke.global.objects.PartialModule;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import seedu.duke.global.objects.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import static java.util.stream.Collectors.toList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "//@@author JuZihao"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "class SetSuUtilsTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private static final String EMPTY_LIST_ERROR \u003d \"Looks like your S/U list is empty!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private static final String INVALID_MODULE_ERROR \u003d \"Looks like you did not take the module you entered \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "                        + \"or the module you entered has a grade that cannot be S/Ued!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private static final String EXITING_CURRENT_COMMAND \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            \"Exiting current command back to CAP Calculator App Main Menu.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private static final String NEW_LINE \u003d \"\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private static final String DUPLICATE_MODULE_ERROR \u003d \"Looks like you have already added this module!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    Person currentPerson;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    AddUtils addUtils;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    SetSuUtils setSuUtils;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    ModuleLoader allModules;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    Ui ui;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    ArrayList\u003cPartialModule\u003e suList;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    PartialModule suModule;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    ArrayList\u003cPartialModule\u003e filteredList;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    void setup() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            currentPerson \u003d new Person(\"Bobby\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            allModules \u003d new ModuleLoader();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            addUtils \u003d new AddUtils(allModules,currentPerson);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            ui \u003d new Ui();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            addUtils.addModuleToUser(\"CS1010\",1,\"A-\",4);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            addUtils.addModuleToUser(\"CS1231\",1,\"B\",4);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            addUtils.addModuleToUser(\"CG1111\",1,\"B+\",6);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            addUtils.addModuleToUser(\"MA1511\",1,\"S\",4);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            addUtils.addModuleToUser(\"MA1512\",1,\"S\",4);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            addUtils.addModuleToUser(\"CS2040C\",2,\"A-\",4);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            addUtils.addModuleToUser(\"CG1112\",2,\"B\",4);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            addUtils.addModuleToUser(\"MA1508E\",2,\"S\",4);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            addUtils.addModuleToUser(\"GER1000\",2,\"A\",4);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            addUtils.addModuleToUser(\"GET1002\",2,\"B+\",4);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            setSuUtils \u003d new SetSuUtils(currentPerson, ui);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            filteredList \u003d (ArrayList\u003cPartialModule\u003e) currentPerson.getModulesList().stream()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "                    .filter((partialModule) -\u003e partialModule.getCap() \u003e\u003d 0)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "                    .collect(toList());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            suList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        } catch (ModuleLoaderException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    void execute_getSuListBySemester_result() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            suList \u003d setSuUtils.getSuListBySemester(1);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            assertEquals(3, suList.size());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            suList \u003d setSuUtils.getSuListBySemester(2);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            assertEquals(4, suList.size());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        } catch (CapCalculatorException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    void execute_getSuListBySemester_exceptionThrown() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            suList \u003d setSuUtils.getSuListBySemester(4);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            assertEquals(0, suList.size());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        } catch (CapCalculatorException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            assertEquals(EMPTY_LIST_ERROR + NEW_LINE + EXITING_CURRENT_COMMAND, e.getMessage());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    void execute_getSuModule_result() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            suModule \u003d setSuUtils.getSuModule(filteredList, \"CS1010\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            assertEquals(\"CS1010\", suModule.getModuleCode());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            assertEquals(4.50, suModule.getCap());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            assertEquals(4, suModule.getModuleCredit());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            suModule \u003d setSuUtils.getSuModule(filteredList, \"CS1231\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            assertEquals(\"CS1231\", suModule.getModuleCode());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            assertEquals(3.50,suModule.getCap());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            assertEquals(4, suModule.getModuleCredit());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        } catch (CapCalculatorException e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    void execute_getSuModule_exceptionThrown() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            suModule \u003d setSuUtils.getSuModule(filteredList, \"MA1511\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        } catch (CapCalculatorException e) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            assertEquals(INVALID_MODULE_ERROR + NEW_LINE + EXITING_CURRENT_COMMAND, e.getMessage());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    void execute_addModuleToSuList_results() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            suModule \u003d setSuUtils.getSuModule(filteredList, \"CS1231\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            setSuUtils.addModuleToSuList(suList,suModule);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            assertEquals(1, suList.size());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            suModule \u003d setSuUtils.getSuModule(filteredList, \"CS1010\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            setSuUtils.addModuleToSuList(suList,suModule);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            assertEquals(2, suList.size());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        } catch (CapCalculatorException e) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    void execute_addModuleToSuList_exceptionThrown() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            suModule \u003d setSuUtils.getSuModule(filteredList, \"CS1231\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            setSuUtils.addModuleToSuList(suList,suModule);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            suModule \u003d setSuUtils.getSuModule(filteredList, \"CS1231\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            setSuUtils.addModuleToSuList(suList,suModule);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        } catch (CapCalculatorException e) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            assertEquals(DUPLICATE_MODULE_ERROR + NEW_LINE + EXITING_CURRENT_COMMAND, e.getMessage());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JuZihao": 144
    }
  },
  {
    "path": "src/test/java/seedu/duke/apps/capcalculator/commons/SetTargetUtilsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Khenus"
        },
        "content": "package seedu.duke.apps.capcalculator.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import java.io.ByteArrayInputStream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.apps.capcalculator.exceptions.InvalidCapException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.apps.capcalculator.exceptions.InvalidCreditException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.global.objects.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Khenus"
        },
        "content": "//@@author Khenus"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Khenus"
        },
        "content": "class SetTargetUtilsTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public void getTargetCap_getCapFromUser_success() throws InvalidCapException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        String input \u003d \"4.9\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        InputStream in \u003d new ByteArrayInputStream(input.getBytes());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        Scanner scan \u003d new Scanner(in);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        Person person \u003d new Person(\"testing\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        SetTargetUtils utils \u003d new SetTargetUtils(person, scan);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        assertEquals(4.9, utils.getTargetCap());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public void getTargetCap_getCapFromUserLargerThan5_failure() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        String input \u003d \"5.1\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        InputStream in \u003d new ByteArrayInputStream(input.getBytes());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        Scanner scan \u003d new Scanner(in);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        Person person \u003d new Person(\"testing\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        SetTargetUtils utils \u003d new SetTargetUtils(person, scan);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        Exception exception \u003d assertThrows(InvalidCapException.class, () -\u003e {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            utils.getTargetCap();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        });"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        assertTrue(exception.getMessage().contains(\"Your target CAP cannot be greater than the maximum CAP of 5!\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public void getTargetCap_getCapFromUserLesserThan0_failure() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        String input \u003d \"-0.1\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        InputStream in \u003d new ByteArrayInputStream(input.getBytes());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        Scanner scan \u003d new Scanner(in);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        Person person \u003d new Person(\"testing\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        SetTargetUtils utils \u003d new SetTargetUtils(person, scan);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        Exception exception \u003d assertThrows(InvalidCapException.class, () -\u003e {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            utils.getTargetCap();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        });"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        assertTrue(exception.getMessage().contains(\"Your target CAP cannot be lower than the minimum CAP of 0!\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public void getTargetGradedMC_getTargetFromUser_success() throws InvalidCreditException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        String input \u003d \"180\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        InputStream in \u003d new ByteArrayInputStream(input.getBytes());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        Scanner scan \u003d new Scanner(in);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        Person person \u003d new Person(\"testing\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        SetTargetUtils utils \u003d new SetTargetUtils(person, scan);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        assertEquals(180, utils.getTargetGradedMC());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public void getTargetGradedMC_getTargetFromUserDouble_failure() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        String input \u003d \"-1\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        InputStream in \u003d new ByteArrayInputStream(input.getBytes());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        Scanner scan \u003d new Scanner(in);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        Person person \u003d new Person(\"testing\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        SetTargetUtils utils \u003d new SetTargetUtils(person, scan);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        Exception exception \u003d assertThrows(InvalidCreditException.class, () -\u003e {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            utils.getTargetGradedMC();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        });"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        assertTrue(exception.getMessage().contains(\"Your target MC should be greater than 0!\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Khenus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Khenus": 87
    }
  },
  {
    "path": "src/test/java/seedu/duke/apps/moduleloader/ModuleLoaderTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Khenus"
        },
        "content": "package seedu.duke.apps.moduleloader;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.apps.moduleloader.exceptions.ModuleLoaderException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.global.objects.FullModule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Khenus"
        },
        "content": "//@@author Khenus"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Khenus"
        },
        "content": "class ModuleLoaderTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private static final int TOTAL_NUMBER_OF_MODULES \u003d 12436;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private static final int INDEX_OF_CS1010 \u003d 1786;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private ModuleLoader allModules;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            allModules \u003d new ModuleLoader();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        } catch (ModuleLoaderException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    void getModuleMap_loadAllModuleData_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        Map\u003cString, Integer\u003e moduleMap \u003d allModules.getModuleMap();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        assertEquals(moduleMap.get(\"CS1010\"), INDEX_OF_CS1010);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    void getModuleFullDetails_loadAllModuleData_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        FullModule[] modules \u003d allModules.getModuleFullDetails();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        assertEquals(modules.length, TOTAL_NUMBER_OF_MODULES);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        assertEquals(modules[1786].toString(), \"{\\\"additionalProperties\\\":{},\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                + \"\\\"attributes\\\":[true,false,false,false,false,false,false,false,false],\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                + \"\\\"corequisite\\\":\\\"\\\",\\\"department\\\":\\\"Computer Science\\\",\\\"faculty\\\":\\\"Computing\\\",\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                + \"\\\"moduleCode\\\":\\\"CS1010\\\",\\\"moduleCredit\\\":4,\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                + \"\\\"preclusion\\\":\\\"CS1010E, CS1010J, CS1010S, CS1010X, CS1010XCP, CS1101S\\\",\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                + \"\\\"prerequisite\\\":\\\"\\\",\\\"semester\\\":[1,2],\\\"title\\\":\\\"Programming Methodology\\\"}\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    void getModuleFullDetails_loadAllModuleData_fail() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        Exception exception \u003d assertThrows(ModuleLoaderException.class, () -\u003e {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            allModules \u003d new ModuleLoader(false);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        });"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        assertTrue(exception.getMessage().contains(\"Data for Modules corrupted!\\nTerminating program...\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Khenus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Khenus": 58
    }
  },
  {
    "path": "src/test/java/seedu/duke/parser/AppParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "package seedu.duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "import seedu.duke.apps.academicplanner.AcademicPlannerApp;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "import seedu.duke.apps.capcalculator.CapCalculatorApp;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "import seedu.duke.apps.moduleloader.ModuleLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "import seedu.duke.global.App;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "import seedu.duke.global.objects.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "//@@author jerroldlam"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "class AppParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private static final String INVALID_COMMAND_MESSAGE \u003d \"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    ModuleLoader allModules;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    Person currentPerson;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    Ui ui;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    Storage storage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    void setup() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            allModules \u003d new ModuleLoader();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            currentPerson \u003d new Person(\"Bob\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            ui \u003d new Ui();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            storage \u003d new Storage(allModules);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    void parse_emptyInput_exceptionThrown() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            final String emptyInput \u003d \"\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            AppParser.parse(emptyInput,allModules,currentPerson,ui,storage);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            assertEquals(INVALID_COMMAND_MESSAGE, e.getMessage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    void parse_randomInput_exceptionThrown() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            final String randomInput \u003d \"i am a gummy bear\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            AppParser.parse(randomInput,allModules,currentPerson,ui,storage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            assertEquals(INVALID_COMMAND_MESSAGE, e.getMessage());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    void parse_acadplan_correct() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        final String input \u003d \"acadplan\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        parseAndAssertCommandType(input, AcademicPlannerApp.class,allModules,currentPerson,ui,storage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    void parse_capcalc_correct() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        final String input \u003d \"capcalc\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        parseAndAssertCommandType(input, CapCalculatorApp.class,allModules,currentPerson,ui,storage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private \u003cT extends App\u003e void parseAndAssertCommandType(String input, Class\u003cT\u003e expectedCommandClass,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "                                                           ModuleLoader allModules, Person currentPerson, Ui ui,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "                                                           Storage storage) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            final App result \u003d AppParser.parse(input, allModules, currentPerson, ui, storage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            assertTrue(result.getClass().isAssignableFrom(expectedCommandClass));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerroldlam": 79,
      "harryleecp": 2
    }
  },
  {
    "path": "src/test/java/seedu/duke/storage/StorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Khenus"
        },
        "content": "package seedu.duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.apps.moduleloader.ModuleLoader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.apps.moduleloader.exceptions.ModuleLoaderException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.global.objects.Person;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Khenus"
        },
        "content": "//@@author Khenus"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Khenus"
        },
        "content": "class StorageTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private ByteArrayOutputStream outContent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private Person person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public void setup() throws ModuleLoaderException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        ModuleLoader allModules \u003d new ModuleLoader();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        storage \u003d new Storage(allModules);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        person \u003d new Person(\"test\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public void loader_loadingFileMissing_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        String notFoundCheckString \u003d \"Save file not found!\\nIt will be automatically created.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        String corruptedCheckString \u003d \"Save file corrupted!\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        String successfulCheckString \u003d \"module loaded.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        String multipleSuccessfulCheckString \u003d \"modules loaded.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        String emptyFileCheckString \u003d \"Save file is empty. No module loaded.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        storage.loader(person);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        boolean fileNotFound \u003d outContent.toString().contains(notFoundCheckString);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        boolean corrupted \u003d outContent.toString().contains(corruptedCheckString);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        boolean successful \u003d outContent.toString().contains(successfulCheckString);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        boolean multiple \u003d outContent.toString().contains(multipleSuccessfulCheckString);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        boolean emptyFile \u003d outContent.toString().contains(emptyFileCheckString);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        assertTrue(fileNotFound || corrupted || successful || multiple || emptyFile);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public void saver_savingDataToFile_success() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        String checkString \u003d \"Data successfully saved!\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        storage.saver(person);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        assertTrue(outContent.toString().contains(checkString));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Khenus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Khenus": 54
    }
  },
  {
    "path": "src/test/java/seedu/duke/storage/commons/FieldValidatorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Khenus"
        },
        "content": "package seedu.duke.storage.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.apps.academicplanner.commons.ModuleValidator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.apps.moduleloader.ModuleLoader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.apps.moduleloader.exceptions.ModuleLoaderException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.global.objects.Person;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.storage.exceptions.CorruptedSaveFileException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertArrayEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Khenus"
        },
        "content": "//@@author Khenus"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Khenus"
        },
        "content": "class FieldValidatorTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    void validate_allFieldsValid_success() throws ModuleLoaderException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        int[] details \u003d {0, 0, 0, 0, 0, 0};"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        String[] fieldItems \u003d {\"1\", \"CG1111\", \"A\", \"6\"};"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        ModuleValidator moduleValidator \u003d new ModuleValidator(new ModuleLoader(), new Person(\"test\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        FieldValidator validator \u003d new FieldValidator(details, fieldItems, moduleValidator);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        int[] detailsCheck \u003d {1, 0, 0, 0, 0, 0};"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        boolean isEntryValid \u003d validator.validate();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        assertEquals(true, isEntryValid);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        assertArrayEquals(detailsCheck, details);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    void validate_invalidSemester_success() throws ModuleLoaderException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        int[] details \u003d {0, 0, 0, 0, 0, 0};"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        String[] fieldItems \u003d {\"-1\", \"CG1111\", \"A\", \"6\"};"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        ModuleValidator moduleValidator \u003d new ModuleValidator(new ModuleLoader(), new Person(\"test\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        FieldValidator validator \u003d new FieldValidator(details, fieldItems, moduleValidator);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        int[] detailsCheck \u003d {0, 1, 1, 0, 0, 0};"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        boolean isEntryValid \u003d validator.validate();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        assertEquals(false, isEntryValid);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        assertArrayEquals(detailsCheck, details);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    void validate_invalidModule_success() throws ModuleLoaderException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        int[] details \u003d {0, 0, 0, 0, 0, 0};"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        String[] fieldItems \u003d {\"1\", \"CG11111\", \"A\", \"6\"};"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        ModuleValidator moduleValidator \u003d new ModuleValidator(new ModuleLoader(), new Person(\"test\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        FieldValidator validator \u003d new FieldValidator(details, fieldItems, moduleValidator);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        int[] detailsCheck \u003d {0, 1, 0, 1, 0, 0};"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        boolean isEntryValid \u003d validator.validate();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        assertEquals(false, isEntryValid);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        assertArrayEquals(detailsCheck, details);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    void validate_invalidGrade_success() throws ModuleLoaderException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        int[] details \u003d {0, 0, 0, 0, 0, 0};"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        String[] fieldItems \u003d {\"1\", \"CG1111\", \"Z\", \"6\"};"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        ModuleValidator moduleValidator \u003d new ModuleValidator(new ModuleLoader(), new Person(\"test\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        FieldValidator validator \u003d new FieldValidator(details, fieldItems, moduleValidator);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        int[] detailsCheck \u003d {0, 1, 0, 0, 1, 0};"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        boolean isEntryValid \u003d validator.validate();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        assertEquals(false, isEntryValid);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        assertArrayEquals(detailsCheck, details);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    void validate_invalidModuleCredit_success() throws ModuleLoaderException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        int[] details \u003d {0, 0, 0, 0, 0, 0};"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        String[] fieldItems \u003d {\"1\", \"CG1111\", \"A\", \"-50\"};"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        ModuleValidator moduleValidator \u003d new ModuleValidator(new ModuleLoader(), new Person(\"test\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        FieldValidator validator \u003d new FieldValidator(details, fieldItems, moduleValidator);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        int[] detailsCheck \u003d {0, 1, 0, 0, 0, 1};"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        boolean isEntryValid \u003d validator.validate();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        assertEquals(false, isEntryValid);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        assertArrayEquals(detailsCheck, details);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    void validate_invalidFieldsPriority_success() throws ModuleLoaderException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        int[] details \u003d {0, 0, 0, 0, 0, 0};"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        String[] fieldItems \u003d {\"-1\", \"CG11111\", \"Z\", \"-50\"};"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        ModuleValidator moduleValidator \u003d new ModuleValidator(new ModuleLoader(), new Person(\"test\"));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        FieldValidator validator \u003d new FieldValidator(details, fieldItems, moduleValidator);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        int[] detailsCheck \u003d {0, 1, 1, 0, 0, 0};"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        boolean isEntryValid \u003d validator.validate();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        assertEquals(false, isEntryValid);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        assertArrayEquals(detailsCheck, details);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public void printLoadDetails_corruptedSaveFile_success() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        assertThrows(CorruptedSaveFileException.class, () -\u003e {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            FieldValidator.printLoadDetails(false, 0);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        });"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public void printLoadDetails_allEntryAreValid_zeroEntry_success() throws CorruptedSaveFileException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        String checkString \u003d \"Save file is empty. No module loaded.\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        FieldValidator.printLoadDetails(true, 0);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        assertTrue(outContent.toString().contains(checkString));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public void printLoadDetails_allEntryAreValid_oneEntry_success() throws CorruptedSaveFileException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        String checkString \u003d \"1 module loaded.\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        FieldValidator.printLoadDetails(true, 1);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        assertTrue(outContent.toString().contains(checkString));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public void printLoadDetails_allEntryAreValid_multipleEntry_success() throws CorruptedSaveFileException {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        String checkString \u003d \"10 modules loaded.\";"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        FieldValidator.printLoadDetails(true, 10);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        assertTrue(outContent.toString().contains(checkString));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Khenus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Khenus": 143
    }
  },
  {
    "path": "src/test/java/seedu/duke/storage/commons/LoadUtilsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Khenus"
        },
        "content": "package seedu.duke.storage.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.apps.moduleloader.ModuleLoader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.apps.moduleloader.exceptions.ModuleLoaderException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.global.objects.Person;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.storage.exceptions.LoadFileException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Khenus"
        },
        "content": "//@@author Khenus"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Khenus"
        },
        "content": "class LoadUtilsTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private Person person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private String wrongFileName \u003d \"PlanNus.wrong\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private ModuleLoader allModules;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    void setup() throws ModuleLoaderException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        person \u003d new Person(\"test\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        allModules \u003d new ModuleLoader();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    void load_LoadFileExceptionTesting_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        LoadUtils loader \u003d new LoadUtils(person, wrongFileName, allModules);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        Exception exception \u003d assertThrows(LoadFileException.class, () -\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            loader.load();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        });"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        assertTrue(exception.getMessage().contains(\"Save file not found!\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Khenus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Khenus": 34
    }
  },
  {
    "path": "src/test/java/seedu/duke/storage/commons/SaveUtilsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Khenus"
        },
        "content": "package seedu.duke.storage.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.global.objects.Person;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.storage.exceptions.SaveFileException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Khenus"
        },
        "content": "//@@author Khenus"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Khenus"
        },
        "content": "class SaveUtilsTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private Person person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private String wrongFileName \u003d \"\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    void setup() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        person \u003d new Person(\"test\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    void save_saveFileExceptionTesting_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        SaveUtils saver \u003d new SaveUtils(person, wrongFileName);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        Exception exception \u003d assertThrows(SaveFileException.class, () -\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            saver.save();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        });"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        assertTrue(exception.getMessage().contains(\"Error accessing save file!\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Khenus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Khenus": 29
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "acadplan"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "add CS1010"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "2"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "A"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "details cs2101"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "search cg"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "exit"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "capcalc"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "current"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "exit"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "hi"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "exit"
      }
    ],
    "authorContributionMap": {
      "vanessa-kang": 12
    }
  }
]
