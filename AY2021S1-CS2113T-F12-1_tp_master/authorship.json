[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    implementation \u0027com.google.code.gson:gson:2.8.6\u0027  //Google Json serialzation library"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    implementation \u0027org.apache.commons:commons-lang3:3.11\u0027 //Apache commons lang for Class builder"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    mainClassName \u003d \"seedu.duke.PlanNus\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    archiveBaseName \u003d \"PlanNus\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Khenus"
        },
        "content": "jar {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    manifest {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        attributes("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                \u0027Main-Class\u0027: \u0027seedu.duke.PlanNus\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        )"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Khenus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Khenus": 12,
      "-": 44
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "Display | Name | Github Profile | Portfolio"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "---|:---:|:---:|:---:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "![](https://avatars3.githubusercontent.com/u/60382285?s\u003d400) | Jerrold Lam |  [jerroldlam](https://github.com/jerroldlam \"Github User Profile\") | [Portfolio](team/Lam.md)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "![](https://avatars3.githubusercontent.com/u/56764814?s\u003d100) | Khenus Tan |  [Khenus](https://github.com/Khenus \"Github User Profile\") | [Portfolio](team/Khenus.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "![](https://avatars3.githubusercontent.com/u/60414537?s\u003d100) | Harry Lee |  [harryleecp](https://github.com/harryleecp \"Github User Profile\") | [Portfolio](team/Harry.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "![](https://avatars3.githubusercontent.com/u/57383789?s\u003d100) | Ju Zihao |  [JuZihao](https://github.com/JuZihao \"Github User Profile\") | [Portfolio](team/Zihao.md)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "![](https://avatars3.githubusercontent.com/u/49282734?s\u003d400) | Vanessa Kang |  [Vanessa-Kang](https://github.com/vanessa-kang \"Github User Profile\") | [Portfolio](team/Vanessa.md)"
      }
    ],
    "authorContributionMap": {
      "jerroldlam": 7,
      "-": 2
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "## Setting up PlanNUS"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "First and foremost, the following steps are assuming that you already have a [GitHub](github.com) account set up beforehand. Once this has been done, proceed to __fork__ this [repo](https://github.com/AY2021S1-CS2113T-F12-1/tp), and __clone__ the fork into your computer using [Sourcetree](\u003csourcetreeapp.com\u003e) or any other _Git GUI_."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "The _IDE_ to be used should contain the latest version of _Java_ as this is the main programming language for this application. Thus you are highly recommended to use Intellij IDEA."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "The following are remaining steps to be taken to finish the set up:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "1. Make sure that the version is configured as __JDK 11__."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "2. When prompted, __import__ the project as a __Gradle project__ (could take minutes to complete)."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "3. Enter commands to ensure that PlanNUS functions as expected. You may refer to the _User Guide_ for valid commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "## Design"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "{Exact diagram and corresponding descriptions to be added}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "### UI component"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "{Exact diagram and corresponding descriptions to be added}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "### Logic component"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "{Exact diagram and corresponding descriptions to be added}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "### Model component"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "{Exact diagram and corresponding descriptions to be added}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "### Storage component"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "{Exact diagram and corresponding descriptions to be added}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "### Common classes"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "{Exact diagram and corresponding descriptions to be added}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "## Implementation"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "### Academic Calendar Planner features (i.e. add, remove, edit and view)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "#### Proposed implementation"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "{Exact diagram and corresponding descriptions to be added}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "#### Design consideration"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "{Exact diagram and corresponding descriptions to be added}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "### CAP Calculator features (i.e. current and set target)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "#### Proposed implementation"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "{Exact diagram and corresponding descriptions to be added}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "#### Design consideration"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "{Exact diagram and corresponding descriptions to be added}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "## Documentation, logging, testing, configuration, dev-ops"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "__Documentation guide__"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "__Testing guide__"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "__Logging guide__"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "__Configuration guide__"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "__DevOps guide__"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "## Appendix: Requirements"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "### Product scope"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "__Target user profile:__"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "* has adequate level of familiarization with CLI applications"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "* requires a clear outlook of academic journey with the modules offered by NUS"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "* wants to keep track of his or her results and set target grades for the upcoming semester(s)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "* prefers using desktop or laptop instead of other electronic devices"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "__Value proposition:__"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "Provides NUS undergraduates with a platform to keep track of their academic progress and explore other possibilities with the plethora of modules available. "
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "### User stories"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "| Version | As a ...                                                  | I want to ...                                                | So that I can ...                                            |"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "| ------- | --------------------------------------------------------- | ------------------------------------------------------------ | ------------------------------------------------------------ |"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "| v1.0    | fresh undergraduate                                       | visualize the modules in the recommended schedule and course requirements | better plan out my academic journey for the next 4-5 years in NUS |"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "| v1.0    | undergraduate with at least 1 semester of study completed | calculate my CAP easily                                      | forecast my own expected graduation CAP and if they match my expected CAP |"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "| v1.0    | undergraduate with at least 1 semester of study completed | print out a personalized list of modules taken so far and grades obtained | track my academic progression in NUS                         |"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "| v2.0    | user                                                      | find a to-do item by name                                    | locate a to-do without having to go through the entire list  |"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "### Use cases"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "__Use case 1: Add a module__"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "__MSS__"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "1. User enters `acadplan` in the main menu of PlanNUS"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "2. User enters the necessary command and module code "
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "3. PlanNUS prompts user to enter the remaining information"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "4. PlanNUS adds the module"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "__Extensions__"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "* 2a. The command entered is invalid."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "  * 2a1. PlanNUS shows an error message."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "* 2b. Module code entered is invalid."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "  * 2b1. PlanNUS shows an error message."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "* 3a. Invalid semester or grade is entered."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "  * 3a1. PlanNUS shows an error message."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    Use case ends resumes at step 3."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "{More to be added}"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "### Non-Functional Requirements"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "{More to be added}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "### Glossary"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "{More to be added}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "## Appendix: Instructions for manual testing"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "{More to be added}"
      }
    ],
    "authorContributionMap": {
      "harryleecp": 136,
      "-": 28
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "# PlanNUS"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "#### Foreword"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "PlanNUS is a greenfield project which aims to solve the gap in undergraduate academic planning in NUS."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "With the `Academic Calendar Planner`,plaNUS will be able to assist undergraduate students in forecasting their academic journey for their 4 or 5 years in NUS."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "With the `CAP Calulator` , plaNUS will be able to tell you your current CAP and forecast future grades needed to achieve your target CAP."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "## Target User Profile"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "1. All Fresh NUS Undergraduates"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "1. NUS Undergraduates who have completed at least 1 semester of study"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "## Feature List (for V1.0)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "1. Academic Calendar Planner"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    1. Add module"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    1. Edit module"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    1. Remove module"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    1. Print Calendar"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "1. CAP Calculator"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    1. Get Cap"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "## Planned Feature List for the future"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "1. Saving of Academic Calendar Planner into text file."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "2. Loading of Academic Calendar Planner from text file."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "Useful links:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "* [User Guide](https://ay2021s1-cs2113t-f12-1.github.io/tp/UserGuide.html \"User Guide\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "* [Developer Guide](https://ay2021s1-cs2113t-f12-1.github.io/tp/DeveloperGuide.html \"Developer Guide\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "* [About Us](https://ay2021s1-cs2113t-f12-1.github.io/tp/AboutUs.html \"About Us\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "* [Planning Document](https://docs.google.com/document/d/1ikOD_2NS2qUSGtQJpqbVWX7g5mAFV6_jxhiAlka_SSs/edit?usp\u003dsharing \"Collaborative Document\")"
      }
    ],
    "authorContributionMap": {
      "jerroldlam": 30,
      "-": 3
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "# User Guide for PlanNus"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "PlanNUS is a __desktop application for planning academic journey__ with modules offered by National University of Singapore (NUS). The __Command Line Interface (CLI)__ will be required for the program to work."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "## Quick Start"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure that you have Java 11 or above installed."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "1. Download the latest version of `PlanNUS` from [here](https://github.com/AY2021S1-CS2113T-F12-1/tp/releases)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "1. Double click on _PlanNUS.jar_ to start up the program."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "1. If the previous step does not work, open up the command prompt."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "1. Go to the directory where the jar file is saved at."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "1. Enter the following command `java -jar PlanNUS.jar`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "PlanNUS has two separate commands at the main page where the users can either choose to have an outlook of their potential academic journey or calculate their CAP. For each of these commands, there are more specific functions for configuration of user\u0027s desired choices."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "\u003cimg src\u003d\"images/Main_Page_Features.png\" width \u003d \"350\" height \u003d \"80\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "### Academic Calendar Planner: `acadplan`"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "Directs user to the page where he/she can plan a personalized academic journey in NUS by using `add`, `remove` , `view` or `edit` features as shown below."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "\u003cimg src\u003d\"images/acadplan_features.png\" width \u003d \"320\" height \u003d \"220\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "Input format: `acadplan`"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "#### Adding a module into the calendar: `add`"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "Input format: `add \u003cmodule code\u003e`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "**Example of proper usage:**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "* `add CS2113T`"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "* `ADD cs2101`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "Upon entering the desired module, user will be prompted to enter the semester when this module had been or to be taken before keying in the grade as shown in the image below."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "\u003cimg src\u003d\"images/add_module.png\" width \u003d \"550\" height \u003d \"260\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "__\u003cins\u003eCaution\u003c/ins\u003e:__ "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "* Invalid module codes (i.e. Modules not offered by NUS) cannot be added into the calendar"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "* Duplicate module codes cannot be added into the calendar as well"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "#### Removing an existing module in the calendar: `remove`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "Input format: `remove \u003cmodule code\u003e`"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "* `remove cs2113T`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "* `REMOVE CS2101`"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "\u003cimg src\u003d\"images/remove_module.png\" width \u003d \"350\" height \u003d \"50\" /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "__\u003cins\u003eCaution:\u003c/ins\u003e__ "
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "* Only modules that have been added into the calendar can be removed"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "#### Editing an existing module in the calendar: `edit`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "Input format: `edit \u003cmodule code\u003e`"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "* `edit CS2113T`"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "* `EDIT cs2101`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "\u003cimg src\u003d\"images/edit_module.png\" width \u003d \"600\" /\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "As shown in the image, user can choose to edit either the _Semester_ or _Grade_ of the selected module. (__Note:__ Enter either `1` or `2` instead of the component\u0027s name)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "Expected output when user wishes to change the _Semester_."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "\u003cimg src\u003d\"images/edit_module_semester.png\" width \u003d \"390\" height \u003d \"95\"/\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "Expected output when user wishes to change the _Grade_."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "\u003cimg src\u003d\"images/edit_module_grade.png\" width \u003d \"200\" /\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "__\u003cins\u003eCaution:\u003c/ins\u003e__ "
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "* Only modules that have been added into the calendar can be edited"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "#### Printing the academic calendar: `view`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "Input format: `view`"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "{Photo here}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "### Cap Calculator: `capcalc`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "Directs user to the page where he/she can view the `current` CAP or even `set target` CAP to be met in the upcoming semester(s). "
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "\u003cimg src\u003d\"images/capcalc_features.png\" height \u003d \"180\" /\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "Input format: `capcalc`"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "#### Printing current CAP and MCs taken: `current`"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "The value of CAP depends entirely on the modules and with corresponding grades added by the user in Academic Calendar Planner."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "\u003cimg src\u003d\"images/capcalc_current.png\" width \u003d \"340\" /\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "Input format: `current`"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "__\u003cins\u003eCaution:\u003c/ins\u003e__"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "* If there are no modules added, the current CAP and graded MCs are set to 0"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "#### Set target CAP: `set target`"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "This is for the user to set a target CAP that he or she wishes to obtain for the next specified graded MCs."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "\u003cimg src\u003d\"images/capcalc_set_target.png\" height \u003d \"130\" /\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "Input format: `set target`"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "__\u003cins\u003eCaution:\u003c/ins\u003e__"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "* Maximum CAP is 5.0"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "### Exiting from a feature or PlanNUS: `exit`"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "This command directs user back to the main page of PlanNUS after they are done using a feature or exits from the entire application itself."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "When user exits from the Academic Planner, expected output is as shown below."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "\u003cimg src\u003d\"images/exit_acadplan.png\" width \u003d \"350\"/\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "When user exits from the CAP calculator, expected output will be as follows:"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "\u003cimg src\u003d\"images/exit_capcalc.png\" width \u003d \"350\"/\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "Last but not least, the expected output for exiting PlanNUS will be as such:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "\u003cimg src\u003d\"images/exit_PlanNUS.png\" width \u003d \"430\" /\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "Input format: `exit`"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "Question Type|Question|Answer"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ":---:|---|---"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "General | How do I check which modules are offered by NUS? | For more info on which modules are offered by NUS, visit [here](https://nusmods.com/modules?sem[0]\u003d1\u0026sem[1]\u003d2\u0026sem[2]\u003d3\u0026sem[3]\u003d4 \"NUSMODS\")."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "General | What is a valid semester index? | For the purpose of this planning software, we have come to a decision to limit the maximum number of semesters an undergraduate can take to 10, which is 5 academic years. The notation they are represented by is by an integer of value 1 to 10. For a fresh undergraduate, they will begin at semester index of 1. For a year 3 student who is currently in semester 1, the semester index will be 5."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "General | What is a valid grade? | **Letter Grades**: A+, A, B+, B, B-, C+, C, D+, D, F , **Special Grades**: CS, CU, S, U, W, IC, IP, AUD, WU, EXE, **If you have yet to have a grade for the module**: NT"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "**Q**: How do I transfer my data to another computer? "
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "**A**: {your answer here}"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "## Command Summary"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "Note that the following commands are case-insensitive."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "* Initiate the __Academic Calendar Planner__: `acadPlan`"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "| __Action__                                  | Command                |"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "| ------------------------------------------- | ---------------------- |"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "| Adding a module into the calendar           | `add \u003cmodule code\u003e`    |"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "| Removing an existing module in the calendar | `remove \u003cmodule code\u003e` |"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "| Editing an existing module in the calendar  | `edit \u003cmodule code\u003e`   |"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "| Printing the academic calendar              | `view`                 |"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "* Initiate the __CAP calculator__: `capCalc`"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "| __Action__                           | __Command__   |"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "| ------------------------------------ | ------------- |"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "| Printing current CAP and MCs taken   | `current`     |"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "| Configure current CAP and graded MCs | `set current` |"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "| Set target CAP                       | `set target`  |"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "| Make the module grade as S/U         | `set SU`      |"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "* To exit to the main page: `exit`"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "## Appendix"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "### Naming convention for semester indexes"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "For the purpose of this planning software, we have decided to limit the maximum number of semesters an undergraduate can take to 10, which is equivalent to 5 academic years. Each semester is indexed by an integer between 1 to 10. For a fresh undergraduate, they will begin at semester index of 1. For a year 3 student who is currently in semester 1, the semester index will be 5. Below is a table which illustrates the corresponding semester indexes for undergraduates."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "| Academic Year | Semester (as of Academic Year) | Semester Index |"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "| :-----------: | :----------------------------: | :------------: |"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "|       1       |               1                |       1        |"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "|       1       |               2                |       2        |"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "|       2       |               1                |       3        |"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "|       2       |               2                |       4        |"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "|       3       |               1                |       5        |"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "|       3       |               2                |       6        |"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "|       4       |               1                |       7        |"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "|       4       |               2                |       8        |"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "|       5       |               1                |       9        |"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "|       5       |               2                |       10       |"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "### Grade values"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "As per NUS Grade Policy, letter grades will have a corresponding Academic Point attached to them. Special cases such as Satisfactory/Unsatisfactory (SU) grades can be captured by our software as well. Below is a table of grades and their corresponding grade value. Do note that the grades of forecasted modules should be declared as NT, short for Not Taken."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "|            Grade            | Academic Points |"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "| :-------------------------: | :-------------: |"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "|             A+              |       5.0       |"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "|              A              |       5.0       |"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "|             A-              |       4.5       |"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "|             B+              |       4.0       |"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "|              B              |       3.5       |"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "|             B-              |       3.0       |"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "|             C+              |       2.5       |"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "|              C              |       2.0       |"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "|             D+              |       1.5       |"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "|              D              |       1.0       |"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "|              F              |       0.0       |"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "| Additional Grading Options* |        -        |"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "*Additional Grading options include S,U,CS,CU,IC,IP,AUD,EXE,W,WU. They hold no Academic Point Value."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jerroldlam": 10,
      "harryleecp": 192,
      "-": 32
    }
  },
  {
    "path": "docs/team/Harry.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "# Harry Lee - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "### Summary of Contributions"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "Edit, Remove Module in Academic Planner"
      }
    ],
    "authorContributionMap": {
      "jerroldlam": 7
    }
  },
  {
    "path": "docs/team/Khenus.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "# Khenus Tan - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "### Summary of Contributions"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "JSON object data from NUSMODs"
      }
    ],
    "authorContributionMap": {
      "jerroldlam": 7
    }
  },
  {
    "path": "docs/team/Lam.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "# Jerrold Lam - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "### Summary of Contributions"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "Add Module in Academic Planner, module and person object"
      }
    ],
    "authorContributionMap": {
      "jerroldlam": 7
    }
  },
  {
    "path": "docs/team/Vanessa.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "# Vanessa - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "### Summary of Contributions"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "Calendar Printer"
      }
    ],
    "authorContributionMap": {
      "jerroldlam": 7
    }
  },
  {
    "path": "docs/team/Zihao.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "# Ju Zihao - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "### Summary of Contributions"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "Cap Calculator"
      }
    ],
    "authorContributionMap": {
      "jerroldlam": 7
    }
  },
  {
    "path": "src/main/java/seedu/duke/PlanNus.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.apps.moduleloader.ModuleLoader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.globalcommons.App;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.objects.Person;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.parser.AppParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": " * Class representing main function of PlanNUS."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Khenus"
        },
        "content": "public class PlanNus {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private static final String WELCOME_MESSAGE \u003d \"Welcome to PlanNUS!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private static final String WELCOME_BACK_MESSAGE \u003d \"Welcome back to PlanNUS Main Menu!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private static final String EXIT_MESSAGE \u003d \"Thanks for using PlanNUS! We hope to see you again!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private static final String HELP_MESSAGE \u003d \"\\tFor academic planner, type \u003cacadplan\u003e\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            + \"\\tFor CAP calculator, type \u003ccapcalc\u003e\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            + \"\\tTo exit PlanNUS, type \u003cexit\u003e\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private ModuleLoader allModules;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private Person currentPerson;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private boolean isStartupSuccessfully;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * Default constructor for PlanNus."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public PlanNus() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            this.allModules \u003d new ModuleLoader();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            this.currentPerson \u003d new Person(\"Bob\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            this.isStartupSuccessfully \u003d true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            this.isStartupSuccessfully \u003d false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * Main entry function for PlanNUS."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        assert isStartupSuccessfully \u003d\u003d true : \"Startup is successful\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        if (isStartupSuccessfully) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            showWelcomeMessage();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            boolean isExit \u003d false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            while (!isExit) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                    String userInput \u003d ui.getScanner().nextLine();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                    App selectedApp \u003d AppParser.parse(userInput, allModules, currentPerson, ui);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                    selectedApp.run();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                    isExit \u003d selectedApp.getIsExit();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "                    if (!isExit) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "                        showWelcomeBackMessage();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                } catch (Exception e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                    System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            showExitMessage();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * Prints exit message for user just before termination of program."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private void showExitMessage() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        System.out.println(EXIT_MESSAGE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * Prints welcome back message for user when user returns back to main menu."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private void showWelcomeBackMessage() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        System.out.println(WELCOME_BACK_MESSAGE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        System.out.println(HELP_MESSAGE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * Prints welcome message for user upon first entry into PlanNUS."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private void showWelcomeMessage() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        System.out.println(WELCOME_MESSAGE);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        System.out.println(HELP_MESSAGE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * Main executable code."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * @param args arguments from command line"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        new PlanNus().run();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerroldlam": 48,
      "Khenus": 48
    }
  },
  {
    "path": "src/main/java/seedu/duke/apps/academicplanner/AcademicPlannerApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Khenus"
        },
        "content": "package seedu.duke.apps.academicplanner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.apps.moduleloader.ModuleLoader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.globalcommons.App;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.globalcommons.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.objects.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": " * Class representing the Academic Planner Application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Khenus"
        },
        "content": "public class AcademicPlannerApp extends App {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private static final String WELCOME_MESSAGE \u003d \"\\nWelcome to Academic Planner!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private static final String EXIT_MESSAGE \u003d \"Thank you for using Academic Planner!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private static final String COMMANDS_LIST \u003d \"Available commands are:\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            + \"\\tadd \u003cmodule code\u003e\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            + \"\\tedit \u003cmodule code\u003e\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            + \"\\tremove \u003cmodule code\u003e\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            + \"\\tview\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            + \"\\texit\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            + \"Type a command to continue...\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private final ModuleLoader allModules;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private final Person currentPerson;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public AcademicPlannerApp(ModuleLoader allModules, Person currentPerson, Ui ui) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        this.allModules \u003d allModules;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        this.currentPerson \u003d currentPerson;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * Main entry point for the Academic Planner Application."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        System.out.println(WELCOME_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        System.out.println(COMMANDS_LIST);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                String userInput \u003d ui.getScanner().nextLine();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                Command commandInput \u003d AcademicPlannerParser.parse(userInput, allModules, currentPerson, ui);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                commandInput.execute();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                isExit \u003d commandInput.getIsExit();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        showExitMessageAcademicPlanner();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * Prints exit message for Academic Planner."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private void showExitMessageAcademicPlanner() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        System.out.println(EXIT_MESSAGE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Khenus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerroldlam": 13,
      "Khenus": 47
    }
  },
  {
    "path": "src/main/java/seedu/duke/apps/academicplanner/AcademicPlannerParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "package seedu.duke.apps.academicplanner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "import seedu.duke.apps.moduleloader.ModuleLoader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "import seedu.duke.apps.academicplanner.commands.AddModuleCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "import seedu.duke.apps.academicplanner.commands.EditModuleCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "import seedu.duke.apps.academicplanner.commands.PrintCalenderCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "import seedu.duke.apps.academicplanner.commands.RemoveModuleCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "import seedu.duke.exceptions.CommandParserException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "import seedu.duke.globalcommons.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "import seedu.duke.objects.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": " * Class representing the parser for the academic parser. Used in the academic parser app."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "public class AcademicPlannerParser {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    private static final int MODULE_CODE_INDEX \u003d 1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    public static final String NEW_LINE \u003d \"\\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    private static final String EXITING_CURRENT_COMMAND \u003d \"Exiting current command back to Academic Planner Main Menu.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    private static final String ERROR_INVALID_COMMAND \u003d \"INVALID COMMAND\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    private static final String ADD_COMMAND \u003d \"ADD\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    private static final String EDIT_COMMAND \u003d \"EDIT\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    private static final String REMOVE_COMMAND \u003d \"REMOVE\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    private static final String VIEW_COMMAND \u003d \"VIEW\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    private static final String EXIT_COMMAND \u003d \"EXIT\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    private static final String EXIT_MESSAGE \u003d \"Thank you for using Academic Planner!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    private static final String COMMANDS_LIST \u003d \"Available commands are:\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "            + \"\\tadd \u003cmodule code\u003e\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "            + \"\\tedit \u003cmodule code\u003e\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "            + \"\\tremove \u003cmodule code\u003e\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "            + \"\\tview\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "            + \"\\texit\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "            + \"Type a command to continue...\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "     * Command to process the user inputs and to return the intended command with the correct parameters."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "     * @param userInput input of user"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "     * @param allModules data of all modules offered by NUS"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "     * @param currentPerson person using the app"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "     * @param ui ui for output"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "     * @return Command to be executed"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "     * @throws CommandParserException to return with error message"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    public static Command parse(String userInput, ModuleLoader allModules, Person currentPerson, Ui ui)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        throws CommandParserException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        String[] inputs \u003d userInput.toUpperCase().split(\" \");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        Scanner in \u003d ui.getScanner();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        if (inputs[0].equals(ADD_COMMAND)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "            return new AddModuleCommand(allModules, currentPerson, in, inputs[MODULE_CODE_INDEX]);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        } else if (inputs[0].equals(EDIT_COMMAND)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "            return new EditModuleCommand(allModules, currentPerson, in, inputs[MODULE_CODE_INDEX]);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        } else if (inputs[0].equals(REMOVE_COMMAND)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "            return new RemoveModuleCommand(allModules, currentPerson, in, inputs[MODULE_CODE_INDEX]);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        } else if (inputs[0].equals(VIEW_COMMAND)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "            return new PrintCalenderCommand(currentPerson);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        } else if (inputs[0].equals(EXIT_COMMAND)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "            return new Command(true);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "            throw new CommandParserException(ERROR_INVALID_COMMAND + NEW_LINE + EXITING_CURRENT_COMMAND);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vanessa-kang": 65
    }
  },
  {
    "path": "src/main/java/seedu/duke/apps/academicplanner/commands/AddModuleCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Khenus"
        },
        "content": "package seedu.duke.apps.academicplanner.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.apps.moduleloader.ModuleLoader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.apps.academicplanner.commons.AddUtils;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.apps.academicplanner.commons.ModuleValidator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.apps.academicplanner.exceptions.AcademicException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.globalcommons.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.objects.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": " * Class representing an add module command from the academic planner."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Khenus"
        },
        "content": "public class AddModuleCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private static final String ERROR_INVALID_COMMAND \u003d \"INVALID COMMAND\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private static final String ERROR_INVALID_SEMESTER_INDEX \u003d \"INVALID SEMESTER INDEX\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private static final String ERROR_INVALID_GRADE \u003d \"INVALID GRADE VALUE\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private static final String ERROR_NOT_OFFERED \u003d \" IS NOT OFFERED BY NUS\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private static final String ERROR_DUPLICATE_MOD \u003d \"You already have this mod on your calendar!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private static final String VALID_GRADES \u003d \"Valid grades are:\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            + \"\\tLetter Grades: A+, A, A-, B+, B, B-, C+, C, D+, D, F\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            + \"\\tSpecial Grades: CS, CU, S, U, W, IC, IP, AUD, WU, EXE\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            + \"\\tIf you have yet to have a grade for the module: NT\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private static final String VALID_SEMESTERS \u003d \"Valid semesters are integers from 1 to 10, inclusive\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private static final Logger logger \u003d Logger.getLogger(\"AddModuleCommand.java\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private AddUtils addUtils;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private ModuleValidator moduleValidator;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private Scanner in;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public AddModuleCommand(ModuleLoader allModules, Person currentPerson, Scanner in, String moduleCode) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        this.addUtils \u003d new AddUtils(allModules, currentPerson);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        this.moduleValidator \u003d new ModuleValidator(allModules, currentPerson);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        this.in \u003d in;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * Adds a module to the user\u0027s academic calendar if it exists in FullModule,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * else does not add module into user\u0027s academic calendar."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * Validates user\u0027s input semester and grade."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * If either is invalid, does not add module into user\u0027s academic calendar."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public void execute() throws AcademicException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        logger.setLevel(Level.WARNING);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        logger.log(Level.INFO,\"Executing add command.\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        if (!moduleValidator.isModOfferedByNus(moduleCode)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            logger.log(Level.WARNING,\"Module entered not offered by NUS.\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            throw new AcademicException(moduleCode + ERROR_NOT_OFFERED);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        if (moduleValidator.isModTakenByUser(moduleCode)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            logger.log(Level.WARNING,\"Module entered is duplicated.\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            throw new AcademicException(ERROR_DUPLICATE_MOD);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        promptUserToEnterSemester();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        String userInput \u003d in.nextLine().trim();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        int semesterValue;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            semesterValue \u003d Integer.parseInt(userInput);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            logger.log(Level.WARNING,\"Semester entered is not an integer.\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            throw new AcademicException(ERROR_INVALID_COMMAND);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        if (!moduleValidator.isValidSemester(semesterValue)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            logger.log(Level.WARNING,\"Semester entered is invalid.\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            throw new AcademicException(ERROR_INVALID_SEMESTER_INDEX);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        promptUserToEnterGrade();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        String gradeValue \u003d in.nextLine().trim().toUpperCase();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        if (!moduleValidator.isValidGrade(gradeValue)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            logger.log(Level.WARNING,\"Grade entered is invalid.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            throw new AcademicException(ERROR_INVALID_GRADE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        int moduleCredit \u003d addUtils.getModuleCreditForModule(moduleCode);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        assert semesterValue \u003e 0;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        assert moduleCredit \u003e\u003d 0;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        addUtils.addModuleToUser(moduleCode, semesterValue, gradeValue, moduleCredit);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        logger.log(Level.INFO,\"Finish executing add command.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * Prints prompt and help messages for user to enter module\u0027s grade."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private void promptUserToEnterGrade() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        System.out.println(\"Grade received for \" + moduleCode.toUpperCase() + \"?\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        System.out.println(VALID_GRADES);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * Prints prompt and help messages for user to enter module\u0027s semester taken."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private void promptUserToEnterSemester() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        System.out.println(\"Semester you plan to take \" + moduleCode.toUpperCase() + \"?\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        System.out.println(VALID_SEMESTERS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Khenus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerroldlam": 36,
      "Khenus": 70
    }
  },
  {
    "path": "src/main/java/seedu/duke/apps/academicplanner/commands/EditModuleCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Khenus"
        },
        "content": "package seedu.duke.apps.academicplanner.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.apps.moduleloader.ModuleLoader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.apps.academicplanner.commons.EditUtils;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.apps.academicplanner.commons.ModuleValidator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.apps.academicplanner.exceptions.AcademicException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.globalcommons.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.objects.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": " * Class representing an edit module command from the academic planner."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Khenus"
        },
        "content": "public class EditModuleCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private static final String EDIT_SEMESTER \u003d \"1\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private static final String EDIT_GRADE \u003d \"2\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private static final String ERROR_INVALID_COMMAND \u003d \"INVALID COMMAND\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private static final String ERROR_NOT_ADDED \u003d \"You have not added this module into your list yet\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private static final String ERROR_EDIT_OPTION \u003d \"Number entered does not correspond to any feature\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public static final String PROMPT_EDIT_CHOICES \u003d \"Enter the number corresponding to the feature you wish to edit:\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            + \"\\t1) Semester\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            + \"\\t2) Grade\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private EditUtils editUtils;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private ModuleValidator moduleValidator;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private Scanner in;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public EditModuleCommand(ModuleLoader allModules, Person currentPerson, Scanner in, String moduleCode) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        this.editUtils \u003d new EditUtils(allModules, currentPerson);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        this.moduleValidator \u003d new ModuleValidator(allModules, currentPerson);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        this.in \u003d in;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * Allows user to edit the module entry of his academic calendar."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * Parameters allowed to change are semesterIndex or Grade."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public void execute() throws AcademicException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            if (moduleValidator.isModTakenByUser(moduleCode)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                System.out.println(PROMPT_EDIT_CHOICES);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "                String choice \u003d in.nextLine().trim();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                if (choice.equals(EDIT_SEMESTER)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                    editUtils.editModuleSemester(in, moduleCode);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                } else if (choice.equals(EDIT_GRADE)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                    editUtils.editModuleGrade(in, moduleCode);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                    throw new AcademicException(ERROR_EDIT_OPTION);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                throw new AcademicException(ERROR_NOT_ADDED);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            throw new AcademicException(ERROR_INVALID_COMMAND);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Khenus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerroldlam": 4,
      "Khenus": 57
    }
  },
  {
    "path": "src/main/java/seedu/duke/apps/academicplanner/commands/PrintCalenderCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "package seedu.duke.apps.academicplanner.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "import seedu.duke.globalcommons.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "import seedu.duke.objects.PartialModule;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "import seedu.duke.objects.Person;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": " * Class representing a print module command from the academic planner."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "public class PrintCalenderCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    private static final String EMPTY_MODULE_LIST \u003d \"Your academic calendar is currently empty!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    private static final String INDENT \u003d \"     \";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    private final ArrayList\u003cPartialModule\u003e modulesList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    public PrintCalenderCommand(Person currentPerson) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        this.modulesList \u003d currentPerson.getModulesList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        if (modulesList.size() !\u003d 0) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "            ArrayList\u003cPartialModule\u003e sortedBySem \u003d new ArrayList\u003c\u003e(modulesList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "            sortedBySem.sort(Comparator.comparing(PartialModule::getSemesterIndex));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "            int currSem \u003d 0;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "            int newSem;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "            for (PartialModule item : sortedBySem) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "                newSem \u003d item.getSemesterIndex();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "                if (newSem !\u003d (currSem)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "                    currSem \u003d newSem;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "                    System.out.println(INDENT + \"SEMESTER \" + currSem);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "                int spacing \u003d 8 + (8 - item.getModuleCode().length());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "                System.out.println(item.getModuleCode()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "                        + printSpace(spacing)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "                        + item.getGrade());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "            System.out.println(EMPTY_MODULE_LIST);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * Prints num spaces for indentation."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * @param num int of spaces to print"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * @return string of spaces"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    private String printSpace(int num) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        String space \u003d \"\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        for (int i \u003d 0; i \u003c num; i++) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "            space +\u003d \" \";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        return space;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vanessa-kang": 55,
      "jerroldlam": 6
    }
  },
  {
    "path": "src/main/java/seedu/duke/apps/academicplanner/commands/RemoveModuleCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Khenus"
        },
        "content": "package seedu.duke.apps.academicplanner.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.apps.moduleloader.ModuleLoader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.apps.academicplanner.commons.ModuleValidator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.apps.academicplanner.commons.RemoveUtils;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.apps.academicplanner.exceptions.AcademicException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.globalcommons.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.objects.PartialModule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.objects.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": " * Class representing an remove module command from the academic planner."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Khenus"
        },
        "content": "public class RemoveModuleCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private static final String EXITING_CURRENT_COMMAND \u003d \"Exiting current command back to Academic Planner Main Menu.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private static final String ERROR_INVALID_COMMAND \u003d \"INVALID COMMAND\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private static final String ERROR_NOT_ADDED \u003d \"You have not added this module into your list yet\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private RemoveUtils removeUtils;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private ModuleValidator moduleValidator;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private HashMap\u003cString, PartialModule\u003e modulesAddedMap;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public RemoveModuleCommand(ModuleLoader allModules, Person currentPerson, Scanner in, String moduleCode) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        this.removeUtils \u003d new RemoveUtils(currentPerson);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        this.moduleValidator \u003d new ModuleValidator(allModules, currentPerson);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        this.modulesAddedMap \u003d currentPerson.getModulesAddedMap();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * Removes moduleCode from user\u0027s academic calendar if it exists,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * else prompts user of error."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            if (moduleValidator.isModTakenByUser(moduleCode)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                modulesAddedMap.remove(moduleCode);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                removeUtils.removeModuleFromUserModuleList(moduleCode);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                throw new AcademicException(ERROR_NOT_ADDED);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            System.out.println(ERROR_INVALID_COMMAND);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            System.out.println(EXITING_CURRENT_COMMAND);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Khenus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerroldlam": 3,
      "Khenus": 48
    }
  },
  {
    "path": "src/main/java/seedu/duke/apps/academicplanner/commons/AddUtils.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Khenus"
        },
        "content": "package seedu.duke.apps.academicplanner.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.apps.moduleloader.ModuleLoader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.apps.capcalculator.commons.CalculatorUtils;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.objects.PartialModule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.objects.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": " * Class representing add module utilities from the add module command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Khenus"
        },
        "content": "public class AddUtils {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private static final int FROM_ADD \u003d 1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private final ModuleLoader allModules;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private final ArrayList\u003cPartialModule\u003e modulesList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private final HashMap\u003cString, PartialModule\u003e modulesAddedMap;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private final CalculatorUtils calculatorUtils;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public AddUtils(ModuleLoader allModules, Person currentPerson) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        this.allModules \u003d allModules;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        this.modulesList \u003d currentPerson.getModulesList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        this.modulesAddedMap \u003d currentPerson.getModulesAddedMap();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        this.calculatorUtils \u003d new CalculatorUtils(currentPerson);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * Creates a new instance of a module of the parameters and adds it into the"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * hashmap and array list of user modules."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * @param moduleCode module to be added"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * @param semesterValue semester that module is taken in"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * @param gradeValue grade achieved for module"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * @param moduleCredit module\u0027s credit weightage"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public void addModuleToUser(String moduleCode, int semesterValue, String gradeValue, int moduleCredit) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        PartialModule newModuleToAdd \u003d new PartialModule(moduleCode, semesterValue, gradeValue, moduleCredit);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        modulesList.add(newModuleToAdd);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        modulesAddedMap.put(moduleCode, newModuleToAdd);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        calculatorUtils.updateCap(FROM_ADD, newModuleToAdd);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        System.out.println(newModuleToAdd.getModuleCode()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                + \" added into Semester \" + semesterValue + \".\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * Function to return module credits for module code."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * @param moduleCode string of module code"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * @return int of module credit"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public int getModuleCreditForModule(String moduleCode) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        int mapIndex \u003d allModules.getModuleMap().get(moduleCode);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        int moduleCredit \u003d allModules.getModuleFullDetails()[mapIndex].getModuleCredit();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        assert moduleCredit \u003e\u003d 0;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        return moduleCredit;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Khenus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerroldlam": 6,
      "Khenus": 52
    }
  },
  {
    "path": "src/main/java/seedu/duke/apps/academicplanner/commons/EditUtils.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "package seedu.duke.apps.academicplanner.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "import seedu.duke.apps.moduleloader.ModuleLoader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "import seedu.duke.apps.capcalculator.commons.CalculatorUtils;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "import seedu.duke.apps.academicplanner.exceptions.AcademicException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "import seedu.duke.objects.PartialModule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "import seedu.duke.objects.Person;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": " * Class representing edit module utilities from the edit module command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "public class EditUtils {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    private final ArrayList\u003cPartialModule\u003e modulesList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    private final HashMap\u003cString, PartialModule\u003e modulesAddedMap;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    private final ModuleValidator modChecker;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    private final CalculatorUtils calculatorUtils;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    public EditUtils(ModuleLoader allModules, Person currentPerson) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        this.modulesList \u003d currentPerson.getModulesList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        this.modulesAddedMap \u003d currentPerson.getModulesAddedMap();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        this.modChecker \u003d new ModuleValidator(allModules, currentPerson);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        this.calculatorUtils \u003d new CalculatorUtils(currentPerson);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    private static final int FROM_EDIT \u003d 2;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    private static final String PROMPT_NEW_SEMESTER_VALUE \u003d \"Enter the new semester value: \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    private static final String PROMPT_NEW_GRADE \u003d \"Enter the new grade: \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    private static final String ERROR_INVALID_SEMESTER_INDEX \u003d \"INVALID SEMESTER INDEX\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    private static final String ERROR_INVALID_GRADE \u003d \"INVALID GRADE VALUE\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    private static final String VALID_GRADES \u003d \"Valid grades are:\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "            + \"\\tLetter Grades: A+, A, A-, B+, B, B-, C+, C, D+, D, F\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "            + \"\\tSpecial Grades: CS, CU, S, U, W, IC, IP, AUD, WU, EXE\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "            + \"\\tIf you have yet to have a grade for the module: NT\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    private static final String VALID_SEMESTERS \u003d \"Valid semesters are integers from 1 to 10, inclusive\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "     * Changes the current grade of module to the input of the user."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "     * PartialModule must exist in user\u0027s list and hashmap"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "     * @param in scanner"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "     * @param moduleCode code of module to edit the grade"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "     * @throws AcademicException invalid grade"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    public void editModuleGrade(Scanner in, String moduleCode) throws AcademicException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        System.out.println(PROMPT_NEW_GRADE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        System.out.println(VALID_GRADES);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        String gradeValue \u003d in.nextLine().trim().toUpperCase();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        if (!modChecker.isValidGrade(gradeValue)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "            throw new AcademicException(ERROR_INVALID_GRADE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        System.out.println(moduleCode);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        updateModuleGrade(moduleCode, gradeValue);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        System.out.println(\"Grade for \" + moduleCode + \" successfully updated!\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "     * Updates user\u0027s module with new grade and updates user\u0027s Cap."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "     * @param moduleCode module to edit"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "     * @param gradeValue grade to edit to"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    public void updateModuleGrade(String moduleCode, String gradeValue) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        for (PartialModule module : modulesList) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "            if (module.getModuleCode().equals(moduleCode)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "                updateCurrentModuleGrade(gradeValue, module);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        modulesAddedMap.get(moduleCode).setGrade(gradeValue);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "     * Updates module to reflect the new grade."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "     * @param gradeValue new grade value to reflect"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "     * @param module module to edit"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    private void updateCurrentModuleGrade(String gradeValue, PartialModule module) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        double oldCap \u003d module.getCap();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        module.setGrade(gradeValue);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        double newCap \u003d module.getCap();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        calculatorUtils.updateCap(FROM_EDIT, module, oldCap, newCap);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "     * Edits module semester taken when module is in user\u0027s list."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "     * PartialModule must exist in user\u0027s module list and hashmap."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "     * @param in scanner"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "     * @param moduleCode module to edit"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "     * @throws AcademicException invalid semester index"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    public void editModuleSemester(Scanner in, String moduleCode) throws AcademicException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        System.out.println(PROMPT_NEW_SEMESTER_VALUE);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        System.out.println(VALID_SEMESTERS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        String newValue \u003d in.nextLine().trim();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        if (!modChecker.isValidSemester(Integer.parseInt(newValue))) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "            throw new AcademicException(ERROR_INVALID_SEMESTER_INDEX);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        updateModuleSemester(moduleCode, newValue);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        modulesAddedMap.get(moduleCode).setSemesterIndex(Integer.parseInt(newValue));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        System.out.println(\"Semester for \" + moduleCode + \" successfully updated!\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "     * Finds the module and updates the semester taken."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "     * @param moduleCode module to edit"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "     * @param newValue new semester index"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    public void updateModuleSemester(String moduleCode, String newValue) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        for (PartialModule item : modulesList) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "            if (item.getModuleCode().equals(moduleCode)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "                item.setSemesterIndex(Integer.parseInt(newValue));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                assert item.getSemesterIndex() \u003d\u003d Integer.parseInt(newValue);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vanessa-kang": 126,
      "harryleecp": 1,
      "Khenus": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/apps/academicplanner/commons/ModuleValidator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Khenus"
        },
        "content": "package seedu.duke.apps.academicplanner.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.apps.moduleloader.ModuleLoader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.objects.PartialModule;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.objects.Person;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Khenus"
        },
        "content": "public class ModuleValidator {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private static final int STARTING_SEMESTER_INDEX \u003d 1;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private static final int FINAL_SEMESTER_INDEX \u003d 10;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private final ModuleLoader allModules;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private final ArrayList\u003cPartialModule\u003e modulesList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private final HashMap\u003cString, PartialModule\u003e modulesAddedMap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public ModuleValidator(ModuleLoader allModules, Person currentPerson) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        this.allModules \u003d allModules;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        this.modulesList \u003d currentPerson.getModulesList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        this.modulesAddedMap \u003d currentPerson.getModulesAddedMap();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * Returns true if module code is offered by NUS,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * else returns false."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * @param moduleCode input module code"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * @return boolean of module code in FullModule"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public boolean isModOfferedByNus(String moduleCode) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        boolean isOffered \u003d allModules.getModuleMap().get(moduleCode) !\u003d null;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        return (isOffered);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * Returns true if module is in the user\u0027s academic calendar,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * else returns false."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * @param moduleCode moduleCode to check"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public boolean isModTakenByUser(String moduleCode) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        return (modulesAddedMap.containsKey(moduleCode));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * Returns true if semsesterIndex is a valid semesterIndex,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * else returns false."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * @param semesterIndex semesterIndex to check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public boolean isValidSemester(int semesterIndex) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        return (semesterIndex \u003e\u003d STARTING_SEMESTER_INDEX \u0026\u0026 semesterIndex \u003c\u003d FINAL_SEMESTER_INDEX);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * Returns true if grade is a Grade option offered by NUS,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * else returns false."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * @param grade grade to check"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public boolean isValidGrade(String grade) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        switch (grade.toUpperCase()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        case \"A+\":"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            //Fallthrough"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        case \"A\":"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            //Fallthrough"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        case \"A-\":"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            //Fallthrough"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        case \"B+\":"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            //Fallthrough"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        case \"B\":"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            //Fallthrough"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        case \"B-\":"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            //Fallthrough"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        case \"C+\":"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            //Fallthrough"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        case \"C\":"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            //Fallthrough"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        case \"D+\":"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            //Fallthrough"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        case \"D\":"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            //Fallthrough"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        case \"F\":"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            //Fallthrough"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        case \"CS\":           //Completed Satisfactorily"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            //Fallthrough"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        case \"CU\":           //Completed Unsatisfactorily"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            //Fallthrough"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        case \"S\":            //Satisfactory"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            //Fallthrough"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        case \"U\":            //Unsatisfactory"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            //Fallthrough"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        case \"W\":            //Withdrawn"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            //Fallthrough"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        case \"IC\":           //Incomplete"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            //Fallthrough"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        case \"IP\":           //In progress"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            //Fallthrough"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        case \"AUD\":          //Audit"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            //Fallthrough"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        case \"WU\":           //Withdrawn from University"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            //Fallthrough"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        case \"EXE\" :         //Exempted"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            //Fallthrough"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        case \"NT\":           //Not taken"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Khenus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Khenus": 113
    }
  },
  {
    "path": "src/main/java/seedu/duke/apps/academicplanner/commons/RemoveUtils.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "package seedu.duke.apps.academicplanner.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "import seedu.duke.apps.capcalculator.commons.CalculatorUtils;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "import seedu.duke.objects.PartialModule;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "import seedu.duke.objects.Person;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": " * Class representing remove module utilities from the remove module command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "public class RemoveUtils {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    private static final int FROM_REMOVE \u003d 3;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    private final ArrayList\u003cPartialModule\u003e modulesList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    private final CalculatorUtils calculatorUtils;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    public RemoveUtils(Person currentPerson) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        this.modulesList \u003d currentPerson.getModulesList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        this.calculatorUtils \u003d new CalculatorUtils(currentPerson);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "     * Removes module from user\u0027s module list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "     * PartialModule must exist in user\u0027s module list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "     * @param moduleCode module to remove."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    public void removeModuleFromUserModuleList(String moduleCode) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        int totalNumberOfModules \u003d modulesList.size();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Khenus"
        },
        "content": "      "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        for (PartialModule item : modulesList) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "            if (item.getModuleCode().equals(moduleCode)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "                System.out.println(item.getModuleCode() + \" has been removed from the list\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "                calculatorUtils.updateCap(FROM_REMOVE, item);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "                modulesList.remove(item);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                assert modulesList.size() \u003d\u003d totalNumberOfModules - 1;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "vanessa-kang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vanessa-kang": 38,
      "harryleecp": 2,
      "Khenus": 2
    }
  },
  {
    "path": "src/main/java/seedu/duke/apps/academicplanner/exceptions/AcademicException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Khenus"
        },
        "content": "package seedu.duke.apps.academicplanner.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": " * Signals that an invalid command has been given in the Academic Planner App."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Khenus"
        },
        "content": "public class AcademicException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private String errorMessage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private static final String NEW_LINE \u003d \"\\n\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private static final String EXITING_CURRENT_COMMAND \u003d \"Exiting current command back to Academic Planner Main Menu.\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public AcademicException(String errorMessage) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        String stringToPrint \u003d errorMessage + NEW_LINE + EXITING_CURRENT_COMMAND;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        this.errorMessage \u003d stringToPrint;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        return this.errorMessage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Khenus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerroldlam": 3,
      "Khenus": 18
    }
  },
  {
    "path": "src/main/java/seedu/duke/apps/capcalculator/CapCalculatorApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "package seedu.duke.apps.capcalculator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import seedu.duke.globalcommons.App;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import seedu.duke.globalcommons.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import seedu.duke.objects.Person;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import java.math.RoundingMode;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import java.text.DecimalFormat;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import static seedu.duke.apps.capcalculator.CapCalculatorParser.ERROR_INVALID_COMMAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import static seedu.duke.apps.capcalculator.CapCalculatorParser.NEW_LINE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import static seedu.duke.apps.capcalculator.CapCalculatorParser.EXITING_CURRENT_COMMAND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": " * Class representing the CAP Calculator app in PlanNUS."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Khenus"
        },
        "content": "public class CapCalculatorApp extends App {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private static final String AWAIT_COMMAND \u003d \"Type a command to continue...\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private static final String EXIT_MESSAGE \u003d \"Thank you for using Cap Calculator!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private static final String WELCOME_MESSAGE \u003d \"Welcome to CAP Calculator! Commands available are:\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            + \"\\tcurrent\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            + \"\\tset target\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            + \"\\tTo exit CAP Calculator, use command: \\\"exit\\\"\\n\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            + \"\\tInitializing your CAP...\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private final Person currentPerson;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private final Ui ui;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private final DecimalFormat formatFinalCap \u003d new DecimalFormat(\"#.##\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public CapCalculatorApp(Person currentPerson, Ui ui) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        this.currentPerson \u003d currentPerson;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * Main function for CAP Calculator."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        showWelcomeMessage();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        formatFinalCap.setRoundingMode(RoundingMode.UP);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "                String userInput \u003d ui.getScanner().nextLine();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "                Command commandInput \u003d CapCalculatorParser.parse(userInput, currentPerson, ui);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "                commandInput.execute();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "                isExit \u003d commandInput.getIsExit();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "                System.out.println(ERROR_INVALID_COMMAND + NEW_LINE + EXITING_CURRENT_COMMAND);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "                System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        showExitMessage();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * Prints out exit message when user enters CAP Calculator."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private void showExitMessage() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        System.out.println(EXIT_MESSAGE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * Prints out welcome message when user enters CAP Calculator."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private void showWelcomeMessage() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        System.out.println(WELCOME_MESSAGE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        System.out.println(AWAIT_COMMAND);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerroldlam": 22,
      "JuZihao": 48,
      "Khenus": 2
    }
  },
  {
    "path": "src/main/java/seedu/duke/apps/capcalculator/CapCalculatorParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "package seedu.duke.apps.capcalculator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import seedu.duke.apps.capcalculator.commands.CurrentCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import seedu.duke.apps.capcalculator.commands.SetTargetCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import seedu.duke.exceptions.CommandParserException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import seedu.duke.globalcommons.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import seedu.duke.objects.Person;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": " * Class representing the parser used in the CAP Calculator app."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "public class CapCalculatorParser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    public static final String NEW_LINE \u003d \"\\n\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    public static final String EXITING_CURRENT_COMMAND \u003d \"Exiting current command back to Cap Calculator Main Menu.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    public static final String ERROR_INVALID_COMMAND \u003d \"INVALID COMMAND\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    public static final String INVALID_COMMAND_MESSAGE \u003d \"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private static final String CURRENT_COMMAND \u003d \"current\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private static final String SET_TARGET_COMMAND \u003d \"set target\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private static final String EXIT_COMMAND \u003d \"exit\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * Processes user input command and returns command to be executed."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * @param userInput user input"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * @param currentPerson user of PlanNUS"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * @param ui ui"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * @return Command to be executed"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * @throws CommandParserException thrown when an invalid command is entered"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    public static Command parse(String userInput, Person currentPerson, Ui ui) throws CommandParserException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        userInput \u003d userInput.trim().toLowerCase();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        if (userInput.equals(CURRENT_COMMAND)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            return new CurrentCommand(currentPerson);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        } else if (userInput.equals(SET_TARGET_COMMAND)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            return new SetTargetCommand(currentPerson, ui);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        } else if (userInput.equals(EXIT_COMMAND)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            return new Command(true);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            throw new CommandParserException(INVALID_COMMAND_MESSAGE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerroldlam": 12,
      "JuZihao": 33
    }
  },
  {
    "path": "src/main/java/seedu/duke/apps/capcalculator/commands/CurrentCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "package seedu.duke.apps.capcalculator.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import seedu.duke.globalcommons.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import seedu.duke.objects.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import static seedu.duke.apps.capcalculator.commons.CalculatorUtils.formatCapToString;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": " * Class representing the Current CAP command for CAP Calculator."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "public class CurrentCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private Person currentPerson;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    public CurrentCommand(Person currentPerson) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        this.currentPerson \u003d currentPerson;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * Prints out user\u0027s current cap obtained from his/her academic calendar."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        double currentCap \u003d currentPerson.getCurrentTotalMcxGrade() / (double) currentPerson.getCurrentMcAfterSU();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        System.out.println(\"Your current now CAP is: \" + formatCapToString(currentCap));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        System.out.println(\"Number of graded MCs taken is: \" + currentPerson.getCurrentMcAfterSU());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerroldlam": 6,
      "JuZihao": 21
    }
  },
  {
    "path": "src/main/java/seedu/duke/apps/capcalculator/commands/SetTargetCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "package seedu.duke.apps.capcalculator.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import seedu.duke.exceptions.InvalidCapException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import seedu.duke.exceptions.InvalidCreditException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import seedu.duke.globalcommons.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import seedu.duke.objects.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import seedu.duke.apps.capcalculator.commons.SetTargetUtils;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": " * Class representing the Set target CAP command for CAP Calculator."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "public class SetTargetCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private static final double MAXIMUM_CAP \u003d 5.00;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private static final Logger logger \u003d Logger.getLogger(\"SetTargetCommand.java\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private Person currentPerson;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private SetTargetUtils setTargetUtils;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    public SetTargetCommand(Person currentPerson, Ui ui) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        this.currentPerson \u003d currentPerson;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        this.setTargetUtils \u003d new SetTargetUtils(currentPerson, ui);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * Function to calculate CAP needed to obtain target grades."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            logger.log(Level.INFO,\"Executing set target command.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            double targetCap \u003d setTargetUtils.getTargetCap();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            int targetMCs \u003d setTargetUtils.getTargetGradedMC();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            assert targetCap \u003c\u003d MAXIMUM_CAP;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            assert targetMCs \u003e 0;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            setTargetUtils.showResultsToUser(targetCap, targetMCs);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            logger.log(Level.INFO,\"Finish executing set target command.\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        } catch (InvalidCapException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            logger.log(Level.WARNING,\"Cap entered is more than 5.00.\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        } catch (InvalidCreditException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            logger.log(Level.WARNING,\"MC entered is less than 0.\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerroldlam": 6,
      "JuZihao": 45
    }
  },
  {
    "path": "src/main/java/seedu/duke/apps/capcalculator/commons/CalculatorUtils.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Khenus"
        },
        "content": "package seedu.duke.apps.capcalculator.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "import seedu.duke.objects.PartialModule;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "import seedu.duke.objects.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import java.text.DecimalFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": " * Class representing common functions for the CAP Calculator."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Khenus"
        },
        "content": "public class CalculatorUtils {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private static final int FROM_ADD \u003d 1;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private static final int FROM_EDIT \u003d 2;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private static final int FROM_REMOVE \u003d 3;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private static final DecimalFormat formatFinalCap \u003d new DecimalFormat(\"#.##\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    protected static final double MAXIMUM_CAP \u003d 5.00;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private final Person currentPerson;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public CalculatorUtils(Person currentPerson) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        this.currentPerson \u003d currentPerson;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * Update Cap after every change in current module list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * @param type An int storing the type of function calling update cap"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * @param currentModule A PartialModule object storing current module"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * @param caps An optional number of double storing old cap and new cap (If you send in old, must send in new also)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public void updateCap(int type, PartialModule currentModule, double... caps) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        // Caps is an array, 0 being oldCap, 1 being newCap"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        if (type \u003d\u003d FROM_ADD) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            updateCapFromAdd(currentModule);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        } else if (type \u003d\u003d FROM_REMOVE) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            //Decreasing total MC regardless of SU"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            currentPerson.setCurrentMc(currentPerson.getCurrentMc()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "                    - currentModule.getModuleCredit());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            //Decreasing total MC after SU only if module is not SU"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            if (currentModule.getCap() !\u003d -1.00) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "                editCapNonSuToSu(currentModule, currentModule.getCap());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        } else if (type \u003d\u003d FROM_EDIT) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            if (isFromSuToNonSu(caps)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "                //Case where previously was SU but new is not SU"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                editCapSuToNonSu(currentModule, caps[1]);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            }  else if (isFromNonSuToSu(caps)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "                //Case where previously was not SU but now is SU"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "                editCapNonSuToSu(currentModule, caps[0]);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            } else if (isFromNonSuToNonSu(caps)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "                //Case where previously and new cap are not SU but not the same"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "                editCapNonSuToNonSu(currentModule, caps);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * Returns true if edited module was from a special grade to special grade,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * else returns false."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * @param caps Academic points of original and edited module"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private boolean isFromNonSuToNonSu(double[] caps) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        return caps[0] !\u003d caps[1];"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * Returns true if edited module was from a special grade to letter grade,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * else returns false."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * @param caps Academic points of original and edited module"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private boolean isFromNonSuToSu(double[] caps) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        return caps[0] !\u003d -1.00 \u0026\u0026 caps[1] \u003d\u003d -1.00;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * Returns true if edited module was from a special grade to letter grade,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * else returns false."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * @param caps Academic points of original and edited module"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private boolean isFromSuToNonSu(double[] caps) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        return caps[0] \u003d\u003d -1.00 \u0026\u0026 caps[1] !\u003d -1.00;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * Updates CAP when User edits module from a special grade to a special grade."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * @param currentModule module that was edited"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * @param caps array of previous and new cap"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private void editCapNonSuToNonSu(PartialModule currentModule, double[] caps) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        double oldMCxGrade \u003d caps[0] * currentModule.getModuleCredit();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        double newMCxGrade \u003d caps[1] * currentModule.getModuleCredit();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        double mcxGradeToSet \u003d newMCxGrade - oldMCxGrade;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        //Updating total academic points to this point"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        currentPerson.setCurrentTotalMcxGrade(currentPerson.getCurrentTotalMcxGrade()"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "                + mcxGradeToSet);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * Updates CAP when User edits module from a special grade to a letter grade."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * @param currentModule module that was edited"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * @param cap user\u0027s CAP"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private void editCapNonSuToSu(PartialModule currentModule, double cap) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        double mcxGradeToMinus \u003d cap * currentModule.getModuleCredit();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        //Updating total MCs"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        currentPerson.setCurrentMcAfterSU(currentPerson.getCurrentMcAfterSU()"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "                - currentModule.getModuleCredit());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        //Updated total Academic Points"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        currentPerson.setCurrentTotalMcxGrade(currentPerson.getCurrentTotalMcxGrade()"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "                - mcxGradeToMinus);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * Updates CAP when User edits module from a letter grade to a special grade."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * @param currentModule module that was edited"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * @param cap user\u0027s CAP"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private void editCapSuToNonSu(PartialModule currentModule, double cap) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        double newMCxGrade \u003d cap * currentModule.getModuleCredit();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        //Updating total MCs"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        currentPerson.setCurrentMcAfterSU(currentPerson.getCurrentMcAfterSU()"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                + currentModule.getModuleCredit());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        //Updated total Academic Points"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        currentPerson.setCurrentTotalMcxGrade(currentPerson.getCurrentTotalMcxGrade()"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "                + newMCxGrade);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * Updates CAP when User adds in a new module."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * @param currentModule module that is newly added"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private void updateCapFromAdd(PartialModule currentModule) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        //Incrementing total MC regardless of SU"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        int moduleCredit \u003d currentModule.getModuleCredit();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        currentPerson.setCurrentMc(currentPerson.getCurrentMc() + moduleCredit);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        //Incrementing total MC after SU only if module is not SU"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        if (currentModule.getCap() !\u003d -1.00) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            editCapSuToNonSu(currentModule, currentModule.getCap());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * Returns CAP score as a string."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * @param academicPoint academic point to parse"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * @return string of academic point"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    public static String formatCapToString(double academicPoint) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        if (isNaN(academicPoint)) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            return \"0\";"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        return formatFinalCap.format(academicPoint);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * Returns true if CAP is NaN"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * else returns false."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * @param academicPoint academic point to check"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    public static boolean isNaN(double academicPoint) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        return (academicPoint !\u003d academicPoint);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerroldlam": 123,
      "JuZihao": 29,
      "Khenus": 33
    }
  },
  {
    "path": "src/main/java/seedu/duke/apps/capcalculator/commons/SetTargetUtils.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "package seedu.duke.apps.capcalculator.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import seedu.duke.exceptions.InvalidCapException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import seedu.duke.exceptions.InvalidCreditException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import seedu.duke.objects.Person;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import static seedu.duke.apps.capcalculator.commons.CalculatorUtils.MAXIMUM_CAP;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import static seedu.duke.apps.capcalculator.commons.CalculatorUtils.formatCapToString;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": " * Class representing the common Set Target functions in CAP Calculator."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "public class SetTargetUtils {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private static final String INVALID_CAP_MESSAGE \u003d \"Your target CAP cannot be greater than the maximum CAP of 5!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private static final String INVALID_MC_MESSAGE \u003d \"Your target MC cannot be 0!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private Person currentPerson;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    public SetTargetUtils(Person currentPerson, Ui ui) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        this.currentPerson \u003d currentPerson;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * Obtain the target CAP from the user."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    public double getTargetCap() throws InvalidCapException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        System.out.println(\"What is your target CAP?\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        double targetCap \u003d Double.parseDouble(ui.getScanner().nextLine());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        checkValidCap(targetCap);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        return targetCap;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * Obtain the target MCs from the user."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    public int getTargetGradedMC() throws InvalidCreditException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        System.out.println(\"How many graded MCs you are taking to achieve the target CAP?\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        int targetGradedMC \u003d Integer.parseInt(ui.getScanner().nextLine());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        checkValidCredits(targetGradedMC);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        return targetGradedMC;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * Checks if the target Cap given by the user is valid."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * @param cap Cap to be checked"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * @throws InvalidCapException if the Cap given is greater than 5.00 or less than 0"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private void checkValidCap(double cap) throws InvalidCapException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        if (cap \u003e MAXIMUM_CAP || cap \u003c\u003d 0) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            throw new InvalidCapException(INVALID_CAP_MESSAGE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * Checks if the target Cap given by the user is valid."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * @param credits Module credits to be checked"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * @throws InvalidCreditException if the module credit given less than 0"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private void checkValidCredits(int credits) throws InvalidCreditException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        if (credits \u003c\u003d 0) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            throw new InvalidCreditException(INVALID_MC_MESSAGE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * Calculate what should be the user\u0027s minimum CAP in order to achieve user\u0027s target CAP and display to user."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    public void showResultsToUser(double targetCap,int targetGradedMC) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        int totalMcToTarget \u003d currentPerson.getCurrentMcAfterSU() + targetGradedMC;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        double targetCapxTargetMC \u003d (double) totalMcToTarget * targetCap;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        double neededCap \u003d (targetCapxTargetMC - currentPerson.getCurrentTotalMcxGrade()) / (double) targetGradedMC;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        if (neededCap \u003c\u003d 5) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            printTargetResultPossible(targetCap, targetGradedMC, neededCap);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            printTargetResultImpossible(targetCap, targetGradedMC);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * Prints out message for user when the target result cannot be achieved."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * @param targetCap user\u0027s targeted CAP."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * @param targetGradedMC user\u0027s targeted MC."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private void printTargetResultImpossible(double targetCap, int targetGradedMC) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        System.out.println(\"OOPS!! Looks like you are not able to achieve your target CAP of \" + targetCap"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "                + \" with you target MCs of \" + targetGradedMC + \".\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * Prints out message for user when the target result can be achieved."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * @param targetCap user\u0027s targeted CAP."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * @param targetGradedMC user\u0027s targeted MC."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * @param neededCap user\u0027s future CAP needed to reach targeted CAP"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private void printTargetResultPossible(double targetCap, int targetGradedMC, double neededCap) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        System.out.println(\"You should achieve a minimum CAP of \" + formatCapToString(neededCap) + \" for your next \""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "                + targetGradedMC + \" MCs to achieve your target CAP of \" + targetCap + \".\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerroldlam": 26,
      "JuZihao": 80
    }
  },
  {
    "path": "src/main/java/seedu/duke/apps/capcalculator/exceptions/CapCalculatorException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Khenus"
        },
        "content": "package seedu.duke.apps.capcalculator.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": " * Signals that an invalid command has been given in the CAP Calculator App."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JuZihao"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "public class CapCalculatorException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private String errorMessage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private static final String NEW_LINE \u003d \"\\n\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private static final String EXITING_CURRENT_COMMAND \u003d \"Exiting current command back to CapCalculatorApp Main Menu.\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    public CapCalculatorException(String errorMessage) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        String stringToPrint \u003d errorMessage + NEW_LINE + EXITING_CURRENT_COMMAND;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        this.errorMessage \u003d stringToPrint;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        return this.errorMessage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerroldlam": 1,
      "JuZihao": 18,
      "Khenus": 2
    }
  },
  {
    "path": "src/main/java/seedu/duke/apps/moduleloader/ModuleLoader.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Khenus"
        },
        "content": "package seedu.duke.apps.moduleloader;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import com.google.gson.Gson;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.apps.moduleloader.exceptions.ModuleLoaderException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.objects.FullModule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import java.io.Reader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Khenus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Khenus"
        },
        "content": " * Class representing function to load all modules offered by NUS."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Khenus"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Khenus"
        },
        "content": "public class ModuleLoader {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private static final int TOTAL_NUMBER_OF_MODULES \u003d 12436;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public static final String NEW_LINE \u003d \"\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public static final String MISSING_MODULE_DATA \u003d \"Data for Modules not found!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public static final String TERMINATION \u003d \"Terminating program...\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public static final String CORRUPTED_MODULE_DATA \u003d \"Data for Modules corrupted!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private Map\u003cString, Integer\u003e moduleMap;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private FullModule[] moduleFullDetails;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * Default constructor for to load all modules from JSON file."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public ModuleLoader() throws ModuleLoaderException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            moduleMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            Gson gson \u003d new Gson();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            InputStream in \u003d ModuleLoader.class.getResourceAsStream(\"/ModuleData.json\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            Reader jsonReader \u003d new InputStreamReader(in);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            moduleFullDetails \u003d gson.fromJson(jsonReader, FullModule[].class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            for (int i \u003d 0; i \u003c moduleFullDetails.length; i++) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                moduleMap.put(moduleFullDetails[i].getModuleCode(), i);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            if (moduleFullDetails.length !\u003d TOTAL_NUMBER_OF_MODULES) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                throw new ModuleLoaderException(CORRUPTED_MODULE_DATA + NEW_LINE + TERMINATION);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            throw new ModuleLoaderException(MISSING_MODULE_DATA + NEW_LINE + TERMINATION);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * Constructor for checking condition where loading all module from JSON file fails."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * Used in development only."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * @param isProperCreation boolean indicating non-proper creation of module initializer"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public ModuleLoader(boolean isProperCreation) throws ModuleLoaderException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        throw new ModuleLoaderException(CORRUPTED_MODULE_DATA + NEW_LINE + TERMINATION);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * Getter for module map."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * @return Map"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public Map\u003cString, Integer\u003e getModuleMap() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        return this.moduleMap;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * Getter for full module details."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     * @return An Array of FullModule"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Khenus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public FullModule[] getModuleFullDetails() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        return this.moduleFullDetails;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Khenus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Khenus": 76
    }
  },
  {
    "path": "src/main/java/seedu/duke/apps/moduleloader/exceptions/ModuleLoaderException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Khenus"
        },
        "content": "package seedu.duke.apps.moduleloader.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Khenus"
        },
        "content": "public class ModuleLoaderException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private String errorMessage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public ModuleLoaderException() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public ModuleLoaderException(String errorMessage) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        this.errorMessage \u003d errorMessage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        return this.errorMessage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Khenus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Khenus": 18
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/AppParserException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Khenus"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": " * Signals that an invalid command has been given in the App parser."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Khenus"
        },
        "content": "public class AppParserException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    String errorMessage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public AppParserException(String errorMessage) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        this.errorMessage \u003d errorMessage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        return this.errorMessage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Khenus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerroldlam": 3,
      "Khenus": 14
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/CommandParserException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Khenus"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": " * Signals that an invalid command has been given in the main command parser."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Khenus"
        },
        "content": "public class CommandParserException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    String errorMessage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public CommandParserException(String errorMessage) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        this.errorMessage \u003d errorMessage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        return this.errorMessage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Khenus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerroldlam": 3,
      "Khenus": 14
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/InvalidCapException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.apps.capcalculator.exceptions.CapCalculatorException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JuZihao"
        },
        "content": " * Signals that the given CAP is not valid."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JuZihao"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "public class InvalidCapException extends CapCalculatorException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    public InvalidCapException(String errorMessage) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JuZihao": 11,
      "Khenus": 2
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/InvalidCreditException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.apps.capcalculator.exceptions.CapCalculatorException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JuZihao"
        },
        "content": " * Signals that the given MC is not valid."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JuZihao"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "public class InvalidCreditException extends CapCalculatorException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    public InvalidCreditException(String errorMessage) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JuZihao": 11,
      "Khenus": 2
    }
  },
  {
    "path": "src/main/java/seedu/duke/globalcommons/App.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Khenus"
        },
        "content": "package seedu.duke.globalcommons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": " * Class representing an application in PlanNUS."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Khenus"
        },
        "content": "public class App {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private boolean isExit \u003d false;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public App() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public App(boolean isExitCommand) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        this.isExit \u003d isExitCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public boolean getIsExit() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Khenus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerroldlam": 3,
      "Khenus": 25
    }
  },
  {
    "path": "src/main/java/seedu/duke/globalcommons/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Khenus"
        },
        "content": "package seedu.duke.globalcommons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": " * Class representing a command in PlanNUS."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Khenus"
        },
        "content": "public class Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private boolean isExit;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public Command() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        this.isExit \u003d false;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public Command(boolean isExit) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        this.isExit \u003d isExit;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public void execute() throws Exception {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public boolean getIsExit() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Khenus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerroldlam": 3,
      "Khenus": 21
    }
  },
  {
    "path": "src/main/java/seedu/duke/objects/FullModule.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Khenus"
        },
        "content": "package seedu.duke.objects;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import org.apache.commons.lang3.builder.EqualsBuilder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import org.apache.commons.lang3.builder.ToStringBuilder;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import static org.apache.commons.lang3.builder.ToStringStyle.JSON_STYLE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Khenus"
        },
        "content": "//    \"moduleCode\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Khenus"
        },
        "content": "//    \"title\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Khenus"
        },
        "content": "//    \"moduleCredit\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Khenus"
        },
        "content": "//    \"department\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Khenus"
        },
        "content": "//    \"faculty\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Khenus"
        },
        "content": "//    \"semester\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Khenus"
        },
        "content": "//    \"preclusion\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Khenus"
        },
        "content": "//    \"attibutes\" \u003d ["
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Khenus"
        },
        "content": "//     su: false, Index 0 of attribute"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Khenus"
        },
        "content": "//     sfs: false, Index 1 of attribute"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Khenus"
        },
        "content": "//     ssgf: false, Index 2 of attribute"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Khenus"
        },
        "content": "//     ism: false, Index 3 of attribute"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Khenus"
        },
        "content": "//     fyp: false, Index 4 of attribute"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Khenus"
        },
        "content": "//     year: false, Index 5 of attribute"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Khenus"
        },
        "content": "//     grsu: false, Index 6 of attribute"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Khenus"
        },
        "content": "//     lab: false, Index 7 of attribute"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Khenus"
        },
        "content": "//     urop: false, Index 8 of attribute"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Khenus"
        },
        "content": "//    ],"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Khenus"
        },
        "content": "//    \"prerequisite\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Khenus"
        },
        "content": "//    \"corequisite\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Khenus"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Khenus"
        },
        "content": " * A class created to store the full data of each mod after JSON conversion."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Khenus"
        },
        "content": " *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Khenus"
        },
        "content": " * @author Khenus Tan"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Khenus"
        },
        "content": " */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Khenus"
        },
        "content": "public class FullModule {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private Integer moduleCredit;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private String department;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private String faculty;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private List\u003cInteger\u003e semester \u003d new ArrayList\u003cInteger\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private String preclusion;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private List\u003cBoolean\u003e attributes \u003d new ArrayList\u003cBoolean\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private String prerequisite;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private String corequisite;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private Map\u003cString, Object\u003e additionalProperties \u003d new HashMap\u003cString, Object\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public String getModuleCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        return moduleCode;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public String getTitle() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public Integer getModuleCredit() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        return moduleCredit;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public String getDepartment() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        return department;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public String getFaculty() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        return faculty;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public List\u003cInteger\u003e getSemester() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        return semester;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public String getPreclusion() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        return preclusion;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public List\u003cBoolean\u003e getAttributes() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        return attributes;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public String getPrerequisite() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        return prerequisite;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public String getCorequisite() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        return corequisite;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        return ToStringBuilder.reflectionToString(this, JSON_STYLE);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        if ((other instanceof FullModule) \u003d\u003d false) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        FullModule rhs \u003d ((FullModule) other);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        return new EqualsBuilder().append(moduleCode, rhs.moduleCode).append(title, rhs.title)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "                .append(moduleCredit, rhs.moduleCredit).append(department, rhs.department)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "                .append(faculty, rhs.faculty).append(semester, rhs.semester).append(preclusion, rhs.preclusion)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "                .append(attributes, rhs.attributes).append(prerequisite, rhs.prerequisite)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "                .append(corequisite, rhs.corequisite).append(additionalProperties, rhs.additionalProperties).isEquals();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Khenus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerroldlam": 5,
      "Khenus": 108
    }
  },
  {
    "path": "src/main/java/seedu/duke/objects/PartialModule.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "package seedu.duke.objects;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "import org.apache.commons.lang3.builder.ToStringBuilder;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": " * Class representing module object to be stored in the Person object."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": " * It is a truncated version of FullModule with only relevant fields."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Khenus"
        },
        "content": "public class PartialModule implements Comparable\u003cPartialModule\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private int semesterIndex; // 1 to 8"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private String grade;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private int moduleCredit;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private double cap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public PartialModule(String moduleCode, int semesterIndex, String grade, int moduleCredit) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        setModuleCode(moduleCode);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        setSemesterIndex(semesterIndex);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        setGrade(grade);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        setModuleCredit(moduleCredit);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        setCap(grade);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    public String getModuleCode() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        return moduleCode;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    public Integer getModuleCredit() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        return moduleCredit;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    public String getGrade() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        return grade;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    public int getSemesterIndex() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        return semesterIndex;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    public void setModuleCredit(int moduleCredit) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        this.moduleCredit \u003d moduleCredit;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    public void setModuleCode(String moduleCode) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    public void setSemesterIndex(int semesterIndex) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        this.semesterIndex \u003d semesterIndex;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    public void setGrade(String grade) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        this.grade \u003d grade;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        setCap(grade);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * Returns Academic points associated with letter grades."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * If grade is a special grading option, returns -1.00."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * @param grade user grade to check"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    public void setCap(String grade) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        switch (grade.toUpperCase()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        case \"A+\":"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        case \"A\":"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            this.cap \u003d 5.00;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        case \"A-\":"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            this.cap \u003d 4.50;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        case \"B+\":"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            this.cap \u003d 4.00;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        case \"B\":"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            this.cap \u003d 3.50;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        case \"B-\":"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            this.cap \u003d 3.00;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        case \"C+\":"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            this.cap \u003d 2.50;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        case \"C\":"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            this.cap \u003d 2.00;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        case \"D+\":"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            this.cap \u003d 1.50;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        case \"D\":"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            this.cap \u003d 1.00;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        case \"F\":"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            this.cap \u003d 0.00;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        case \"CS\":           //Completed Satisfactorily"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            //Fallthrough"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        case \"CU\":           //Completed Unsatisfactorily"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            //Fallthrough"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        case \"S\":            //Satisfactory"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            //Fallthrough"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        case \"U\":            //Unsatisfactory"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            //Fallthrough"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        case \"W\":            //Withdrawn"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            //Fallthrough"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        case \"IC\":           //Incomplete"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            //Fallthrough"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        case \"IP\":           //In progress"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            //Fallthrough"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        case \"AUD\":          //Audit"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            //Fallthrough"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        case \"WU\":           //Withdrawn from University"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            //Fallthrough"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        case \"EXE\":         //Exempted"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            //Fallthrough"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        case \"NT\":           //Not taken"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            this.cap \u003d -1.00;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            this.cap \u003d 0.00;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    public double getCap() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        return cap;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public int compareTo(PartialModule module) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        return (Double.compare(this.getCap(), module.getCap()));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        return ToStringBuilder.reflectionToString(this);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerroldlam": 135,
      "Khenus": 3
    }
  },
  {
    "path": "src/main/java/seedu/duke/objects/Person.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "package seedu.duke.objects;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": " * Class representing the user for PlanNUS."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private String personName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private double currentTotalMcxGrade;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private int currentMc;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private int currentMcAfterSU;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private ArrayList\u003cPartialModule\u003e modulesList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private HashMap\u003cString, PartialModule\u003e modulesAddedMap;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    public Person(String personName) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        this.currentTotalMcxGrade \u003d 0.0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        this.currentMc \u003d 0;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        this.currentMcAfterSU \u003d 0;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        this.personName \u003d personName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        this.modulesList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        this.modulesAddedMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    public String getPersonName() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        return personName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    public double getCurrentTotalMcxGrade() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        return currentTotalMcxGrade;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    public void setCurrentTotalMcxGrade(double currentTotalMcxGrade) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        this.currentTotalMcxGrade \u003d currentTotalMcxGrade;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    public int getCurrentMc() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        return currentMc;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    public void setCurrentMc(int currentMc) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        this.currentMc \u003d currentMc;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    public int getCurrentMcAfterSU() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        return currentMcAfterSU;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    public void setCurrentMcAfterSU(int currentMcAfterSU) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        this.currentMcAfterSU \u003d currentMcAfterSU;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public ArrayList\u003cPartialModule\u003e getModulesList() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        return modulesList;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public void setModulesList(ArrayList\u003cPartialModule\u003e modulesList) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        this.modulesList \u003d modulesList;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public HashMap\u003cString, PartialModule\u003e getModulesAddedMap() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        return modulesAddedMap;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public void setModulesAddedMap(HashMap\u003cString, PartialModule\u003e modulesAddedMap) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        this.modulesAddedMap \u003d modulesAddedMap;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerroldlam": 64,
      "Khenus": 6
    }
  },
  {
    "path": "src/main/java/seedu/duke/parser/AppParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Khenus"
        },
        "content": "package seedu.duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.apps.academicplanner.AcademicPlannerApp;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.apps.capcalculator.CapCalculatorApp;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.apps.moduleloader.ModuleLoader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.exceptions.AppParserException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.globalcommons.App;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.objects.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": " * Class representing the parser for applications used in the main PlanNUS page."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Khenus"
        },
        "content": "public class AppParser {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private static final String ACADEMIC_PLAN_COMMAND \u003d \"acadplan\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private static final String CAP_CALCULATOR_COMMAND \u003d \"capcalc\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private static final String EXIT_COMMAND \u003d \"exit\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    private static final String INVALID_COMMAND_MESSAGE \u003d \"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * Processes user input command and returns app to be run."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * @param userInput user input"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * @param allModules variable containing all modules offered by NUS"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * @param currentPerson user of PlanNUS"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * @param ui Ui"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * @return app to be run"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     * @throws AppParserException thrown when an invalid command is give"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public static App parse(String userInput, ModuleLoader allModules, Person currentPerson, Ui ui)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            throws AppParserException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        userInput \u003d userInput.trim().toLowerCase();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        if (userInput.equals(ACADEMIC_PLAN_COMMAND)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            return new AcademicPlannerApp(allModules, currentPerson, ui);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        } else if (userInput.equals(CAP_CALCULATOR_COMMAND)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            return new CapCalculatorApp(currentPerson, ui);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        } else if (userInput.equals(EXIT_COMMAND)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            return new App(true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            throw new AppParserException(INVALID_COMMAND_MESSAGE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Khenus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerroldlam": 22,
      "Khenus": 22
    }
  },
  {
    "path": "src/main/java/seedu/duke/ui/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Khenus"
        },
        "content": "package seedu.duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": " * Class representing the ui for PlanNUS."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Khenus"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private Scanner scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        this.scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public Scanner getScanner() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        return this.scanner;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Khenus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerroldlam": 3,
      "Khenus": 15
    }
  },
  {
    "path": "src/test/java/seedu/duke/PlanNus.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Khenus"
        },
        "content": "class PlanNus {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public void sampleTest() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(true);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Khenus": 1,
      "-": 11
    }
  },
  {
    "path": "src/test/java/seedu/duke/apps/ModuleLoaderTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Khenus"
        },
        "content": "package seedu.duke.apps;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.apps.moduleloader.ModuleLoader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.apps.moduleloader.exceptions.ModuleLoaderException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.objects.FullModule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Khenus"
        },
        "content": "class ModuleLoaderTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private static final int TOTAL_NUMBER_OF_MODULES \u003d 12436;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private static final int INDEX_OF_CS1010 \u003d 1786;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    private ModuleLoader allModules;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            allModules \u003d new ModuleLoader();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        } catch (ModuleLoaderException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    void getModuleMap_loadAllModuleData_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        Map\u003cString, Integer\u003e moduleMap \u003d allModules.getModuleMap();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        assertEquals(moduleMap.get(\"CS1010\"), INDEX_OF_CS1010);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    void getModuleFullDetails_loadAllModuleData_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        FullModule[] modules \u003d allModules.getModuleFullDetails();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        assertEquals(modules.length, TOTAL_NUMBER_OF_MODULES);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        assertEquals(modules[1786].toString(), \"{\\\"additionalProperties\\\":{},\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                + \"\\\"attributes\\\":[true,false,false,false,false,false,false,false,false],\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                + \"\\\"corequisite\\\":\\\"\\\",\\\"department\\\":\\\"Computer Science\\\",\\\"faculty\\\":\\\"Computing\\\",\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                + \"\\\"moduleCode\\\":\\\"CS1010\\\",\\\"moduleCredit\\\":4,\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                + \"\\\"preclusion\\\":\\\"CS1010E, CS1010J, CS1010S, CS1010X, CS1010XCP, CS1101S\\\",\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Khenus"
        },
        "content": "                + \"\\\"prerequisite\\\":\\\"\\\",\\\"semester\\\":[1,2],\\\"title\\\":\\\"Programming Methodology\\\"}\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    void getModuleFullDetails_loadAllModuleData_fail() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        Exception exception \u003d assertThrows(ModuleLoaderException.class, () -\u003e {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            allModules \u003d new ModuleLoader(false);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        });"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Khenus"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        assertTrue(exception.getMessage().contains(\"Data for Modules corrupted!\\nTerminating program...\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Khenus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Khenus": 58
    }
  },
  {
    "path": "src/test/java/seedu/duke/apps/academicplanner/commons/AddUtilsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "package seedu.duke.apps.academicplanner.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.apps.moduleloader.ModuleLoader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Khenus"
        },
        "content": "import seedu.duke.apps.moduleloader.exceptions.ModuleLoaderException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "import seedu.duke.objects.PartialModule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "import seedu.duke.objects.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "class AddUtilsTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Khenus"
        },
        "content": "    ModuleLoader allModules;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    Person currentPerson;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    AddUtils addUtils;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    ModuleValidator moduleValidator;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    void setup() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            allModules \u003d new ModuleLoader();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            currentPerson \u003d new Person(\"Bob\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            addUtils \u003d new AddUtils(allModules,currentPerson);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            moduleValidator \u003d new ModuleValidator(allModules,currentPerson);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        } catch (ModuleLoaderException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Khenus"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Khenus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    void addModuleToUser_emptyList_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        setup();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        ArrayList\u003cPartialModule\u003e modulesList \u003d currentPerson.getModulesList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        assertEquals(modulesList.size(),0);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        addUtils.addModuleToUser(\"CS1010\",1,\"A+\",4);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        assertEquals(modulesList.size(),1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        for (PartialModule m : modulesList) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            if (m.getModuleCode().equalsIgnoreCase(\"CS1010\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "                assertEquals(m.getModuleCode(),\"CS1010\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "                assertEquals(m.getSemesterIndex(),1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "                assertEquals(m.getGrade(),\"A+\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "                assertEquals(m.getModuleCredit(),4);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        assertTrue(moduleValidator.isModTakenByUser(\"CS1010\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        assertFalse(moduleValidator.isModTakenByUser(\"CS2113\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    void addModuleToUser_nonEmptyList_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        setup();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        ArrayList\u003cPartialModule\u003e modulesList \u003d currentPerson.getModulesList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        assertEquals(modulesList.size(),0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        addUtils.addModuleToUser(\"CS1010\",1,\"A+\",4);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        assertEquals(modulesList.size(),1);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        addUtils.addModuleToUser(\"CS1231\",1,\"B-\",4);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        assertEquals(modulesList.size(),2);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        for (PartialModule m : modulesList) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            if (m.getModuleCode().equalsIgnoreCase(\"CS1010\")) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "                assertEquals(m.getModuleCode(),\"CS1010\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "                assertEquals(m.getSemesterIndex(),1);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "                assertEquals(m.getGrade(),\"A+\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "                assertEquals(m.getModuleCredit(),4);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "                assertEquals(m.getModuleCode(),\"CS1231\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "                assertEquals(m.getSemesterIndex(),1);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "                assertEquals(m.getGrade(),\"B-\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "                assertEquals(m.getModuleCredit(),4);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        assertTrue(moduleValidator.isModTakenByUser(\"CS1010\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        assertTrue(moduleValidator.isModTakenByUser(\"CS1231\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "        assertFalse(moduleValidator.isModTakenByUser(\"CS2113\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jerroldlam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerroldlam": 76,
      "Khenus": 8
    }
  },
  {
    "path": "src/test/java/seedu/duke/apps/academicplanner/commons/EditUtilsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "package seedu.duke.apps.academicplanner.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import seedu.duke.apps.moduleloader.ModuleLoader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import seedu.duke.apps.moduleloader.exceptions.ModuleLoaderException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import seedu.duke.objects.PartialModule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import seedu.duke.objects.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "class EditUtilsTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    ModuleLoader allModules;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    ModuleValidator moduleValidator;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    Person currentPerson;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    AddUtils addUtils;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    EditUtils editUtils;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    ArrayList\u003cPartialModule\u003e modulesList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    void setup() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            allModules \u003d new ModuleLoader();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            currentPerson \u003d new Person(\"Bob\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            addUtils \u003d new AddUtils(allModules,currentPerson);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            moduleValidator \u003d new ModuleValidator(allModules,currentPerson);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            editUtils \u003d new EditUtils(allModules, currentPerson);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            modulesList \u003d currentPerson.getModulesList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            assertEquals(modulesList.size(),0);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            addUtils.addModuleToUser(\"CS1010\",1,\"A+\",4);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            assertEquals(modulesList.size(),1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        } catch (ModuleLoaderException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    void updateModuleGrade_nonEmptyList_success() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        setup();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        editUtils.updateModuleGrade(\"CS1010\", \"A-\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        assertEquals(modulesList.size(), 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        for (PartialModule m : modulesList) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            if (m.getModuleCode().equalsIgnoreCase(\"CS1010\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                assertEquals(m.getModuleCode(), \"CS1010\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                assertTrue(moduleValidator.isValidGrade(m.getGrade()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                assertEquals(m.getGrade(), \"A-\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                assertEquals(m.getSemesterIndex(), 1);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                assertEquals(m.getModuleCredit(), 4);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    void updateModuleSemester_nonEmptyList_success() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        setup();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        editUtils.updateModuleSemester(\"CS1010\", \"3\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        assertEquals(modulesList.size(), 1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        for (PartialModule m : modulesList) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            if (m.getModuleCode().equalsIgnoreCase(\"CS1010\")) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                assertEquals(m.getModuleCode(), \"CS1010\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                assertEquals(m.getGrade(), \"A+\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                assertTrue(moduleValidator.isValidSemester(m.getSemesterIndex()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                assertEquals(m.getSemesterIndex(), 3);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "                assertEquals(m.getModuleCredit(), 4);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "harryleecp": 76
    }
  },
  {
    "path": "src/test/java/seedu/duke/apps/academicplanner/commons/RemoveUtilsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "package seedu.duke.apps.academicplanner.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import seedu.duke.apps.moduleloader.ModuleLoader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import seedu.duke.apps.moduleloader.exceptions.ModuleLoaderException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import seedu.duke.objects.PartialModule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import seedu.duke.objects.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "class RemoveUtilsTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    ModuleLoader allModules;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    Person currentPerson;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    ModuleValidator moduleValidator;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    AddUtils addUtils;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    RemoveUtils removeUtils;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    void setup() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            allModules \u003d new ModuleLoader();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            currentPerson \u003d new Person(\"Bob\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            addUtils \u003d new AddUtils(allModules,currentPerson);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            moduleValidator \u003d new ModuleValidator(allModules,currentPerson);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            removeUtils \u003d new RemoveUtils(currentPerson);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        } catch (ModuleLoaderException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    void removeModuleFromUserModuleList_nonEmptyList_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        setup();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "harryleecp"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        ArrayList\u003cPartialModule\u003e modulesList \u003d currentPerson.getModulesList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        assertEquals(modulesList.size(),0);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        addUtils.addModuleToUser(\"CS1010\",1,\"A+\",4);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        assertEquals(modulesList.size(),1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        removeUtils.removeModuleFromUserModuleList(\"CS1010\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "        assertEquals(modulesList.size(), 0);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "harryleecp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "harryleecp": 46
    }
  },
  {
    "path": "src/test/java/seedu/duke/apps/capcalculator/CapCalculatorAppParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "package seedu.duke.apps.capcalculator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import seedu.duke.apps.capcalculator.commands.CurrentCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import seedu.duke.apps.capcalculator.commands.SetTargetCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import seedu.duke.globalcommons.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import seedu.duke.objects.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "import static seedu.duke.apps.capcalculator.CapCalculatorParser.INVALID_COMMAND_MESSAGE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Khenus"
        },
        "content": "class CapCalculatorAppParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private Person currentPerson;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        currentPerson \u003d new Person(\"Bob\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    void parse_emptyInput_exceptionThrown() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            final String emptyInput \u003d \"\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            CapCalculatorParser.parse(emptyInput, currentPerson, ui);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            assertEquals(INVALID_COMMAND_MESSAGE, e.getMessage());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    void parse_unknownInput_exceptionThrown() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            final String unknownInput \u003d \"unknown command word\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            CapCalculatorParser.parse(unknownInput, currentPerson, ui);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            assertEquals(INVALID_COMMAND_MESSAGE, e.getMessage());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * Tests for commands. \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    public void parse_currentCommand_parsedCorrectly() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        final String input \u003d \"current\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        parseAndAssertCommandType(input, CurrentCommand.class, currentPerson, ui);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    public void parse_setTargetCommand_parsedCorrectly() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        final String input \u003d \"set target\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        parseAndAssertCommandType(input, SetTargetCommand.class, currentPerson, ui);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JuZihao"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * Parses input and asserts the class/type of the returned command object."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * @param input to be parsed"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     * @param expectedCommandClass expected class of returned command"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    private \u003cT extends Command\u003e void parseAndAssertCommandType(String input, Class\u003cT\u003e expectedCommandClass,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "                                                            Person currentPerson, Ui ui) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            final Command result \u003d CapCalculatorParser.parse(input, currentPerson, ui);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            assertTrue(result.getClass().isAssignableFrom(expectedCommandClass));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JuZihao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JuZihao": 77,
      "Khenus": 1
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Khenus"
        },
        "content": "acadplan"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Khenus"
        },
        "content": "add CS1010"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Khenus"
        },
        "content": "2"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Khenus"
        },
        "content": "A"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Khenus"
        },
        "content": "exit"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Khenus"
        },
        "content": "capcalc"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Khenus"
        },
        "content": "current"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Khenus"
        },
        "content": "exit"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Khenus"
        },
        "content": "hi"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Khenus"
        },
        "content": "exit"
      }
    ],
    "authorContributionMap": {
      "Khenus": 10
    }
  }
]
