[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    mainClassName \u003d \"seedu.duke.Duke\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "riazaham": 1,
      "-": 46
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "![](https://avatars3.githubusercontent.com/u/13195220?s\u003d460\u0026u\u003d7a16696cc4ed27621159c782afd285b7b37a4971\u0026v\u003d4) | Samuel Paul Christopher | [Github](https://github.com/samuelchristopher) | [Portfolio](http://bit.do/samchrisfeb2020)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "riazaham"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Riaz Ahamed | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Shreyas Kumar | [Github](https://github.com/shreytheshreyas) | [Portfolio]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Samuel Leow | [Github](https://github.com/samuellleow) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thatseant"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Sean Tan | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": " "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "\u003e\u003e\u003e\u003e\u003e\u003e\u003e 1f46d705525ec68d6781673e15701194dcb5580e"
      }
    ],
    "authorContributionMap": {
      "samuelchristopher": 1,
      "thatseant": 1,
      "samuellleow": 2,
      "shreytheshreyas": 2,
      "riazaham": 1,
      "-": 4
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## Welcome to EZ Manager"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "![EZ Manager Welcome](https://i.ibb.co/n7zphMR/ezmanagerterminal.png)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "## Changelog"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Identifier | Changes | Date"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---------- | ------------------- | ----"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "A | Incorporated feedback from CS2101 review \u003cul\u003e\u003cli\u003eInclude table of content\u003c/li\u003e\u003cli\u003eInclude preface for sections\u003c/li\u003e\u003cli\u003eAdd introductory sections\u003c/li\u003e\u003cli\u003e Address the reader directly – “You”\u003c/li\u003e\u003c/ul\u003e | 29 October 2020"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "B | "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "## Table of Contents"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "- [Introduction — Welcome to EZ Manager](#introduction)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "- [Setting Up](#setting-up)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "- Design "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "- Implementation"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "- Testing"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "- Dev Ops"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  - Making A Release"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "- Appendices"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "  - Appendix A: Product Scope"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "  - Appendix B: User Stories"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "  - Appendix C: Commands Summary"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "  - Appendix D: Instructions for Manual Testing"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "## Introduction "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "The EZ Manager command line application designed to help you get more done as a Software Engineering Project Manager. Organize your projects, keep track of team members and analyze the tasks pertaining to your projects."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "This guideis designed to help you understand the inner workings of EZ Manager from the first steps of setting up the project to the high-level application structures and even the sequence of operations when a command is triggered."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Let us hit the ground running with the next section about setting up!"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting Up "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "**Prerequisites**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "1. Java Development Kit (JDK) version 11 and above. [Here](https://docs.oracle.com/en/java/javase/11/install/overview-jdk-installation.html#GUID-8677A77F-231A-40F7-98B9-1FD0B48C346A) is an installation guide for JDK 11."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "2. The Intellij Intergrated Development Environment (IDE). [Here](https://www.jetbrains.com/help/idea/installation-guide.html) is an installation guidefor Intellij."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "**Setting up the project on your computer**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "1. Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "2. Open IntelliJ (if you are not in the welcome screen, click `File \u003e Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "3. Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "  a. Go to `File \u003e Project Structure`, then select Project and ensure that the Project SDK is Java 11."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "  b. Else, click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "4. Click `Import Project`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "5. Locate the `build.gradlefile` and select it. Click `OK`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "6. Click `Open as Project`"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "7. Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "8. After the importing is complete, verify that the project is working, locate the `src/main/java/seedu/duke/Duke.javafile`, right-click it, and choose `Run Duke.main()`. "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "If the setup is correct, you should see the welcome screen and greeting."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Thank you for taking the time to test out EZ Manager. [Here](https://www.loom.com/share/f64bb5fd4b7a4089b31a96ddc8e1ea79) is a quick video to introduce you to some of the commands you can use on EZ Manager v2.0."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "PDF developer guide available [here](https://we.tl/t-UkcnzA4i8P)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thatseant"
        },
        "content": "## Design"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thatseant"
        },
        "content": "Developers are welcome to contribute by submitting issues or pull requests on our repository. The design section is a good place to start learning about EZ Manager’s architecture and various components. Most developers will contribute to the app mainly through addition of new user commands. The section “Addition of new commands” will provide a step-by-step walkthrough to ensure new commands follow the overall architecture. Figure 2 below shows the overall class diagram for EZ Manager.  "
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thatseant"
        },
        "content": "### Consideration"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thatseant"
        },
        "content": "Eazy was developed via a breadth first iterative approach with new commands progressively added. An n-tier architecture ensured separation of concern between various layers of the architecture but much of the program’s logic remained in the Command classes. This design architecture ensured minimal changes to the codebase when new commands were added. Often, new commands or feature addition required changes to only a single data class and addition of a new independent command class. "
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thatseant"
        },
        "content": "### Overall Architecture"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thatseant"
        },
        "content": "EZ Manager consists of 4 main layers:  "
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thatseant"
        },
        "content": "* Ui: Handles the output of the app "
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thatseant"
        },
        "content": "* Logic: Command parser and executor "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thatseant"
        },
        "content": "* Model: Data classes "
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thatseant"
        },
        "content": "* Storage: Handles the saving and loading of data to the hard disk "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thatseant"
        },
        "content": "The Ui and Storage layer contains a single class. The model layer contained a member, a task and a project class and the logic layer contained a single parser class and various command classes. Functionality was exposed directly through these command classes, eliminating the need for redundant classes with few methods. In a small app like EZ Manager, this enhanced code maintainability and readability. "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "thatseant"
        },
        "content": " "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "thatseant"
        },
        "content": "Now, we will delve into more detail about each component. "
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "thatseant"
        },
        "content": "### UI Component"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "thatseant"
        },
        "content": "API: Ui.java "
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "thatseant"
        },
        "content": "Introduction: "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "thatseant"
        },
        "content": "The Ui.java is a class made up of various acknowledgement messages to be displayed after the user inputs a command. "
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "thatseant"
        },
        "content": "Abstraction: "
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "thatseant"
        },
        "content": "Every message in the class is stored as a String and it is abstracted to a method. This method is called after the execution of a command.  "
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "thatseant"
        },
        "content": "Access: "
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "thatseant"
        },
        "content": "Every method in the Ui class is a static method. Hence, every command class calls the appropriate static methods directly from the Ui class. "
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "thatseant"
        },
        "content": "### Logic Component"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "thatseant"
        },
        "content": "As user commands follow a fixed format, a generic parser can extract command types and parameter for all commands. This is handled by the parser class. The parser then passes the extracted values to specific command classes. Below are the workings of the Parser and Commands. "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "thatseant"
        },
        "content": " "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "thatseant"
        },
        "content": "**Parser**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "thatseant"
        },
        "content": "User inputs are passed to the static parse method of the parser class. The parser then calls instances of command classes for command execution. The following are handled by the parser. "
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "thatseant"
        },
        "content": "* Command type is extracted and used to determine which command class is called for command execution.  "
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "thatseant"
        },
        "content": "* Command parameters are extracted using a regex and stored in a hashmap. This hashmap is passed to the command class.  "
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "thatseant"
        },
        "content": "* A projectIndex pointer keeps track of the view the user is currently in.  "
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    * If the user is in a project view, this allows the parser to know which project the task to be manipulated is in.  "
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    * If the user is in the home view, this allows the parser to know that projects are to be manipulated instead. "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    * This pointer is passed to the command class. "
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "thatseant"
        },
        "content": " "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "thatseant"
        },
        "content": "**Commands** "
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "thatseant"
        },
        "content": "Each command class represents a specific user command. The bulk of the program’s logic resides here. It manipulates data objects (model layer) and tasks the Ui to display output. The following is a more specific description of command classes. "
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "thatseant"
        },
        "content": "* The constructor extracts individual command parameters from the HashMap given to it from the parser. "
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "thatseant"
        },
        "content": "* From main(), executeCommand method is called which passes these parameters to methods in the model layer, which manipulates data objects. "
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "thatseant"
        },
        "content": "* ExecuteCommand also calls methods in the Ui to display output messages to the user. "
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "thatseant"
        },
        "content": "### Model Component"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "thatseant"
        },
        "content": "The model component is to provide you with a conceptual understanding of how the data is stored in EZ Manager. EZ Manager has three classes which store data, the Project class, the Task class and the Team Member class. This section will explain how each of these classes interact with one another. The diagram below shows the attributes associated with each of the objects. "
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "thatseant"
        },
        "content": "Each project can contain many tasks and have multiple team members assigned to the project. To facilitate this, the Project class contains an ArrayList of Task and an ArrayList of TeamMembers. Other attributes of the Project include its name, description, deadline and its status. All these fields are represented in the Home View of EZ Manager. "
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "thatseant"
        },
        "content": " "
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "thatseant"
        },
        "content": "Furthermore, for each task that you create, you can add a priority (to allow for sorting in later versions of EZ Manager), status, deadline, assign a member to work on the task and even include the estimates and actual time that a task takes to complete. "
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "thatseant"
        },
        "content": "### Storage Component"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "thatseant"
        },
        "content": "This is section will explain how EZ Manager ensures that the data in the application persists after each session has been terminated (with the bye command). Figure 3 outlines the responsibility of the Storage component for loading and storing the data during the lifecycle of the application. "
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "thatseant"
        },
        "content": "More specifically, Figure 4 shows us how the text file would look like when it is populated. In the load method of Storage that is called at the beginning of each application, the first thing that is recalled are the team members that are part of the overall organization that is being managed by EZ Manager.  "
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "thatseant"
        },
        "content": "Once the team members are in, the load method registers the projects. Each project is stored in a block that starts with “Project ProjectNameHere” so in Figure 4, the project is project “how are you”. Data pertaining to the project, which includes, the project’s status (whether it is done or not), the project description all the way to the tasks and members associated with the project can be extracted from here and loaded into the current instance of the application. That completes the loading process. "
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "thatseant"
        },
        "content": " "
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "thatseant"
        },
        "content": "Once the loading process is over, the application proceeds to its normal operation where it receives input from you and responds accordingly. The next important part is when you input the exit command “bye” once this is triggered, before the application terminates, we call the save method. "
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "thatseant"
        },
        "content": " "
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "thatseant"
        },
        "content": "The save method from the Storage component clears the ezmanager.txt file and then populates it with the current data using the saveFormat function (available in the Project, Task and TeamMember) to ensure that the formatting is consistent with EZ Manager’s saving convention. Once this step is done, you can be assured that your data has been saved.  "
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "thatseant"
        },
        "content": "## Implementation"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "thatseant"
        },
        "content": "### Adding a new project"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "thatseant"
        },
        "content": "This section will explain the creation of new projects and how the objects interact with each other. "
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "thatseant"
        },
        "content": "The user can create new projects to be added to the list of projects with the project command. "
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "thatseant"
        },
        "content": "This command is facilitated with the help of the ProjectCommand class. An instance of the ProjectCommand class will have the following properties: "
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "thatseant"
        },
        "content": "* tasks: An array list of tasks "
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "thatseant"
        },
        "content": "* members: An array list of members "
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "thatseant"
        },
        "content": "* projectName: The name of the project as a String object "
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "thatseant"
        },
        "content": "*projectDescription: The description of the project as a String object "
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "thatseant"
        },
        "content": "projectDeadline: The deadline of the project as a Local Date object "
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "thatseant"
        },
        "content": "Step 1: The user types the project command followed by the name of the project e.g. project n/Project One.  "
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "thatseant"
        },
        "content": "The main Duke class will call the Parser class. "
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "thatseant"
        },
        "content": "The Parser class will check which state the app is in and will then call the appropriate class constructor. In this case, the Parser will call the ProjectCommand constructor. The ProjectCommand constructor will also check for the validity of the user’s input. "
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "thatseant"
        },
        "content": "The Parser class will then initialize a new instance of the ProjectCommand constructor with the project name “Project One” and return it back to the main Duke class. "
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "thatseant"
        },
        "content": "The Duke class will call the executeCommand function from the returned instance which will execute the command. "
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "thatseant"
        },
        "content": "The executeCommand function will create a new Project instance "
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "thatseant"
        },
        "content": "It will then add that instance to the static projects list.  "
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "thatseant"
        },
        "content": "Lastly, it will call the printProjectCreated method from the Ui class and return it to the main Duke class. "
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "thatseant"
        },
        "content": "The Duke class will then receive the acknowledgement message and display it to the user in the terminal. "
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "thatseant"
        },
        "content": "The above is illustrated below in a sequence diagram. The sequence diagram will only encompass the sequence in the executeCommand function. "
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "thatseant"
        },
        "content": "### Deleting Tasks"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "thatseant"
        },
        "content": "This command allows project managers to delete tasks from projects. "
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "thatseant"
        },
        "content": "The logic for this command is primarily written in TaskDeleteCommand class. It extends from the abstract Command class. "
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "thatseant"
        },
        "content": "The steps below show how such a class is initialized and used to execute the command. "
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "thatseant"
        },
        "content": "**User enters Command**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "thatseant"
        },
        "content": "User enters command delete t/3 "
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "thatseant"
        },
        "content": " "
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "thatseant"
        },
        "content": "**Implementation**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "thatseant"
        },
        "content": "1. Parser initializes TaskDeleteCommand by passing a hashmap of input parameters together with projectIndex into its constructor. "
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "thatseant"
        },
        "content": "2. Parse() method of TaskDeleteCommand extracts the task index from the hashmap. "
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "thatseant"
        },
        "content": "3. ExecuteCommand() method of TaskDeleteCommand is called by Duke main class, which passes it the program’s arraylist of projects. "
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    "
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    3.1 Existing project is retrieved from the arraylist of projects using projectIndex. "
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    "
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    3.2 The method deleteTask of the project is called with taskIndex. "
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    "
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    3.3 This simply removes the task from the arraylist of tasks the project contains. "
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    "
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    3.4 The Ui class prints an acknowledgement that the task has been deleted. "
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    "
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "thatseant"
        },
        "content": "### Adding Deadline to Tasks"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "thatseant"
        },
        "content": "This command allows project managers to add deadline to tasks. "
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "thatseant"
        },
        "content": "The logic for this command is primarily written in DeadlineCommand class. It extends from the abstract Command class. "
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "thatseant"
        },
        "content": "The steps below show how such a class is initialized and used to execute the command. "
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "thatseant"
        },
        "content": "**User enters Command**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "thatseant"
        },
        "content": "User enters command deadline t/3 h/2 m/32 "
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "thatseant"
        },
        "content": "**Implementation**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "thatseant"
        },
        "content": "1. Parser initializes DeadlineCommand by passing a hashmap of input parameters together with projectIndex into its constructor. "
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "thatseant"
        },
        "content": "2. Parse() method of DeadlineCommand extracts the task index and deadline date from the hashmap. "
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "thatseant"
        },
        "content": "3. ExecuteCommand() method of DeadlineCommand is called by Duke main class, which passes it the program’s arraylist of projects. "
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "thatseant"
        },
        "content": "   "
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    3.1 Existing task is retrieved with taskIndex after retrieving the project it belongs to from the arraylist of project. "
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    "
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    3.2 The method addDeadline of the task is called that sets its date property. "
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    "
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    3.3 The Ui class then prints the deadline and the task description. "
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    "
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "thatseant"
        },
        "content": "### Assign Actual Duration to Tasks    "
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "thatseant"
        },
        "content": "This command allows project managers to record the actual duration that completed tasks take. "
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "thatseant"
        },
        "content": "The logic for this command is primarily written in ActualTimeCommand class. It extends from the abstract Command class. "
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "thatseant"
        },
        "content": "The steps below show how such a class is initialized and used to execute the command. "
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "thatseant"
        },
        "content": "**User enters Command**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "thatseant"
        },
        "content": "User enters command actual t/3 h/2 m/32 "
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "thatseant"
        },
        "content": "**Implementation**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "thatseant"
        },
        "content": "1. Parser initializes ActualTimeCommand by passing a hashmap of input parameters together with projectIndex into its constructor. "
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "thatseant"
        },
        "content": "2. Parse() method of ActualTimeCommand extracts the task index, hours and minutes from the hashmap. "
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "thatseant"
        },
        "content": "3. ExecuteCommand() method of ActualTimeCommand is run. "
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "thatseant"
        },
        "content": "  "
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    3.1 Existing task is retrieved using projectIndex and taskIndex. "
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    3.2 The task is checked to determine if it is completed. "
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    3.3 If the task is completed, the task instance will have its actualInMinutes property set based on the hours and minutes retrieved. "
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    3.4 Otherwise, an exception is thrown. "
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "thatseant"
        },
        "content": "  "
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    3.5 The Ui class then prints the task description and the duration the task took. "
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    "
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "thatseant"
        },
        "content": "### Assign Estimated Duration to Tasks    "
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "thatseant"
        },
        "content": "This command allows project managers to add an estimate for the duration tasks will take. "
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "thatseant"
        },
        "content": "The logic for this command is primarily written in EstimatedTimeCommand class. It extends from the abstract Command class. "
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "thatseant"
        },
        "content": "The steps below show how such a class is initialized and used to execute the command. "
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "thatseant"
        },
        "content": "**User enters Command**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "thatseant"
        },
        "content": "User enters command estimate t/3 h/2 m/32 "
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "thatseant"
        },
        "content": "**Implementation**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "thatseant"
        },
        "content": "1. Parser initializes EstimatedTimeCommand by passing a hashmap of input parameters together with projectIndex into its constructor. "
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "thatseant"
        },
        "content": "2. Parse() method of EstimatedTimeCommand extracts the task index, hours and minutes from the hashmap. "
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "thatseant"
        },
        "content": "3. ExecuteCommand() method of EstimateTimeCommand is run. "
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    "
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    3.1 Existing task is retrieved using projectIndex and taskIndex. "
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    "
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    3.2 addEstimate() method of task is called, and the task will have its estimateInMinutes property set based on the hours and minutes retrieved. "
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    3.3 The Ui class then prints the task description and the estimated duration added to the task. "
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "thatseant"
        },
        "content": "   "
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "**User Stories**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "Priority | As a ... | I want to ... | So that I can ..."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "---------- | -------------------- | ------------------------- | -------------------------"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "`* * *` | new user | see usage instructions | refer to the commands when I forget how to use the App"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "`* * *` | project manager | add a new project | track the progress of my new project "
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "`* * *` | project manager | add tasks under a project | track the project tasks needed to finish the project"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "`* * *` | project manager | add a new member | manage members in my team "
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "`* * *` | project manager | select a project | go into a particular project to make changes such as adding tasks and deadline specific to the project"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "`* * *` | project manager | navigate between home view and project view | switch from one project to the other project"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "`* * *` | project manager | delete an existing project | remove projects that are not required anymore"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "`* * *` | project manager | delete an existing task | remove tasks that are not required anymore"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "`* * *` | project manager | remove an existing member | remove members that have left the team"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "`* * *` | project manager | add a deadline to an existing project | keep the project on track and deliver the product on time"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "`* * *` | project manager | add a deadline to an existing task | keep the task on track and finish it on time"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "`* * *` | project manager | mark completed projects as done | see which projects are done and which still needs to be done"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "`* * *` | project manager | mark completed tasks as done | see which tasks are done and which still needs to be done"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "`* * *` | project manager | add a project description | have a better understanding of the concept and context of the project"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "`* * *` | project manager | add a task description | have a better understand of the task and know what needs to be done"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "`* * *` | project manager | assign a member to a project | allocate projects to team members "
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "`* * *` | project manager | assign a member to a task | allocate equal workload to every team member"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "`* * *` | project manager | assign priority to a task | organise the tasks in order of priority and focus on those that are more urgent"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "`* *` | project manager | assign estimated time needed to complete a task | give my team a rough estimate of how long is expected for them to finish the task"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "`* *` | project manager | assign actual time used to complete a task | find out the amount of time spent and understand which task is taking more time than expected"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "`* *` | project manager | display all the projects and members all in one view | have an overview of all the projects and members"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "`* *` | project manager | display all the tasks and members allocated to the project all in one view | have an overview of the unfinished tasks and members assigned to those tasks"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "`* *` | project manager | sort my list of projects in terms of deadline | prioritise projects that are urgent and focus on completing the project before the deadline"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "`* *` | project manager | sort my list of tasks in terms of deadline | focus on the tasks that have a closer deadline"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "`* *` | project manager | sort my list of tasks in terms of priority | focus on the tasks that are most important as some are base level tasks which are required for the project to be up and running"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "`* *` | project manager | sort my list of tasks in terms of actual time spent | have an overview of which tasks are taking up more time and required more manpower in the future"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "`*` | project manager | add the roles of my team members | allocate appropriate tasks to appropriate members"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "`*` | project manager | send out reminders to my team members | have them shift gears or change something in real time  "
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "## Appendix C: Instructions for Manual Testing"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "### \u003cins\u003eProject-Specific Tests\u003c/ins\u003e"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "#### C.1 Creating a Project"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "1. Creating a Project when you are in the Home-View"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    * Prerequisites: Only Required to be in the Home View (Initial state of the"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "       application)"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    * Test case: `project n/p1`: A new project named as p1 should be created and added to the project list. A message will be displayed on the screen to ensure the user that the project has been created."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    * Test case: `project p1`: Since the n/ parameter has not been provided, it is considered as an incorrect command in the application and hence the program throws an exception."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    "
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "2. Creating a Project when you are in the Project-View"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    * Prerequisites: Required to be in Project-View"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    * Test case: `project n/p1`: Since the state of the program is in project view, the user will not be allowed to create a project and hence the program throws an exception."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    "
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "#### C.2 Deleting a Project"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "1. Deleting a Project when you are in the Home-View"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    * Prerequisites: Only Required to be in the Home View (Initial state of the application)"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    * Test case: `delete p/1`: The project named as p1 will be deleted and from the project list. A message will be displayed on the screen to ensure the user that the project has been deleted."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    * Test case: `delete p1`: Since the p/ parameter has not been provided, it is considered as an incorrect command in the application and hence the program throws an exception."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "2. Creating a Project when you are in the Project-View"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    * Prerequisites: Required to be in Project-View"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    * Test case: `project p/1`: Since the state of the program is in project view, the user will not be allowed to delete a project and hence the program will not be able to recognize the p/ parameter and will hence throw an exception."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "#### C.3 Listing multiple Projects"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "1. Listing Projects when project list contains projects"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    * Prerequisites: Project list should at least have one project"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    * Test case: `list`: the list command will list all the projects present in the project list."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    "
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "2. Creating a Project when you are in the Project-View"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    * Prerequisites: Project list should be empty"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    * Test case: `list`: Since the project list is empty, no projects will be displayed and, an exception will be shown saying that the project list is empty."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    "
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "#### C.4 Selecting a Project"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "1. Selecting a Project when you are in the Home-View"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    * Prerequisites: Only Required to be in the Home View (Initial state of the application) and, the project p1 has already been created."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    * Test case: `select p/1`: The project named as p1 will be will selected from the"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "      project list and, you will enter project view of that respective project."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    * Test case: `select p1`: Since the p/ parameter has not been provided, it is considered as an incorrect command in the application and hence the program throws an exception."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "      "
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "2. Selecting a Project when you are in the Project-View"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    * Prerequisites: Required to be in Project-View"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    * Test case: `select p/1`: Since the state of the program is in project view, the user will not be allowed to delete a project and hence the program will not be able to recognize the p/ parameter and will hence throw an exception."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "      "
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "#### C.5 Providing a Description for a Project"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "1. Providing a description for the Project when you are in the Home-View"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    * Prerequisites: Only Required to be in the Home View (Initial state of the application) and, the project p1 has already been created."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    * Test case: `description d/This is a description`: Since we are not in the view of any project, we would not be able to add a description to any of them and hence the program will throw an exception."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "   "
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "2. Providing a description for the Project when you are in the Project-View "
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    * Prerequisites: A project p1 has to be created and, the program has to be in its project view"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    * Test case: `description d/This is a description`: Since the state of the program is in project view, the user will not be allowed to delete a project and hence the program will not be able to recognize the p/ parameter and will hence throw an exception."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    "
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "### \u003cins\u003eTask-Specific Tests\u003c/ins\u003e"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "#### C.6 Creating a Task"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "1. Creating a Task when you are in the Project-View"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    * Prerequisites: Only Required to be in Project View"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    * Test case: task `n/t1`: A new task named as t1 should be created and added to the task list of that project. A message will be displayed on the screen to ensure the user that the task has been created."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "2. Creating a Task when you are in the Home-View"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    * Prerequisites: Required to be in Home-View"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    * Test case: `project n/p1`: Since the state of the program is in Home view, the user will not be allowed to create a task and hence the program throws an exception."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    "
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "#### C.7 Deleting a Task"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "1. Deleting a Task when you are in the Project-View"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    * Prerequisites: Only Required to be in Project View "
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    * Test case: `delete t/1`: The first task of in the task list of the project will be deleted and, an acknowledgement message will be displayed on the screen to ensure the user that the required task has been deleted."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    "
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "2. Deleting a Task when you are in the Home-View"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    * Prerequisites: Required to be in Home-View"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    * Test case: `delete t/p1`: Since the state of the program is in Home view, the user will not be allowed to delete a task and hence the program throws an exception."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    "
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "#### C.8 Selecting a Task"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "1. Selecting a Task when you are in the Project-View"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    * Prerequisites: Only Required to be in Project View (Initial state of the application)"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    * Test case: select t/1: The first task of in the task list of the project will be deleted and, an acknowledgement message will be displayed on the screen to ensure the user that the required task has been deleted."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    "
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "2. Selecting a Task when you are in the Home-View"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    * Prerequisites: Required to be in Home-View"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    * Test case: delete `t/p1`: Since the state of the program is in Home view, the user will not be allowed to delete a task and hence the program throws an exception."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    "
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "#### C.9 Listing all Tasks in a Project"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "#### C.10 Marking a Task as Completed"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "#### C.11 Assigning a Deadline to a Task"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "#### C.12 Assigning a Priority to a Task"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "#### C.13 Assigning Estimated Completion Time to Task"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "#### C.14 Assigning Actual Completion Time to Task"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "####C.15 Sorting Tasks in TaskList"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "### \u003cins\u003eMember-Specific Tests\u003c/ins\u003e"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "#### C.16 Adding a Member"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "#### C.17 Removing a Member"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "#### C.18 Listing all Members"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "#### C.19 Assigning a Member to a Project"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "#### C.20 Assigning a Member to a Task"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "thatseant": 177,
      "samuellleow": 144,
      "-": 65
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "riazaham"
        },
        "content": "# Ez Manager"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "riazaham"
        },
        "content": "Have you found yourself in loads of projects and tasks"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "riazaham"
        },
        "content": "but no way of managing them quickly and efficiently? "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "riazaham"
        },
        "content": "Welcome to EZ Manager where managing your projects and tasks"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "riazaham"
        },
        "content": "are just so \"ez\". Click on the following links to find out"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "riazaham"
        },
        "content": "more!"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Useful links:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "* [User Guide](UserGuide.md)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "* [Developer Guide](DeveloperGuide.md)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* [About Us](AboutUs.md)"
      }
    ],
    "authorContributionMap": {
      "riazaham": 6,
      "-": 6
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "riazaham"
        },
        "content": "This user guide will explain how to use the software tool,"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "riazaham"
        },
        "content": "EZ Manager. You can navigate to the different sections of"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "riazaham"
        },
        "content": "this guide using the Table of Content. Each content is linked"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "riazaham"
        },
        "content": "to its respective sections. "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "riazaham"
        },
        "content": "EZ Manager is a CLI (Command Line Interface) software tool "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "riazaham"
        },
        "content": "for Software Engineering Project Managers to manage their "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "riazaham"
        },
        "content": "projects, tasks and team members all in one app."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "riazaham"
        },
        "content": "## Table of Contents"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "riazaham"
        },
        "content": "1. [Quick Start](#quick-start)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "riazaham"
        },
        "content": "2. [Terminologies](#terminologies)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thatseant"
        },
        "content": "3. [Home View](#home-view)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    1. [Accessing Home View](#accessing-home-view)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    2. [Commands](#home-view-commands)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        1. [Viewing the updated Home View](#viewing-the-updated-home-view-list)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        2. [Adding a project](#adding-a-project-project)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        3. [Selecting a project](#selecting-a-project-select)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        4. [Marking a project as done](#marking-a-project-as-done-done)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        5. [Adding a deadline to a project](#adding-a-deadline-to-a-project-deadline)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        6. [Adding a description to a project](#adding-a-description-to-a-project-description)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        7. [Deleting a project](#deleting-a-project-delete)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        8. [Adding a member](#adding-a-member-member)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        9. [Assigning a member to a project](#assigning-a-member-to-a-project-assign)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        10. [Removing a member](#removing-a-member-remove)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thatseant"
        },
        "content": "4. [Project View](#project-view)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    1. [Accessing Project View](#accessing-project-view)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    2. [Commands](#project-view-commands)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        1. [Viewing the updated Project View](#viewing-the-updated-project-view-list)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        2. [Adding a task](#adding-a-task-task)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        3. [Selecting a task](#selecting-a-task-select)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        4. [Marking a task as done](#marking-a-task-as-done-done)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        5. [Adding a deadline to a task](#adding-a-deadline-to-a-task-deadline)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        6. [Adding a priority to a task](#adding-a-priority-to-a-task-deadline)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        7. [Deleting a task](#deleting-a-task-delete)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        8. [Assigning a member to a task](#assigning-a-member-to-a-task-assign)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "riazaham"
        },
        "content": "5. [Exiting EZ Manager](#exiting-ez-manager)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "riazaham"
        },
        "content": "6. [FAQ](#faq)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "riazaham"
        },
        "content": "7. [Command Summary](#command-summary)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "## Quick Start"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure that you have Java 11 or above installed."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "riazaham"
        },
        "content": "1. Download the latest version of `EZ Manager` from [here](https://github.com/AY2021S1-CS2113T-T09-1/tp/releases)."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "riazaham"
        },
        "content": "1. Copy the JAR  file into an empty new folder. Take note of the file path"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "riazaham"
        },
        "content": "1. Open Command Prompt (on Windows) or Terminal (on Mac) and type"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "riazaham"
        },
        "content": "java -jar {file path}/ezManager.jar"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "riazaham"
        },
        "content": "## Terminologies"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "riazaham"
        },
        "content": "- **HomeView**: Refers to the state of the program in HomeView."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "riazaham"
        },
        "content": "In this view, you can execute project and member commands but"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "riazaham"
        },
        "content": "you cannot execute task commands."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "riazaham"
        },
        "content": "- **ProjectView**: Refers to the state of the program in ProjectView."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "riazaham"
        },
        "content": "In this view, you can execute task and member commands but"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "riazaham"
        },
        "content": "you cannot execute project commands."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "riazaham"
        },
        "content": "- **Project list**: Refers to the list of projects currently"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "riazaham"
        },
        "content": "existing in the system"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "riazaham"
        },
        "content": "- **Task list**: Refers to the list of tasks currently"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "riazaham"
        },
        "content": "existing in the system"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "riazaham"
        },
        "content": "- **Member list**: Refers to the list of members currently"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "riazaham"
        },
        "content": "existing in the system"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "riazaham"
        },
        "content": "- **PROJECT_INDEX**: Every existing project would be assigned"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "riazaham"
        },
        "content": "a positive integer. Hence, the PROJECT_INDEX refers to this"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "riazaham"
        },
        "content": "positive integer. You can retrieve the PROJECT_INDEXes of "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "riazaham"
        },
        "content": "all projects by using the `list` command in HomeView"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "riazaham"
        },
        "content": "- **TASK_INDEX**: Every existing task would be assigned"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "riazaham"
        },
        "content": "a positive integer. Hence, the TASK_INDEX refers to this"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "riazaham"
        },
        "content": "positive integer. You can retrieve the TASK_INDEXes of "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "riazaham"
        },
        "content": "all tasks by using the `list` command in ProjectView"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "thatseant"
        },
        "content": "## Home View"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "thatseant"
        },
        "content": "The Home View displays the full list of projects and members that are under a manager\u0027s purview. "
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "thatseant"
        },
        "content": "The manager can add and edit projects and members from this view."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "thatseant"
        },
        "content": "![](HomeViewScreenshot.png?raw\u003dtrue)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "thatseant"
        },
        "content": "### Accessing Home View"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "thatseant"
        },
        "content": "Displays the Home View. If the user is in Project View, this command changes the view to Home View and "
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "thatseant"
        },
        "content": "enables the Home View commands in this section."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "riazaham"
        },
        "content": "Format: `home`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "thatseant"
        },
        "content": "### Home View Commands"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "thatseant"
        },
        "content": "### Viewing the updated Home View: `list`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "thatseant"
        },
        "content": "Displays the updated Home View to user."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "thatseant"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "riazaham"
        },
        "content": "### Adding a project: `project`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "riazaham"
        },
        "content": "Adds a new project to the project list."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "riazaham"
        },
        "content": "Format: `project n/PROJECT_NAME`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "riazaham"
        },
        "content": "* You must be in HomeView before adding a new project.  "
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "riazaham"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "riazaham"
        },
        "content": "* `project n/Web Development`. Adds the project \u0027Web Development\u0027"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "riazaham"
        },
        "content": "to the project list."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "riazaham"
        },
        "content": "### Selecting a project: `select`"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "riazaham"
        },
        "content": "Select a new project from the project list."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "riazaham"
        },
        "content": "Format: `select p/PROJECT_INDEX`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "riazaham"
        },
        "content": "* The `PROJECT_INDEX` must be a positive integer."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "riazaham"
        },
        "content": "* The project must exist before it can be selected."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "riazaham"
        },
        "content": "* You must be in HomeView before selecting a project.  "
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "riazaham"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "riazaham"
        },
        "content": "* `select p/1`. Selects the first project in the project list."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "riazaham"
        },
        "content": "### Marking a project as done: `done`"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "riazaham"
        },
        "content": "Marks an existing project as done."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "riazaham"
        },
        "content": "Format: `done p/PROJECT_INDEX`"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "riazaham"
        },
        "content": "* The `PROJECT_INDEX` must be a positive integer."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "riazaham"
        },
        "content": "* The project must exist before it can be marked as done."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "riazaham"
        },
        "content": "* You must be in HomeView before marking a project"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "riazaham"
        },
        "content": "as done.  "
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "riazaham"
        },
        "content": "* `done p/1`. Marks the first project in the project list "
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "riazaham"
        },
        "content": "as done."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "riazaham"
        },
        "content": "### Adding a deadline to a project: `deadline`"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "riazaham"
        },
        "content": "Adds a deadline to an existing project."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "riazaham"
        },
        "content": "Format: `deadline p/PROJECT_INDEX d/DATE`"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "riazaham"
        },
        "content": "* The `PROJECT_INDEX` must be a positive integer."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "riazaham"
        },
        "content": "* The project must exist before a deadline can be added."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "riazaham"
        },
        "content": "* The `DATE` must be of the form `YYYY-MM-DD`"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "riazaham"
        },
        "content": "* You must be in HomeView before adding a deadline"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "riazaham"
        },
        "content": "to a project.  "
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "riazaham"
        },
        "content": "* `deadline p/1 d/2020-10-25`. Adds the deadline 25/10/2020"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "riazaham"
        },
        "content": "to the first project."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "riazaham"
        },
        "content": "### Adding a description to a project: `description`"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "riazaham"
        },
        "content": "Adds a description to an existing project."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "riazaham"
        },
        "content": "Format: `description p/PROJECT_INDEX d/DESCRIPTION`"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "riazaham"
        },
        "content": "* The `PROJECT_INDEX` must be a positive integer."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "riazaham"
        },
        "content": "* The project must exist before a description can be added."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "* You must be in HomeView before adding a description to a project.  "
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "riazaham"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "* `description p/1 d/Project for Company X`. Adds the description "
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "riazaham"
        },
        "content": "`Project for Company X` to the first project."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "riazaham"
        },
        "content": "### Deleting a project: `delete`"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "riazaham"
        },
        "content": "Delete a project from the project list."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "riazaham"
        },
        "content": "Format: `delete p/PROJECT_INDEX`"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "riazaham"
        },
        "content": "* The `PROJECT_INDEX` must be a positive integer."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "riazaham"
        },
        "content": "* The project must exist in the project list before it can be deleted."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "riazaham"
        },
        "content": "* You must be in HomeView before deleting a project.  "
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "riazaham"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "riazaham"
        },
        "content": "* `delete p/1`. Deletes the first project in the project list."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "thatseant"
        },
        "content": "### Adding a member: `member`"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "thatseant"
        },
        "content": "Adds a new member to the member list."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "thatseant"
        },
        "content": "Format: `member n/MEMBER_NAME`"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "thatseant"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "thatseant"
        },
        "content": "* `member n/John Doe`. Adds the member \u0027John Doe\u0027"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "thatseant"
        },
        "content": "to the member list."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "thatseant"
        },
        "content": "* `select t/1`. Selects the first task from the task list."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "thatseant"
        },
        "content": "### Assigning a member to a project: `assign`"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "thatseant"
        },
        "content": "Assigns an existing member to an existing project."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "thatseant"
        },
        "content": "Format: `assign p/PROJECT_INDEX m/MEMBER_INDEX`"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "thatseant"
        },
        "content": "* The `PROJECT_INDEX` must be a positive integer."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "thatseant"
        },
        "content": "* The `MEMBER_INDEX` must be a positive integer."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "thatseant"
        },
        "content": "* The project must exist before it can be assined to."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "thatseant"
        },
        "content": "* The member must exist before they can be assined."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "thatseant"
        },
        "content": "* You must be in HomeView before assigning"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "thatseant"
        },
        "content": "a member to a project."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "thatseant"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "riazaham"
        },
        "content": "* `assign p/1 m/1`. Assigns the first member in the member list"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "thatseant"
        },
        "content": "to the first project in the project list"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "thatseant"
        },
        "content": "### Removing a member: `remove`"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "thatseant"
        },
        "content": "Removes an existing member from the member list."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "thatseant"
        },
        "content": "Format: `remove m/MEMBER_INDEX`"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "thatseant"
        },
        "content": "* The `MEMBER_INDEX` must be a positive integer."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "thatseant"
        },
        "content": "* The member must exist before they can be removed."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "thatseant"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "thatseant"
        },
        "content": "* `remove m/1`. Removes the first member from the member list."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "thatseant"
        },
        "content": "## Project View"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "thatseant"
        },
        "content": "The Project View displays the full list of tasks and members in a particular project."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "thatseant"
        },
        "content": "The manager can add and edit tasks and assign members to tasks."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "thatseant"
        },
        "content": "### Accessing Project View"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "thatseant"
        },
        "content": "This view is accessed by [selecting a project](#selecting-a-project-select) from the Home View."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "thatseant"
        },
        "content": "### Project View Commands"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "thatseant"
        },
        "content": "### Viewing the updated Project View: `list`"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "thatseant"
        },
        "content": "Displays the updated project View to user."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "thatseant"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "riazaham"
        },
        "content": "### Adding a task: `task`"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "riazaham"
        },
        "content": "Adds a new task to the task list."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "riazaham"
        },
        "content": "Format: `task n/TASK_NAME`"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "riazaham"
        },
        "content": "* You must be in ProjectView before adding a new task.  "
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "riazaham"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "riazaham"
        },
        "content": "* `task n/Deploy Version 2.0`. Adds the task \u0027Deploy Version 2.0\u0027"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "riazaham"
        },
        "content": "to the task list."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "riazaham"
        },
        "content": "### Selecting a task: `select`"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "riazaham"
        },
        "content": "Selects a task from the project list."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "thatseant"
        },
        "content": "Format: `select t/TASK_INDEX`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "riazaham"
        },
        "content": "* The `TASK_INDEX` must be a positive integer."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "riazaham"
        },
        "content": "* The task must exist before it can be selected."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "riazaham"
        },
        "content": "* You must be in ProjectView before selecting a task.  "
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "riazaham"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "riazaham"
        },
        "content": "* `select t/1`. Selects the first task from the task list."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "riazaham"
        },
        "content": "### Viewing the task list: `list`"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "riazaham"
        },
        "content": "Displays all the tasks in the task list."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "riazaham"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "riazaham"
        },
        "content": "* You must be Project View before listing all tasks.  "
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "riazaham"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "riazaham"
        },
        "content": "* `list`. Shows all the tasks in the task list."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "riazaham"
        },
        "content": "### Marking a task as done: `done`"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "riazaham"
        },
        "content": "Marks an existing task as done."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "riazaham"
        },
        "content": "Format: `done t/TASK_INDEX`"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "riazaham"
        },
        "content": "* The `TASK_INDEX` must be a positive integer."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "riazaham"
        },
        "content": "* The task must exist before it can be selected."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "riazaham"
        },
        "content": "* You must be in ProjectView before marking a task"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "riazaham"
        },
        "content": "as done.  "
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "riazaham"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "riazaham"
        },
        "content": "* `done t/1`. Marks the first task in the task list "
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "riazaham"
        },
        "content": "as done."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "riazaham"
        },
        "content": "### Adding a deadline to a task: `deadline`"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "riazaham"
        },
        "content": "Adds a deadline to an existing task."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "riazaham"
        },
        "content": "Format: `deadline t/TASK_INDEX d/DATE`"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "riazaham"
        },
        "content": "* The `TASK_INDEX` must be a positive integer."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "riazaham"
        },
        "content": "* The task must exist before a deadline can be added."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "riazaham"
        },
        "content": "* The `DATE` must be of the form `YYYY-MM-DD`"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "riazaham"
        },
        "content": "* You must be in ProjectView before adding a deadline"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "riazaham"
        },
        "content": "to a task.  "
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "riazaham"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "riazaham"
        },
        "content": "* `deadline t/1 d/2020-10-25`. Adds the deadline 25/10/2020"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "riazaham"
        },
        "content": "to the first task in the task list."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "riazaham"
        },
        "content": "### Adding a priority to a task: `priority`"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "riazaham"
        },
        "content": "Adds a priority to an existing task."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "riazaham"
        },
        "content": "1 denotes the highest priority."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "riazaham"
        },
        "content": "Format: `priority t/TASK_INDEX p/PRIORITY`"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "riazaham"
        },
        "content": "* The `TASK_INDEX` must be a positive integer."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "riazaham"
        },
        "content": "* The task must exist before a deadline can be added."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "riazaham"
        },
        "content": "* The `PRIORITY` must be a positive interger."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "riazaham"
        },
        "content": "* You must be in ProjectView before adding a deadline"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "riazaham"
        },
        "content": "to a task.  "
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "riazaham"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "riazaham"
        },
        "content": "* `priority t/1 p/1`. Adds the highest priority, 1,"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "riazaham"
        },
        "content": "to the first task in the task list."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "riazaham"
        },
        "content": "### Deleting a task: `delete`"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "riazaham"
        },
        "content": "Deletes a task from the task list."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "riazaham"
        },
        "content": "Format: `delete t/TASK_INDEX`"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "riazaham"
        },
        "content": "* The `TASK_INDEX` must be a positive integer."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "riazaham"
        },
        "content": "* The task must exist in the task list before it can be deleted."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "riazaham"
        },
        "content": "* You must be in ProjectView before deleting a task.  "
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "riazaham"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "riazaham"
        },
        "content": "* `delete t/1`. Deletes the first task in the task list."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "riazaham"
        },
        "content": "### Assigning a member to a task: `assign`"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "riazaham"
        },
        "content": "Assigns an existing member to an existing task."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "riazaham"
        },
        "content": "Format: `assign t/TASK_INDEX m/MEMBER_INDEX`"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "riazaham"
        },
        "content": "* The `TASK_INDEX` must be a positive integer."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "riazaham"
        },
        "content": "* The `MEMBER_INDEX` must be a positive integer."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "riazaham"
        },
        "content": "* The task must exist before it can be assined to."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "riazaham"
        },
        "content": "* The member must exist before they can be assined."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "riazaham"
        },
        "content": "* You must be in ProjectView before assigning"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "riazaham"
        },
        "content": "a member to a task."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "riazaham"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "riazaham"
        },
        "content": "* `assign t/1 m/1`. Assigns the first member in the member list"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "riazaham"
        },
        "content": "to the first task in the task list"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "riazaham"
        },
        "content": "### Exiting Ez Manager: `bye`"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "riazaham"
        },
        "content": "You can exit the program with the `bye` command."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "riazaham"
        },
        "content": "Format: `bye`"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "**Q**: How do I transfer my data to another computer? "
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "**A**: {your answer here}"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "## Command Summary"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "riazaham"
        },
        "content": "| Commands | Action | Examples |"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "riazaham"
        },
        "content": "| -------- | ------ | -------- |"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "riazaham"
        },
        "content": "| project | Creates a new project in the project list in Home View | `project n/Web Development Project` |"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "riazaham"
        },
        "content": "| task    | Creates a new task in the task list in Project View| `task n/Deploy Version 2.0` |"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "riazaham"
        },
        "content": "| member  | Creates a new member in the member list | `member n/John Doe` |"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "thatseant"
        },
        "content": "| list    | If in Home View, displays the updated Home View | `list` |  "
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "thatseant"
        },
        "content": "| list    | If in Project View, displays the updated Project View | `list` |"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "riazaham"
        },
        "content": "| select  | If in HomeView, selects the specified project and program enters ProjectView | `select p/1` |  "
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "riazaham"
        },
        "content": "| select  | If in ProjectView, selects the specified task | `select t/1` |"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "riazaham"
        },
        "content": "| done    | If in HomeView, marks the specified project as done | `done p/1` |  "
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "riazaham"
        },
        "content": "| done    | If in ProjectView, marks the specified task as done | `done t/1` |"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "riazaham"
        },
        "content": "| delete  | If in HomeView, deletes the specified project | `delete p/1` |  "
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "riazaham"
        },
        "content": "| delete  | If in ProjectView, deletes the specified task | `delete t/1` |"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "riazaham"
        },
        "content": "| description | If in HomeView, assigns a description to the specified project | `description p/1 d/Project for Company X` |  "
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "riazaham"
        },
        "content": "| description | If in ProjectView, assigns a description to the specified task | `description t/1 d/The bug reports are 2 pages long` |"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "riazaham"
        },
        "content": "| deadline | If in HomeView, assigns a deadline to the specified project | `deadline p/1 d/2020-10-25` |  "
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "riazaham"
        },
        "content": "| deadline | If in ProjectView, assigns a deadline to the specified task | `deadline t/1 d/2020-10-25` |"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "riazaham"
        },
        "content": "| priority | If in ProjectView, assigns a priority to the specified task | `priority t/1 p/1` |"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "riazaham"
        },
        "content": "| home    | Switches from ProjectView to HomeView | `home` |"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "riazaham"
        },
        "content": "| assign  | If in HomeView, assigns member to specified project | `assign p/1 m/1` |  "
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "riazaham"
        },
        "content": "| assign  | If in ProjectView, assigns member to specified task | `assign t/1 m/1` |"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "riazaham"
        },
        "content": "| remove  | Removes specified member from the member list | `remove m/1` |"
      }
    ],
    "authorContributionMap": {
      "thatseant": 84,
      "samuellleow": 1,
      "riazaham": 261,
      "-": 35
    }
  },
  {
    "path": "src/main/java/seedu/duke/Duke.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import seedu.duke.member.TeamMember;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import seedu.duke.project.Project;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Main entry-point for the java.duke.Duke application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    private static ArrayList\u003cTeamMember\u003e teamMembers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    private static ArrayList\u003cProject\u003e projects \u003d  new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public static void main(String[] args) throws DukeExceptions {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        ui.printWelcome();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                Command commandInput \u003d Parser.parse(in.nextLine());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thatseant"
        },
        "content": "                ui.printLine();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "riazaham"
        },
        "content": "                String output \u003d commandInput.executeCommand(projects, teamMembers);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thatseant"
        },
        "content": "                ui.printOutput(output);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                isExit \u003d commandInput.isExit();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            } catch (StringIndexOutOfBoundsException | ArrayIndexOutOfBoundsException | DukeExceptions e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "riazaham"
        },
        "content": "                System.out.println(e);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            ui.printLine();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samuelchristopher": 5,
      "thatseant": 6,
      "samuellleow": 9,
      "riazaham": 7,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/duke/DukeExceptions.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "riazaham"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "riazaham"
        },
        "content": "public class DukeExceptions extends Exception {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    private HashMap\u003cString,String\u003e exceptionMessageList \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    private String messageType;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public DukeExceptions(String messageType) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        initializeMap();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        this.messageType \u003d messageType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    public void initializeMap() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        exceptionMessageList.put(\"Project\",\"Command incomplete!, You need to include a project description.\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        exceptionMessageList.put(\"Delete Project\",\"Command incomplete! You need to mention the project Id\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        exceptionMessageList.put(\"Task Description\",\"Command incomplete!, You need to include a task description.\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        exceptionMessageList.put(\"Member\",\"Command incorect! You need to mention Member\u0027s name\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        exceptionMessageList.put(\"Delete Task\",\"Command incomplete! You need to mention the project Id\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        exceptionMessageList.put(\"Switch\",\"You are already in project view\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        exceptionMessageList.put(\"Add Project\",\"You cannot add tasks in project view\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        exceptionMessageList.put(\"Add Task\",\"You cannot add projects in task view\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        exceptionMessageList.put(\"WrongDateFormat\", \"Date must be specified in format YYYY-MM-DD\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        exceptionMessageList.put(\"IndexNotFound\", \"Index not specified\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        //file handler exceptions"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        exceptionMessageList.put(\"Create File\",\"The file could not be created\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        exceptionMessageList.put(\"Open File\",\"The file could not be opened\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        exceptionMessageList.put(\"default\",\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        exceptionMessageList.put(\"mustBeInHomeView\",\"You must be in Home View to do that!\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        exceptionMessageList.put(\"mustBeInProjectView\",\"You must be in Project View to do that!\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        exceptionMessageList.put(\"emptyProjectList\",\"Project list is empty!\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        exceptionMessageList.put(\"invalidTaskID\",\"Task ID does not exist!\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        exceptionMessageList.put(\"invalidTeamMemberID\",\"Team Member ID does not exist!\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        exceptionMessageList.put(\"invalidProjectID\",\"Project ID does not exist!\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        exceptionMessageList.put(\"taskNotDone\",\"Task must be marked as done before adding \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thatseant"
        },
        "content": "                + \"actual duration taken to complete!\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        exceptionMessageList.put(\"emptyTeamMembersList\",\"Team Members list is empty!\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        exceptionMessageList.put(\"emptyTaskList\",\"Task list is empty!\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        exceptionMessageList.put(\"invalidMemberID\",\"The member ID entered does not exist\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        exceptionMessageList.put(\"priorityFormatError\",\"The priority should be a number\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        exceptionMessageList.put(\"InvalidSortingParameter\",\"You have entered the wrong sorting parameter\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        exceptionMessageList.put(\"indexNonInteger\",\"Index must be an integer!\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        return exceptionMessageList.get(messageType);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "riazaham"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thatseant": 5,
      "samuelchristopher": 1,
      "shreytheshreyas": 28,
      "riazaham": 16
    }
  },
  {
    "path": "src/main/java/seedu/duke/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.commands.ExitCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import seedu.duke.commands.PrintHomeViewCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.commands.HomeCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "import seedu.duke.commands.member.AssignMemberToProjectCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.commands.member.TeamMemberAddCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.commands.member.TeamMemberAssignToTaskCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.commands.member.TeamMemberDeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import seedu.duke.commands.project.ProjectDeadlineCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import seedu.duke.commands.project.ProjectDescriptionCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.commands.project.ProjectDeleteCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.commands.project.ProjectCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.commands.project.ProjectSelectCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import seedu.duke.commands.project.ProjectDoneCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.commands.task.TaskAssignPriorityCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import seedu.duke.commands.task.TaskDeleteCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.commands.task.TaskListCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.commands.task.TaskSelectCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.commands.task.TaskCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.commands.task.TaskDoneCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.commands.task.TaskAssignDeadlineCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.commands.task.TaskDeleteCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.commands.task.TaskAssignPriorityCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.commands.task.TaskEditCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.commands.task.ActualTimeCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.commands.task.EstimatedTimeCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.commands.task.TaskCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "import seedu.duke.commands.task.TaskSortCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    private static int projectIndex \u003d -1;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public static void setProjectIndex(int newIndex) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        projectIndex \u003d newIndex;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public static int getProjectIndex() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        return projectIndex;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public static HashMap\u003cString, String\u003e getParams(String paramsString) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        HashMap\u003cString, String\u003e inputParams \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Pattern p \u003d Pattern.compile(\".\\\\/.+?(?\u003d\\\\s.\\\\/.+)|.\\\\/.+\"); //Regex to extract parameter terms"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Matcher m \u003d p.matcher(paramsString);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        while (m.find()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            String[] keyAndValue \u003d m.group().split(\"/\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            String paramType \u003d keyAndValue[0];"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            String paramValue \u003d keyAndValue[1];"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            inputParams.put(paramType, paramValue);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        return inputParams;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public static String getHashValue(HashMap\u003cString, String\u003e hashmap, String key) throws DukeExceptions {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        if (!hashmap.containsKey(key)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            throw new DukeExceptions(\"default\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            return hashmap.get(key);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "thatseant"
        },
        "content": "     * Parses user input into project command for execution."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * @param inputCommand Full user input command string"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * @return Command object corresponding to the input command of the user"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public static Command parse(String inputCommand) throws DukeExceptions {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        String[] inputWords \u003d inputCommand.split(\"\\\\s+\", 2); //Splits command into type and parameters"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        String commandType \u003d inputWords[0];"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        HashMap\u003cString, String\u003e params \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        if (inputWords.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            params \u003d getParams(inputWords[1]);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        boolean isHomeView \u003d (projectIndex \u003d\u003d -1); //In main project list view"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Command command \u003d getCommand(isHomeView, commandType, params, projectIndex);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public static Command getCommand(boolean isHomeView, String commandType, HashMap\u003cString, String\u003e params,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "thatseant"
        },
        "content": "                                     int projectIndex) throws DukeExceptions {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Command command;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        switch (commandType) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            command \u003d (isHomeView)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "thatseant"
        },
        "content": "                    ? new PrintHomeViewCommand() : new TaskListCommand(projectIndex);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        case \"select\":"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            if (!isHomeView) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "thatseant"
        },
        "content": "                throw new DukeExceptions(\"mustBeInHomeView\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            command \u003d new ProjectSelectCommand(params);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        case \"description\":"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            if (!isHomeView) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                throw new DukeExceptions(\"mustBeInHomeView\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            command \u003d new ProjectDescriptionCommand(params);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        case \"project\":"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            if (!isHomeView) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "riazaham"
        },
        "content": "                throw new DukeExceptions(\"mustBeInHomeView\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            command \u003d new ProjectCommand(params);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        case \"task\":"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            if (isHomeView) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "riazaham"
        },
        "content": "                throw new DukeExceptions(\"mustBeInProjectView\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            command \u003d new TaskCommand(params, projectIndex);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        case \"edit\":"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            if (isHomeView) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "riazaham"
        },
        "content": "                throw new DukeExceptions(\"mustBeInProjectView\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            commandType \u003d new TaskEditCommand(params, projectIndex);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            command \u003d (isHomeView)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "thatseant"
        },
        "content": "                    ? new ProjectDoneCommand(params, projectIndex) : new TaskDoneCommand(params, projectIndex);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            command \u003d (isHomeView)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "riazaham"
        },
        "content": "                    ? new ProjectDeadlineCommand(params) : new TaskAssignDeadlineCommand(params, projectIndex);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            command \u003d (isHomeView)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "riazaham"
        },
        "content": "                    ? new ProjectDeleteCommand(params) : new TaskDeleteCommand(params, projectIndex);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        case \"actual\":"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            command \u003d new ActualTimeCommand(params, projectIndex);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        case \"estimate\":"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            command \u003d new EstimatedTimeCommand(params, projectIndex);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        case \"home\":"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            command \u003d new HomeCommand(projectIndex);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        case \"member\":"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            command \u003d new TeamMemberAddCommand(params);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        case \"remove\":"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            command \u003d new TeamMemberDeleteCommand(params);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        case \"assign\":"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            command \u003d (isHomeView)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "thatseant"
        },
        "content": "                    ? new AssignMemberToProjectCommand(params, isHomeView)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "thatseant"
        },
        "content": "                    : new TeamMemberAssignToTaskCommand(params, projectIndex);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        case \"priority\":"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            if (isHomeView) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "riazaham"
        },
        "content": "                throw new DukeExceptions(\"mustBeInProjectView\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "            }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            command \u003d new TaskAssignPriorityCommand(params, projectIndex);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            command \u003d new ExitCommand();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        case \"sort\":"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            if (isHomeView) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "riazaham"
        },
        "content": "                throw new DukeExceptions(\"mustBeInProjectView\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            command \u003d new TaskSortCommand(params, projectIndex);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            throw new DukeExceptions(\"default\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "}"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "samuelchristopher": 6,
      "thatseant": 84,
      "samuellleow": 34,
      "shreytheshreyas": 9,
      "riazaham": 56
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "riazaham"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.DukeExceptions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.member.TeamMember;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import seedu.duke.project.Project;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samuellleow"
        },
        "content": " * Represents an executable command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samuellleow"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public abstract String executeCommand(ArrayList\u003cProject\u003e projects,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "riazaham"
        },
        "content": "                                          ArrayList\u003cTeamMember\u003e teamMembers)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            throws DukeExceptions;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * Returns an exit flag that is determined by user\u0027s command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * @return Terminate the program if user\u0027s command equals \u0027bye\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public abstract Boolean isExit();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samuelchristopher": 3,
      "samuellleow": 13,
      "shreytheshreyas": 1,
      "riazaham": 7
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "riazaham"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.member.TeamMember;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.duke.project.Project;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samuellleow"
        },
        "content": " * Displays goodbye message when application is terminated by the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samuellleow"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public String executeCommand(ArrayList\u003cProject\u003e projects, ArrayList\u003cTeamMember\u003e teamMembers) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        return printGoodbyeMessage();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public Boolean isExit() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    private String printGoodbyeMessage() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        return Ui.printGoodbyeMessage();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samuelchristopher": 2,
      "thatseant": 2,
      "samuellleow": 15,
      "riazaham": 4,
      "-": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/HomeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "riazaham"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.member.TeamMember;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.project.Project;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "riazaham"
        },
        "content": "public class HomeCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    private int projectIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public HomeCommand(int projectIndex) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        this.projectIndex \u003d projectIndex;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public String executeCommand(ArrayList\u003cProject\u003e projects, ArrayList\u003cTeamMember\u003e teamMembers) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        if (projectIndex \u003d\u003d -1) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            return Ui.printHomeView(projects, teamMembers);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            Parser.setProjectIndex(-1);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            return Ui.printHomeView(projects, teamMembers);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public Boolean isExit() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "riazaham"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thatseant": 2,
      "riazaham": 30
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/PrintHomeViewCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import seedu.duke.DukeExceptions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import seedu.duke.member.TeamMember;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import seedu.duke.project.Project;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "public class PrintHomeViewCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public String executeCommand(ArrayList\u003cProject\u003e projects, ArrayList\u003cTeamMember\u003e teamMembers) throws DukeExceptions {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        return Ui.printHomeView(projects, teamMembers);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public Boolean isExit() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samuellleow": 21
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/member/AssignMemberToProjectCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "package seedu.duke.commands.member;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "import java.lang.reflect.Array;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "import seedu.duke.DukeExceptions;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "import seedu.duke.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "import seedu.duke.member.TeamMember;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "import seedu.duke.project.Project;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "import static seedu.duke.Parser.getHashValue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "public class AssignMemberToProjectCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    private int memberIndex;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    private int projectIndex;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    private boolean isHomeView;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    private HashMap\u003cString, String\u003e paramsList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public AssignMemberToProjectCommand(HashMap\u003cString,String\u003e paramsList, boolean isHomeView)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "            throws DukeExceptions {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        this.paramsList \u003d paramsList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        this.isHomeView \u003d isHomeView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        parse();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    public void parse() throws DukeExceptions {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        if (isHomeView) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                projectIndex \u003d Integer.parseInt(getHashValue(paramsList,\"p\")) - 1;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "                memberIndex \u003d Integer.parseInt(getHashValue(paramsList,\"m\")) - 1;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thatseant"
        },
        "content": "                throw new DukeExceptions(\"indexNonInteger\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "            throw new DukeExceptions(\"default\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public String executeCommand(ArrayList\u003cProject\u003e projects,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "riazaham"
        },
        "content": "                                 ArrayList\u003cTeamMember\u003e teamMembers) throws DukeExceptions {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        if (memberIndex \u003e\u003d teamMembers.size() || memberIndex \u003c 0) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            throw new DukeExceptions(\"invalidTeamMemberID\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        if (projectIndex \u003e\u003d projects.size() || projectIndex \u003c 0) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "            throw new DukeExceptions(\"invalidProjectID\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        TeamMember requiredMember \u003d teamMembers.get(memberIndex);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        requiredMember.assignProject(projects.get(projectIndex));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        projects.get(projectIndex).addTeamMemberToProject(requiredMember);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        return requiredMember + \" assigned to Project \\\"\" + projects.get(projectIndex).getProjectName() + \"\\\"\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    public Boolean isExit() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thatseant": 8,
      "samuellleow": 4,
      "shreytheshreyas": 42,
      "riazaham": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/member/TeamMemberAddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "riazaham"
        },
        "content": "package seedu.duke.commands.member;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.DukeExceptions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import seedu.duke.member.TeamMember;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import seedu.duke.project.Project;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import static seedu.duke.Parser.getHashValue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "riazaham"
        },
        "content": "public class TeamMemberAddCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    HashMap\u003cString, String\u003e params;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public TeamMemberAddCommand(HashMap\u003cString, String\u003e params) throws DukeExceptions {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        this.params \u003d params;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        this.parse();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public void parse() throws DukeExceptions {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        name \u003d getHashValue(params, \"n\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public String executeCommand(ArrayList\u003cProject\u003e projects, ArrayList\u003cTeamMember\u003e teamMembers) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        TeamMember newMember \u003d new TeamMember(name);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        teamMembers.add(newMember);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        return Ui.printMemberAddedMessage(name);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public Boolean isExit() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samuelchristopher": 17,
      "thatseant": 1,
      "samuellleow": 2,
      "riazaham": 18
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/member/TeamMemberAssignToTaskCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "riazaham"
        },
        "content": "package seedu.duke.commands.member;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.DukeExceptions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.member.TeamMember;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.project.Project;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import static seedu.duke.Parser.getHashValue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "riazaham"
        },
        "content": "public class TeamMemberAssignToTaskCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    private int taskIndex;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    private int projectIndex;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    private int memberIndex;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    HashMap\u003cString, String\u003e params;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public TeamMemberAssignToTaskCommand(HashMap\u003cString, String\u003e params, int projectIndex)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            throws DukeExceptions {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        this.params \u003d params;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        this.projectIndex \u003d projectIndex;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        this.parse();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public void parse() throws DukeExceptions {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        taskIndex \u003d Integer.parseInt(getHashValue(params, \"t\")) - 1;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        memberIndex \u003d Integer.parseInt(getHashValue(params, \"m\")) - 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public String executeCommand(ArrayList\u003cProject\u003e projects,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "riazaham"
        },
        "content": "                                 ArrayList\u003cTeamMember\u003e teamMembers) throws DukeExceptions {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        if (projects.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            throw new DukeExceptions(\"emptyProjectList\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        if (projects.get(projectIndex).getTaskList().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            throw new DukeExceptions(\"emptyTaskList\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        if (teamMembers.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            throw new DukeExceptions(\"emptyTeamMembersList\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        Task selectedTask;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        TeamMember teamMember;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            selectedTask \u003d projects.get(projectIndex).getTask(taskIndex);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        } catch (NumberFormatException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            throw new DukeExceptions(\"invalidTaskID\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            teamMember \u003d teamMembers.get(memberIndex);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        } catch (NumberFormatException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            throw new DukeExceptions(\"invalidTeamMemberID\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        selectedTask \u003d projects.get(projectIndex).getTask(taskIndex);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        TeamMember member \u003d teamMembers.get(memberIndex);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        selectedTask.setMember(member);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        return Ui.printMemberAssignedToTaskMessage(member.getName(), selectedTask.getTaskDescription());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public Boolean isExit() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "riazaham"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "riazaham": 70
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/member/TeamMemberDeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "riazaham"
        },
        "content": "package seedu.duke.commands.member;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.DukeExceptions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.member.TeamMember;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.project.Project;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import static seedu.duke.Parser.getHashValue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "riazaham"
        },
        "content": "public class TeamMemberDeleteCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    private int memberIndex;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    HashMap\u003cString, String\u003e params;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public TeamMemberDeleteCommand(HashMap\u003cString, String\u003e params) throws DukeExceptions {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        this.params \u003d params;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        this.parse();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public void parse() throws DukeExceptions {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            memberIndex \u003d Integer.parseInt(getHashValue(params, \"m\")) - 1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            throw new DukeExceptions(\"invalidTeamMemberID\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public String executeCommand(ArrayList\u003cProject\u003e projects,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "riazaham"
        },
        "content": "                                 ArrayList\u003cTeamMember\u003e teamMembers) throws DukeExceptions {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        if (teamMembers.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            throw new DukeExceptions(\"emptyTeamMembersList\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            TeamMember memberToBeRemoved \u003d teamMembers.get(memberIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            teamMembers.remove(memberIndex);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            return Ui.printMemberRemovedMessage(memberToBeRemoved.getName());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            throw new DukeExceptions(\"invalidTeamMemberID\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public Boolean isExit() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "riazaham"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thatseant": 1,
      "riazaham": 49
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/member/TeamMembersListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "riazaham"
        },
        "content": "package seedu.duke.commands.member;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import seedu.duke.member.TeamMember;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import seedu.duke.project.Project;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "riazaham"
        },
        "content": "public class TeamMembersListCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    private boolean isHomeView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    private int projectIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public TeamMembersListCommand(boolean isHomeView, int projectIndex) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        this.isHomeView \u003d isHomeView;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        this.projectIndex \u003d projectIndex;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public String executeCommand(ArrayList\u003cProject\u003e projects, ArrayList\u003cTeamMember\u003e teamMembers) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        if (teamMembers.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            return \"No team members have been added.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        String listOfMembers \u003d \"List of members:              Project(s) Assigned:\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        int amountOfPadding \u003d 0;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        if (isHomeView) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            for (TeamMember member : teamMembers) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                if (member.getName().length() \u003e 26) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                    listOfMembers +\u003d \"\\n\" + (i + 1) + \". \" + member.getName().substring(0,26) + \" \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                    listOfMembers +\u003d \"\\n\" + String.format(\"%-30s\", (i + 1) + \". \" + member.getName());;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                if (!member.getAssignedProjects().isEmpty()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                    for (int j \u003d 0; j \u003c member.getAssignedProjects().size(); j++) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                        Project assignedProject \u003d member.getAssignedProjects().get(j);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                        if (j \u003d\u003d 0) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                            listOfMembers +\u003d (j + 1) + \") \" + assignedProject.getProjectName();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                            amountOfPadding \u003d 33 + assignedProject.getProjectName().length();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                            listOfMembers +\u003d \"\\n\" + String.format(\"%1$\" + amountOfPadding + \"s\", (j + 1) + \") \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                                    + assignedProject.getProjectName());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                    listOfMembers +\u003d \"Not assigned to a project\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                listOfMembers +\u003d System.lineSeparator();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                i++;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            ArrayList\u003cTeamMember\u003e teamMembersInSelectedProject \u003d projects.get(projectIndex).getTeamMembers();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            for (TeamMember member : teamMembersInSelectedProject) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                listOfMembers +\u003d \"\\n\" + (i + 1) + \". \" + member.getName();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                i++;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        return listOfMembers;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public Boolean isExit() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samuelchristopher": 22,
      "samuellleow": 35,
      "riazaham": 7
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/project/ProjectCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "riazaham"
        },
        "content": "package seedu.duke.commands.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.DukeExceptions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.member.TeamMember;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import seedu.duke.project.Project;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import static seedu.duke.Parser.getHashValue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "public class ProjectCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    HashMap\u003cString, String\u003e params;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public ProjectCommand(HashMap\u003cString, String\u003e params) throws DukeExceptions {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        this.params \u003d params;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        this.parse();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public void parse() throws DukeExceptions {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        this.description \u003d getHashValue(params, \"n\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public String executeCommand(ArrayList\u003cProject\u003e projects, ArrayList\u003cTeamMember\u003e teamMembers) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        Project newProject \u003d new Project(description);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        projects.add(newProject);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        return Ui.printProjectCreatedMessage(newProject.getProjectName());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public Boolean isExit() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samuelchristopher": 5,
      "samuellleow": 14,
      "riazaham": 18
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/project/ProjectDeadlineCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "package seedu.duke.commands.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import seedu.duke.DukeExceptions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import seedu.duke.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.member.TeamMember;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import seedu.duke.project.Project;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import seedu.duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import static seedu.duke.Parser.getHashValue;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "public class ProjectDeadlineCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    private int projectIndex;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    HashMap\u003cString, String\u003e params;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public ProjectDeadlineCommand(HashMap\u003cString, String\u003e params) throws DukeExceptions {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        this.params \u003d params;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        this.parse();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public void parse() throws DukeExceptions {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            projectIndex \u003d Integer.parseInt(getHashValue(params, \"p\")) - 1;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            date \u003d LocalDate.parse(getHashValue(params, \"d\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            throw new DukeExceptions(\"invalidProjectID\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        } catch (StringIndexOutOfBoundsException | DateTimeParseException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            throw new DukeExceptions(\"WrongDateFormat\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public String executeCommand(ArrayList\u003cProject\u003e projects,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "riazaham"
        },
        "content": "                                 ArrayList\u003cTeamMember\u003e teamMembers) throws DukeExceptions {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            Project project \u003d projects.get(projectIndex);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            project.addProjectDeadline(date);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            return Ui.printProjectDeadlineAddedMessage(project, date);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            throw new DukeExceptions(\"invalidProjectID\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public Boolean isExit() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samuellleow": 32,
      "riazaham": 22
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/project/ProjectDeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "riazaham"
        },
        "content": "package seedu.duke.commands.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.DukeExceptions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.member.TeamMember;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.project.Project;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import static seedu.duke.Parser.getHashValue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "riazaham"
        },
        "content": "public class ProjectDeleteCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    private int projectIndex;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    HashMap\u003cString, String\u003e params;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public ProjectDeleteCommand(HashMap\u003cString, String\u003e params)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            throws DukeExceptions {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        this.params \u003d params;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        this.parse();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public void parse() throws DukeExceptions {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            projectIndex \u003d Integer.parseInt(getHashValue(params, \"p\")) - 1;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            throw new DukeExceptions(\"invalidProjectID\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public String executeCommand(ArrayList\u003cProject\u003e projects, ArrayList\u003cTeamMember\u003e teamMembers) throws DukeExceptions {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        if (projects.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            throw new DukeExceptions(\"emptyProjectList\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            Project projectToBeDeleted \u003d projects.get(projectIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            projects.remove(projectIndex);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            return Ui.printProjectDeletedMessage(projectToBeDeleted);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            throw new DukeExceptions(\"invalidProjectID\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public Boolean isExit() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "riazaham"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thatseant": 1,
      "samuellleow": 3,
      "riazaham": 45
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/project/ProjectDescriptionCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "package seedu.duke.commands.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.DukeExceptions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import seedu.duke.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.member.TeamMember;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import seedu.duke.project.Project;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import static seedu.duke.Parser.getHashValue;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "public class ProjectDescriptionCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    private String projectDescription;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    private int projectIndex;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    HashMap\u003cString, String\u003e params;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public ProjectDescriptionCommand(HashMap\u003cString, String\u003e params) throws DukeExceptions {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        this.params \u003d params;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        this.parse();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public void parse() throws DukeExceptions {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        projectDescription \u003d getHashValue(params, \"d\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            projectIndex \u003d Integer.parseInt(getHashValue(params, \"p\")) - 1;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            throw new DukeExceptions(\"indexNonInteger\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public String executeCommand(ArrayList\u003cProject\u003e projects, ArrayList\u003cTeamMember\u003e teamMembers) throws DukeExceptions {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            Project project \u003d projects.get(projectIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            project.addDescription(projectDescription);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            return Ui.printProjectDescriptionAddedMessage(project);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            throw new DukeExceptions(\"invalidProjectID\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public Boolean isExit() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samuelchristopher": 3,
      "thatseant": 2,
      "samuellleow": 30,
      "riazaham": 14
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/project/ProjectDoneCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "package seedu.duke.commands.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import seedu.duke.DukeExceptions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import seedu.duke.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.member.TeamMember;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import seedu.duke.project.Project;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import seedu.duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import static seedu.duke.Parser.getHashValue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "public class ProjectDoneCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    private int projectIndex;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    HashMap\u003cString, String\u003e params;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public ProjectDoneCommand(HashMap\u003cString, String\u003e params, int projectIndex) throws DukeExceptions {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        this.params \u003d params;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        this.parse();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public void parse() throws DukeExceptions {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            projectIndex \u003d Integer.parseInt(getHashValue(params, \"p\")) - 1;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            throw new DukeExceptions(\"invalidProjectID\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public String executeCommand(ArrayList\u003cProject\u003e projects,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "riazaham"
        },
        "content": "                                 ArrayList\u003cTeamMember\u003e members) throws DukeExceptions {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            Project project \u003d projects.get(projectIndex);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            project.markAsDone();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            return Ui.printProjectDoneMessage(project.getProjectName());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        }  catch (NumberFormatException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            throw new DukeExceptions(\"invalidProjectID\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public Boolean isExit() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        if (obj instanceof ProjectDoneCommand) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            ProjectDoneCommand taskCommand \u003d (ProjectDoneCommand) obj;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            return (this.projectIndex \u003d\u003d taskCommand.projectIndex);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samuelchristopher": 55,
      "riazaham": 3
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/project/ProjectListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "riazaham"
        },
        "content": "package seedu.duke.commands.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import seedu.duke.DukeExceptions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import seedu.duke.member.TeamMember;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import seedu.duke.project.Project;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samuellleow"
        },
        "content": " * Prints a list of existing tasks."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samuellleow"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thatseant"
        },
        "content": "public class ProjectListCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public String executeCommand(ArrayList\u003cProject\u003e projects, ArrayList\u003cTeamMember\u003e teamMembers) throws DukeExceptions {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        if (projects.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            throw new DukeExceptions(\"emptyProjectList\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                int projectCounter \u003d 0;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                int i \u003d 0;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                while (projectCounter \u003c projects.size()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                    if (projects.get(i).getProjectDeadline() \u003d\u003d null) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                        Project projectWithNullDeadline \u003d projects.get(i);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                        projects.remove(i);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                        projects.add(projectWithNullDeadline);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                        i++;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                    projectCounter++;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                Collections.sort(projects);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                return Ui.printProjectListMessage(projects);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                throw new DukeExceptions(\"invalidProjectID\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public Boolean isExit() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "samuelchristopher": 4,
      "thatseant": 1,
      "samuellleow": 38,
      "riazaham": 3
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/project/ProjectSelectCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "riazaham"
        },
        "content": "package seedu.duke.commands.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.DukeExceptions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.member.TeamMember;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import seedu.duke.project.Project;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import static seedu.duke.Parser.getHashValue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thatseant"
        },
        "content": "public class ProjectSelectCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    private int projectIndex;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    HashMap\u003cString, String\u003e params;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public ProjectSelectCommand(HashMap\u003cString, String\u003e params) throws DukeExceptions {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        this.params \u003d params;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        this.parse();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public void parse() throws DukeExceptions {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            projectIndex \u003d Integer.parseInt(getHashValue(params, \"p\")) - 1;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            throw new DukeExceptions(\"invalidProjectID\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public String executeCommand(ArrayList\u003cProject\u003e projects, ArrayList\u003cTeamMember\u003e teamMembers) throws DukeExceptions {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        if (projects.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            throw new DukeExceptions(\"emptyProjectList\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            Project selectedProject \u003d projects.get(projectIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            Parser.setProjectIndex(projectIndex);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            String projectView \u003d Ui.projectViewMessage(selectedProject);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            return projectView;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            throw new DukeExceptions(\"invalidProjectID\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public Boolean isExit() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samuelchristopher": 8,
      "thatseant": 2,
      "samuellleow": 21,
      "riazaham": 20
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/task/ActualTimeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thatseant"
        },
        "content": "package seedu.duke.commands.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.DukeExceptions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.member.TeamMember;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.project.Project;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import static seedu.duke.Parser.getHashValue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thatseant"
        },
        "content": "public class ActualTimeCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    private int taskIndex;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    private int durationInMinutes;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    private int projectIndex;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    HashMap\u003cString, String\u003e params;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public ActualTimeCommand(HashMap\u003cString, String\u003e params, int projectIndex)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            throws DukeExceptions {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        assert projectIndex \u003e\u003d 0 : projectIndex;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        this.params \u003d params;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        this.projectIndex \u003d projectIndex;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        this.parse();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public void parse() throws DukeExceptions {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            taskIndex \u003d Integer.parseInt(getHashValue(params, \"t\")) - 1;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            int hours \u003d Integer.parseInt(getHashValue(params, \"h\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            int minutes \u003d Integer.parseInt(getHashValue(params, \"m\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            durationInMinutes \u003d hours * 60 + minutes;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            throw new DukeExceptions(\"invalidTaskID\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public String executeCommand(ArrayList\u003cProject\u003e projects, ArrayList\u003cTeamMember\u003e members) throws DukeExceptions {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            Project project \u003d projects.get(projectIndex);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            Task task \u003d project.getTask(taskIndex);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            if (!task.isDone()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thatseant"
        },
        "content": "                throw new DukeExceptions(\"taskNotDone\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            task.addActual(durationInMinutes);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            int hours \u003d task.getActual() / 60;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            int minutes \u003d task.getActual() % 60;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            return Ui.printActualDurationAddedMessage(task.getDescription(), hours, minutes);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            throw new DukeExceptions(\"invalidTaskID\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public Boolean isExit() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thatseant"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thatseant": 61
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/task/EstimatedTimeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thatseant"
        },
        "content": "package seedu.duke.commands.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.DukeExceptions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.member.TeamMember;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.project.Project;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import static seedu.duke.Parser.getHashValue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thatseant"
        },
        "content": "public class EstimatedTimeCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    private int taskIndex;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    private int durationInMinutes;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    private int projectIndex;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    HashMap\u003cString, String\u003e params;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public EstimatedTimeCommand(HashMap\u003cString, String\u003e params, int projectIndex)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            throws DukeExceptions {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        assert projectIndex \u003e\u003d 0 : projectIndex;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        this.params \u003d params;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        this.projectIndex \u003d projectIndex;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        this.parse();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public void parse() throws DukeExceptions {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            taskIndex \u003d Integer.parseInt(getHashValue(params, \"t\")) - 1;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            int hours \u003d Integer.parseInt(getHashValue(params, \"h\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            int minutes \u003d Integer.parseInt(getHashValue(params, \"m\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            durationInMinutes \u003d hours * 60 + minutes;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            throw new DukeExceptions(\"invalidTaskID\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public String executeCommand(ArrayList\u003cProject\u003e projects, ArrayList\u003cTeamMember\u003e members) throws DukeExceptions {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            Project project \u003d projects.get(projectIndex);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            Task task \u003d project.getTask(taskIndex);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            task.addEstimate(durationInMinutes);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            int hours \u003d task.getEstimate() / 60;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            int minutes \u003d task.getEstimate() % 60;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            return Ui.printEstimateAddedMessage(task.getDescription(), hours, minutes);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            throw new DukeExceptions(\"invalidTaskID\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public Boolean isExit() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thatseant"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thatseant": 58
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/task/TaskAssignDeadlineCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "riazaham"
        },
        "content": "package seedu.duke.commands.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.DukeExceptions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.member.TeamMember;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.project.Project;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import static seedu.duke.Parser.getHashValue;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "riazaham"
        },
        "content": "public class TaskAssignDeadlineCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    private int projectIndex;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    private int taskIndex;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    HashMap\u003cString, String\u003e params;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public TaskAssignDeadlineCommand(HashMap\u003cString, String\u003e params, int projectIndex) throws DukeExceptions {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        this.params \u003d params;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        this.projectIndex \u003d projectIndex;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        this.parse();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public void parse() throws DukeExceptions {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            taskIndex \u003d Integer.parseInt(getHashValue(params, \"t\")) - 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            date \u003d LocalDate.parse(getHashValue(params, \"d\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            throw new DukeExceptions(\"invalidTaskID\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        } catch (StringIndexOutOfBoundsException | DateTimeParseException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            throw new DukeExceptions(\"WrongDateFormat\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public String executeCommand(ArrayList\u003cProject\u003e projects,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "riazaham"
        },
        "content": "                                 ArrayList\u003cTeamMember\u003e teamMembers) throws DukeExceptions {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        if (projects.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            throw new DukeExceptions(\"emptyProjectList\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            Project project \u003d projects.get(projectIndex);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            Task task \u003d project.getTaskList().get(taskIndex);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            task.addDeadline(date);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            return \"Deadline \" + date.format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy\"))"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "riazaham"
        },
        "content": "                    + \" added to Task \" + task.getDescription();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            throw new DukeExceptions(\"invalidTaskID\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public Boolean isExit() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "riazaham"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "riazaham": 59
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/task/TaskAssignPriorityCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "riazaham"
        },
        "content": "package seedu.duke.commands.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.DukeExceptions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.member.TeamMember;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.project.Project;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import java.lang.reflect.Array;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import static seedu.duke.Parser.getHashValue;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "riazaham"
        },
        "content": "public class TaskAssignPriorityCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    private int taskIndex;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    private int projectIndex;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    private int priority;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    HashMap\u003cString, String\u003e params;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public TaskAssignPriorityCommand(HashMap\u003cString, String\u003e params, int projectIndex)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            throws DukeExceptions {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        assert projectIndex \u003e\u003d 0 : projectIndex;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        this.params \u003d params;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        this.projectIndex \u003d projectIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        this.parse();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public void parse() throws DukeExceptions {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            taskIndex \u003d Integer.parseInt(getHashValue(params, \"t\")) - 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            priority \u003d Integer.parseInt(getHashValue(params, \"p\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            throw new DukeExceptions(\"indexNonInteger\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public String executeCommand(ArrayList\u003cProject\u003e projects,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "riazaham"
        },
        "content": "                                 ArrayList\u003cTeamMember\u003e teamMembers) throws DukeExceptions {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        if (projects.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            throw new DukeExceptions(\"emptyProjectList\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            Task selectedTask \u003d projects.get(projectIndex).getTask(taskIndex);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            selectedTask.setPriority(priority);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            return Ui.printPriorityAssignedToTaskMessage(priority, selectedTask.getTaskDescription());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        } catch (NumberFormatException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            throw new DukeExceptions(\"invalidTaskID\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public Boolean isExit() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "riazaham"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thatseant": 7,
      "riazaham": 51
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/task/TaskCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "riazaham"
        },
        "content": "package seedu.duke.commands.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.DukeExceptions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.member.TeamMember;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.project.Project;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import static seedu.duke.Parser.getHashValue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thatseant"
        },
        "content": "public class TaskCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    private int projectIndex;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    HashMap\u003cString, String\u003e params;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public TaskCommand(HashMap\u003cString, String\u003e params, int projectIndex) throws DukeExceptions {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        assert projectIndex \u003e\u003d 0 : projectIndex;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        this.params \u003d params;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        this.projectIndex \u003d projectIndex;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        this.parse();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public void parse() throws DukeExceptions {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        this.description \u003d getHashValue(params, \"n\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public String executeCommand(ArrayList\u003cProject\u003e projects, ArrayList\u003cTeamMember\u003e teamMembers) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        Project project \u003d projects.get(projectIndex);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        Task newTask \u003d new Task(description);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        project.addTask(newTask);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        return Ui.printTaskCreatedMessage(newTask.toString());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public Boolean isExit() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        if (obj instanceof TaskCommand) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            TaskCommand taskCommand \u003d (TaskCommand) obj;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            return (this.description.equals(taskCommand.description)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thatseant"
        },
        "content": "                    \u0026\u0026 (this.projectIndex \u003d\u003d taskCommand.projectIndex));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thatseant"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thatseant": 28,
      "samuelchristopher": 3,
      "samuellleow": 1,
      "riazaham": 21
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/task/TaskDeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "riazaham"
        },
        "content": "package seedu.duke.commands.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.DukeExceptions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.member.TeamMember;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import seedu.duke.project.Project;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import static seedu.duke.Parser.getHashValue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "riazaham"
        },
        "content": "public class TaskDeleteCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    private int taskIndex;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    private int projectIndex;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    HashMap\u003cString, String\u003e params;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public TaskDeleteCommand(HashMap\u003cString, String\u003e params, int projectIndex)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            throws DukeExceptions {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        assert projectIndex \u003e\u003d 0 : projectIndex;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        this.params \u003d params;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        this.projectIndex \u003d projectIndex;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        this.parse();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public void parse() throws DukeExceptions {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            taskIndex \u003d Integer.parseInt(getHashValue(params, \"t\")) - 1;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            throw new DukeExceptions(\"invalidTaskID\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public String executeCommand(ArrayList\u003cProject\u003e projects,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "riazaham"
        },
        "content": "                                 ArrayList\u003cTeamMember\u003e teamMembers) throws DukeExceptions {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        if (projects.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            throw new DukeExceptions(\"emptyProjectList\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            Project selectedProject \u003d projects.get(projectIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            //Get task before deletion"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            String taskToBeDeleted \u003d selectedProject.getTask(taskIndex).getTaskDescription();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            selectedProject.deleteTask(taskIndex);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            return Ui.printTaskDeletedMessage(taskToBeDeleted);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            throw new DukeExceptions(\"invalidTaskID\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public Boolean isExit() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "riazaham"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samuelchristopher": 3,
      "thatseant": 1,
      "samuellleow": 3,
      "riazaham": 52
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/task/TaskDoneCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "package seedu.duke.commands.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import seedu.duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import seedu.duke.DukeExceptions;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import seedu.duke.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.member.TeamMember;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import seedu.duke.project.Project;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import seedu.duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import static seedu.duke.Parser.getHashValue;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "public class TaskDoneCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    private int projectIndex;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    private int taskIndex;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    HashMap\u003cString, String\u003e params;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public TaskDoneCommand(HashMap\u003cString, String\u003e params, int projectIndex) throws DukeExceptions {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        assert projectIndex \u003e\u003d 0 : projectIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        this.params \u003d params;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        this.projectIndex \u003d projectIndex;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        this.parse();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public void parse() throws DukeExceptions {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            taskIndex \u003d Integer.parseInt(getHashValue(params, \"t\")) - 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            throw new DukeExceptions(\"invalidTaskID\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public String executeCommand(ArrayList\u003cProject\u003e projects,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "riazaham"
        },
        "content": "                                 ArrayList\u003cTeamMember\u003e teamMembers) throws DukeExceptions {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        Project project \u003d projects.get(projectIndex);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            Task selectedTask \u003d project.getTask(taskIndex);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            selectedTask.markAsDone();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            return Ui.printTaskDoneMessage(selectedTask.toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        }  catch (NumberFormatException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            throw new DukeExceptions(\"invalidTaskID\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public Boolean isExit() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samuelchristopher": 50,
      "thatseant": 1,
      "riazaham": 3
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/task/TaskEditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "riazaham"
        },
        "content": "package seedu.duke.commands.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.DukeExceptions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.member.TeamMember;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.project.Project;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import static seedu.duke.Parser.getHashValue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "riazaham"
        },
        "content": "public class TaskEditCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    private int taskIndex;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    private String taskName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    private int projectIndex;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    HashMap\u003cString, String\u003e params;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public TaskEditCommand(HashMap\u003cString, String\u003e params, int projectIndex)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            throws DukeExceptions {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        this.params \u003d params;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        this.projectIndex \u003d projectIndex;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        this.parse();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public void parse() throws DukeExceptions {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            taskIndex \u003d Integer.parseInt(getHashValue(params, \"t\")) - 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            taskName \u003d getHashValue(params, \"n\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            throw new DukeExceptions(\"invalidTaskID\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public String executeCommand(ArrayList\u003cProject\u003e projects, ArrayList\u003cTeamMember\u003e teamMembers) throws DukeExceptions {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        if (projects.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            throw new DukeExceptions(\"emptyProjectList\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            Task selectedTask \u003d projects.get(projectIndex).getTask(taskIndex);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            String oldTaskName \u003d selectedTask.getTaskDescription();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            selectedTask.setTaskDescription(taskName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            return Ui.printTaskNameUpdatedMessage(oldTaskName, taskName);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            throw new DukeExceptions(\"invalidTaskID\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public Boolean isExit() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "riazaham"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "riazaham": 55
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/task/TaskListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "riazaham"
        },
        "content": "package seedu.duke.commands.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.DukeExceptions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.member.TeamMember;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.project.Project;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thatseant"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thatseant"
        },
        "content": " * Prints a list of existing tasks."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thatseant"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thatseant"
        },
        "content": "public class TaskListCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    private int projectIndex;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public TaskListCommand(int projectIndex) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        this.projectIndex \u003d projectIndex;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public String executeCommand(ArrayList\u003cProject\u003e projects,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "riazaham"
        },
        "content": "                                 ArrayList\u003cTeamMember\u003e teamMembers) throws DukeExceptions {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Project selectedProject \u003d projects.get(projectIndex);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        String projectView \u003d Ui.projectViewMessage(selectedProject);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        return projectView;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public Boolean isExit() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thatseant"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samuelchristopher": 1,
      "thatseant": 20,
      "samuellleow": 1,
      "shreytheshreyas": 1,
      "riazaham": 8
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/task/TaskSelectCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "riazaham"
        },
        "content": "package seedu.duke.commands.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.DukeExceptions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.member.TeamMember;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import seedu.duke.project.Project;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import static seedu.duke.Parser.getHashValue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "riazaham"
        },
        "content": "public class TaskSelectCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    private int taskIndex;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    private int projectIndex;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    HashMap\u003cString, String\u003e params;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public TaskSelectCommand(HashMap\u003cString, String\u003e params, int projectIndex)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            throws DukeExceptions {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        this.params \u003d params;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        this.projectIndex \u003d projectIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        this.parse();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public void parse() throws DukeExceptions {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            taskIndex \u003d Integer.parseInt(getHashValue(params, \"t\")) - 1;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            throw new DukeExceptions(\"invalidTaskID\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public String executeCommand(ArrayList\u003cProject\u003e projects, ArrayList\u003cTeamMember\u003e teamMembers) throws DukeExceptions {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        if (projects.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            throw new DukeExceptions(\"emptyProjectList\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            String selectedTask \u003d projects.get(projectIndex).selectTask(taskIndex);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            return Ui.printTaskSelectedMessage(selectedTask);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            throw new DukeExceptions(\"invalidTaskID\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public Boolean isExit() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "riazaham"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samuelchristopher": 2,
      "thatseant": 1,
      "samuellleow": 2,
      "riazaham": 45,
      "-": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/task/TaskSortCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "package seedu.duke.commands.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "import seedu.duke.DukeExceptions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "import seedu.duke.member.TeamMember;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "import seedu.duke.project.Project;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "import seedu.duke.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "import seedu.duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "import static seedu.duke.Parser.getHashValue;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "public class TaskSortCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    private int projectIndex;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    HashMap\u003cString, String\u003e params;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    private String sortingType;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public TaskSortCommand(HashMap\u003cString, String\u003e params, int projectIndex)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "            throws DukeExceptions {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        this.params \u003d params;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        this.projectIndex \u003d projectIndex;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        this.parse();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    public void parse() throws DukeExceptions {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            if (params.containsKey(\"p\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thatseant"
        },
        "content": "                sortingType \u003d \"p\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            } else if (params.containsKey(\"d\")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thatseant"
        },
        "content": "                sortingType \u003d \"d\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            } else if (params.containsKey(\"t\")) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thatseant"
        },
        "content": "                sortingType \u003d \"t\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thatseant"
        },
        "content": "                throw new DukeExceptions(\"default\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "            throw new DukeExceptions(\"invalidTaskID\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    public String executeCommand(ArrayList\u003cProject\u003e projects, ArrayList\u003cTeamMember\u003e teamMembers) throws DukeExceptions {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        Project project \u003d projects.get(projectIndex);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        switch (sortingType) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        case \"p\":"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "            Collections.sort(project.getTaskList(), new Comparator\u003cTask\u003e() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "                @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "                public int compare(Task o1, Task o2) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "                    if (o1.getPriority() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "                        return 1;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "                    if (o2.getPriority() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "                        return -1;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "                    return o1.getPriority() - o2.getPriority(); //sort based on priority"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "                }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "            });"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "            System.out.println(\"TaskList sorted based on priority\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        case \"d\":"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "            Collections.sort(project.getTaskList(), new Comparator\u003cTask\u003e() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "                    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "                    public int compare(Task o1, Task o2) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "                        if (o1.getDeadline() \u003d\u003d null) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "                            return 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "                        if (o2.getDeadline() \u003d\u003d null) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "                            return -1;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "                        return o1.getDeadline().compareTo(o2.getDeadline());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "                });"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "            System.out.println(\"TaskList sorted based on deadline\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        case \"t\":"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "            Collections.sort(project.getTaskList(), new Comparator\u003cTask\u003e() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "                @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "                public int compare(Task o1, Task o2) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "                    if (o1.getActual() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "                        return 1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "                    if (o2.getActual() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "                        return -1;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "                    return o1.getActual() - o2.getActual(); //sort based on actual time"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "                }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "            });"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "            System.out.println(\"TaskList sorted based on completion time\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        default: throw new DukeExceptions(\"InvalidSortingParameter\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    public Boolean isExit() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thatseant": 13,
      "shreytheshreyas": 97
    }
  },
  {
    "path": "src/main/java/seedu/duke/member/TeamMember.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "riazaham"
        },
        "content": "package seedu.duke.member;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import seedu.duke.project.Project;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "public class TeamMember {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    private int assignedProjectId;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    private ArrayList\u003cProject\u003e assignedProjects;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public TeamMember(String name) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        assignedProjectId \u003d -1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        this.assignedProjects \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public void assignProject(Project project) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        assignedProjects.add(project);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public ArrayList\u003cProject\u003e getAssignedProjects() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        return assignedProjects;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samuelchristopher": 13,
      "samuellleow": 15,
      "shreytheshreyas": 1,
      "riazaham": 5
    }
  },
  {
    "path": "src/main/java/seedu/duke/project/Project.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "riazaham"
        },
        "content": "package seedu.duke.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import seedu.duke.member.TeamMember;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "public class Project implements Comparable\u003cProject\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    protected String projectName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    private String projectDescription;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    private LocalDate projectDeadline;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    private ArrayList\u003cTeamMember\u003e teamMembers;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    //private static final String TICK_MARK \u003d \"\\u2713\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    //private static final String CROSS_MARK \u003d \"\\u2718\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public Project(String projectName) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        this.projectName \u003d projectName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        this.tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        this.teamMembers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        this.projectDescription \u003d \"\u003cproject description empty\u003e\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        this.projectDeadline \u003d null;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    public void sortTasksList() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        //Collections.sort(tasks);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public int compareTo(Project project) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        if (getProjectDeadline() \u003d\u003d null || project.getProjectDeadline() \u003d\u003d null) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        return getProjectDeadline().compareTo(project.getProjectDeadline());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public Task getTask(int taskIndex) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        return tasks.get(taskIndex);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public void deleteTask(int taskIndex) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        tasks.remove(taskIndex);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public int getNumberOfTask() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public int getNumberOfFinishedTask() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        int finishedTaskCounter \u003d 0;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            if (task.isDone()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                finishedTaskCounter++;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        return finishedTaskCounter;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public void addDescription(String projectDescription) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        this.projectDescription \u003d projectDescription;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        return projectDescription;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public String getProjectName() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        return projectName;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public void addProjectDeadline(LocalDate date) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        this.projectDeadline \u003d date;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public LocalDate getProjectDeadline() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        return this.projectDeadline;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public ArrayList\u003cTeamMember\u003e getTeamMembers() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        return this.teamMembers;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public void addTeamMemberToProject(TeamMember addedMember) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        teamMembers.add(addedMember);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * Returns details of the specified task."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * @return Details of Project"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        if (!projectDescription.equals(\"\") \u0026 projectDeadline !\u003d null) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            return \"Description: \" + projectDescription + \" | Deadline: \" + projectDeadline;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        } else if (!projectDescription.equals(\"\") \u0026 projectDeadline \u003d\u003d null) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            return \"Description: \" + projectDescription + \" | \u003cproject deadline empty\u003e\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        } else if (projectDeadline !\u003d null) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            return \"\u003cproject description empty\u003e | Deadline: \" + projectDeadline;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            return \"\u003cproject description empty\u003e | \u003cproject deadline empty\u003e\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public ArrayList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public String selectTask(int taskId) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        return tasks.get(taskId).toString();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public boolean getStatus() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            return isDone;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            if (!(task.getStatus())) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samuelchristopher": 26,
      "thatseant": 12,
      "samuellleow": 78,
      "shreytheshreyas": 12,
      "riazaham": 12
    }
  },
  {
    "path": "src/main/java/seedu/duke/task/Task.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "riazaham"
        },
        "content": "package seedu.duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.member.TeamMember;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thatseant"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    protected ArrayList\u003cTeamMember\u003e members \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    protected int estimateInMinutes \u003d 0;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    protected int actualInMinutes;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    protected int priority;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    public int getPriority() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        return priority;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    public void setPriority(int priority) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        this.date \u003d null;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        this.priority \u003d 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        actualInMinutes \u003d 0;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public void addDeadline(LocalDate date) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public void addEstimate(int durationInMinutes) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        this.estimateInMinutes \u003d durationInMinutes;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public int getEstimate() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        return estimateInMinutes;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public int getActual() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        return actualInMinutes;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public void addActual(int durationInMinutes) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        this.actualInMinutes \u003d durationInMinutes;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public String getTaskDescription() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public void setTaskDescription(String newDescription) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        description \u003d newDescription;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public String getDateString() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        return (date !\u003d null) ? date.format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy\")) : \"\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    public LocalDate getDeadline() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public ArrayList\u003cTeamMember\u003e getMembers() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        return members;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public void setMember(TeamMember newMember) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        members.add(newMember);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public boolean getStatus() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "thatseant"
        },
        "content": "     * Returns details of the specified task."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "thatseant"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "thatseant"
        },
        "content": "     * @return Details of task"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "thatseant"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        String taskStatus \u003d description;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        if (date !\u003d null) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            taskStatus +\u003d \" | \" + getDateString();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        if (estimateInMinutes !\u003d 0) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            int hours \u003d estimateInMinutes / 60;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            int minutes \u003d estimateInMinutes % 60;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            taskStatus +\u003d \" | \" + \"Estimated: \" + hours + \" hours \" + minutes + \" minutes\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        if (actualInMinutes !\u003d 0) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            int hours \u003d actualInMinutes / 60;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            int minutes \u003d actualInMinutes % 60;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            taskStatus +\u003d \" | \" + \"Actual: \" + hours + \" hours \" + minutes + \" minutes\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        return taskStatus;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        if (obj instanceof Task) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            Task task \u003d (Task) obj;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            return ((task.description.equals(this.description))"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "thatseant"
        },
        "content": "                    \u0026\u0026 (task.isDone \u003d\u003d this.isDone) \u0026\u0026 (task.date.equals(this.date)));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "thatseant"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thatseant": 90,
      "samuelchristopher": 6,
      "samuellleow": 4,
      "shreytheshreyas": 13,
      "riazaham": 20
    }
  },
  {
    "path": "src/main/java/seedu/duke/ui/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thatseant"
        },
        "content": "package seedu.duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import seedu.duke.member.TeamMember;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import seedu.duke.project.Project;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import seedu.duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thatseant"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    private static final String MESSAGE_SINGLE_LINE \u003d \"____________________________________________________________\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    private static final String MESSAGE_WELCOME \u003d \"Hello from Duke!\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            + \"What can I do for you?\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    private static final String MESSAGE_GOODBYE \u003d \"See you again!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    private static final String MESSAGE_LOGO \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public void printWelcome() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        System.out.println(MESSAGE_SINGLE_LINE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        System.out.println(MESSAGE_LOGO);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        System.out.println(MESSAGE_WELCOME);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        System.out.println(MESSAGE_SINGLE_LINE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public static String printGoodbyeMessage() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        return MESSAGE_GOODBYE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public void printLine() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        System.out.println(MESSAGE_SINGLE_LINE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public static void printOutput(String output) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        System.out.println(output);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public static String printMemberAddedMessage(String name) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        return \"Team member \\\"\" + name + \"\\\" has been added\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public static String printMemberRemovedMessage(String name) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        return \"Team member \\\"\" + name + \"\\\" has been removed\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public static String printProjectDeletedMessage(Project project) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        return \"Project \\\"\" + project.getProjectName() + \"\\\" deleted\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public static String printProjectListMessage(ArrayList\u003cProject\u003e projects) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        output +\u003d \"List of Projects:\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        for (int i \u003d 0; i \u003c projects.size(); i++) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            output +\u003d \"\\n     \" + (i + 1) + \".\" + projects.get(i).getProjectName();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            if (projects.get(i).getProjectDeadline() !\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                output +\u003d \" (\" + projects.get(i).getProjectDeadline() + \") \";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public static String printTaskListMessage(Project project) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        project.sortTasksList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        int numberOfTasks \u003d project.getTaskList().size();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        String output \u003d \"List of Tasks:\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        for (int i \u003d 0; i \u003c numberOfTasks; i++) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "            output +\u003d \"\\n     \" + (i + 1) + \".\" + project.getTask(i)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "                    + ((project.getTask(i).getPriority() !\u003d 0) ? \"|\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "                    + \"priority: \" + project.getTask(i).getPriority() : \"\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public static String printProjectCreatedMessage(String projectName) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        return \"Project \\\"\" + projectName + \"\\\" created!\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public static String printProjectDescriptionAddedMessage(Project project) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        return \"Project description added \\\"\" + project.getDescription() + \"\\\".\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public static String printProjectDoneMessage(String projectName) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        return \"Project \\\"\" + projectName + \"\\\" is done!\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public static String printProjectDeadlineAddedMessage(Project project, LocalDate date) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        return \"Deadline \" + date.format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy\"))"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                + \" added to Project \" + project.getProjectName();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public static String printEmptyAdditionalProjectInformationMessage() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        return \"\u003cproject description empty\u003e | \u003cproject deadline empty\u003e | \""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                + \"\u003cteam members involved empty\u003e\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public static String printTaskCreatedMessage(String taskName) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        return \"Task \\\"\" + taskName + \"\\\" created!\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public static String printEstimateAddedMessage(String taskName, int hours, int minutes) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        return \"Task \\\"\" + taskName + \"\\\" has estimated time of \" + hours + \" hours and \" + minutes + \" minutes\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public static String printActualDurationAddedMessage(String taskName, int hours, int minutes) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        return \"Task \\\"\" + taskName + \"\\\" took \" + hours + \" hours and \" + minutes + \" minutes to be completed.\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public static String printTaskDoneMessage(String taskName) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        return \"Task \\\"\" + taskName + \"\\\" is done!\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public static String printTaskDeletedMessage(String taskName) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        return \"Task \\\"\" + taskName + \"\\\" removed!\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public static String printHomeView(ArrayList\u003cProject\u003e projects, ArrayList\u003cTeamMember\u003e teamMembers) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        String output \u003d \"Hello! Welcome to EZ Manager!\\n\";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        output +\u003d \"\\n ---------------------- \";"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        output +\u003d \"\\n| PROJECT LIST         |\";"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        output +\u003d \"\\n ---------------------- \\n\";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        output +\u003d \"\\nIndex      Project Name                       Deadline      Tasks Completed\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        output +\u003d \"\\n---------------------------------------------------------------------------\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        int projectIndex \u003d 1;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        for (Project project : projects) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            String paddedProjectIndex \u003d String.format(\"%-11s\", projectIndex + \".\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            String projectName \u003d project.getProjectName();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            String paddedProjectName \u003d String.format(\"%-35s\", projectName);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            String paddedProjectDeadline;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            if (project.getProjectDeadline() !\u003d null) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                String projectDeadline \u003d project.getProjectDeadline().format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy\"));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                paddedProjectDeadline \u003d String.format(\"%-14s\", projectDeadline);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                paddedProjectDeadline \u003d String.format(\"%-14s\", \"-\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            String taskCompleted \u003d project.getNumberOfFinishedTask() + \"/\""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                    + project.getNumberOfTask();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            String paddedTaskCompleted \u003d String.format(\"%-15s\", taskCompleted);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            output +\u003d \"\\n\" + paddedProjectIndex + paddedProjectName + paddedProjectDeadline + paddedTaskCompleted;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            projectIndex++;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        output +\u003d \"\\n\\n ---------------------- \";"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        output +\u003d \"\\n| MEMBERS LIST         |\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        output +\u003d \"\\n ---------------------- \\n\";"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        output +\u003d \"\\nIndex      Member Name                        Projects Involved              \";"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        output +\u003d \"\\n---------------------------------------------------------------------------\";"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        int memberIndex \u003d 1;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        for (TeamMember member : teamMembers) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            String paddedMemberIndex \u003d String.format(\"%-11s\", memberIndex + \".\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            String memberName \u003d member.getName();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            String paddedMemberName \u003d String.format(\"%-17s\", memberName);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            //String memberRole;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            output +\u003d \"\\n\" + paddedMemberIndex + paddedMemberName + \"                  \";"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            if (member.getAssignedProjects() !\u003d null) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                for (int i \u003d 0; i \u003c member.getAssignedProjects().size(); i++) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                    Project assignedProject \u003d member.getAssignedProjects().get(i);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                    String paddedAssignedProject \u003d String.format(\"%-28s\", assignedProject.getProjectName());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                    if (i \u003d\u003d 0) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                        output +\u003d \"1. \" + paddedAssignedProject;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                        output +\u003d \"\\n                                              \""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                                + (i + 1) + \". \" + paddedAssignedProject;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            output +\u003d System.lineSeparator();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            memberIndex++;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public static String printTaskSelectedMessage(String taskName) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        return \"Selected Task: \" + taskName;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public static String printTaskNameUpdatedMessage(String oldTaskName, String newTaskName) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        return \"Task \" + \"\\\"\" + oldTaskName + \"\\\" has been updated to \\\"\" + newTaskName + \"\\\"\";"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public static String printInHomeViewMessage() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        return \"Already in Home View!\";"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public static String printSwitchedToHomeViewMessage() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        return \"Switched to Home View\";"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public static String projectViewMessage(Project project) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            String projectTitle \u003d \"Project \\\"\" + project.getProjectName() + \"\\\"\";"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            String projectDescription \u003d \"\\n\" + \"Description:\" + \"\\n\" + project.getDescription();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            String taskListTitle \u003d \"\\n ---------------------\\n| TASK LIST           |\\n ---------------------\";"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            String membersListTitle \u003d \"\\n ---------------------\\n| MEMBERS LIST        |\\n ---------------------\";"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            String indexSpaces \u003d \"      \"; // 6"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            String statusSpaces \u003d \"      \"; // 6"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            String descriptionSpaces \u003d \"                   \"; // 19"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            String deadlineSpaces \u003d \"               \"; // 16"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            String prioritySpaces \u003d \"              \"; // 11"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            String expectedSpaces \u003d \"                 \"; // 18"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            String actualSpaces \u003d \"             \"; // 13"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            String membersSpaces \u003d \"                \"; // 16"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            String tableLabel \u003d \"Index  Status   Description        \""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                                + \"Deadline        Priority      Expected Hrs     Actual Hrs   | Members Involved\\n\""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                                + \"------------------------------------------------\""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "thatseant"
        },
        "content": "                                + \"-----------------------------------------------|------------------\";"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            Integer extra \u003d 0;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            Integer i \u003d 0;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            int index;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            String currentTaskLine \u003d \"\";"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            String taskLines \u003d \"\\n\";"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            if (project.getTaskList().size() \u003e 0) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                for (; i \u003c project.getTaskList().size(); i++) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "thatseant"
        },
        "content": "                    index \u003d i + 1;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                    Task currentTask \u003d project.getTaskList().get(i);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                    String status \u003d currentTask.isDone() ? \"(Y)\" : \"(N)\";"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                    String description \u003d currentTask.getTaskDescription();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                    String deadline \u003d currentTask.getDateString();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "thatseant"
        },
        "content": "                    currentTaskLine \u003d index + indexSpaces + status + statusSpaces + description"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                            + (descriptionSpaces.substring(0, descriptionSpaces.length() - description.length()));"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                    if (deadline.length() \u003e 0) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                        currentTaskLine +\u003d (deadline);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "thatseant"
        },
        "content": "                        currentTaskLine +\u003d \"-\";"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                    currentTaskLine +\u003d (deadlineSpaces.substring(0, deadlineSpaces.length() - deadline.length()));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "thatseant"
        },
        "content": "                    int priority \u003d currentTask.getPriority();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "thatseant"
        },
        "content": "                    if (priority \u003e 0) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                        currentTaskLine +\u003d (priority);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "thatseant"
        },
        "content": "                        currentTaskLine +\u003d \"-\";"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "thatseant"
        },
        "content": "                    currentTaskLine +\u003d (prioritySpaces.substring(0, prioritySpaces.length() - 1));"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                    Integer estimate \u003d currentTask.getEstimate();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                    if (estimate \u003e 1) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                        currentTaskLine +\u003d (estimate / 60);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                        extra \u003d estimate.toString().length() - 1;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "thatseant"
        },
        "content": "                        currentTaskLine +\u003d \"-\";"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                        extra \u003d 0;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                    currentTaskLine +\u003d (expectedSpaces.substring(0, expectedSpaces.length()"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                            - estimate.toString().length() + extra));"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                    Integer actual \u003d currentTask.getActual();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                    if (actual \u003e 1) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                        currentTaskLine +\u003d (actual / 60);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "thatseant"
        },
        "content": "                        currentTaskLine +\u003d \"-\";"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                    extra \u003d actual.toString().length() - 1;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                    currentTaskLine +\u003d (actualSpaces.substring(0, actualSpaces.length()"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                            - actual.toString().length() + extra));"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "thatseant"
        },
        "content": "                    String memberName \u003d null;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "thatseant"
        },
        "content": "                    ArrayList\u003cTeamMember\u003e members \u003d currentTask.getMembers();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "thatseant"
        },
        "content": "                    currentTaskLine +\u003d \"|\";"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "thatseant"
        },
        "content": "                    memberName \u003d \"|\";"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "thatseant"
        },
        "content": "                    for (TeamMember member : members) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "thatseant"
        },
        "content": "                        currentTaskLine +\u003d member.getName() + \"|\";"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                        memberName \u003d member.getName();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "thatseant"
        },
        "content": "                    //currentTaskLine +\u003d (membersSpaces.substring(0, membersSpaces.length() - memberName.length()));"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                    taskLines +\u003d (currentTaskLine + \"\\n\");"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                taskLines +\u003d \"No tasks have been added to this project.\";"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            ArrayList\u003cTeamMember\u003e members \u003d project.getTeamMembers();"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            String membersListLines \u003d \"\";"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            if (members.size() \u003e 0) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                for (int j \u003d 0; j \u003c members.size(); j++) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                    membersListLines +\u003d (j + 1) + \". \" + members.get(j).getName() + \"\\n\";"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                membersListLines +\u003d \"No team members have been assigned to this project.\";"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            return projectTitle + \"\\n\" + projectDescription + \"\\n\" + taskListTitle + \"\\n\""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                    + (project.getTaskList().size() \u003e 0 ? tableLabel : \"\") + taskLines"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                    + \"\\n \\n\" + membersListTitle + \"\\n\" + membersListLines;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        } catch (Error e) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        return \"hi\";"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public static String printMemberAssignedToTaskMessage(String memberName, String taskName) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        return \"Member \\\"\" + memberName + \"\\\" has been assigned to \\\"\" + taskName + \"\\\"\";"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public static String printPriorityAssignedToTaskMessage(int priority, String taskName) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        return \"Priority \\\"\" + priority + \"\\\" has been assigned to \\\"\" + taskName + \"\\\"\";"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "thatseant"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thatseant": 62,
      "samuelchristopher": 94,
      "samuellleow": 114,
      "shreytheshreyas": 9,
      "riazaham": 30
    }
  },
  {
    "path": "src/test/java/seedu/duke/ParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thatseant"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.commands.task.TaskCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.commands.task.TaskDoneCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thatseant"
        },
        "content": "class ParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    void getParams_correctTaskParams_correctHashmap() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        String paramString \u003d \"n/new Named Task d/2020-08-04 t/109 p/121 h/12 m/56 p/7\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        HashMap\u003cString, String\u003e expectedHashmap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        expectedHashmap.put(\"n\", \"new Named Task\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        expectedHashmap.put(\"p\", \"7\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        expectedHashmap.put(\"d\", \"2020-08-04\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        expectedHashmap.put(\"t\", \"109\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        expectedHashmap.put(\"h\", \"12\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        expectedHashmap.put(\"m\", \"56\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        HashMap\u003cString, String\u003e actualHashmap \u003d Parser.getParams(paramString);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        assertEquals(expectedHashmap, actualHashmap);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thatseant"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thatseant": 26
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/member/AssignMemberToProjectCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "package seedu.duke.commands.member;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "import seedu.duke.DukeExceptions;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "import seedu.duke.member.TeamMember;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "import seedu.duke.project.Project;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "public class AssignMemberToProjectCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    static ArrayList\u003cProject\u003e projects;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    static ArrayList\u003cTeamMember\u003e teamMembers;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    static Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    static void createProjectList() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        projects \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        teamMembers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        Project project1 \u003d new Project(\"Project 1\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        Project project2 \u003d new Project(\"Project 2\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        Project project3 \u003d new Project(\"Project 3\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        projects.add(project1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        projects.add(project2);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        projects.add(project3);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    static void createMemberList() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        teamMembers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        TeamMember member1 \u003d new TeamMember(\"Member 1\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        TeamMember member2 \u003d new TeamMember(\"Member 2\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        TeamMember member3 \u003d new TeamMember(\"Member 3\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        teamMembers.add(member1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        teamMembers.add(member2);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        teamMembers.add(member3);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    public void executeCommand_validMemberId_validProjectId_assignMemberToProject() throws DukeExceptions {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        HashMap\u003cString, String\u003e params \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        params.put(\"m\",\"2\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        params.put(\"p\",\"1\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        AssignMemberToProjectCommand assignProject \u003d new AssignMemberToProjectCommand(params,true);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        String expectedOutput \u003d \"Member 2 assigned to Project \\\"Project 1\\\"\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        String actualOutput \u003d assignProject.executeCommand(projects,teamMembers);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        assertEquals(expectedOutput,actualOutput);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    public void executeCommand_invalidMemberId_assignMemberToProject() throws DukeExceptions {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        HashMap\u003cString,String\u003e params \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        params.put(\"m\",\"7\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        params.put(\"p\",\"2\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        AssignMemberToProjectCommand command \u003d new AssignMemberToProjectCommand(params,true);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        String expectedOutput \u003d \"Team Member ID does not exist!\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        DukeExceptions actualOutputException \u003d assertThrows(DukeExceptions.class, () -\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            command.executeCommand(projects, teamMembers));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        assertEquals(expectedOutput, actualOutputException.toString());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    public void executeCommand_invalidProjectId_assignMemberToProject() throws DukeExceptions {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        HashMap\u003cString,String\u003e params \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        params.put(\"m\",\"1\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        params.put(\"p\",\"5\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        AssignMemberToProjectCommand assignProject \u003d new AssignMemberToProjectCommand(params,true);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        String expectedOutput \u003d \"Project ID does not exist!\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        Throwable actualOutputException \u003d assertThrows(DukeExceptions.class, () -\u003e {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "            assignProject.executeCommand(projects,teamMembers);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        });"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        assertEquals(expectedOutput,actualOutputException.toString());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samuellleow": 1,
      "shreytheshreyas": 77,
      "riazaham": 4
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/member/TeamMemberAddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "riazaham"
        },
        "content": "package seedu.duke.commands.member;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.DukeExceptions;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.member.TeamMember;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.project.Project;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "riazaham"
        },
        "content": "class TeamMemberAddCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    static ArrayList\u003cProject\u003e projects;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    static ArrayList\u003cTeamMember\u003e teamMembers;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    static Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    static HashMap\u003cString, String\u003e params;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    static void createProjectList() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        projects \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        teamMembers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        params \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public void executeCommand_validMemberName_memberAddedMessage() throws DukeExceptions {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        params.put(\"n\", \"John Doe\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        TeamMemberAddCommand command \u003d new TeamMemberAddCommand(params);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        String expectedOutput \u003d Ui.printMemberAddedMessage(\"John Doe\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        String actualOuput \u003d command.executeCommand(projects, teamMembers);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        assertEquals(expectedOutput, actualOuput);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "riazaham"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thatseant": 1,
      "riazaham": 37
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/member/TeamMemberAssignToTaskCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "riazaham"
        },
        "content": "package seedu.duke.commands.member;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.DukeExceptions;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.commands.task.TaskSelectCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.member.TeamMember;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.project.Project;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "riazaham"
        },
        "content": "class TeamMemberAssignToTaskCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    static ArrayList\u003cProject\u003e projects;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    static ArrayList\u003cTeamMember\u003e teamMembers;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    static HashMap\u003cString, String\u003e params;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    static Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "riazaham"
        },
        "content": "     * Create 1 projects list"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "riazaham"
        },
        "content": "     * Create 1 project."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "riazaham"
        },
        "content": "     * Create 3 tasks."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "riazaham"
        },
        "content": "     * Add the 3 tasks to that project."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "riazaham"
        },
        "content": "     * Add that project to projects list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "riazaham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    static void testSetup() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        params \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        teamMembers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        projects \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        Project projectOne \u003d new Project(\"Project One\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        Task taskOne \u003d new Task(\"Task One\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        Task taskTwo \u003d new Task(\"Task Two\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        Task taskThree \u003d new Task(\"Task Three\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        projectOne.addTask(taskOne);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        projectOne.addTask(taskTwo);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        projectOne.addTask(taskThree);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        projects.add(projectOne);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        teamMembers.add(new TeamMember(\"Arnold\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        teamMembers.add(new TeamMember(\"Julian\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        teamMembers.add(new TeamMember(\"Victor\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "riazaham"
        },
        "content": "     * Assign member 1 (Arnold) to task 1 (Task One)."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "riazaham"
        },
        "content": "     * @throws DukeExceptions exception message"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "riazaham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    void executeCommand_validTaskIdMemberId_memberAssignedMessage() throws DukeExceptions {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        params.put(\"t\", \"1\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        params.put(\"m\", \"1\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        TeamMemberAssignToTaskCommand command \u003d new TeamMemberAssignToTaskCommand(params,0);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        String expectedOutput \u003d Ui.printMemberAssignedToTaskMessage(\"Arnold\", \"Task One\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        String actualOutput \u003d command.executeCommand(projects, teamMembers);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        assertEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    void executeCommand_nonExistentMemberId_memberAssignedMessage() throws DukeExceptions {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        params.put(\"t\", \"1\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        params.put(\"m\", \"1\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        TeamMemberAssignToTaskCommand command \u003d new TeamMemberAssignToTaskCommand(params,0);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        String expectedOutput \u003d \"Team Members list is empty!\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        DukeExceptions exception \u003d assertThrows(DukeExceptions.class, () -\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "riazaham"
        },
        "content": "                command.executeCommand(projects, new ArrayList\u003cTeamMember\u003e()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        assertEquals(expectedOutput, exception.toString());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    void executeCommand_nonExistentTaskId_memberAssignedMessage() throws DukeExceptions {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        params.put(\"t\", \"5\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        params.put(\"m\", \"1\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        TeamMemberAssignToTaskCommand command \u003d new TeamMemberAssignToTaskCommand(params,0);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        String expectedOutput \u003d \"Task ID does not exist!\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        DukeExceptions exception \u003d assertThrows(DukeExceptions.class, () -\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "riazaham"
        },
        "content": "                command.executeCommand(projects, teamMembers));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        assertEquals(expectedOutput, exception.toString());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "riazaham"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "riazaham": 85
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/member/TeamMemberDeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "riazaham"
        },
        "content": "package seedu.duke.commands.member;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.DukeExceptions;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.member.TeamMember;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.project.Project;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "riazaham"
        },
        "content": "class TeamMemberDeleteCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    static ArrayList\u003cProject\u003e projects;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    static ArrayList\u003cTeamMember\u003e teamMembers;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    static Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    static HashMap\u003cString, String\u003e params;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    static void createTeamMembersList() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        projects \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        teamMembers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        TeamMember member1 \u003d new TeamMember(\"John Doe\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        TeamMember member2 \u003d new TeamMember(\"Sarah Hopkins\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        teamMembers.add(member1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        teamMembers.add(member2);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        params \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    void executeCommand_valildMemberId_memberRemovedMessage() throws DukeExceptions {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        params.put(\"m\", \"1\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        TeamMemberDeleteCommand command \u003d new TeamMemberDeleteCommand(params);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        String expectedOutput \u003d \"Team member \\\"John Doe\\\" has been removed\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        String actualOutput \u003d command.executeCommand(projects, teamMembers);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        assertEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    void executeCommand_nonExistentMemberId_invalidMemberIdException() throws DukeExceptions {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        params.put(\"m\", \"10\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        TeamMemberDeleteCommand command \u003d new TeamMemberDeleteCommand(params);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        String expectedOutput \u003d \"Team Member ID does not exist!\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        DukeExceptions exception \u003d assertThrows(DukeExceptions.class, () -\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "riazaham"
        },
        "content": "                command.executeCommand(projects, teamMembers));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        assertEquals(expectedOutput, exception.toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "riazaham"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "riazaham": 51
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/member/TeamMembersListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "riazaham"
        },
        "content": "package seedu.duke.commands.member;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.DukeExceptions;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.commands.project.ProjectListCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.member.TeamMember;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.project.Project;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "riazaham"
        },
        "content": "class TeamMembersListCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    static ArrayList\u003cProject\u003e projects;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    static ArrayList\u003cTeamMember\u003e teamMembers;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    static void createTeamMembersList() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        projects \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        Project projectOne \u003d new Project(\"Project One\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        projects.add(projectOne);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        teamMembers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        TeamMember member1 \u003d new TeamMember(\"John Doe\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        TeamMember member2 \u003d new TeamMember(\"Sarah Hopkins\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        TeamMember member3 \u003d new TeamMember(\"Brandon Ginger\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        TeamMember member4 \u003d new TeamMember(\"Jonathan Joseph\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        teamMembers.add(member1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        teamMembers.add(member2);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        teamMembers.add(member3);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        teamMembers.add(member4);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    void executeCommand_listWithoutAssignedProject_listMessage() throws DukeExceptions {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        TeamMembersListCommand command \u003d new TeamMembersListCommand(true, 0);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        String expectedOutput \u003d \"List of members:\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "riazaham"
        },
        "content": "                + \"1. John Doe: \\tNot assigned to a project\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "riazaham"
        },
        "content": "                + \"2. Sarah Hopkins: \\tNot assigned to a project\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "riazaham"
        },
        "content": "                + \"3. Brandon Ginger: \\tNot assigned to a project\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "riazaham"
        },
        "content": "                + \"4. Jonathan Joseph: \\tNot assigned to a project\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        String actualOutput \u003d command.executeCommand(projects, teamMembers);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        assertEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    void executeCommand_listWithAssignedProject_listMessage() throws DukeExceptions {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        teamMembers.get(0).setAssignedProjectId(1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        teamMembers.get(2).setAssignedProjectId(1);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        TeamMembersListCommand command \u003d new TeamMembersListCommand(true, 0);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        String expectedOutput \u003d \"List of members:\\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "riazaham"
        },
        "content": "                + \"1. John Doe: \\tAssigned to project 1\\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "riazaham"
        },
        "content": "                + \"2. Sarah Hopkins: \\tNot assigned to a project\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "riazaham"
        },
        "content": "                + \"3. Brandon Ginger: \\tAssigned to project 1\\n\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "riazaham"
        },
        "content": "                + \"4. Jonathan Joseph: \\tNot assigned to a project\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        String actualOutput \u003d command.executeCommand(projects, teamMembers);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        assertEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "riazaham"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "riazaham": 62
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/project/ProjectDeadlineCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "riazaham"
        },
        "content": "package seedu.duke.commands.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.DukeExceptions;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.member.TeamMember;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import seedu.duke.project.Project;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "public class ProjectDeadlineCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    static ArrayList\u003cProject\u003e projects;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    static ArrayList\u003cTeamMember\u003e teamMembers;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    static Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    static HashMap\u003cString, String\u003e params;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    static void createProjectList() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        projects \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        Project projectOne \u003d new Project(\"Drink Water\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        Project projectTwo \u003d new Project(\"Fire\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        Project projectThree \u003d new Project(\"CS2113 Tutorial\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        projects.add(projectOne);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        projects.add(projectTwo);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        projects.add(projectThree);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        params \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * Test: Add deadline to the second project with valid project ID and deadline format."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    void executeCommand_validProjectId_addDeadlineToProject() throws DukeExceptions {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        params.put(\"p\", \"2\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        params.put(\"d\", \"2020-12-31\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        ProjectDeadlineCommand command \u003d new ProjectDeadlineCommand(params);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        String expectedOutput \u003d \"Deadline 31/12/2020 added to Project Fire\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        String actualOutput \u003d command.executeCommand(projects, teamMembers);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        assertEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    void executeCommand_invalidProjectId_exceptionThrown() throws DukeExceptions {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        params.put(\"p\", \"-5\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        params.put(\"d\", \"2020-12-31\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        ProjectDeadlineCommand command \u003d new ProjectDeadlineCommand(params);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        String expectedOutput \u003d \"Project ID does not exist!\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        Throwable actualOutputException \u003d assertThrows(DukeExceptions.class, () -\u003e {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            command.executeCommand(projects, teamMembers);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        });"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        assertEquals(expectedOutput, actualOutputException.toString());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    //Unsure why test passed in Intellij but fails in PR"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    void executeCommand_invalidDeadlineFormat_addDeadlineToProject() throws DukeExceptions {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        String stringToInput \u003d \"deadline p/2 d/2020-31-31\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        String expectedOutput \u003d \"Date must be specified in format YYYY-MM-DD\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        Throwable actualOutputException \u003d assertThrows(DukeExceptions.class, () -\u003e {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            Parser.parse(stringToInput);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        });"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        assertEquals(expectedOutput, actualOutputException.toString());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samuellleow": 56,
      "riazaham": 17
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/project/ProjectDescriptionCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "riazaham"
        },
        "content": "package seedu.duke.commands.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.DukeExceptions;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.member.TeamMember;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import seedu.duke.project.Project;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "public class ProjectDescriptionCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    static ArrayList\u003cProject\u003e projects;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    static ArrayList\u003cTeamMember\u003e teamMembers;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    static Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    static HashMap\u003cString, String\u003e params;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    static void createProjectList() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        projects \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        Project projectOne \u003d new Project(\"Project One\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        Project projectTwo \u003d new Project(\"Project Two\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        Project projectThree \u003d new Project(\"Project Three\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        projects.add(projectOne);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        projects.add(projectTwo);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        projects.add(projectThree);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        projectTwo.addDescription(\"Do CS2113 Tutorial by today\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        params \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    void executeCommand_projectList_projectDescriptionAdded() throws DukeExceptions {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        params.put(\"d\", \"Do CS2113 Tutorial by today\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        params.put(\"p\", \"2\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        ProjectDescriptionCommand addDescription \u003d new ProjectDescriptionCommand(params);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        String actualOutput \u003d addDescription.executeCommand(projects, teamMembers);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        String expectedOutput \u003d \"Project description added \\\"Do CS2113 Tutorial by today\\\".\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        assertEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samuelchristopher": 6,
      "samuellleow": 29,
      "riazaham": 10
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/project/ProjectListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "riazaham"
        },
        "content": "package seedu.duke.commands.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.DukeExceptions;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import seedu.duke.commands.project.ProjectListCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import seedu.duke.member.TeamMember;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import seedu.duke.project.Project;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "public class ProjectListTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    static ArrayList\u003cProject\u003e projects;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    static ArrayList\u003cTeamMember\u003e teamMembers;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    static void createProjectList() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        projects \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        Project projectOne \u003d new Project(\"Drink Water\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        Project projectTwo \u003d new Project(\"Fire\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        Project projectThree \u003d new Project(\"CS2113 Tutorial\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        projects.add(projectOne);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        projects.add(projectTwo);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        projects.add(projectThree);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        projectOne.addProjectDeadline(LocalDate.parse(\"2020-12-31\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        projectThree.addProjectDeadline(LocalDate.parse(\"2019-01-01\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    void executeCommand_differentDeadline_listOfSortedProjectsByDeadline() throws DukeExceptions {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        ProjectListCommand command \u003d new ProjectListCommand();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        String expectedOutput \u003d \"List of Projects:\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                + \"     1.CS2113 Tutorial (2019-01-01) \\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                + \"     2.Drink Water (2020-12-31) \\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                + \"     3.Fire\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        String actualOutput \u003d command.executeCommand(projects, teamMembers);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        assertEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samuellleow": 41,
      "riazaham": 2
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/project/ProjectSelectCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "riazaham"
        },
        "content": "package seedu.duke.commands.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.DukeExceptions;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import seedu.duke.commands.project.ProjectCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import seedu.duke.commands.project.ProjectSelectCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.member.TeamMember;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import seedu.duke.project.Project;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import seedu.duke.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "public class ProjectSelectCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    static ArrayList\u003cTeamMember\u003e teamMembers;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    static ArrayList\u003cProject\u003e projects;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    static Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    static void testSetup() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        projects \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        Project projectOne \u003d new Project(\"Project One\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        Project projectTwo \u003d new Project(\"Project Two\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        Project projectThree \u003d new Project(\"Project Three\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        projects.add(projectOne);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        projects.add(projectTwo);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        projects.add(projectThree);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        projectTwo.addProjectDeadline(LocalDate.parse(\"2020-12-31\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    void executeCommand_validProjectIdWithDescription_additionalInformation() throws DukeExceptions {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        HashMap\u003cString, String\u003e params \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        params.put(\"p\",\"2\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        ProjectSelectCommand selectProject \u003d new ProjectSelectCommand(params);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        String expectedOutput \u003d  \"Project \\\"Project Two\\\"\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thatseant"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thatseant"
        },
        "content": "                + \"Description:\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thatseant"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thatseant"
        },
        "content": "                + \"\u003cproject description empty\u003e\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thatseant"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                + \" ---------------------\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                + \"| TASK LIST           |\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                + \" ---------------------\\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                + \"No tasks have been added to this project.\\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                + \" \\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                + \" ---------------------\\n\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                + \"| MEMBERS LIST        |\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                + \" ---------------------\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                + \"No team members have been assigned to this project.\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        String actualOutput \u003d selectProject.executeCommand(projects, teamMembers);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        assertEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    void executeCommand_invalidProjectIdWithDescription_additionalInformation() throws DukeExceptions {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        HashMap\u003cString, String\u003e params \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        params.put(\"p\",\"-5\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        ProjectSelectCommand selectProject \u003d new ProjectSelectCommand(params);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        String expectedOutput \u003d \"Project ID does not exist!\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        Throwable actualOutputException \u003d assertThrows(DukeExceptions.class, () -\u003e {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            selectProject.executeCommand(projects, teamMembers);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        });"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        assertEquals(expectedOutput, actualOutputException.toString());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samuelchristopher": 13,
      "thatseant": 5,
      "samuellleow": 51,
      "riazaham": 6
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/task/ActualTimeCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thatseant"
        },
        "content": "package seedu.duke.commands.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.DukeExceptions;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.project.Project;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thatseant"
        },
        "content": "class ActualTimeCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    static ArrayList\u003cProject\u003e projects;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    static void createProjectsTasks() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        projects \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Project projectOne \u003d new Project(\"Drink Water\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        projects.add(projectOne);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Project projectTwo \u003d new Project(\"Fire\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Task taskOne \u003d new Task(\"test1\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Task taskTwo \u003d new Task(\"test2\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        taskTwo.markAsDone();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        projectTwo.addTask(taskOne);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        projectTwo.addTask(taskTwo);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        projects.add(projectTwo);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Project projectThree \u003d new Project(\"CS2113 Tutorial\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        projects.add(projectThree);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    void executeCommand_validIndexAndDone_addActualTime() throws DukeExceptions {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        HashMap\u003cString, String\u003e params \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        params.put(\"t\", \"2\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        params.put(\"h\", \"4\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        params.put(\"m\", \"3\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        ActualTimeCommand newCommand \u003d new ActualTimeCommand(params, 1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        String actualOutput \u003d newCommand.executeCommand(projects, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        String expectedOutput \u003d \"Task \\\"test2\\\" took 4 hours and 3 minutes to be completed.\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        assertEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    void executeCommand_invalidTaskIndex_invalidIdException() throws DukeExceptions {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        HashMap\u003cString, String\u003e params \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        params.put(\"t\", \"5\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        params.put(\"h\", \"4\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        params.put(\"m\", \"3\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        ActualTimeCommand newCommand \u003d new ActualTimeCommand(params, 1);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Throwable actualOutputException \u003d assertThrows(DukeExceptions.class,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            () -\u003e newCommand.executeCommand(projects, new ArrayList\u003c\u003e()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        String expectedOutput \u003d \"Task ID does not exist!\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        assertEquals(expectedOutput, actualOutputException.toString());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    void executeCommand_taskNotDone_notDoneException() throws DukeExceptions {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        HashMap\u003cString, String\u003e params \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        params.put(\"t\", \"1\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        params.put(\"h\", \"4\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        params.put(\"m\", \"3\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        ActualTimeCommand newCommand \u003d new ActualTimeCommand(params, 1);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Throwable actualOutputException \u003d assertThrows(DukeExceptions.class,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            () -\u003e newCommand.executeCommand(projects, new ArrayList\u003c\u003e()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        String expectedOutput \u003d \"Task must be marked as done before adding actual duration taken to complete!\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        assertEquals(expectedOutput, actualOutputException.toString());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "thatseant"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thatseant": 75
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/task/EstimatedTimeCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thatseant"
        },
        "content": "package seedu.duke.commands.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.DukeExceptions;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.project.Project;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thatseant"
        },
        "content": "class EstimatedTimeCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    static ArrayList\u003cProject\u003e projects;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    static void createProjectsTasks() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        projects \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Project projectOne \u003d new Project(\"Drink Water\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Project projectTwo \u003d new Project(\"Fire\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Task taskOne \u003d new Task(\"test1\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Task taskTwo \u003d new Task(\"test2\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        projectTwo.addTask(taskOne);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        projectTwo.addTask(taskTwo);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Project projectThree \u003d new Project(\"CS2113 Tutorial\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        projects.add(projectOne);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        projects.add(projectTwo);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        projects.add(projectThree);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    void executeCommand_validTaskIndex_addEstimatedTime() throws DukeExceptions {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        HashMap\u003cString, String\u003e params \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        params.put(\"t\", \"2\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        params.put(\"h\", \"4\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        params.put(\"m\", \"3\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        EstimatedTimeCommand newCommand \u003d new EstimatedTimeCommand(params, 1);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        String actualOutput \u003d newCommand.executeCommand(projects, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        String expectedOutput \u003d \"Task \\\"test2\\\" has estimated time of 4 hours and 3 minutes\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        assertEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    void executeCommand_invalidTaskIndex_invalidIdException() throws DukeExceptions {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        HashMap\u003cString, String\u003e params \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        params.put(\"t\", \"5\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        params.put(\"h\", \"4\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        params.put(\"m\", \"3\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        EstimatedTimeCommand newCommand \u003d new EstimatedTimeCommand(params, 1);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Throwable actualOutputException \u003d assertThrows(DukeExceptions.class,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            () -\u003e newCommand.executeCommand(projects, new ArrayList\u003c\u003e()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        String expectedOutput \u003d \"Task ID does not exist!\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        assertEquals(expectedOutput, actualOutputException.toString());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thatseant"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thatseant": 58
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/task/TaskAssignDeadlineCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thatseant"
        },
        "content": "package seedu.duke.commands.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.DukeExceptions;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.project.Project;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thatseant"
        },
        "content": "class TaskAssignDeadlineCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    static ArrayList\u003cProject\u003e projects;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    static void createProjectsTasks() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        projects \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Project projectOne \u003d new Project(\"Drink Water\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        projects.add(projectOne);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Project projectTwo \u003d new Project(\"Fire\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Task taskOne \u003d new Task(\"test1\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Task taskTwo \u003d new Task(\"test2\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        projectTwo.addTask(taskOne);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        projectTwo.addTask(taskTwo);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        projects.add(projectTwo);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Project projectThree \u003d new Project(\"CS2113 Tutorial\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        projects.add(projectThree);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    void executeCommand_correctDateFormat_addDeadline() throws DukeExceptions {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        HashMap\u003cString, String\u003e params \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        params.put(\"d\", \"2020-09-12\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        params.put(\"t\", \"2\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        TaskAssignDeadlineCommand newCommand \u003d new TaskAssignDeadlineCommand(params, 1);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        String actualOutput \u003d newCommand.executeCommand(projects, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        String expectedOutput \u003d \"Deadline 12/09/2020 added to Task test2\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        assertEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    void executeCommand_wrongDateFormat_DateTimeException() throws DukeExceptions {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        HashMap\u003cString, String\u003e params \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        params.put(\"d\", \"2020-09-1\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        params.put(\"t\", \"2\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Throwable actualOutputException \u003d assertThrows(DukeExceptions.class,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            () -\u003e new TaskAssignDeadlineCommand(params, 1));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        String expectedOutput \u003d \"Date must be specified in format YYYY-MM-DD\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        assertEquals(expectedOutput, actualOutputException.toString());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thatseant"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thatseant": 57
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/task/TaskAssignPriorityCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "riazaham"
        },
        "content": "package seedu.duke.commands.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.DukeExceptions;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.member.TeamMember;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.project.Project;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "riazaham"
        },
        "content": "class TaskAssignPriorityCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    static ArrayList\u003cProject\u003e projects;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    static ArrayList\u003cTeamMember\u003e teamMembers;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    static HashMap\u003cString, String\u003e params;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    static Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "riazaham"
        },
        "content": "     * Create 1 projects list"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "riazaham"
        },
        "content": "     * Create 1 project."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "riazaham"
        },
        "content": "     * Create 3 tasks."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "riazaham"
        },
        "content": "     * Add the 3 tasks to that project."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "riazaham"
        },
        "content": "     * Add that project to projects list."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "riazaham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    static void testSetup() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        params \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        teamMembers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        projects \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        Project projectOne \u003d new Project(\"Project One\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        Task taskOne \u003d new Task(\"Task One\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        Task taskTwo \u003d new Task(\"Task Two\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        Task taskThree \u003d new Task(\"Task Three\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        projectOne.addTask(taskOne);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        projectOne.addTask(taskTwo);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        projectOne.addTask(taskThree);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        projects.add(projectOne);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "riazaham"
        },
        "content": "     * Test: Assign priority HIGH to first task."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "riazaham"
        },
        "content": "     * Check for message."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "riazaham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    void executeCommand_validPriorityAndTaskId_priorityAssignedToTask() throws DukeExceptions {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        params.put(\"p\", \"3\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        params.put(\"t\", \"1\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        TaskAssignPriorityCommand command \u003d new TaskAssignPriorityCommand(params, 0);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        String expectedOutput \u003d Ui.printPriorityAssignedToTaskMessage(3, \"Task One\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        String actualOutput \u003d command.executeCommand(projects, teamMembers);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        assertEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "riazaham"
        },
        "content": "     * Test: Assign priority HIGH to non existent task."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "riazaham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    void executeCommand_nonExistentTaskId_invalidTaskId() throws DukeExceptions {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        params.put(\"p\", \"1\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        params.put(\"t\", \"5\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        TaskAssignPriorityCommand command \u003d new TaskAssignPriorityCommand(params, 0);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        String expectedOutput \u003d \"Task ID does not exist!\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        DukeExceptions exception \u003d assertThrows(DukeExceptions.class, () -\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "riazaham"
        },
        "content": "                command.executeCommand(projects, teamMembers));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        assertEquals(expectedOutput, exception.toString());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "riazaham"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thatseant": 1,
      "shreytheshreyas": 2,
      "riazaham": 70
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/task/TaskCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "riazaham"
        },
        "content": "package seedu.duke.commands.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.DukeExceptions;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.project.Project;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thatseant"
        },
        "content": "class TaskCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    static ArrayList\u003cProject\u003e projects;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    static void createProjectList() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        projects \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Project projectOne \u003d new Project(\"Drink Water\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        projects.add(projectOne);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Project projectTwo \u003d new Project(\"Fire\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Task taskOne \u003d new Task(\"test1\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Task taskTwo \u003d new Task(\"test2\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        projectTwo.addTask(taskOne);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        projectTwo.addTask(taskTwo);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        projects.add(projectTwo);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Project projectThree \u003d new Project(\"CS2113 Tutorial\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        projects.add(projectThree);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    void executeCommand_existingTasks_taskCreated() throws DukeExceptions {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        HashMap\u003cString, String\u003e params \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        params.put(\"n\", \"Task 3\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        TaskCommand createTask \u003d new TaskCommand(params, 1);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        String actualOutput \u003d createTask.executeCommand(projects, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        String expectedOutput \u003d \"Task \\\"Task 3\\\" created!\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        assertEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thatseant"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thatseant": 42,
      "riazaham": 1
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/task/TaskDeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "riazaham"
        },
        "content": "package seedu.duke.commands.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.DukeExceptions;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.member.TeamMember;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.project.Project;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "riazaham"
        },
        "content": "class TaskDeleteCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    static ArrayList\u003cProject\u003e projects;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    static ArrayList\u003cTeamMember\u003e teamMembers;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    static HashMap\u003cString, String\u003e params;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "riazaham"
        },
        "content": "     * Create 1 projects list"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "riazaham"
        },
        "content": "     * Create 1 project."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "riazaham"
        },
        "content": "     * Create 3 tasks."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "riazaham"
        },
        "content": "     * Add the 3 tasks to that project."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "riazaham"
        },
        "content": "     * Add that project to projects list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "riazaham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    static void testSetup() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        params \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        teamMembers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        projects \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        Project projectOne \u003d new Project(\"Project One\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        Task taskOne \u003d new Task(\"Task One\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        Task taskTwo \u003d new Task(\"Task Two\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        Task taskThree \u003d new Task(\"Task Three\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        projectOne.addTask(taskOne);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        projectOne.addTask(taskTwo);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        projectOne.addTask(taskThree);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        projects.add(projectOne);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "riazaham"
        },
        "content": "     * Test: Delete the first task from the first project."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "riazaham"
        },
        "content": "     * Check for message."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "riazaham"
        },
        "content": "     * Check if task has been deleted from task list by checking task list length;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "riazaham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    void executeCommand_validTaskId_taskDescription() throws DukeExceptions {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        params.put(\"t\", \"1\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        TaskDeleteCommand command \u003d new TaskDeleteCommand(params,0);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        String expectedOutput0 \u003d \"Task \\\"Task One\\\" removed!\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        String actualOutput0 \u003d command.executeCommand(projects, teamMembers);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        assertEquals(expectedOutput0, actualOutput0);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        int expectedOutput1 \u003d 2;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        int actualOutput1 \u003d projects.get(0).getTaskList().size();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        assertEquals(expectedOutput1, actualOutput1);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "riazaham"
        },
        "content": "     * Test: Input a non-existent task ID to test exception error message."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "riazaham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    void executeCommand_nonExistentTaskId_taskDescription() throws DukeExceptions {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        params.put(\"t\", \"4\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        TaskDeleteCommand command \u003d new TaskDeleteCommand(params,0);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        String expectedOutput \u003d \"Task ID does not exist!\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        DukeExceptions exception \u003d assertThrows(DukeExceptions.class, () -\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "riazaham"
        },
        "content": "                command.executeCommand(projects, teamMembers));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        assertEquals(expectedOutput, exception.toString());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "riazaham"
        },
        "content": "     * Test: Pass a non existent projects list to test exception error message."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "riazaham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    void executeCommand_nonExistentProjectsList_taskDescription() throws DukeExceptions {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        params.put(\"t\", \"1\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        TaskDeleteCommand command \u003d new TaskDeleteCommand(params,0);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        String expectedOutput \u003d \"Project list is empty!\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        DukeExceptions exception \u003d assertThrows(DukeExceptions.class, () -\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "riazaham"
        },
        "content": "                command.executeCommand(new ArrayList\u003cProject\u003e(), teamMembers));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        assertEquals(expectedOutput, exception.toString());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "riazaham"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "riazaham": 87
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/task/TaskDoneCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thatseant"
        },
        "content": "package seedu.duke.commands.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.DukeExceptions;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.project.Project;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thatseant"
        },
        "content": "class TaskDoneCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    static ArrayList\u003cProject\u003e projects;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    static void createProjectsTasks() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        projects \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Project projectOne \u003d new Project(\"Drink Water\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        projects.add(projectOne);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Project projectTwo \u003d new Project(\"Fire\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Task taskOne \u003d new Task(\"test1\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Task taskTwo \u003d new Task(\"test2\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        projectTwo.addTask(taskOne);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        projectTwo.addTask(taskTwo);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        projects.add(projectTwo);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Project projectThree \u003d new Project(\"CS2113 Tutorial\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        projects.add(projectThree);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    void executeCommand_validIndex_addActualTime() throws DukeExceptions {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        HashMap\u003cString, String\u003e params \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        params.put(\"t\", \"2\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        TaskDoneCommand newCommand \u003d new TaskDoneCommand(params, 1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        String actualOutput \u003d newCommand.executeCommand(projects, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        String expectedOutput \u003d \"Task \\\"test2\\\" is done!\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        assertEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    void executeCommand_invalidTaskIndex_invalidIdException() throws DukeExceptions {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        HashMap\u003cString, String\u003e params \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        params.put(\"t\", \"5\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        TaskDoneCommand newCommand \u003d new TaskDoneCommand(params, 1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Throwable actualOutputException \u003d assertThrows(DukeExceptions.class,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            () -\u003e newCommand.executeCommand(projects, new ArrayList\u003c\u003e()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        String expectedOutput \u003d \"Task ID does not exist!\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        assertEquals(expectedOutput, actualOutputException.toString());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thatseant"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thatseant": 56
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/task/TaskEditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "riazaham"
        },
        "content": "package seedu.duke.commands.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.DukeExceptions;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.member.TeamMember;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.project.Project;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "riazaham"
        },
        "content": "class TaskEditCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    static ArrayList\u003cProject\u003e projects;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    static ArrayList\u003cTeamMember\u003e teamMembers;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    static HashMap\u003cString, String\u003e params;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "riazaham"
        },
        "content": "     * Create 1 projects list"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "riazaham"
        },
        "content": "     * Create 1 project."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "riazaham"
        },
        "content": "     * Create 3 tasks."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "riazaham"
        },
        "content": "     * Add the 3 tasks to that project."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "riazaham"
        },
        "content": "     * Add that project to projects list."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "riazaham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    static void testSetup() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        params \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        teamMembers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        projects \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        Project projectOne \u003d new Project(\"Project One\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        Task taskOne \u003d new Task(\"Task One\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        Task taskTwo \u003d new Task(\"Task Two\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        Task taskThree \u003d new Task(\"Task Three\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        projectOne.addTask(taskOne);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        projectOne.addTask(taskTwo);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        projectOne.addTask(taskThree);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        projects.add(projectOne);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "riazaham"
        },
        "content": "     * Test: Select the first task from the first project."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "riazaham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    void executeCommand_validTaskId_taskDescription() throws DukeExceptions {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        params.put(\"t\", \"1\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        params.put(\"n\", \"Task One Upgraded\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        TaskEditCommand command \u003d new TaskEditCommand(params,0);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        String expectedOutput \u003d Ui.printTaskNameUpdatedMessage(\"Task One\", \"Task One Upgraded\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        String actualOutput \u003d command.executeCommand(projects, teamMembers);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        assertEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "riazaham"
        },
        "content": "     * Test: Input a non-existent task ID to test exception error message."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "riazaham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    void executeCommand_nonExistentTaskId_taskDescription() throws DukeExceptions {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        params.put(\"t\", \"4\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        params.put(\"n\", \"Should Not Print This\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        TaskEditCommand command \u003d new TaskEditCommand(params,0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        String expectedOutput \u003d \"Task ID does not exist!\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        DukeExceptions exception \u003d assertThrows(DukeExceptions.class, () -\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "riazaham"
        },
        "content": "                command.executeCommand(projects, teamMembers));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        assertEquals(expectedOutput, exception.toString());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "riazaham"
        },
        "content": "     * Test: Pass a non existent projects list to test exception error message."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "riazaham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    void executeCommand_nonExistentProjectsList_taskDescription() throws DukeExceptions {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        params.put(\"t\", \"1\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        params.put(\"n\", \"Should Not Print This\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        TaskEditCommand command \u003d new TaskEditCommand(params,0);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        String expectedOutput \u003d \"Project list is empty!\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        DukeExceptions exception \u003d assertThrows(DukeExceptions.class, () -\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "riazaham"
        },
        "content": "                command.executeCommand(new ArrayList\u003cProject\u003e(), teamMembers));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        assertEquals(expectedOutput, exception.toString());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "riazaham"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "riazaham": 85
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/task/TaskListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thatseant"
        },
        "content": "package seedu.duke.commands.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thatseant"
        },
        "content": "class TaskListCommandTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    void executeCommand() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        //Setup test project with existing tasks"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        ProjectList projects \u003d new ProjectList();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        projects.createProject(\"iPhone App\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        projects.createProject(\"Android App\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        int secondProjectIndex \u003d 1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Project android \u003d projects.getProjectList().get(secondProjectIndex);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        android.createTask(\"network features\", LocalDate.parse(\"2020-08-24\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        android.createTask(\"keyboard features\", LocalDate.parse(\"2020-10-24\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        //Expected Output"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        String expectedOutput \u003d \"List of Tasks:\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thatseant"
        },
        "content": "                + \"\\n     \" + \"1\" + \".\" + \"network features | 24/08/2020\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thatseant"
        },
        "content": "                + \"\\n     \" + \"2\" + \".\" + \"keyboard features | 24/10/2020\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        TaskListCommand taskListCommand \u003d new TaskListCommand(1);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        String actualOutput \u003d taskListCommand.executeCommand(projects);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        assertEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    **/"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thatseant"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thatseant": 28
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/task/TaskListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "riazaham"
        },
        "content": "package seedu.duke.commands.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thatseant"
        },
        "content": "class TaskListTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    void createTasks_emptyAndExistingList_updatedList() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        taskList.createTask(\"task1\", LocalDate.parse(\"2020-08-24\"));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        taskList.createTask(\"task2\", LocalDate.parse(\"2020-10-24\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Task task1 \u003d new Task(\"task1\", LocalDate.parse(\"2020-08-24\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Task task2 \u003d new Task(\"task2\", LocalDate.parse(\"2020-10-24\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        tasks.add(task1);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        tasks.add(task2);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        assertEquals(tasks, taskList.getTaskList());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    void createTasks_existingList_correctOutput() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        taskList.createTask(\"task1\", LocalDate.parse(\"2020-08-24\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        String output \u003d taskList.createTask(\"task2\", LocalDate.parse(\"2020-10-24\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        assertEquals(\"Created: task2 | 24/10/2020\", output);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    **/"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thatseant"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thatseant": 29,
      "riazaham": 1
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/task/TaskSelectCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "riazaham"
        },
        "content": "package seedu.duke.commands.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.DukeExceptions;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.commands.project.ProjectCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.commands.project.ProjectSelectCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.member.TeamMember;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.project.Project;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "riazaham"
        },
        "content": "class TaskSelectCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    static ArrayList\u003cProject\u003e projects;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    static ArrayList\u003cTeamMember\u003e teamMembers;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    static HashMap\u003cString, String\u003e params;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "riazaham"
        },
        "content": "     * Create 1 projects list"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "riazaham"
        },
        "content": "     * Create 1 project."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "riazaham"
        },
        "content": "     * Create 3 tasks."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "riazaham"
        },
        "content": "     * Add the 3 tasks to that project."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "riazaham"
        },
        "content": "     * Add that project to projects list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    static void testSetup() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        params \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        teamMembers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        projects \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        Project projectOne \u003d new Project(\"Project One\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        Task taskOne \u003d new Task(\"Task One\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        Task taskTwo \u003d new Task(\"Task Two\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        Task taskThree \u003d new Task(\"Task Three\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        projectOne.addTask(taskOne);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        projectOne.addTask(taskTwo);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        projectOne.addTask(taskThree);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        projects.add(projectOne);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "riazaham"
        },
        "content": "     * Test: Select the first task from the first project."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    void executeCommand_validTaskId_taskDescription() throws DukeExceptions {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        params.put(\"t\", \"1\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        TaskSelectCommand command \u003d new TaskSelectCommand(params,0);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        String expectedOutput \u003d \"Selected Task: Task One\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        String actualOutput \u003d command.executeCommand(projects, teamMembers);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        assertEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "riazaham"
        },
        "content": "     * Test: Input a non-existent task ID to test exception error message."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    void executeCommand_nonExistentTaskId_taskDescription() throws DukeExceptions {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        params.put(\"t\", \"4\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        TaskSelectCommand command \u003d new TaskSelectCommand(params,0);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        String expectedOutput \u003d \"Task ID does not exist!\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        DukeExceptions exception \u003d assertThrows(DukeExceptions.class, () -\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "riazaham"
        },
        "content": "                command.executeCommand(projects, teamMembers));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        assertEquals(expectedOutput, exception.toString());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "riazaham"
        },
        "content": "     * Test: Pass a non existent projects list to test exception error message."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    void executeCommand_nonExistentProjectsList_taskDescription() throws DukeExceptions {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        params.put(\"t\", \"1\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        TaskSelectCommand command \u003d new TaskSelectCommand(params,0);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        String expectedOutput \u003d \"Project list is empty!\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        DukeExceptions exception \u003d assertThrows(DukeExceptions.class, () -\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "riazaham"
        },
        "content": "                command.executeCommand(new ArrayList\u003cProject\u003e(), teamMembers));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        assertEquals(expectedOutput, exception.toString());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "riazaham"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "riazaham": 85
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/task/TaskSortCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "package seedu.duke.commands.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "import seedu.duke.DukeExceptions;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "import seedu.duke.commands.member.AssignMemberToProjectCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "import seedu.duke.commands.project.ProjectCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "import seedu.duke.commands.project.ProjectSelectCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "import seedu.duke.member.TeamMember;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "import seedu.duke.project.Project;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "import seedu.duke.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "public class TaskSortCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    static ArrayList\u003cProject\u003e projects;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    static ArrayList\u003cTeamMember\u003e teamMembers;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    static Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    static void createProjectL() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        projects \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        Project projectOne \u003d new Project(\"Project One\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        Task taskOne \u003d new Task(\"Task One\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        Task taskTwo \u003d new Task(\"Task Two\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        Task taskThree \u003d new Task(\"Task Three\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        projectOne.addTask(taskOne);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        projectOne.addTask(taskTwo);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        projectOne.addTask(taskThree);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        projects.add(projectOne);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        projectOne.getTask(0).setPriority(3);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        projectOne.getTask(1).setPriority(1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        projectOne.getTask(2).setPriority(2);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        projectOne.getTask(0).addDeadline(LocalDate.parse(\"2020-12-13\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        projectOne.getTask(1).addDeadline(LocalDate.parse(\"2020-12-23\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        projectOne.getTask(2).addDeadline(LocalDate.parse(\"2020-11-14\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        projectOne.getTask(0).addActual(90);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        projectOne.getTask(1).addActual(130);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        projectOne.getTask(2).addActual(210);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    public void execute_command_sortTaskList_Priority() throws DukeExceptions {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        HashMap\u003cString, String\u003e params \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        params.put(\"p\", \"\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        String expectedOutput \u003d \"List of Tasks:\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "                + \"\\n     \" + \"1\" + \".\" + \"Task Two | 23/12/2020 | Actual: 2 hours 10 minutes|priority: 1\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "                + \"\\n     \" + \"2\" + \".\" + \"Task Three | 14/11/2020 | Actual: 3 hours 30 minutes|priority: 2\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "                + \"\\n     \" + \"3\" + \".\" + \"Task One | 13/12/2020 | Actual: 1 hours 30 minutes|priority: 3\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        TaskSortCommand tasksSorter \u003d new TaskSortCommand(params,0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        tasksSorter.executeCommand(projects,teamMembers);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        String actualOutput \u003d Ui.printTaskListMessage(projects.get(0));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        assertEquals(expectedOutput,actualOutput);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    public void execute_command_sortTaskList_Deadline() throws DukeExceptions {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        HashMap\u003cString, String\u003e params \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        params.put(\"d\", \"\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        String expectedOutput \u003d \"List of Tasks:\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "                + \"\\n     \" + \"1\" + \".\" + \"Task Three | 14/11/2020 | Actual: 3 hours 30 minutes|priority: 2\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "                + \"\\n     \" + \"2\" + \".\" + \"Task One | 13/12/2020 | Actual: 1 hours 30 minutes|priority: 3\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "                + \"\\n     \" + \"3\" + \".\" + \"Task Two | 23/12/2020 | Actual: 2 hours 10 minutes|priority: 1\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        TaskSortCommand tasksSorter \u003d new TaskSortCommand(params,0);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        tasksSorter.executeCommand(projects,teamMembers);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        String actualOutput \u003d Ui.printTaskListMessage(projects.get(0));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        assertEquals(expectedOutput,actualOutput);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    public void execute_command_sortTaskList_ActualTime() throws DukeExceptions {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        HashMap\u003cString, String\u003e params \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        params.put(\"t\", \"\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        String expectedOutput \u003d \"List of Tasks:\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "                + \"\\n     \" + \"1\" + \".\" + \"Task One | 13/12/2020 | Actual: 1 hours 30 minutes|priority: 3\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "                + \"\\n     \" + \"2\" + \".\" + \"Task Two | 23/12/2020 | Actual: 2 hours 10 minutes|priority: 1\""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "                + \"\\n     \" + \"3\" + \".\" + \"Task Three | 14/11/2020 | Actual: 3 hours 30 minutes|priority: 2\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        TaskSortCommand tasksSorter \u003d new TaskSortCommand(params,0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        tasksSorter.executeCommand(projects,teamMembers);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        String actualOutput \u003d Ui.printTaskListMessage(projects.get(0));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        assertEquals(expectedOutput,actualOutput);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    public void executeCommand_invalidProjectId_assignMemberToProject() throws DukeExceptions {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        HashMap\u003cString, String\u003e params \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        String expectedOutput \u003d \"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        Throwable actualOutputException \u003d assertThrows(DukeExceptions.class, () -\u003e {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            new TaskSortCommand(params,0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        });"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        assertEquals(expectedOutput,actualOutputException.toString());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thatseant": 13,
      "shreytheshreyas": 96
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/task/TaskTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "riazaham"
        },
        "content": "package seedu.duke.commands.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thatseant"
        },
        "content": "class TaskTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    static Task task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    static void createTask() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        task \u003d new Task(\"task1\", LocalDate.parse(\"2020-07-14\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        assertEquals(\"task1 | 14/07/2020\", task.toString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    void equals_sameTask_true() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Task sameTask \u003d new Task(\"task1\", LocalDate.parse(\"2020-07-14\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        assertTrue(sameTask.equals(task));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    void equals_diffDescription_false() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Task diffTask \u003d new Task(\"task2\", LocalDate.parse(\"2020-07-14\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        assertFalse(diffTask.equals(task));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    void equals_diffDeadline_false() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Task diffTask \u003d new Task(\"task1\", LocalDate.parse(\"2020-04-14\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        assertFalse(diffTask.equals(task));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    **/"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thatseant"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thatseant": 45,
      "riazaham": 1
    }
  },
  {
    "path": "src/test/java/util/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thatseant"
        },
        "content": "package util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thatseant"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thatseant"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thatseant": 7
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "project n/p1"
      },
      {
        "lineNumber": 2,
        "content": "list"
      },
      {
        "lineNumber": 3,
        "content": "project n/p2"
      },
      {
        "lineNumber": 4,
        "content": "list"
      },
      {
        "lineNumber": 5,
        "content": "project n/p3"
      },
      {
        "lineNumber": 6,
        "content": "list"
      },
      {
        "lineNumber": 7,
        "content": "project n/p4"
      },
      {
        "lineNumber": 8,
        "content": "list"
      },
      {
        "lineNumber": 9,
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "null": 8,
      "shreytheshreyas": 1
    }
  }
]
