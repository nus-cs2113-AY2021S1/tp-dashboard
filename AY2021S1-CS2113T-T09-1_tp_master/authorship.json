[{"path":"build.gradle","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"samuellleow"},"content":"    implementation \u0027junit:junit:4.12\u0027"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":16,"author":{"gitId":"-"},"content":"}"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":33,"author":{"gitId":"samuelchristopher"},"content":"    mainClassName \u003d \"seedu.ezmanager.EzManager\""},{"lineNumber":34,"author":{"gitId":"-"},"content":"}"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":39,"author":{"gitId":"-"},"content":"}"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.23\u0027"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":47,"author":{"gitId":"riazaham"},"content":"    enableAssertions \u003d true"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"samuelchristopher":1,"samuellleow":1,"riazaham":1,"-":45}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# About us"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"Display | Name | Github Profile | Portfolio "},{"lineNumber":4,"author":{"gitId":"-"},"content":"--------|:----:|:--------------:|:---------:"},{"lineNumber":5,"author":{"gitId":"samuelchristopher"},"content":"![](https://avatars3.githubusercontent.com/u/13195220?s\u003d460\u0026u\u003d7a16696cc4ed27621159c782afd285b7b37a4971\u0026v\u003d4) | Samuel Paul Christopher | [Github](https://github.com/samuelchristopher) | [Portfolio](http://bit.do/samchrisfeb2020)"},{"lineNumber":6,"author":{"gitId":"riazaham"},"content":"![](https://via.placeholder.com/100.png?text\u003dPhoto) | Riaz Ahamed | [Github](https://github.com/riazaham) | [Portfolio](team/riazaham.md)"},{"lineNumber":7,"author":{"gitId":"shreytheshreyas"},"content":"![](https://via.placeholder.com/100.png?text\u003dPhoto) | Shreyas Kumar | [Github](https://github.com/shreytheshreyas) | [Portfolio]"},{"lineNumber":8,"author":{"gitId":"samuellleow"},"content":"![](https://via.placeholder.com/100.png?text\u003dPhoto) | Samuel Leow | [Github](https://github.com/samuellleow) | [Portfolio](docs/team/johndoe.md)"},{"lineNumber":9,"author":{"gitId":"thatseant"},"content":"![](team/seandp.jpg) | Sean Tan | [Github](https://github.com/thatseant) | [Portfolio](team/thatseant.md)"}],"authorContributionMap":{"samuelchristopher":1,"thatseant":1,"samuellleow":1,"shreytheshreyas":1,"riazaham":1,"-":4}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# Developer Guide"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"shreytheshreyas"},"content":"## Welcome to Ez Manager"},{"lineNumber":4,"author":{"gitId":"-"},"content":"![EZ Manager Welcome](https://i.ibb.co/n7zphMR/ezmanagerterminal.png)"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"shreytheshreyas"},"content":"## **Changelog**"},{"lineNumber":7,"author":{"gitId":"-"},"content":"![EZ Manager Changelog](https://i.ibb.co/NNcdxnh/changelog.png)"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"shreytheshreyas"},"content":"---"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"shreytheshreyas"},"content":"## **Table of Contents**"},{"lineNumber":12,"author":{"gitId":"shreytheshreyas"},"content":"- [Introduction — Welcome to EZ Manager](#introduction---welcome-to-ez-manager)"},{"lineNumber":13,"author":{"gitId":"-"},"content":"- [Setting Up](#setting-up)"},{"lineNumber":14,"author":{"gitId":"shreytheshreyas"},"content":"- [Design](#design)"},{"lineNumber":15,"author":{"gitId":"shreytheshreyas"},"content":"- [Implementation](#implementation)"},{"lineNumber":16,"author":{"gitId":"shreytheshreyas"},"content":"- [Testing](#running-tests)"},{"lineNumber":17,"author":{"gitId":"-"},"content":"- Dev Ops"},{"lineNumber":18,"author":{"gitId":"-"},"content":"  - [Making A Release](#devops)"},{"lineNumber":19,"author":{"gitId":"-"},"content":"- Appendices"},{"lineNumber":20,"author":{"gitId":"shreytheshreyas"},"content":"  - [Appendix A: Product Scope](#Appendix-A-Product-Scope-Samuel-Leow)"},{"lineNumber":21,"author":{"gitId":"shreytheshreyas"},"content":"  - [Appendix B: Commands Summary](#Appendix-B-Command-Summary-Samuel-Paul-Christopher)"},{"lineNumber":22,"author":{"gitId":"shreytheshreyas"},"content":"  - [Appendix C: Instructions for Manual Testing](#Appendix-C-Instructions-for-Manual-Testing-shreyas-kumar)"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"shreytheshreyas"},"content":"---"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"shreytheshreyas"},"content":"## **Introduction - Welcome to Ez Manager!**"},{"lineNumber":27,"author":{"gitId":"shreytheshreyas"},"content":"The Ez Manager command line application is designed to help you get more done as a Software Engineering Project Manager. Organize your projects, keep track of team members and analyze the tasks pertaining to your projects."},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"shreytheshreyas"},"content":"This guide is designed to help you understand the inner workings of Ez Manager from the first steps of setting up the project to the high-level application structures and even the sequence of operations when a command is triggered."},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"Let us hit the ground running with the next section about setting up!"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"shreytheshreyas"},"content":"---"},{"lineNumber":34,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":35,"author":{"gitId":"shreytheshreyas"},"content":"## **Setting Up** "},{"lineNumber":36,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":37,"author":{"gitId":"shreytheshreyas"},"content":"### **Prerequisites**"},{"lineNumber":38,"author":{"gitId":"-"},"content":"1. Java Development Kit (JDK) version 11 and above. [Here](https://docs.oracle.com/en/java/javase/11/install/overview-jdk-installation.html#GUID-8677A77F-231A-40F7-98B9-1FD0B48C346A) is an installation guide for JDK 11."},{"lineNumber":39,"author":{"gitId":"-"},"content":"2. The Intellij Intergrated Development Environment (IDE). [Here](https://www.jetbrains.com/help/idea/installation-guide.html) is an installation guidefor Intellij."},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"shreytheshreyas"},"content":"### **Setting up the project on your computer**"},{"lineNumber":42,"author":{"gitId":"shreytheshreyas"},"content":"1. Fork this [repo](https://github.com/AY2021S1-CS2113T-T09-1/tp), and clone the fork to your computer"},{"lineNumber":43,"author":{"gitId":"-"},"content":"2. Open IntelliJ (if you are not in the welcome screen, click `File \u003e Close Project` to close the existing project dialog first)"},{"lineNumber":44,"author":{"gitId":"-"},"content":"3. Set up the correct JDK version for Gradle"},{"lineNumber":45,"author":{"gitId":"shreytheshreyas"},"content":"    * Go to `File \u003e Project Structure`, then select Project and ensure that the Project SDK is Java 11."},{"lineNumber":46,"author":{"gitId":"shreytheshreyas"},"content":"    * Else, click `New...` and find the directory of the JDK"},{"lineNumber":47,"author":{"gitId":"-"},"content":"4. Click `Import Project`"},{"lineNumber":48,"author":{"gitId":"shreytheshreyas"},"content":"5. Locate the `build.gradle` file and select it. Click `OK`"},{"lineNumber":49,"author":{"gitId":"-"},"content":"6. Click `Open as Project`"},{"lineNumber":50,"author":{"gitId":"-"},"content":"7. Click `OK` to accept the default settings"},{"lineNumber":51,"author":{"gitId":"-"},"content":"8. After the importing is complete, verify that the project is working, locate the `src/main/java/seedu/duke/Duke.javafile`, right-click it, and choose `Run Duke.main()`. "},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"If the setup is correct, you should see the welcome screen and greeting."},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"shreytheshreyas"},"content":"PDF developer guide available [here](https://we.tl/t-UkcnzA4i8P) (NEED TO UPDATE THIS)"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"shreytheshreyas"},"content":"---"},{"lineNumber":58,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":59,"author":{"gitId":"shreytheshreyas"},"content":"## **Design (Sean Tan)**"},{"lineNumber":60,"author":{"gitId":"shreytheshreyas"},"content":"Developers are welcome to contribute by submitting issues or pull requests on our repository. The design section is a good place to start learning about Ez Manager’s architecture and various components. Most developers will contribute to the app mainly through addition of new user commands. The section “Addition of new commands” will provide a step-by-step walkthrough to ensure new commands follow the overall architecture. Figure 2 below shows the overall class diagram for EZ Manager.  "},{"lineNumber":61,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":62,"author":{"gitId":"shreytheshreyas"},"content":"\u003ccenter\u003e\u003cimg src \u003d \"https://i.ibb.co/92p7mtp/Figure2.png\"\u003e\u003c/center\u003e"},{"lineNumber":63,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":64,"author":{"gitId":"shreytheshreyas"},"content":"### **Consideration (Sean Tan)**"},{"lineNumber":65,"author":{"gitId":"thatseant"},"content":"Eazy was developed via a breadth first iterative approach with new commands progressively added. An n-tier architecture ensured separation of concern between various layers of the architecture but much of the program’s logic remained in the Command classes. This design architecture ensured minimal changes to the codebase when new commands were added. Often, new commands or feature addition required changes to only a single data class and addition of a new independent command class. "},{"lineNumber":66,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":67,"author":{"gitId":"thatseant"},"content":"### **Overall Architecture (Sean Tan)**"},{"lineNumber":68,"author":{"gitId":"shreytheshreyas"},"content":"Ez Manager consists of 4 main layers:  "},{"lineNumber":69,"author":{"gitId":"thatseant"},"content":"* Ui: Handles the output of the app "},{"lineNumber":70,"author":{"gitId":"thatseant"},"content":"* Logic: Command parser and executor "},{"lineNumber":71,"author":{"gitId":"thatseant"},"content":"* Model: Data classes "},{"lineNumber":72,"author":{"gitId":"thatseant"},"content":"* Storage: Handles the saving and loading of data to the hard disk "},{"lineNumber":73,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":74,"author":{"gitId":"shreytheshreyas"},"content":"The Ui and Storage layer contains a single class. The model layer contained a member, a task and a project class and the logic layer contained a single parser class and various command classes. Functionality was exposed directly through these command classes, eliminating the need for redundant classes with few methods. In a small app like Ez Manager, this enhanced code maintainability and readability. "},{"lineNumber":75,"author":{"gitId":"thatseant"},"content":" "},{"lineNumber":76,"author":{"gitId":"thatseant"},"content":"Now, we will delve into more detail about each component. "},{"lineNumber":77,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":78,"author":{"gitId":"shreytheshreyas"},"content":"### **UI Component (Riaz Ahamed)**"},{"lineNumber":79,"author":{"gitId":"thatseant"},"content":"API: Ui.java "},{"lineNumber":80,"author":{"gitId":"thatseant"},"content":"Introduction: "},{"lineNumber":81,"author":{"gitId":"thatseant"},"content":"The Ui.java is a class made up of various acknowledgement messages to be displayed after the user inputs a command. "},{"lineNumber":82,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":83,"author":{"gitId":"thatseant"},"content":"Abstraction: "},{"lineNumber":84,"author":{"gitId":"thatseant"},"content":"Every message in the class is stored as a String and it is abstracted to a method. This method is called after the execution of a command.  "},{"lineNumber":85,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":86,"author":{"gitId":"thatseant"},"content":"Access: "},{"lineNumber":87,"author":{"gitId":"thatseant"},"content":"Every method in the Ui class is a static method. Hence, every command class calls the appropriate static methods directly from the Ui class. "},{"lineNumber":88,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":89,"author":{"gitId":"shreytheshreyas"},"content":"### **Logic Component (Sean Tan)**"},{"lineNumber":90,"author":{"gitId":"shreytheshreyas"},"content":"As user commands follow a fixed format, a generic parser can extract command types and parameters for all commands. This is handled by the parser class. The parser then passes the extracted values to specific command classes. Below are the workings of the Parser and Commands. "},{"lineNumber":91,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":92,"author":{"gitId":"thatseant"},"content":"**Parser**"},{"lineNumber":93,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":94,"author":{"gitId":"thatseant"},"content":"User inputs are passed to the static parse method of the parser class. The parser then calls instances of command classes for command execution. The following are handled by the parser. "},{"lineNumber":95,"author":{"gitId":"thatseant"},"content":"* Command type is extracted and used to determine which command class is called for command execution.  "},{"lineNumber":96,"author":{"gitId":"thatseant"},"content":"* Command parameters are extracted using a regex and stored in a hashmap. This hashmap is passed to the command class.  "},{"lineNumber":97,"author":{"gitId":"thatseant"},"content":"    * Extracting parameters using a regex allows for parameters to be specified in any sequence."},{"lineNumber":98,"author":{"gitId":"thatseant"},"content":"    * The regex splits the parameters into groups of parameter TYPE/VALUE."},{"lineNumber":99,"author":{"gitId":"thatseant"},"content":"    * To recognise the boundaries of each group, and to prevent capturing of the next group, it includes a positive look-ahead of the next group."},{"lineNumber":100,"author":{"gitId":"thatseant"},"content":"* A projectIndex pointer keeps track of the view the user is currently in.  "},{"lineNumber":101,"author":{"gitId":"thatseant"},"content":"    * If the user is in a project view, this allows the parser to know which project the task to be manipulated is in.  "},{"lineNumber":102,"author":{"gitId":"thatseant"},"content":"    * If the user is in the home view, this allows the parser to know that projects are to be manipulated instead. "},{"lineNumber":103,"author":{"gitId":"thatseant"},"content":"    * This pointer is passed to the command class. "},{"lineNumber":104,"author":{"gitId":"thatseant"},"content":" "},{"lineNumber":105,"author":{"gitId":"thatseant"},"content":"**Commands** "},{"lineNumber":106,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":107,"author":{"gitId":"thatseant"},"content":"Each command class represents a specific user command. The bulk of the program’s logic resides here. It manipulates data objects (model layer) and tasks the Ui to display output. The following is a more specific description of command classes. "},{"lineNumber":108,"author":{"gitId":"thatseant"},"content":"* The constructor extracts individual command parameters from the HashMap given to it from the parser. "},{"lineNumber":109,"author":{"gitId":"thatseant"},"content":"* From main(), executeCommand method is called which passes these parameters to methods in the model layer, which manipulates data objects. "},{"lineNumber":110,"author":{"gitId":"thatseant"},"content":"* ExecuteCommand also calls methods in the Ui to display output messages to the user. "},{"lineNumber":111,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":112,"author":{"gitId":"shreytheshreyas"},"content":"### **Model Component (Samuel Leow)**"},{"lineNumber":113,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":114,"author":{"gitId":"shreytheshreyas"},"content":"The model component is to provide you with a conceptual understanding of how the data is stored in Ez Manager. Ez Manager has three classes which store data, the Project class, the Task class and the Team Member class. This section will explain how each of these classes interact with one another. The diagram below shows the attributes associated with each of the objects. "},{"lineNumber":115,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":116,"author":{"gitId":"shreytheshreyas"},"content":"\u003ccenter\u003e\u003cimg src\u003d\"https://i.ibb.co/QYVtfRv/model-Componentdiagram.png\"\u003e\u003c/center\u003e"},{"lineNumber":117,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":118,"author":{"gitId":"shreytheshreyas"},"content":"Whenever a project, task or team member is created, an instance of Project, Task and TeamMember is also created. These instances are stored in array lists of projects, tasks and teamMembers respectively when the Parser class processes the user input. "},{"lineNumber":119,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":120,"author":{"gitId":"shreytheshreyas"},"content":"### **Storage Component (Samuel Paul Christopher)**"},{"lineNumber":121,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":122,"author":{"gitId":"shreytheshreyas"},"content":"This is section will explain how Ez Manager ensures that the data in the application persists after each session has been terminated (with the bye command). Figure 3 outlines the responsibility of the Storage component for loading and storing the data during the lifecycle of the application. "},{"lineNumber":123,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":124,"author":{"gitId":"shreytheshreyas"},"content":"\u003ccenter\u003e\u003cimg src\u003d\"https://i.ibb.co/5c8vH3T/Figure3.png\"\u003e\u003c/center\u003e"},{"lineNumber":125,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":126,"author":{"gitId":"shreytheshreyas"},"content":"More specifically, Figure 4 shows us how the text file would look like when it is populated. In the load method of Storage that is called at the beginning of each application, the first thing that is recalled are the team members that are part of the overall organization that is being managed by Ez Manager.  "},{"lineNumber":127,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":128,"author":{"gitId":"shreytheshreyas"},"content":"\u003ccenter\u003e\u003cimg src\u003d\"https://i.ibb.co/qnHLWR0/Figure4.png\" alt\u003d\"Figure4\" border\u003d\"0\"\u003e\u003c/center\u003e"},{"lineNumber":129,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":130,"author":{"gitId":"thatseant"},"content":"Once the team members are in, the load method registers the projects. Each project is stored in a block that starts with “Project ProjectNameHere” so in Figure 4, the project is project “how are you”. Data pertaining to the project, which includes, the project’s status (whether it is done or not), the project description all the way to the tasks and members associated with the project can be extracted from here and loaded into the current instance of the application. That completes the loading process. "},{"lineNumber":131,"author":{"gitId":"thatseant"},"content":" "},{"lineNumber":132,"author":{"gitId":"thatseant"},"content":"Once the loading process is over, the application proceeds to its normal operation where it receives input from you and responds accordingly. The next important part is when you input the exit command “bye” once this is triggered, before the application terminates, we call the save method. "},{"lineNumber":133,"author":{"gitId":"thatseant"},"content":" "},{"lineNumber":134,"author":{"gitId":"thatseant"},"content":"The save method from the Storage component clears the ezmanager.txt file and then populates it with the current data using the saveFormat function (available in the Project, Task and TeamMember) to ensure that the formatting is consistent with EZ Manager’s saving convention. Once this step is done, you can be assured that your data has been saved.  "},{"lineNumber":135,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":136,"author":{"gitId":"shreytheshreyas"},"content":"---"},{"lineNumber":137,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":138,"author":{"gitId":"shreytheshreyas"},"content":"## **Implementation**"},{"lineNumber":139,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":140,"author":{"gitId":"shreytheshreyas"},"content":"## **Views**"},{"lineNumber":141,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":142,"author":{"gitId":"shreytheshreyas"},"content":"### **Home View (Samuel Leow)**"},{"lineNumber":143,"author":{"gitId":"shreytheshreyas"},"content":"The home view mechanism is facilitated by Ui.homeViewMessage() method. This feature will be executed automatically whenever EZ Manager is booted up, or when “list” command is called. Below is an example of the display of Home-View"},{"lineNumber":144,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":145,"author":{"gitId":"shreytheshreyas"},"content":"\u003ccenter\u003e\u003cimg src\u003d\"https://i.ibb.co/L6GvCdg/Figure5-1.png\"\u003e\u003c/center\u003e"},{"lineNumber":146,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":147,"author":{"gitId":"shreytheshreyas"},"content":"Given below is the scenario of how the mechanism behaves at each step when the program is booted up and when “list” command is called. "},{"lineNumber":148,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":149,"author":{"gitId":"shreytheshreyas"},"content":"Step 1: The user launches Ez Manager for the first time and the Home-View display will be shown. The list of projects, the list of members and other details will be loaded from the hard disk. The state of the program will be set to Home-View by default. "},{"lineNumber":150,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":151,"author":{"gitId":"shreytheshreyas"},"content":"\u003ccenter\u003e\u003cimg src\u003d\"https://i.ibb.co/84KCTMB/Figure5-2.png\"\u003e\u003c/center\u003e"},{"lineNumber":152,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":153,"author":{"gitId":"shreytheshreyas"},"content":"Step 2: The user executes project n/ Developer Guide command to add a new project, followed by deadline p/3 d/2020-10-23 (assuming there is a total of 3 projects) to add a new deadline to the new project.  "},{"lineNumber":154,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":155,"author":{"gitId":"shreytheshreyas"},"content":"Step 3: The user now decides to display the Home View to have an overview of all his projects. The display command will call HomeViewCommand(), which will execute the command with executeCommand(), which takes in projects ArrayList and teamMembers ArrayList and storage. "},{"lineNumber":156,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":157,"author":{"gitId":"shreytheshreyas"},"content":"**Note:** This step applies for the addition of the other features such as Deadline, Members, Description and Priority. Whenever a new information is added, and when the HomeViewCommand() is called, it will generate the display according to the information that is available in the program. If a particular information is empty, a dash symbol will be used instead. "},{"lineNumber":158,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":159,"author":{"gitId":"shreytheshreyas"},"content":"The following sequence diagrams shows how the “Home View” command works in both scenarios: "},{"lineNumber":160,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":161,"author":{"gitId":"shreytheshreyas"},"content":"Scenario 1 (Ez Manager start up): "},{"lineNumber":162,"author":{"gitId":"shreytheshreyas"},"content":"\u003ccenter\u003e\u003cimg src\u003d\"https://i.ibb.co/pJPjSxX/Figure5-3.png\"\u003e\u003c/center\u003e"},{"lineNumber":163,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":164,"author":{"gitId":"shreytheshreyas"},"content":"Scenario 2 (display command): "},{"lineNumber":165,"author":{"gitId":"shreytheshreyas"},"content":"\u003ccenter\u003e\u003cimg src\u003d\"https://i.ibb.co/0VMf92d/Home-View-SD2.png\"\u003e\u003c/center\u003e"},{"lineNumber":166,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":167,"author":{"gitId":"shreytheshreyas"},"content":"### **Project View (Samuel Paul Christopher)**"},{"lineNumber":168,"author":{"gitId":"shreytheshreyas"},"content":"The project view mechanism is facilitated by Ui.projectViewMessage() method, which takes in an argument of type Project. The project view is displayed when a user uses the “select” command to select a particular project to get more details on the project. Figure 5.1 is an example of the output of Project View. Note, if the fields are blank, a dash symbol would be used to indicate that there is no data about that field. "},{"lineNumber":169,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":170,"author":{"gitId":"shreytheshreyas"},"content":"\u003ccenter\u003e\u003cimg src\u003d\"https://i.ibb.co/gg3y8xw/Figure6-1.png\" \u003e\u003c/center\u003e"},{"lineNumber":171,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":172,"author":{"gitId":"shreytheshreyas"},"content":"For the command to work, the user needs to have previously selected a project. "},{"lineNumber":173,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":174,"author":{"gitId":"shreytheshreyas"},"content":"Given below is an example usage scenario and how the Project View mechanism behaves at each step. "},{"lineNumber":175,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":176,"author":{"gitId":"shreytheshreyas"},"content":"Step 1: As shown in figure 6.2, the user launches EZ Manager for the first time. The user will be in the home view by default which has been initialized with the previously entered projects and team members data."},{"lineNumber":177,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":178,"author":{"gitId":"shreytheshreyas"},"content":"\u003ccenter\u003e\u003cimg src\u003d\"https://i.ibb.co/3fYN3cS/Figure6-2.png\"\u003e\u003c/center\u003e"},{"lineNumber":179,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":180,"author":{"gitId":"shreytheshreyas"},"content":"Step 2: As shown in Figure 6.3, the user switches to Project View by selecting an existing Project using select p/index. If no such project exists, the user must create the project using project n/name before selecting. This sets the projectIndex variable to be the index of the project in the Projects List.   "},{"lineNumber":181,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":182,"author":{"gitId":"shreytheshreyas"},"content":"\u003ccenter\u003e\u003cimg src\u003d\"https://i.ibb.co/xFQgxTs/Figure6-3.png\"\u003e\u003c/center\u003e"},{"lineNumber":183,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":184,"author":{"gitId":"shreytheshreyas"},"content":"Once this step is done, the Project View will be displayed as in Figure 6.1.  "},{"lineNumber":185,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":186,"author":{"gitId":"shreytheshreyas"},"content":"The Figure 6.4 sequence diagram shows how the Project-View is displayed through the project select command. The ellipses have been used for brevity to show that other different data about the project and task will be obtained from getters. For example, in the image below only shows that the status of the task is involved but other aspects of the tasks will also be needed like the task description and the team members who are involved in the task. "},{"lineNumber":187,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":188,"author":{"gitId":"shreytheshreyas"},"content":"\u003ccenter\u003e\u003cimg src\u003d\"https://i.ibb.co/zhCFK65/Project-View-SD.png\"\u003e\u003c/center\u003e"},{"lineNumber":189,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":190,"author":{"gitId":"shreytheshreyas"},"content":"### **Home Command (Riaz Ahamed)**"},{"lineNumber":191,"author":{"gitId":"shreytheshreyas"},"content":"This section will explain the usages of the home command and how it affects the states of the app. "},{"lineNumber":192,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":193,"author":{"gitId":"shreytheshreyas"},"content":"The home command is facilitated by the HomeCommand class and it allows the user to switch from one states of the program to the other but not vice versa. The 2 states of the program are as follows: "},{"lineNumber":194,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":195,"author":{"gitId":"shreytheshreyas"},"content":"* Home-View "},{"lineNumber":196,"author":{"gitId":"shreytheshreyas"},"content":"* Project-View "},{"lineNumber":197,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":198,"author":{"gitId":"shreytheshreyas"},"content":"The home command is executed when the executeCommand method is called in the main Duke class. The command then switches the state of the program from the Project-View to the Home-View but not the other way around. "},{"lineNumber":199,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":200,"author":{"gitId":"shreytheshreyas"},"content":"Step 1: The user launches the application. The application initializes with the Home-View state on startup. "},{"lineNumber":201,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":202,"author":{"gitId":"shreytheshreyas"},"content":"\u003ccenter\u003e\u003cimg src\u003d\"https://i.ibb.co/cvB2hNX/Figure7-1.png\"\u003e\u003c/center\u003e"},{"lineNumber":203,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":204,"author":{"gitId":"shreytheshreyas"},"content":"Step 2: The user creates a new project with the project command.  "},{"lineNumber":205,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":206,"author":{"gitId":"shreytheshreyas"},"content":"Step 3: The user selects the project with the select command. At this instance, the app state switches from Home-View to Project View. "},{"lineNumber":207,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":208,"author":{"gitId":"shreytheshreyas"},"content":"\u003ccenter\u003e\u003cimg src\u003d\"https://i.ibb.co/ggFvm9n/Figure7-2.png\"\u003e\u003c/center\u003e"},{"lineNumber":209,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":210,"author":{"gitId":"shreytheshreyas"},"content":"Step 4: The user switches back to the Home-View with the home command. "},{"lineNumber":211,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":212,"author":{"gitId":"shreytheshreyas"},"content":"\u003ccenter\u003e\u003cimg src\u003d\"https://i.ibb.co/9rh7ft1/Figure7-3.png\"\u003e\u003c/center\u003e"},{"lineNumber":213,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":214,"author":{"gitId":"shreytheshreyas"},"content":"---"},{"lineNumber":215,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":216,"author":{"gitId":"shreytheshreyas"},"content":"## **Project Features**"},{"lineNumber":217,"author":{"gitId":"shreytheshreyas"},"content":"### **Adding a new project (Riaz Ahamed)**"},{"lineNumber":218,"author":{"gitId":"thatseant"},"content":"This section will explain the creation of new projects and how the objects interact with each other. "},{"lineNumber":219,"author":{"gitId":"thatseant"},"content":"The user can create new projects to be added to the list of projects with the project command. "},{"lineNumber":220,"author":{"gitId":"thatseant"},"content":"This command is facilitated with the help of the ProjectCommand class. An instance of the ProjectCommand class will have the following properties: "},{"lineNumber":221,"author":{"gitId":"thatseant"},"content":"* tasks: An array list of tasks "},{"lineNumber":222,"author":{"gitId":"thatseant"},"content":"* members: An array list of members "},{"lineNumber":223,"author":{"gitId":"thatseant"},"content":"* projectName: The name of the project as a String object "},{"lineNumber":224,"author":{"gitId":"thatseant"},"content":"*projectDescription: The description of the project as a String object "},{"lineNumber":225,"author":{"gitId":"shreytheshreyas"},"content":"projectDeadline: The deadline of the project as a Local Date object."},{"lineNumber":226,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":227,"author":{"gitId":"shreytheshreyas"},"content":"Step 1: The user types the project command followed by the name of the project e.g. `project n/Project One`. The main Duke class will call the Parser class. "},{"lineNumber":228,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":229,"author":{"gitId":"shreytheshreyas"},"content":"Step 2: The Parser class will check which state the app is in and will "},{"lineNumber":230,"author":{"gitId":"shreytheshreyas"},"content":"then call the appropriate class constructor. In this case, the Parser will call the ProjectCommand constructor. The ProjectCommand constructor will also check for the validity of the user’s input. "},{"lineNumber":231,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":232,"author":{"gitId":"shreytheshreyas"},"content":"Step 3: The Parser class will then initialize a new instance of the ProjectCommand constructor with the project name “Project One” and return it back to the main Duke class. "},{"lineNumber":233,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":234,"author":{"gitId":"shreytheshreyas"},"content":"Step 4: The Duke class will call the executeCommand function from the returned instance which will execute the command. "},{"lineNumber":235,"author":{"gitId":"shreytheshreyas"},"content":"* The executeCommand function will create a new Project instance "},{"lineNumber":236,"author":{"gitId":"shreytheshreyas"},"content":"* It will then add that instance to the static projects list.  "},{"lineNumber":237,"author":{"gitId":"shreytheshreyas"},"content":"*  Lastly, it will call the printProjectCreated method from the Ui class and return it to the main Duke class. "},{"lineNumber":238,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":239,"author":{"gitId":"shreytheshreyas"},"content":"Step 5: The Duke class will then receive the acknowledgement message and display it to the user in the terminal. "},{"lineNumber":240,"author":{"gitId":"shreytheshreyas"},"content":"The above is illustrated below in a sequence diagram. The sequence diagram will only encompass the sequence in the executeCommand function. "},{"lineNumber":241,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":242,"author":{"gitId":"shreytheshreyas"},"content":"The above is illustrated below in a sequence diagram. The sequence diagram will only encompass the sequence in the executeCommand function. "},{"lineNumber":243,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":244,"author":{"gitId":"shreytheshreyas"},"content":"\u003ccenter\u003e\u003cimg src\u003d\"https://i.ibb.co/xG48W0g/Figure8.png\" \u003e\u003c/center\u003e"},{"lineNumber":245,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":246,"author":{"gitId":"shreytheshreyas"},"content":"### **Deleting a project (Samuel Leow)**"},{"lineNumber":247,"author":{"gitId":"shreytheshreyas"},"content":"This section will explain the deletion of a specified project and how the objects interact with each other. "},{"lineNumber":248,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":249,"author":{"gitId":"shreytheshreyas"},"content":"The user can delete a specified project with the delete command. "},{"lineNumber":250,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":251,"author":{"gitId":"shreytheshreyas"},"content":"This command is facilitated with the help of the ProjectDeleteCommand class. An instance of the ProjectDeleteCommand class will have the following properties: "},{"lineNumber":252,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":253,"author":{"gitId":"shreytheshreyas"},"content":"projectIndex: The index of the project as an Integer "},{"lineNumber":254,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":255,"author":{"gitId":"shreytheshreyas"},"content":"Step 1: The user executes project n/Project One command to create a new project, and the current state of the app is Home View. "},{"lineNumber":256,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":257,"author":{"gitId":"shreytheshreyas"},"content":"\u003ccenter\u003e\u003cimg src\u003d\"https://i.ibb.co/HC7yZhc/Figure9-1.png\"\u003e\u003c/center\u003e"},{"lineNumber":258,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":259,"author":{"gitId":"shreytheshreyas"},"content":"Step 2: The user now decides that adding the project was a mistake and decides to delete that project by executing the `delete p/1` command. The delete command will call ProjectDeleteCommand() which will execute the command with executeCommand(). printProjectDeleteMessage() from the UI class will be returned and printed. "},{"lineNumber":260,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":261,"author":{"gitId":"shreytheshreyas"},"content":"The following sequence diagram shows how the project delete command works: "},{"lineNumber":262,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":263,"author":{"gitId":"shreytheshreyas"},"content":"\u003ccenter\u003e\u003cimg src\u003d\"https://i.ibb.co/3CFDS75/Figure9-2.png\"\u003e\u003c/center\u003e"},{"lineNumber":264,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":265,"author":{"gitId":"shreytheshreyas"},"content":"### **Adding a deadline to a project (Samuel Leow)**"},{"lineNumber":266,"author":{"gitId":"shreytheshreyas"},"content":"This section will explain the addition of a deadline to a specified project and how the objects interact with each other. "},{"lineNumber":267,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":268,"author":{"gitId":"shreytheshreyas"},"content":"The user can add a deadline to a specified project with the deadline command. "},{"lineNumber":269,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":270,"author":{"gitId":"shreytheshreyas"},"content":"This command is facilitated with the help of the ProjectDeadlineCommand class. An instance of the ProjectDeadlineCommand class will have the following properties: "},{"lineNumber":271,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":272,"author":{"gitId":"shreytheshreyas"},"content":"* projectDeadline: The deadline of the project entered by the user stored as a LocalDate "},{"lineNumber":273,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":274,"author":{"gitId":"shreytheshreyas"},"content":"* projectIndex: The index of the project as an Integer "},{"lineNumber":275,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":276,"author":{"gitId":"shreytheshreyas"},"content":"Step 1: The user executes `project n/Project One` command to create a new project, and the current state of the app is Home View. "},{"lineNumber":277,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":278,"author":{"gitId":"shreytheshreyas"},"content":"\u003ccenter\u003e\u003cimg src\u003d\"https://i.ibb.co/br6DKf4/Figure10-1.png\"\u003e\u003c/center\u003e"},{"lineNumber":279,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":280,"author":{"gitId":"shreytheshreyas"},"content":"Step 2: The user types the deadline command followed by the index of the project then the deadline of the project e.g. `deadline p/1 d/2020-12-12`. The deadline command will call ProjectDeadlineCommand() which will execute the command with executeCommand(). printProjectDeadlineAddedMessage() from the UI class will be returned and printed. "},{"lineNumber":281,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":282,"author":{"gitId":"shreytheshreyas"},"content":"The following sequence diagram shows how the project deadline command works: "},{"lineNumber":283,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":284,"author":{"gitId":"shreytheshreyas"},"content":"\u003ccenter\u003e\u003cimg src\u003d\"https://i.ibb.co/N9Cr3h6/Figure10-2.png\"\u003e\u003c/center\u003e"},{"lineNumber":285,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":286,"author":{"gitId":"shreytheshreyas"},"content":"### **Adding a project description (Samuel Leow)** "},{"lineNumber":287,"author":{"gitId":"shreytheshreyas"},"content":"This section will explain the addition of project description to a specified project and how the objects interact with each other. "},{"lineNumber":288,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":289,"author":{"gitId":"shreytheshreyas"},"content":"The user can add a project description to a specified project with the description command. "},{"lineNumber":290,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":291,"author":{"gitId":"shreytheshreyas"},"content":"This command is facilitated with the help of the ProjectDescriptionCommand class. An instance of the ProjectDescriptionCommand class will have the following properties: "},{"lineNumber":292,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":293,"author":{"gitId":"shreytheshreyas"},"content":"* projectDescription: The description of the project entered by the user stored as a String "},{"lineNumber":294,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":295,"author":{"gitId":"shreytheshreyas"},"content":"* projectIndex: The index of the project as an Integer "},{"lineNumber":296,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":297,"author":{"gitId":"shreytheshreyas"},"content":"Step 1: The user executes `project n/Project One` command to create a new project, followed by select p/1 to enter Project One, which at this instance, switches the app state from Home View to Project View. "},{"lineNumber":298,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":299,"author":{"gitId":"shreytheshreyas"},"content":"\u003ccenter\u003e\u003cimg src\u003d\"https://i.ibb.co/tsx27Yw/Figure11-1.png\"\u003e\u003c/center\u003e"},{"lineNumber":300,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":301,"author":{"gitId":"shreytheshreyas"},"content":"Step 2: The user types the description command followed by the index of the project then the description of the project e.g. `description p/1 d/Submission` of User Guide. The description command will call ProjectDescriptionCommand() which will execute the command with executeCommand(). printProjectDescriptionAddedMessage() from the UI class will be returned and printed. "},{"lineNumber":302,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":303,"author":{"gitId":"shreytheshreyas"},"content":"The following sequence diagram shows how the project description command works: "},{"lineNumber":304,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":305,"author":{"gitId":"shreytheshreyas"},"content":"\u003ccenter\u003e\u003cimg src\u003d\"https://i.ibb.co/FnK6xqD/Figure11-2.png\"\u003e\u003c/center\u003e"},{"lineNumber":306,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":307,"author":{"gitId":"shreytheshreyas"},"content":"### **Marking a project as done (Samuel Leow)**"},{"lineNumber":308,"author":{"gitId":"shreytheshreyas"},"content":"This section will explain the mark of a specified project as done and how the objects interact with each other. "},{"lineNumber":309,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":310,"author":{"gitId":"shreytheshreyas"},"content":"The user can mark a specified project as done with the done command. "},{"lineNumber":311,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":312,"author":{"gitId":"shreytheshreyas"},"content":"This command is facilitated with the help of the ProjectDoneCommand class. An instance of the ProjectDoneCommand class will have the following properties: "},{"lineNumber":313,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":314,"author":{"gitId":"shreytheshreyas"},"content":"* projectIndex: The index of the project as an Integer "},{"lineNumber":315,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":316,"author":{"gitId":"shreytheshreyas"},"content":"Step 1: The user executes `project n/Project One` command to create a new project, and the current state of the app is Home View. "},{"lineNumber":317,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":318,"author":{"gitId":"shreytheshreyas"},"content":"\u003ccenter\u003e\u003cimg src\u003d\"https://i.ibb.co/pzysmyc/Figure12-1.png\"\u003e\u003c/center\u003e"},{"lineNumber":319,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":320,"author":{"gitId":"shreytheshreyas"},"content":"Step 2: After some time, the user would have completed the project and now decides to mark the project as done by executing `done p/1` command. The done command will call ProjectDoneCommand() which will execute the command with executeCommand(). printProjectDoneMessage() from the UI class will be returned and printed. "},{"lineNumber":321,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":322,"author":{"gitId":"shreytheshreyas"},"content":"The following sequence diagram shows how the project done command works: "},{"lineNumber":323,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":324,"author":{"gitId":"shreytheshreyas"},"content":"\u003ccenter\u003e\u003cimg src\u003d\"https://i.ibb.co/NSDGbkL/Figure12-2.png\"\u003e\u003c/center\u003e"},{"lineNumber":325,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":326,"author":{"gitId":"shreytheshreyas"},"content":"### **Selecting an existing project (Riaz Ahamed)**"},{"lineNumber":327,"author":{"gitId":"shreytheshreyas"},"content":"This section will explain the selection of existing projects and how the objects interact with each other. "},{"lineNumber":328,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":329,"author":{"gitId":"shreytheshreyas"},"content":"The user can select existing projects from the list of projects with the select command. "},{"lineNumber":330,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":331,"author":{"gitId":"shreytheshreyas"},"content":"This command is facilitated with the help of the ProjectSelectCommand class. An instance of the ProjectSelectCommand class will have the following properties: "},{"lineNumber":332,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":333,"author":{"gitId":"shreytheshreyas"},"content":"projectIndex: The index of the project as an Integer "},{"lineNumber":334,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":335,"author":{"gitId":"shreytheshreyas"},"content":"Step 1: The user types the select command followed by the index of the project e.g. `select p/1`.  The main Duke class will call the Parser class. "},{"lineNumber":336,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":337,"author":{"gitId":"shreytheshreyas"},"content":"Step 2: The Parser class will check which state the app is in and will then call the appropriate class constructor. In this case, the Parser will call the ProjectSelectCommand constructor. The ProjectSelectCommand constructor will also check for the validity of the user’s input. The constraints of the input are as follows "},{"lineNumber":338,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":339,"author":{"gitId":"shreytheshreyas"},"content":"* Not a number "},{"lineNumber":340,"author":{"gitId":"shreytheshreyas"},"content":"* Not a positive number "},{"lineNumber":341,"author":{"gitId":"shreytheshreyas"},"content":"* An index of a project that does not exist "},{"lineNumber":342,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":343,"author":{"gitId":"shreytheshreyas"},"content":"Step 3: The Parser class will then initialize a new instance of the ProjectSelectCommand constructor with the projectIndex as “1” and return it back to the main Duke class. "},{"lineNumber":344,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":345,"author":{"gitId":"shreytheshreyas"},"content":"Step 4: The Duke class will call the executeCommand function from the returned instance which will execute the command. "},{"lineNumber":346,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":347,"author":{"gitId":"shreytheshreyas"},"content":"* The executeCommand function will get the instance of the Project from the static projects list using the projectIndex.  "},{"lineNumber":348,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":349,"author":{"gitId":"shreytheshreyas"},"content":"* It will call the projectSelectedMessage from the Ui class and return it to the main Duke class. "},{"lineNumber":350,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":351,"author":{"gitId":"shreytheshreyas"},"content":"Step 5: The Duke class will then receive the acknowledgement message and display it to the user in the terminal. "},{"lineNumber":352,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":353,"author":{"gitId":"thatseant"},"content":"The above is illustrated below in a sequence diagram. The sequence diagram will only encompass the sequence in the executeCommand function. "},{"lineNumber":354,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":355,"author":{"gitId":"shreytheshreyas"},"content":"\u003ccenter\u003e\u003cimg src\u003d\"https://i.ibb.co/cvHR9Fb/Figure13.png\"\u003e\u003c/center\u003e"},{"lineNumber":356,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":357,"author":{"gitId":"shreytheshreyas"},"content":"---"},{"lineNumber":358,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":359,"author":{"gitId":"shreytheshreyas"},"content":"## **Member-specific Features**"},{"lineNumber":360,"author":{"gitId":"shreytheshreyas"},"content":"### **Add Member (Samuel Paul Christopher)**"},{"lineNumber":361,"author":{"gitId":"shreytheshreyas"},"content":"The add a member task allows you to add a member to the organization. These members can be referenced and assigned to projects or tasks at a later stage. "},{"lineNumber":362,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":363,"author":{"gitId":"shreytheshreyas"},"content":"This can be done using the member command like this: `member m/Member-Name` this will add a member with name “Member Name” to the organization. "},{"lineNumber":364,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":365,"author":{"gitId":"shreytheshreyas"},"content":"\u003ccenter\u003e\u003cimg src\u003d\"https://i.ibb.co/p063cXy/Figure14-1.png\"\u003e\u003c/center\u003e"},{"lineNumber":366,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":367,"author":{"gitId":"shreytheshreyas"},"content":"After adding a member, you should see a friendly message like the one in Figure 6.2 to indicate success. "},{"lineNumber":368,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":369,"author":{"gitId":"shreytheshreyas"},"content":"\u003ccenter\u003e\u003cimg src\u003d\"https://i.ibb.co/pZ97syb/Figure14-2.png\"\u003e\u003c/center\u003e"},{"lineNumber":370,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":371,"author":{"gitId":"shreytheshreyas"},"content":"To view the index of a member, please have a look at the view members command which lists the members that have been added."},{"lineNumber":372,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":373,"author":{"gitId":"shreytheshreyas"},"content":"### **Assigning a member to a project (Samuel Paul Christopher)**"},{"lineNumber":374,"author":{"gitId":"shreytheshreyas"},"content":"The “Assign person to a project” command allows a software manger to specify which member should be associated with which project in the organization. "},{"lineNumber":375,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":376,"author":{"gitId":"shreytheshreyas"},"content":"This command is facilitated with the help of the AssignMemberToProjectCommand class that is present in the commands package. "},{"lineNumber":377,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":378,"author":{"gitId":"shreytheshreyas"},"content":"The command makes use of the teamMembers ArrayList that is present in the Main Class.  "},{"lineNumber":379,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":380,"author":{"gitId":"shreytheshreyas"},"content":"The following examples explains the working of this functionality in the application. "},{"lineNumber":381,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":382,"author":{"gitId":"shreytheshreyas"},"content":"Step 1. When the user first starts up the application, they by default are presented with the home view with an empty list of projects and an empty list of team members.  "},{"lineNumber":383,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":384,"author":{"gitId":"shreytheshreyas"},"content":"\u003ccenter\u003e\u003cimg src\u003d\"https://i.ibb.co/mq6G5Gx/Figure15-1.png\"\u003e\u003c/center\u003e"},{"lineNumber":385,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":386,"author":{"gitId":"shreytheshreyas"},"content":"Step 2. When present in the home view, the user can add members who belong to their respective organization and by default the added team member as no assigned project to their name. This is done by initializing the assingedProjectId whenever an instance of the TeamMember is created. "},{"lineNumber":387,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":388,"author":{"gitId":"shreytheshreyas"},"content":"Step 3. After projects are added to the project ArrayList we can assign a TeamMember to each project using command `assign m/MemberId p/ProjectId`. If a member id or project id specified in the command is invalid the program throws an exception to the user to enter a valid Id. "},{"lineNumber":389,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":390,"author":{"gitId":"shreytheshreyas"},"content":"Step 4. Once a member has been assigned a particular project, the assignedProjectId of the TeamMember object is set to the Id of the project the member is assigned to. "},{"lineNumber":391,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":392,"author":{"gitId":"shreytheshreyas"},"content":"Step 5. Once the members are assigned to respective projects you can view the list of all the members with their assigned projects using the members command. "},{"lineNumber":393,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":394,"author":{"gitId":"shreytheshreyas"},"content":"The following sequence diagram provides a visualization of how this command works. "},{"lineNumber":395,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":396,"author":{"gitId":"shreytheshreyas"},"content":"\u003ccenter\u003e\u003cimg src\u003d\"https://i.ibb.co/YXj60Qp/Figure15-2.png\"\u003e\u003c/center\u003e"},{"lineNumber":397,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":398,"author":{"gitId":"shreytheshreyas"},"content":"### **Assigning a member to a task (Samuel Paul Christopher)**"},{"lineNumber":399,"author":{"gitId":"shreytheshreyas"},"content":"The “Assign person to task” command allows the user to specify a person and a task and assigns the specified person to the specified task.  "},{"lineNumber":400,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":401,"author":{"gitId":"shreytheshreyas"},"content":"The command is facilitated by TeamMemberAssignToTaskCommand(). It extends Command() which executes the command with executeCommand() which takes in 2 parameters, namely projects ArrayList and teamMembers ArrayList. "},{"lineNumber":402,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":403,"author":{"gitId":"shreytheshreyas"},"content":"The command utilizes a state and 3 array lists: "},{"lineNumber":404,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":405,"author":{"gitId":"shreytheshreyas"},"content":"* State: Project View "},{"lineNumber":406,"author":{"gitId":"shreytheshreyas"},"content":"* Array List 1: Projects List "},{"lineNumber":407,"author":{"gitId":"shreytheshreyas"},"content":"* Array List 2: Tasks List "},{"lineNumber":408,"author":{"gitId":"shreytheshreyas"},"content":"* Array List 3: teamMembers List "},{"lineNumber":409,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":410,"author":{"gitId":"shreytheshreyas"},"content":"Given below is an example usage scenario and how the undo/redo mechanism behaves at each step. "},{"lineNumber":411,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":412,"author":{"gitId":"shreytheshreyas"},"content":"Step 1: The user launches the application for the first time. The state of the program will be set to Home View by default. "},{"lineNumber":413,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":414,"author":{"gitId":"shreytheshreyas"},"content":"\u003ccenter\u003e\u003cimg src\u003d\"https://i.ibb.co/fD8r2tF/Figure16-1.png\"\u003e\u003c/center\u003e"},{"lineNumber":415,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":416,"author":{"gitId":"shreytheshreyas"},"content":"Step 2: The user switches to Project View by selecting an existing Project using `select p/index`. If no such project exists, the user must create the project using `project n/name` before selecting. This sets the projectIndex variable to be the index of the project in the Projects List.  "},{"lineNumber":417,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":418,"author":{"gitId":"shreytheshreyas"},"content":"Step 3: After the user has selected the project, the state changes from Home View to Project View "},{"lineNumber":419,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":420,"author":{"gitId":"shreytheshreyas"},"content":"\u003ccenter\u003e\u003cimg src\u003d\"https://i.ibb.co/XZSMc84/Figure16-2.png\"\u003e\u003c/center\u003e"},{"lineNumber":421,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":422,"author":{"gitId":"shreytheshreyas"},"content":"Step 4: The user then requires an existing task and an existing member to assign the member to the task using `assign t/taskIndex m/memberIndex`. If any one of then does not exist, create tasks with `task n/name` and create members with `member n/name`. "},{"lineNumber":423,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":424,"author":{"gitId":"shreytheshreyas"},"content":"Step 5: Once the member has been assigned, the task instance of the specified task will have its teamMember field linked to the specified teamMember instance. "},{"lineNumber":425,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":426,"author":{"gitId":"shreytheshreyas"},"content":"The following sequence diagram shows how the “Assign member to task” command works:"},{"lineNumber":427,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":428,"author":{"gitId":"shreytheshreyas"},"content":"\u003ccenter\u003e\u003cimg src\u003d\"https://i.ibb.co/vdBdtg2/Figure16-3.png\"\u003e\u003c/center\u003e"},{"lineNumber":429,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":430,"author":{"gitId":"thatseant"},"content":"### **Hours Worked By Worker Command (Sean Tan)**"},{"lineNumber":431,"author":{"gitId":"thatseant"},"content":"This command allows project managers to view the total hours worked by a worker "},{"lineNumber":432,"author":{"gitId":"thatseant"},"content":"The logic for this command is primarily written in TeamMemberHoursCommand class. It extends from the abstract Command class. "},{"lineNumber":433,"author":{"gitId":"thatseant"},"content":"The steps below show how such a class is initialized and used to execute the command. "},{"lineNumber":434,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":435,"author":{"gitId":"thatseant"},"content":"Step 1: Parser initializes TeamMemberHoursCommand by passing a hashmap of input parameters together with projectIndex into its constructor. "},{"lineNumber":436,"author":{"gitId":"thatseant"},"content":"Step 2: Parse() method of TeamMemberDeleteCommand extracts the index of the member to be retrieved from the hashmap. "},{"lineNumber":437,"author":{"gitId":"thatseant"},"content":"Step 3: ExecuteCommand() method of TeamMemberDeleteCommand is called by Duke main class, which passes it the program’s arraylist of members. "},{"lineNumber":438,"author":{"gitId":"thatseant"},"content":"* The method getTasks() of the specific member is called which retrieves all the tasks the member was assigned. "},{"lineNumber":439,"author":{"gitId":"thatseant"},"content":"* The method getActual() of each of these tasks is called which retrieves the actual time taken to complete these tasks. "},{"lineNumber":440,"author":{"gitId":"thatseant"},"content":"* The total hours of these tasks are then summed up. "},{"lineNumber":441,"author":{"gitId":"thatseant"},"content":"* The Ui class then prints the total number of hours worked by these workers. "},{"lineNumber":442,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":443,"author":{"gitId":"thatseant"},"content":"The following sequence diagram shows how the “Hours Worked by worker” command works:"},{"lineNumber":444,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":445,"author":{"gitId":"thatseant"},"content":"\u003ccenter\u003e\u003cimg src\u003d\"https://i.ibb.co/7Qms8Hc/hours.png\"\u003e\u003c/center\u003e"},{"lineNumber":446,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":447,"author":{"gitId":"samuellleow"},"content":"### **Removing a member from Home View(Sean Tan)**"},{"lineNumber":448,"author":{"gitId":"samuellleow"},"content":"This command allows project managers to remove members from the main members list in the home view. "},{"lineNumber":449,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":450,"author":{"gitId":"shreytheshreyas"},"content":"The logic for this command is primarily written in TeamMemberDeleteCommand class. It extends from the abstract Command class. "},{"lineNumber":451,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":452,"author":{"gitId":"shreytheshreyas"},"content":"The steps below show how such a class is initialized and used to execute the command. "},{"lineNumber":453,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":454,"author":{"gitId":"shreytheshreyas"},"content":"Step 1: The Parser initializes TeamMemberDeleteCommand by passing a hashmap of input parameters together with memberIndex that was provided by the user using `remove m/1` into its constructor. "},{"lineNumber":455,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":456,"author":{"gitId":"shreytheshreyas"},"content":"Step 2: The Parse() method of the TeamMemberDeleteCommand class extracts the index of the member to be deleted from the parameter hashmap. "},{"lineNumber":457,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":458,"author":{"gitId":"samuellleow"},"content":"Step 3: The ExecuteCommand() method of TeamMemberDeleteCommand class is called by EzManager main class, which passes it the program’s arraylist of members and arraylist of projects."},{"lineNumber":459,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":460,"author":{"gitId":"samuellleow"},"content":"Step 4: TeamMember is removed from the arraylist of TeamMember in the entire program."},{"lineNumber":461,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":462,"author":{"gitId":"samuellleow"},"content":"Step 5: Loop through each project in the arraylist of Project and remove member from the arraylist of TeamMember if it is present."},{"lineNumber":463,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":464,"author":{"gitId":"samuellleow"},"content":"Step 6: While still in the Project, loop through each task in the arrayList of Task in the and remove member from the arraylist of TeamMember from each task if it is present."},{"lineNumber":465,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":466,"author":{"gitId":"shreytheshreyas"},"content":"* The Ui class prints an acknowledgement that the member has been removed. "},{"lineNumber":467,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":468,"author":{"gitId":"samuellleow"},"content":"### **Removing a member from Project View(Samuel Leow)**"},{"lineNumber":469,"author":{"gitId":"samuellleow"},"content":"This command allows project managers to remove members from the project in the project view. "},{"lineNumber":470,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":471,"author":{"gitId":"samuellleow"},"content":"The logic for this command is primarily written in TeamMemberDeleteCommand class. It extends from the abstract Command class. "},{"lineNumber":472,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":473,"author":{"gitId":"samuellleow"},"content":"The steps below show how such a class is initialized and used to execute the command. "},{"lineNumber":474,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":475,"author":{"gitId":"samuellleow"},"content":"Step 1: The Parser initializes TeamMemberDeleteCommand by passing a hashmap of input parameters together with memberIndex that was provided by the user using `remove m/1` into its constructor. "},{"lineNumber":476,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":477,"author":{"gitId":"samuellleow"},"content":"Step 2: The Parse() method of the TeamMemberDeleteCommand class extracts the index of the member to be deleted from the parameter hashmap. "},{"lineNumber":478,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":479,"author":{"gitId":"samuellleow"},"content":"Step 3: The ExecuteCommand() method of TeamMemberDeleteCommand class is called by EzManager main class, which passes it the program’s arraylist of members and arraylist of projects."},{"lineNumber":480,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":481,"author":{"gitId":"samuellleow"},"content":"Step 4: TeamMember is removed from the arraylist of TeamMember in the current project."},{"lineNumber":482,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":483,"author":{"gitId":"samuellleow"},"content":"Step 5: Loop through each task in the arraylist of Task and remove member from the arraylist of TeamMember from each task if it is present."},{"lineNumber":484,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":485,"author":{"gitId":"samuellleow"},"content":"* The Ui class prints an acknowledgement that the member has been removed. "},{"lineNumber":486,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":487,"author":{"gitId":"shreytheshreyas"},"content":"---"},{"lineNumber":488,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":489,"author":{"gitId":"shreytheshreyas"},"content":"## **Task-specific Features**"},{"lineNumber":490,"author":{"gitId":"shreytheshreyas"},"content":"The user enters the following tasks-specific commands when he is in the Project View. As such projectIndex state variable in Parser will point to the project index. "},{"lineNumber":491,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":492,"author":{"gitId":"shreytheshreyas"},"content":"\u003ccenter\u003e\u003cimg src\u003d\"https://i.ibb.co/C7KW0RM/Figure18.png\"\u003e\u003c/center\u003e"},{"lineNumber":493,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":494,"author":{"gitId":"shreytheshreyas"},"content":"### **Creating a task (Shreyas Kumar)**"},{"lineNumber":495,"author":{"gitId":"shreytheshreyas"},"content":"This command allows you to create a task in a selected project. "},{"lineNumber":496,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":497,"author":{"gitId":"shreytheshreyas"},"content":"The logic for this command is written in the TaskCommand class which inherits its general properties from the abstract Command class. "},{"lineNumber":498,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":499,"author":{"gitId":"shreytheshreyas"},"content":"The following states how the functionality is used in the application and how it is implemented: "},{"lineNumber":500,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":501,"author":{"gitId":"shreytheshreyas"},"content":"Step 1: The parser class uses the TaskCommand constructor to initialize a new instance of that class type when the user enter the input `task n/this is a task`. "},{"lineNumber":502,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":503,"author":{"gitId":"shreytheshreyas"},"content":"Step 2: The parse() method in the TaskCommand class extracts the task name for the newly created task. "},{"lineNumber":504,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":505,"author":{"gitId":"shreytheshreyas"},"content":"Step 3: The executeCommand() of the TaskCommand class is called by the main () method of the Duke class which passes the project and team members array list to the respective method. "},{"lineNumber":506,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":507,"author":{"gitId":"shreytheshreyas"},"content":"* The current project is obtained using the project array list and the project index that was passed during the instantiation of the TaskCommand object. "},{"lineNumber":508,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":509,"author":{"gitId":"shreytheshreyas"},"content":"* Now, the method creates a new Task object by passing in the description that was extracted earlier. "},{"lineNumber":510,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":511,"author":{"gitId":"shreytheshreyas"},"content":"* This Task object is then added to the Task array list that is present in that respective project. "},{"lineNumber":512,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":513,"author":{"gitId":"shreytheshreyas"},"content":"* The Ui class then prints an acknowledgement message to let the user know that a task has been created. "},{"lineNumber":514,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":515,"author":{"gitId":"shreytheshreyas"},"content":"The following sequence diagram provides a visualization of how this command works. "},{"lineNumber":516,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":517,"author":{"gitId":"shreytheshreyas"},"content":"\u003ccenter\u003e\u003cimg src\u003d\"https://i.ibb.co/2WshJqq/Figure19.png\"\u003e\u003c/center\u003e"},{"lineNumber":518,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":519,"author":{"gitId":"shreytheshreyas"},"content":"### **Editing an existing task name (Riaz Ahamed)**"},{"lineNumber":520,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":521,"author":{"gitId":"shreytheshreyas"},"content":"This command allows project managers to delete tasks from projects. "},{"lineNumber":522,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":523,"author":{"gitId":"shreytheshreyas"},"content":"The logic for this command is primarily written in TaskEditCommand class. It extends from the abstract Command class. "},{"lineNumber":524,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":525,"author":{"gitId":"shreytheshreyas"},"content":"The steps below show how such a class is initialized and used to execute the command. "},{"lineNumber":526,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":527,"author":{"gitId":"shreytheshreyas"},"content":"Step 1: The Parser initializes TaskEditCommand by passing a hashmap of input parameters from the `edit t/1 n/new task name` command that was entered by the user. "},{"lineNumber":528,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":529,"author":{"gitId":"shreytheshreyas"},"content":"Step 2: The parse() method of TaskEditCommand extracts the task index from the hashmap. "},{"lineNumber":530,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":531,"author":{"gitId":"shreytheshreyas"},"content":"Step 3: The executeCommand() method of TaskEditCommand is called by Duke main class, which passes it the program’s arraylist of projects. "},{"lineNumber":532,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":533,"author":{"gitId":"shreytheshreyas"},"content":"* Existing project is retrieved from the arraylist of projects using projectIndex. "},{"lineNumber":534,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":535,"author":{"gitId":"shreytheshreyas"},"content":"* The method editTaskDescription() of the project is called with taskIndex. "},{"lineNumber":536,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":537,"author":{"gitId":"shreytheshreyas"},"content":"    * This simply updates the task name from the arraylist of tasks the project contains. "},{"lineNumber":538,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":539,"author":{"gitId":"shreytheshreyas"},"content":"* The Ui class prints an acknowledgement that the task name has been updated. "},{"lineNumber":540,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":541,"author":{"gitId":"shreytheshreyas"},"content":"The following sequence diagram provides a visualization of how this command works. "},{"lineNumber":542,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":543,"author":{"gitId":"shreytheshreyas"},"content":"\u003ccenter\u003e\u003cimg src\u003d\"https://i.ibb.co/3Y9mKsq/editTask.png\"\u003e\u003c/center\u003e"},{"lineNumber":544,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":545,"author":{"gitId":"shreytheshreyas"},"content":"### **Deleting a task (Sean Tan)**"},{"lineNumber":546,"author":{"gitId":"thatseant"},"content":"This command allows project managers to delete tasks from projects."},{"lineNumber":547,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":548,"author":{"gitId":"thatseant"},"content":"The logic for this command is primarily written in TaskDeleteCommand class. It extends from the abstract Command class. "},{"lineNumber":549,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":550,"author":{"gitId":"thatseant"},"content":"The steps below show how such a class is initialized and used to execute the command. "},{"lineNumber":551,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":552,"author":{"gitId":"shreytheshreyas"},"content":"Step 1:The parser class uses the TaskDeleteCommand constructor to initialize a new instance of that class type when the user enters the input `delete t/3`. "},{"lineNumber":553,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":554,"author":{"gitId":"shreytheshreyas"},"content":"Step 2: The parse() method of TaskDeleteCommand extracts the task index from the input provided by the user. "},{"lineNumber":555,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":556,"author":{"gitId":"shreytheshreyas"},"content":"Step 3: executeCommand() method of TaskDeleteCommand is called by Duke main class, which passes it the program’s arraylist of projects. "},{"lineNumber":557,"author":{"gitId":"thatseant"},"content":"    "},{"lineNumber":558,"author":{"gitId":"shreytheshreyas"},"content":"* Existing project is retrieved from the arraylist of projects using projectIndex. "},{"lineNumber":559,"author":{"gitId":"thatseant"},"content":"    "},{"lineNumber":560,"author":{"gitId":"shreytheshreyas"},"content":"* The method deleteTask of the project is called with taskIndex. "},{"lineNumber":561,"author":{"gitId":"thatseant"},"content":"    "},{"lineNumber":562,"author":{"gitId":"shreytheshreyas"},"content":"* This simply removes the task from the arraylist of tasks the project contains. "},{"lineNumber":563,"author":{"gitId":"thatseant"},"content":"    "},{"lineNumber":564,"author":{"gitId":"shreytheshreyas"},"content":"* The Ui class prints an acknowledgement that the task has been deleted. "},{"lineNumber":565,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":566,"author":{"gitId":"shreytheshreyas"},"content":"The following sequence diagram provides a visualization of how this command works. "},{"lineNumber":567,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":568,"author":{"gitId":"shreytheshreyas"},"content":"\u003ccenter\u003e\u003cimg src\u003d\"https://i.ibb.co/W6BQkh5/Figure20.png\"\u003e\u003c/center\u003e"},{"lineNumber":569,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":570,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":571,"author":{"gitId":"shreytheshreyas"},"content":"### **Adding Deadline to Tasks (Sean Tan)**"},{"lineNumber":572,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":573,"author":{"gitId":"thatseant"},"content":"This command allows project managers to add deadline to tasks. "},{"lineNumber":574,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":575,"author":{"gitId":"thatseant"},"content":"The logic for this command is primarily written in DeadlineCommand class. It extends from the abstract Command class."},{"lineNumber":576,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":577,"author":{"gitId":"thatseant"},"content":"The steps below show how such a class is initialized and used to execute the command. "},{"lineNumber":578,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":579,"author":{"gitId":"shreytheshreyas"},"content":"Step 1: The parser initializes DeadlineCommand by passing a hashmap of input parameters from the command `deadline t/1 d/2020-10-12`. "},{"lineNumber":580,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":581,"author":{"gitId":"shreytheshreyas"},"content":"Step 2: The parse() method of DeadlineCommand extracts the task index and deadline date from the hashmap. "},{"lineNumber":582,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":583,"author":{"gitId":"shreytheshreyas"},"content":"Step 3: executeCommand() method of DeadlineCommand is called by Duke main class, which passes it the program’s arraylist of projects. "},{"lineNumber":584,"author":{"gitId":"thatseant"},"content":"   "},{"lineNumber":585,"author":{"gitId":"shreytheshreyas"},"content":"* Existing task is retrieved with taskIndex after retrieving the project it belongs to from the arraylist of project. "},{"lineNumber":586,"author":{"gitId":"thatseant"},"content":"    "},{"lineNumber":587,"author":{"gitId":"shreytheshreyas"},"content":"* The method addDeadline of the task is called that sets its date property. "},{"lineNumber":588,"author":{"gitId":"thatseant"},"content":"    "},{"lineNumber":589,"author":{"gitId":"shreytheshreyas"},"content":"* The Ui class then prints the deadline and the task description. "},{"lineNumber":590,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":591,"author":{"gitId":"shreytheshreyas"},"content":"The following sequence diagram provides a visualization of how this command works."},{"lineNumber":592,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":593,"author":{"gitId":"shreytheshreyas"},"content":"\u003ccenter\u003e\u003cimg src\u003d\"https://i.ibb.co/wWtfVLY/Figure21.png\"\u003e\u003c/center\u003e"},{"lineNumber":594,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":595,"author":{"gitId":"shreytheshreyas"},"content":"### **Assign Actual Duration to Tasks (Sean Tan)**    "},{"lineNumber":596,"author":{"gitId":"thatseant"},"content":"This command allows project managers to record the actual duration that completed tasks take. "},{"lineNumber":597,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":598,"author":{"gitId":"thatseant"},"content":"The logic for this command is primarily written in ActualTimeCommand class. It extends from the abstract Command class. "},{"lineNumber":599,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":600,"author":{"gitId":"thatseant"},"content":"The steps below show how such a class is initialized and used to execute the command. "},{"lineNumber":601,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":602,"author":{"gitId":"shreytheshreyas"},"content":"Step 1: The parser initializes ActualTimeCommand by passing a hashmap of input parameters taken from the command `actual t/3 h/2 m/3` which is entered by the user. "},{"lineNumber":603,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":604,"author":{"gitId":"shreytheshreyas"},"content":"Step 2: The parse() method of ActualTimeCommand extracts the task index, hours and minutes from the parameter hashmap. "},{"lineNumber":605,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":606,"author":{"gitId":"shreytheshreyas"},"content":"Step 3: ExecuteCommand() method of ActualTimeCommand is run and the following actions take place. "},{"lineNumber":607,"author":{"gitId":"thatseant"},"content":"  "},{"lineNumber":608,"author":{"gitId":"shreytheshreyas"},"content":"* Existing task is retrieved using projectIndex and taskIndex. "},{"lineNumber":609,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":610,"author":{"gitId":"shreytheshreyas"},"content":"* The task is checked to determine if it is completed. "},{"lineNumber":611,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":612,"author":{"gitId":"shreytheshreyas"},"content":"* If the task is completed, the task instance will have its actualInMinutes property set based on the hours and minutes retrieved. "},{"lineNumber":613,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":614,"author":{"gitId":"shreytheshreyas"},"content":"* Otherwise, an exception is thrown. "},{"lineNumber":615,"author":{"gitId":"thatseant"},"content":"  "},{"lineNumber":616,"author":{"gitId":"shreytheshreyas"},"content":"* The Ui class then prints the task description and the duration the task took. "},{"lineNumber":617,"author":{"gitId":"shreytheshreyas"},"content":"    "},{"lineNumber":618,"author":{"gitId":"shreytheshreyas"},"content":"The following sequence diagram provides a visualization of how this command works."},{"lineNumber":619,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":620,"author":{"gitId":"shreytheshreyas"},"content":"\u003ccenter\u003e\u003cimg src\u003d\"https://i.ibb.co/QF311Zc/Figure22.png\"\u003e\u003c/center\u003e"},{"lineNumber":621,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":622,"author":{"gitId":"shreytheshreyas"},"content":"### **Assign Estimated Duration to Tasks (Sean Tan)**    "},{"lineNumber":623,"author":{"gitId":"thatseant"},"content":"This command allows project managers to add an estimate for the duration tasks will take. "},{"lineNumber":624,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":625,"author":{"gitId":"thatseant"},"content":"The logic for this command is primarily written in EstimatedTimeCommand class. It extends from the abstract Command class. "},{"lineNumber":626,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":627,"author":{"gitId":"thatseant"},"content":"The steps below show how such a class is initialized and used to execute the command. "},{"lineNumber":628,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":629,"author":{"gitId":"shreytheshreyas"},"content":"Step 1: The parser initializes ActualTimeCommand by passing a hashmap of input parameters taken from the command `estimate t/1 h/4 m/35` which is entered by the user."},{"lineNumber":630,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":631,"author":{"gitId":"shreytheshreyas"},"content":"Step 2: The parse() method of EstimatedTimeCommand extracts the task index, hours and minutes from the hashmap."},{"lineNumber":632,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":633,"author":{"gitId":"shreytheshreyas"},"content":"Step 3: ExecuteCommand() method of EstimateTimeCommand is run. "},{"lineNumber":634,"author":{"gitId":"thatseant"},"content":"    "},{"lineNumber":635,"author":{"gitId":"shreytheshreyas"},"content":"* Existing task is retrieved using projectIndex and taskIndex. "},{"lineNumber":636,"author":{"gitId":"thatseant"},"content":"    "},{"lineNumber":637,"author":{"gitId":"shreytheshreyas"},"content":"* addEstimate() method of task is called, and the task will have its estimateInMinutes property set based on the hours and minutes retrieved. "},{"lineNumber":638,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":639,"author":{"gitId":"shreytheshreyas"},"content":"* The Ui class then prints the task description and the estimated duration added to the task. "},{"lineNumber":640,"author":{"gitId":"thatseant"},"content":" "},{"lineNumber":641,"author":{"gitId":"shreytheshreyas"},"content":"The following sequence diagram provides a visualization of how this command works."},{"lineNumber":642,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":643,"author":{"gitId":"shreytheshreyas"},"content":"\u003ccenter\u003e\u003cimg src\u003d\"https://i.ibb.co/rHkZQRd/Figure23.png\"\u003e\u003c/center\u003e"},{"lineNumber":644,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":645,"author":{"gitId":"shreytheshreyas"},"content":"### **Assign priority to task (Riaz Ahamed)** "},{"lineNumber":646,"author":{"gitId":"-"},"content":"This section will explain the assigning of priorities to tasks and how the objects interact with each other. "},{"lineNumber":647,"author":{"gitId":"-"},"content":""},{"lineNumber":648,"author":{"gitId":"-"},"content":"The user can assign a priority to any existing task with the `priority` command. "},{"lineNumber":649,"author":{"gitId":"-"},"content":""},{"lineNumber":650,"author":{"gitId":"-"},"content":"This command is facilitated with the help of the TaskAssignPriorityCommand class. An instance of the TaskAssignPriorityCommand class has the following properties. "},{"lineNumber":651,"author":{"gitId":"shreytheshreyas"},"content":"* projectIndex: The index of the project as an Integer "},{"lineNumber":652,"author":{"gitId":"shreytheshreyas"},"content":"* taskIndex: The index of the task as an Integer "},{"lineNumber":653,"author":{"gitId":"shreytheshreyas"},"content":"* priority: The priority to be assigned as a String "},{"lineNumber":654,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":655,"author":{"gitId":"shreytheshreyas"},"content":"Step 1: The user types the priority command e.g. `priority t/1 p/1` and the main Duke class will call the Parser class. "},{"lineNumber":656,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":657,"author":{"gitId":"shreytheshreyas"},"content":"Step 2: The Parser class will check which state the app is in and will then call the appropriate class constructor. In this case, the Parser will call the ProjectListCommand constructor. The ProjectListCommand constructor will also check for the validity of the user’s input. The constraints of the input are as follows:"},{"lineNumber":658,"author":{"gitId":"shreytheshreyas"},"content":"  * Not a number for either task index or priority "},{"lineNumber":659,"author":{"gitId":"shreytheshreyas"},"content":"  * Not a positive number for either task index or priority"},{"lineNumber":660,"author":{"gitId":"shreytheshreyas"},"content":"  * An index of a task that does not exist "},{"lineNumber":661,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":662,"author":{"gitId":"shreytheshreyas"},"content":"Step 3: The Parser class will then initialize a new instance of the TaskAssignPriorityCommand constructor and return it back to the main Duke class. "},{"lineNumber":663,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":664,"author":{"gitId":"shreytheshreyas"},"content":"Step 4: The Duke class will call the executeCommand function from the returned instance which will execute the command. "},{"lineNumber":665,"author":{"gitId":"shreytheshreyas"},"content":"  * The executeCommand will get the specified task using the taskIndex. "},{"lineNumber":666,"author":{"gitId":"shreytheshreyas"},"content":"  * It will then set the priority property of the task as the specified priority. "},{"lineNumber":667,"author":{"gitId":"shreytheshreyas"},"content":"  * Lastly, it will call the printPriorityAssignedToTaskMessage method from the Ui class and send the acknowledgement message to the main Duke class. "},{"lineNumber":668,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":669,"author":{"gitId":"shreytheshreyas"},"content":"Step 5: The Duke class will then display the acknowledgement message to the user in the terminal "},{"lineNumber":670,"author":{"gitId":"-"},"content":""},{"lineNumber":671,"author":{"gitId":"-"},"content":"The above is illustrated below in a sequence diagram. The sequence diagram will only encompass the sequence in the executeCommand function. "},{"lineNumber":672,"author":{"gitId":"-"},"content":""},{"lineNumber":673,"author":{"gitId":"shreytheshreyas"},"content":"\u003ccenter\u003e\u003cimg src\u003d\"https://i.ibb.co/xJ4D6Br/Figure24.png\"\u003e\u003c/center\u003e"},{"lineNumber":674,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":675,"author":{"gitId":"shreytheshreyas"},"content":"### **Marking a task as done (Shreyas Kumar)** "},{"lineNumber":676,"author":{"gitId":"-"},"content":"This command allows you to mark a task in a selected project. "},{"lineNumber":677,"author":{"gitId":"-"},"content":""},{"lineNumber":678,"author":{"gitId":"-"},"content":"The logic for this command is written in the TaskDoneCommand class which inherits its general properties from the abstract Command class. "},{"lineNumber":679,"author":{"gitId":"-"},"content":""},{"lineNumber":680,"author":{"gitId":"-"},"content":"The following states how the functionality is used in the application and how it is implemented: "},{"lineNumber":681,"author":{"gitId":"-"},"content":""},{"lineNumber":682,"author":{"gitId":"shreytheshreyas"},"content":"Step 1: The parser class uses the `TaskDoneCommand` constructor to initialize a new instance of that class type by passing a hash map which consists of the parameters of that command done t/1 which was entered by the user."},{"lineNumber":683,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":684,"author":{"gitId":"shreytheshreyas"},"content":"Step 2: The `parse()` method in the `TaskDoneCommand` class extracts the task index of the task that is to be marked done. If the task index is not present in the task list of that project, an exception is thrown. "},{"lineNumber":685,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":686,"author":{"gitId":"shreytheshreyas"},"content":"Step 3: The `executeCommand()` of the `TaskDoneCommand` class is called by the `main()` method of the `Duke` class and which passes the project and team members array list to the respective method."},{"lineNumber":687,"author":{"gitId":"shreytheshreyas"},"content":"  * The current project is obtained using the project array list and the project index that was passed during the instantiation of the `TaskDoneCommand` object."},{"lineNumber":688,"author":{"gitId":"shreytheshreyas"},"content":"  * Now, the method fetches the required task by using task index extracted from the  `parse()`."},{"lineNumber":689,"author":{"gitId":"shreytheshreyas"},"content":"  * The task object obtained is used to call the member function `markAsDone()` which sets the Boolean field in a task from false to true which the indicates that the task is completed. "},{"lineNumber":690,"author":{"gitId":"shreytheshreyas"},"content":"  * The `Ui` class then prints an acknowledgement message to let the user know that a task has been marked as done. "},{"lineNumber":691,"author":{"gitId":"-"},"content":""},{"lineNumber":692,"author":{"gitId":"shreytheshreyas"},"content":"The above is illustrated below in a sequence diagram. The sequence diagram will only encompass the sequence in the executeCommand function. "},{"lineNumber":693,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":694,"author":{"gitId":"shreytheshreyas"},"content":"\u003ccenter\u003e\u003cimg src\u003d\"https://i.ibb.co/cxLnHJB/Figure25.png\"\u003e\u003c/center\u003e"},{"lineNumber":695,"author":{"gitId":"-"},"content":""},{"lineNumber":696,"author":{"gitId":"shreytheshreyas"},"content":"### **Sorting Tasks in the TaskList (Shreyas Kumar)**"},{"lineNumber":697,"author":{"gitId":"-"},"content":"This command allows you to sort the tasks in a task list in a selected project. "},{"lineNumber":698,"author":{"gitId":"-"},"content":""},{"lineNumber":699,"author":{"gitId":"-"},"content":"The logic for this command is written in the `TaskSortCommand` class which inherits its general properties from the abstract Command class. "},{"lineNumber":700,"author":{"gitId":"-"},"content":""},{"lineNumber":701,"author":{"gitId":"-"},"content":"The following states how the functionality is used in the application and how it is implemented: "},{"lineNumber":702,"author":{"gitId":"-"},"content":""},{"lineNumber":703,"author":{"gitId":"shreytheshreyas"},"content":"Step 1: The parser class uses the `TaskSortCommand` constructor to initialize a new instance of that class type by passing the input which consists of the parameter of the command sort p/ , sort d/ or sort a/. "},{"lineNumber":704,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":705,"author":{"gitId":"shreytheshreyas"},"content":"Step 2: The `parse()` method in the `TaskSortCommand` class extracts the sorting type (deadline, priority, actual time). "},{"lineNumber":706,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":707,"author":{"gitId":"shreytheshreyas"},"content":"Step 3 The `executeCommand()` of the `TaskDoneCommand` class is called by the `main()` method of the `Duke` class and which passes the project and team members array list to the respective method."},{"lineNumber":708,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":709,"author":{"gitId":"shreytheshreyas"},"content":"  * The current project is obtained using the project array list and the project index that was passed during the instantiation of the TaskSortCommand object. "},{"lineNumber":710,"author":{"gitId":"shreytheshreyas"},"content":"  * Now, based on the sorting type the method will choose a case statement in a switch-case that reflects the type of sorting."},{"lineNumber":711,"author":{"gitId":"shreytheshreyas"},"content":"  * The `Ui` class then prints an acknowledgement message to let the user know that the tasks have been sorted according to the respective sorting type. "},{"lineNumber":712,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":713,"author":{"gitId":"shreytheshreyas"},"content":"The above is illustrated below in a sequence diagram. The sequence diagram will only encompass the sequence in the executeCommand function. "},{"lineNumber":714,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":715,"author":{"gitId":"shreytheshreyas"},"content":"\u003ccenter\u003e\u003cimg src\u003d\"https://i.ibb.co/QXwcYxR/Figure27.png\" \u003e\u003c/center\u003e"},{"lineNumber":716,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":717,"author":{"gitId":"shreytheshreyas"},"content":"## **List Feature**"},{"lineNumber":718,"author":{"gitId":"shreytheshreyas"},"content":"The list command provides different outputs based on the view the user is current in."},{"lineNumber":719,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":720,"author":{"gitId":"shreytheshreyas"},"content":"1. List command when the user is in Home-View"},{"lineNumber":721,"author":{"gitId":"shreytheshreyas"},"content":"\u003ccenter\u003e\u003cimg src\u003d\"https://i.ibb.co/51CBNXc/Figure27-1.png\" \u003e\u003c/center\u003e"},{"lineNumber":722,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":723,"author":{"gitId":"shreytheshreyas"},"content":"2. List command when the user is in Project-View"},{"lineNumber":724,"author":{"gitId":"shreytheshreyas"},"content":"\u003ccenter\u003e\u003cimg src\u003d\"https://i.ibb.co/yBQkgqH/Figure27-2.png\"\u003e\u003c/center\u003e"},{"lineNumber":725,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":726,"author":{"gitId":"shreytheshreyas"},"content":"The sequence diagram for the the list feature in the Home-View is given below."},{"lineNumber":727,"author":{"gitId":"shreytheshreyas"},"content":"\u003ccenter\u003e\u003cimg src\u003d\"https://i.ibb.co/9pzwF12/Figure27-3.png\"\u003e\u003c/center\u003e"},{"lineNumber":728,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":729,"author":{"gitId":"shreytheshreyas"},"content":"The sequence diagram for the the list feature in the Project-View is given below."},{"lineNumber":730,"author":{"gitId":"shreytheshreyas"},"content":"\u003ccenter\u003e\u003cimg src\u003d\"https://i.ibb.co/TT1C8fN/Figure27-4.png\"\u003e\u003c/center\u003e"},{"lineNumber":731,"author":{"gitId":"-"},"content":""},{"lineNumber":732,"author":{"gitId":"shreytheshreyas"},"content":"The outputs of the list command is the same as that of specified in the Views section."},{"lineNumber":733,"author":{"gitId":"-"},"content":""},{"lineNumber":734,"author":{"gitId":"shreytheshreyas"},"content":"## **Running Tests (Samuel Paul Christopher)** "},{"lineNumber":735,"author":{"gitId":"-"},"content":"There are two ways to run tests for EZ manager. "},{"lineNumber":736,"author":{"gitId":"-"},"content":"\u003e To check for test coverage, please ensure that you `Run with coverage` when right clicking on the tests to run. "},{"lineNumber":737,"author":{"gitId":"-"},"content":""},{"lineNumber":738,"author":{"gitId":"-"},"content":"**Method 1: Using IntelliJ JUnit test runner**"},{"lineNumber":739,"author":{"gitId":"-"},"content":"- To run all tests available, right-click on the `src/test/java` folder and choose `Run  All Tests`"},{"lineNumber":740,"author":{"gitId":"-"},"content":"- To run a some of the tests, you can right-click on a test package, test class, or a test and choose `Run Particular Test Name Here` "},{"lineNumber":741,"author":{"gitId":"-"},"content":""},{"lineNumber":742,"author":{"gitId":"-"},"content":"**Method 2: Using Gradle**"},{"lineNumber":743,"author":{"gitId":"-"},"content":"- On Windows, run the command `gradlew clean allTests` in a terminal "},{"lineNumber":744,"author":{"gitId":"-"},"content":"- On Mac or Linux, run the command `./gradlew clean allTests` in a terminal "},{"lineNumber":745,"author":{"gitId":"-"},"content":""},{"lineNumber":746,"author":{"gitId":"-"},"content":"## **DevOps (Samuel Paul Christopher)** "},{"lineNumber":747,"author":{"gitId":"-"},"content":"Here are the steps to create a new release. "},{"lineNumber":748,"author":{"gitId":"-"},"content":"1. Update the version number in Duke.java "},{"lineNumber":749,"author":{"gitId":"-"},"content":"2. Generate a JAR file using Gradle"},{"lineNumber":750,"author":{"gitId":"-"},"content":"3. Tag the repo with the version number. e.g. v0.1 "},{"lineNumber":751,"author":{"gitId":"-"},"content":"4. Create a new release using GitHub and upload the JAR file you created. "},{"lineNumber":752,"author":{"gitId":"-"},"content":""},{"lineNumber":753,"author":{"gitId":"shreytheshreyas"},"content":"## **Appendix A: Product Scope (Samuel Leow)** "},{"lineNumber":754,"author":{"gitId":"-"},"content":"Target user profile: "},{"lineNumber":755,"author":{"gitId":"-"},"content":"- Project Manager of Software Engineering projects "},{"lineNumber":756,"author":{"gitId":"-"},"content":"- Needs to manage teams for different projects "},{"lineNumber":757,"author":{"gitId":"-"},"content":""},{"lineNumber":758,"author":{"gitId":"-"},"content":"Value proposition:"},{"lineNumber":759,"author":{"gitId":"-"},"content":"Manage projects in a smooth and seamless way to allow the team to get more done "},{"lineNumber":760,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":761,"author":{"gitId":"samuellleow"},"content":"**User Stories**"},{"lineNumber":762,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":763,"author":{"gitId":"samuellleow"},"content":"Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"},{"lineNumber":764,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":765,"author":{"gitId":"samuellleow"},"content":"Priority | As a ... | I want to ... | So that I can ..."},{"lineNumber":766,"author":{"gitId":"samuellleow"},"content":"---------- | -------------------- | ------------------------- | -------------------------"},{"lineNumber":767,"author":{"gitId":"samuellleow"},"content":"`* * *` | new user | see usage instructions | refer to the commands when I forget how to use the App"},{"lineNumber":768,"author":{"gitId":"samuellleow"},"content":"`* * *` | project manager | add a new project | track the progress of my new project "},{"lineNumber":769,"author":{"gitId":"samuellleow"},"content":"`* * *` | project manager | add tasks under a project | track the project tasks needed to finish the project"},{"lineNumber":770,"author":{"gitId":"samuellleow"},"content":"`* * *` | project manager | add a new member | manage members in my team "},{"lineNumber":771,"author":{"gitId":"samuellleow"},"content":"`* * *` | project manager | select a project | go into a particular project to make changes such as adding tasks and deadline specific to the project"},{"lineNumber":772,"author":{"gitId":"samuellleow"},"content":"`* * *` | project manager | navigate between home view and project view | switch from one project to the other project"},{"lineNumber":773,"author":{"gitId":"samuellleow"},"content":"`* * *` | project manager | delete an existing project | remove projects that are not required anymore"},{"lineNumber":774,"author":{"gitId":"samuellleow"},"content":"`* * *` | project manager | delete an existing task | remove tasks that are not required anymore"},{"lineNumber":775,"author":{"gitId":"samuellleow"},"content":"`* * *` | project manager | remove an existing member | remove members that have left the team"},{"lineNumber":776,"author":{"gitId":"samuellleow"},"content":"`* * *` | project manager | add a deadline to an existing project | keep the project on track and deliver the product on time"},{"lineNumber":777,"author":{"gitId":"samuellleow"},"content":"`* * *` | project manager | add a deadline to an existing task | keep the task on track and finish it on time"},{"lineNumber":778,"author":{"gitId":"samuellleow"},"content":"`* * *` | project manager | mark completed projects as done | see which projects are done and which still needs to be done"},{"lineNumber":779,"author":{"gitId":"samuellleow"},"content":"`* * *` | project manager | mark completed tasks as done | see which tasks are done and which still needs to be done"},{"lineNumber":780,"author":{"gitId":"samuellleow"},"content":"`* * *` | project manager | add a project description | have a better understanding of the concept and context of the project"},{"lineNumber":781,"author":{"gitId":"samuellleow"},"content":"`* * *` | project manager | add a task description | have a better understand of the task and know what needs to be done"},{"lineNumber":782,"author":{"gitId":"samuellleow"},"content":"`* * *` | project manager | assign a member to a project | allocate projects to team members "},{"lineNumber":783,"author":{"gitId":"samuellleow"},"content":"`* * *` | project manager | assign a member to a task | allocate equal workload to every team member"},{"lineNumber":784,"author":{"gitId":"samuellleow"},"content":"`* * *` | project manager | assign priority to a task | organise the tasks in order of priority and focus on those that are more urgent"},{"lineNumber":785,"author":{"gitId":"samuellleow"},"content":"`* *` | project manager | assign estimated time needed to complete a task | give my team a rough estimate of how long is expected for them to finish the task"},{"lineNumber":786,"author":{"gitId":"samuellleow"},"content":"`* *` | project manager | assign actual time used to complete a task | find out the amount of time spent and understand which task is taking more time than expected"},{"lineNumber":787,"author":{"gitId":"samuellleow"},"content":"`* *` | project manager | display all the projects and members all in one view | have an overview of all the projects and members"},{"lineNumber":788,"author":{"gitId":"samuellleow"},"content":"`* *` | project manager | display all the tasks and members allocated to the project all in one view | have an overview of the unfinished tasks and members assigned to those tasks"},{"lineNumber":789,"author":{"gitId":"samuellleow"},"content":"`* *` | project manager | sort my list of projects in terms of deadline | prioritise projects that are urgent and focus on completing the project before the deadline"},{"lineNumber":790,"author":{"gitId":"samuellleow"},"content":"`* *` | project manager | sort my list of tasks in terms of deadline | focus on the tasks that have a closer deadline"},{"lineNumber":791,"author":{"gitId":"samuellleow"},"content":"`* *` | project manager | sort my list of tasks in terms of priority | focus on the tasks that are most important as some are base level tasks which are required for the project to be up and running"},{"lineNumber":792,"author":{"gitId":"samuellleow"},"content":"`* *` | project manager | sort my list of tasks in terms of actual time spent | have an overview of which tasks are taking up more time and required more manpower in the future"},{"lineNumber":793,"author":{"gitId":"samuellleow"},"content":"`*` | project manager | add the roles of my team members | allocate appropriate tasks to appropriate members"},{"lineNumber":794,"author":{"gitId":"samuellleow"},"content":"`*` | project manager | send out reminders to my team members | have them shift gears or change something in real time  "},{"lineNumber":795,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":796,"author":{"gitId":"shreytheshreyas"},"content":"## **Appendix B: Command Summary (Samuel Paul Christopher)** "},{"lineNumber":797,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":798,"author":{"gitId":"shreytheshreyas"},"content":"|Command  |Description and Examples  |"},{"lineNumber":799,"author":{"gitId":"shreytheshreyas"},"content":"|---------|--------------------------|"},{"lineNumber":800,"author":{"gitId":"shreytheshreyas"},"content":"|project| Creates a new project in the project list.  \u003cbr\u003e Example: `project n/Web Development Project `|"},{"lineNumber":801,"author":{"gitId":"shreytheshreyas"},"content":"|task |Creates a new task in the task list.  \u003cbr\u003e Example: `task n/Deploy Version 2.0`|"},{"lineNumber":802,"author":{"gitId":"shreytheshreyas"},"content":"|member|Creates a new member in the member list. \u003cbr\u003e Example: `task n/Deploy Version 2.0`|"},{"lineNumber":803,"author":{"gitId":"shreytheshreyas"},"content":"|list|If in Home-View, displays the project list and members list. \u003cbr\u003e If in Project-View displays task list and members of that project \u003cbr\u003e `list`|"},{"lineNumber":804,"author":{"gitId":"shreytheshreyas"},"content":"|select |Selects a specified project in Home-View and program enters ProjectView  \u003cbr\u003e Example: `select p/1 `|"},{"lineNumber":805,"author":{"gitId":"shreytheshreyas"},"content":"|delete|If in HomeView, it deletes the specified project. \u003cbr\u003e If in ProjectView, it deletes the specified task  \u003cbr\u003e Example: `delete p/1`,`delete t/1`|"},{"lineNumber":806,"author":{"gitId":"shreytheshreyas"},"content":"|remove|If in Home-View, it removes a member from the member and they are removed from their assigned projects as well \u003cbr\u003e remove m/1|"},{"lineNumber":807,"author":{"gitId":"shreytheshreyas"},"content":"|done|If in HomeView, marks the specified project as done \u003cbr\u003e If in ProjectView, marks the specified task as done  \u003cbr\u003e Example: `done p/1`,`done t/1`|"},{"lineNumber":808,"author":{"gitId":"shreytheshreyas"},"content":"|description |If in HomeView, it assigns a description to the specified project \u003cbr\u003e Example: `description p/1 d/Project for Company X` |"},{"lineNumber":809,"author":{"gitId":"shreytheshreyas"},"content":"|deadline|If in HomeView, it assigns a deadline to the specified project \u003cbr\u003e If in ProjectView, it assigns a deadline to the specified task \u003cbr\u003e Example: `deadline p/1 d/2020-10-25`,`deadline t/1 d/2020-10-25`|"},{"lineNumber":810,"author":{"gitId":"shreytheshreyas"},"content":"|priority |If in ProjectView, it assigns a priority to the specified task \u003cbr\u003e Example: `priority t/1 p/1`|"},{"lineNumber":811,"author":{"gitId":"shreytheshreyas"},"content":"|edit|If in Project-View it changes the name of a current task to a name specified by the user. \u003cbr\u003e Example: `edit t/1 n/new name`|"},{"lineNumber":812,"author":{"gitId":"shreytheshreyas"},"content":"|priority|If in ProjectView, it assigns a priority to the specified task \u003cbr\u003e Example: `priority t/1 p/1 `|"},{"lineNumber":813,"author":{"gitId":"shreytheshreyas"},"content":"|estimate|If in ProjectView, it assigns an estimated completion time to the specified task \u003cbr\u003e Example: `estimate t/1 h/3 m/20`|"},{"lineNumber":814,"author":{"gitId":"shreytheshreyas"},"content":"|actual|If in ProjectView, it assigns the actual completion time to the specified task \u003cbr\u003e Example: `actual t/2 h/1 m/20`|"},{"lineNumber":815,"author":{"gitId":"shreytheshreyas"},"content":"|assign |If in HomeView, it assigns a member to a specified project. \u003cbr\u003e If in ProjectView, assigns member to specified task \u003cbr\u003e Example: `assign p/1 m/1 `, `assign t/2 m/3`|"},{"lineNumber":816,"author":{"gitId":"shreytheshreyas"},"content":"|sort|If in Project view it assigns tasks either by actual time, deadline or priority \u003cbr\u003e Example: `sort s/p, sort s/a, sort s/d`|"},{"lineNumber":817,"author":{"gitId":"shreytheshreyas"},"content":"|home|Switches from ProjectView to HomeView and vice versa \u003cbr\u003e Example: `home`|"},{"lineNumber":818,"author":{"gitId":"shreytheshreyas"},"content":"|bye|prints a goodbye message. \u003cbr\u003e Example: `bye`|"},{"lineNumber":819,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":820,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":821,"author":{"gitId":"shreytheshreyas"},"content":"## **Appendix C: Instructions for Manual Testing (Shreyas Kumar)**"},{"lineNumber":822,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":823,"author":{"gitId":"samuellleow"},"content":"### \u003cins\u003eProject-Specific Tests\u003c/ins\u003e"},{"lineNumber":824,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":825,"author":{"gitId":"samuellleow"},"content":"#### C.1 Creating a Project"},{"lineNumber":826,"author":{"gitId":"samuellleow"},"content":"1. Creating a Project when you are in the Home-View"},{"lineNumber":827,"author":{"gitId":"shreytheshreyas"},"content":"    * Prerequisites: Only Required to be in the Home-View "},{"lineNumber":828,"author":{"gitId":"shreytheshreyas"},"content":"    * Test case: `project n/p1`: A new project named as p1 will be created and added to the project list. A message will be displayed on the screen to ensure the user that the project has been created."},{"lineNumber":829,"author":{"gitId":"samuellleow"},"content":"    * Test case: `project p1`: Since the n/ parameter has not been provided, it is considered as an incorrect command in the application and hence the program throws an exception."},{"lineNumber":830,"author":{"gitId":"samuellleow"},"content":"    "},{"lineNumber":831,"author":{"gitId":"samuellleow"},"content":"2. Creating a Project when you are in the Project-View"},{"lineNumber":832,"author":{"gitId":"samuellleow"},"content":"    * Prerequisites: Required to be in Project-View"},{"lineNumber":833,"author":{"gitId":"samuellleow"},"content":"    * Test case: `project n/p1`: Since the state of the program is in project view, the user will not be allowed to create a project and hence the program throws an exception."},{"lineNumber":834,"author":{"gitId":"samuellleow"},"content":"    "},{"lineNumber":835,"author":{"gitId":"samuellleow"},"content":"#### C.2 Deleting a Project"},{"lineNumber":836,"author":{"gitId":"samuellleow"},"content":"1. Deleting a Project when you are in the Home-View"},{"lineNumber":837,"author":{"gitId":"shreytheshreyas"},"content":"    * Prerequisites: Only Required to be in the Home-View"},{"lineNumber":838,"author":{"gitId":"samuellleow"},"content":"    * Test case: `delete p/1`: The project named as p1 will be deleted and from the project list. A message will be displayed on the screen to ensure the user that the project has been deleted."},{"lineNumber":839,"author":{"gitId":"samuellleow"},"content":"    * Test case: `delete p1`: Since the p/ parameter has not been provided, it is considered as an incorrect command in the application and hence the program throws an exception."},{"lineNumber":840,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":841,"author":{"gitId":"shreytheshreyas"},"content":"2. Deleting a Project whose project-id is greater that the total number of projects"},{"lineNumber":842,"author":{"gitId":"shreytheshreyas"},"content":"    * Prerequisites: Required to be in the Home-View and have three projects created."},{"lineNumber":843,"author":{"gitId":"shreytheshreyas"},"content":"    * Test case: `delete p/4`: Since there are only three projects in the project list, the project-id provided to the program is invalid and the program will throw an exception to tell the user to enter a valid project-id."},{"lineNumber":844,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":845,"author":{"gitId":"shreytheshreyas"},"content":"3. Creating a Project when you are in the Project-View"},{"lineNumber":846,"author":{"gitId":"shreytheshreyas"},"content":"    * Prerequisites: Required to be in Project-View."},{"lineNumber":847,"author":{"gitId":"shreytheshreyas"},"content":"    * Test case: `delete p/1`: Since the state of the program is in project view, the user will not be allowed to delete a project and hence the program will not be able to recognize the p/ parameter and will hence throw an exception."},{"lineNumber":848,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":849,"author":{"gitId":"shreytheshreyas"},"content":"#### C.3 Selecting a Project"},{"lineNumber":850,"author":{"gitId":"samuellleow"},"content":"1. Selecting a Project when you are in the Home-View"},{"lineNumber":851,"author":{"gitId":"samuellleow"},"content":"    * Prerequisites: Only Required to be in the Home View (Initial state of the application) and, the project p1 has already been created."},{"lineNumber":852,"author":{"gitId":"shreytheshreyas"},"content":"    * Test case: `select p/1`: The project with the index of 1 will be will selected from the"},{"lineNumber":853,"author":{"gitId":"samuellleow"},"content":"      project list and, you will enter project view of that respective project."},{"lineNumber":854,"author":{"gitId":"samuellleow"},"content":"    * Test case: `select p1`: Since the p/ parameter has not been provided, it is considered as an incorrect command in the application and hence the program throws an exception."},{"lineNumber":855,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":856,"author":{"gitId":"shreytheshreyas"},"content":"2. Selecting a Project whose project-id is greater that the total number of projects"},{"lineNumber":857,"author":{"gitId":"shreytheshreyas"},"content":"    * Prerequisites: Required to be in the Home View and have three project created."},{"lineNumber":858,"author":{"gitId":"shreytheshreyas"},"content":"    * Test case: `select p/4`: Since there are only three projects in the project list, the project-id provided to the program is invalid and the program will throw an exception to tell the user to enter a valid project-id."},{"lineNumber":859,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":860,"author":{"gitId":"shreytheshreyas"},"content":"3. Selecting a Project when you are in the Project-View"},{"lineNumber":861,"author":{"gitId":"samuellleow"},"content":"    * Prerequisites: Required to be in Project-View"},{"lineNumber":862,"author":{"gitId":"samuellleow"},"content":"    * Test case: `select p/1`: Since the state of the program is in project view, the user will not be allowed to delete a project and hence the program will not be able to recognize the p/ parameter and will hence throw an exception."},{"lineNumber":863,"author":{"gitId":"samuellleow"},"content":"      "},{"lineNumber":864,"author":{"gitId":"shreytheshreyas"},"content":"#### C.4 Providing a Description for a Project (need to update this)"},{"lineNumber":865,"author":{"gitId":"shreytheshreyas"},"content":"1. Providing a description for the Project when you are in the Project-View"},{"lineNumber":866,"author":{"gitId":"shreytheshreyas"},"content":"    * Prerequisites: Required to be in the Project-View."},{"lineNumber":867,"author":{"gitId":"shreytheshreyas"},"content":"    * Test case: `description p/1 d/This is a description`: Since we are in Project-View, we would not be able to add a description to any of them and hence the program will throw an exception."},{"lineNumber":868,"author":{"gitId":"samuellleow"},"content":"   "},{"lineNumber":869,"author":{"gitId":"shreytheshreyas"},"content":"2. Providing a description for the Project when you are in the Home-View "},{"lineNumber":870,"author":{"gitId":"shreytheshreyas"},"content":"    * Prerequisites: Required to be in Home-View."},{"lineNumber":871,"author":{"gitId":"shreytheshreyas"},"content":"    * Test case: `description p/1 d/This is a description`: Since the state of the program is in Home-View, the description \u0027This is a description\u0027 will be added to the project having an index of 1. An acknowledgement message is printed on the screen to ensure the user that the project has been provided with a description."},{"lineNumber":872,"author":{"gitId":"samuellleow"},"content":"    "},{"lineNumber":873,"author":{"gitId":"samuellleow"},"content":"### \u003cins\u003eTask-Specific Tests\u003c/ins\u003e"},{"lineNumber":874,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":875,"author":{"gitId":"shreytheshreyas"},"content":"#### C.5 Creating a Task"},{"lineNumber":876,"author":{"gitId":"samuellleow"},"content":"1. Creating a Task when you are in the Project-View"},{"lineNumber":877,"author":{"gitId":"shreytheshreyas"},"content":"    * Prerequisites: Only Required to be in Project-View."},{"lineNumber":878,"author":{"gitId":"shreytheshreyas"},"content":"    * Test case: `task n/t1`: A new task named as t1 should be created and added to the task list of that project. A acknowledgement message will be displayed on the screen to ensure the user that the task has been created."},{"lineNumber":879,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":880,"author":{"gitId":"samuellleow"},"content":"2. Creating a Task when you are in the Home-View"},{"lineNumber":881,"author":{"gitId":"shreytheshreyas"},"content":"    * Prerequisites: Required to be in Home-View."},{"lineNumber":882,"author":{"gitId":"shreytheshreyas"},"content":"    * Test case: `task n/1`: Since the state of the program is in Home-View, the user will not be allowed to create a task and hence the program throws an exception."},{"lineNumber":883,"author":{"gitId":"samuellleow"},"content":"    "},{"lineNumber":884,"author":{"gitId":"shreytheshreyas"},"content":"#### C.6 Deleting a Task"},{"lineNumber":885,"author":{"gitId":"samuellleow"},"content":"1. Deleting a Task when you are in the Project-View"},{"lineNumber":886,"author":{"gitId":"shreytheshreyas"},"content":"    * Prerequisites: Required to be in Project-View. "},{"lineNumber":887,"author":{"gitId":"shreytheshreyas"},"content":"    * Test case: `delete t/1`: The first task in the task list of the project will be deleted and, an acknowledgement message will be displayed on the screen to ensure the user that the required task has been deleted."},{"lineNumber":888,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":889,"author":{"gitId":"shreytheshreyas"},"content":"2. Deleting a Task whose task-id is greater than the total number of tasks"},{"lineNumber":890,"author":{"gitId":"shreytheshreyas"},"content":"    * Prerequisites: Required to be in the Project-View and have five tasks created."},{"lineNumber":891,"author":{"gitId":"shreytheshreyas"},"content":"    * Test case: `select t/7`: Since there are only five tasks in the task list, the task-id provided to the program is invalid and the program will throw an exception to tell the user to enter a valid task-id.    "},{"lineNumber":892,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":893,"author":{"gitId":"shreytheshreyas"},"content":"3. Deleting a Task when you are in the Home-View"},{"lineNumber":894,"author":{"gitId":"shreytheshreyas"},"content":"    * Prerequisites: Required to be in Home-View."},{"lineNumber":895,"author":{"gitId":"shreytheshreyas"},"content":"    * Test case: `delete t/1`: Since the state of the program is in Home view, the user will not be allowed to delete a task and hence the program throws an exception."},{"lineNumber":896,"author":{"gitId":"samuellleow"},"content":"    "},{"lineNumber":897,"author":{"gitId":"shreytheshreyas"},"content":"#### C.7 Marking a Task as Completed"},{"lineNumber":898,"author":{"gitId":"shreytheshreyas"},"content":"1. Marking a Task as done in Project-View"},{"lineNumber":899,"author":{"gitId":"shreytheshreyas"},"content":"    * Prerequisites: Required to be in Project-View of a created project and have tasks created in that respective project."},{"lineNumber":900,"author":{"gitId":"shreytheshreyas"},"content":"    * Test case: `done t/1`: The first task in the task list of that project will be marked as completed and an acknoweldegement message will be displayed on the screen to ensure the user that the task has been marked as completed."},{"lineNumber":901,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":902,"author":{"gitId":"shreytheshreyas"},"content":"2. Marking a Task as done whose task-id is greater than the total number of tasks"},{"lineNumber":903,"author":{"gitId":"shreytheshreyas"},"content":"    * Prerequisites: Required to be in the Project-View and have five tasks created."},{"lineNumber":904,"author":{"gitId":"shreytheshreyas"},"content":"    * Test case: `done t/7`: Since there are only five tasks in the task list, the task-id provided to the program is invalid and the program will throw an exception to tell the user to enter a valid task-id. "},{"lineNumber":905,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":906,"author":{"gitId":"shreytheshreyas"},"content":"3. Marking a Task as done in Home-View "},{"lineNumber":907,"author":{"gitId":"shreytheshreyas"},"content":"    * Prerequisites: Required to be in Home-View"},{"lineNumber":908,"author":{"gitId":"shreytheshreyas"},"content":"    * Test case: `done t/1`: Since the state of the program is in Home view, there will only be projects present so the user will not be able to mark a task as completed and the program throws an exception."},{"lineNumber":909,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":910,"author":{"gitId":"shreytheshreyas"},"content":"#### C.8 Assigning a Deadline to a Task"},{"lineNumber":911,"author":{"gitId":"shreytheshreyas"},"content":"1. Assigning a Deadline to a Task in Project-View"},{"lineNumber":912,"author":{"gitId":"shreytheshreyas"},"content":"    * Prerequisites: Required to be in Project-View of a created project and have tasks created in that respective project."},{"lineNumber":913,"author":{"gitId":"shreytheshreyas"},"content":"    * Test case: `deadline t/1 d/2020-11-09`: Since the state of the program is in Project-View and the deadline mentioned is in the format YYYY-MM-DD the program assigns the date 2020-11-09 as the deadline to task 1. An acknoweldegment message is also displayed to ensure the user that the required task has been assigned to the respective deadline. "},{"lineNumber":914,"author":{"gitId":"shreytheshreyas"},"content":"    * Test case: `deadline t/1 d/09-10-2020`: Eventhough the state of the program is in Project-View the deadline is of the format DD-MM-YYYY which is the incorrect format while inputting the date. An exception mesaage is also thrown by the program to tell the user to enter the date in the YYYY-MM-DD format."},{"lineNumber":915,"author":{"gitId":"shreytheshreyas"},"content":"    * Test case: `deadline t/1 d/11-25-2020`: Eventhough the state of the program is in Project-View the deadline is of the format MM-DD-YYYY which is the incorrect format while inputting the date. An exception mesaage is also thrown by the program to tell the user to enter the date in the YYYY-MM-DD format."},{"lineNumber":916,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":917,"author":{"gitId":"shreytheshreyas"},"content":"2. Assigning a Deadline to a Task in Home-View"},{"lineNumber":918,"author":{"gitId":"shreytheshreyas"},"content":"    * Prerequisites: Required to be in Home-View."},{"lineNumber":919,"author":{"gitId":"shreytheshreyas"},"content":"    * Test case: `deadline t/1 d/2020-11-09`: Since the state of the program is in Home-View, there will only be projects present, so the user will not be able to mark a task as completed and the program throws an exception."},{"lineNumber":920,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":921,"author":{"gitId":"shreytheshreyas"},"content":"3. Assigning a Deadline to a Task whose task-id is greater than the total number of tasks"},{"lineNumber":922,"author":{"gitId":"shreytheshreyas"},"content":"    * Prerequisites: Required to be in the Project-View and have five tasks created."},{"lineNumber":923,"author":{"gitId":"shreytheshreyas"},"content":"    * Test case: `deadline t/7 d/2020-12-22`: Since there are only five tasks in the task list, the task-id provided to the program is invalid and the program will throw an exception to tell the user to enter a valid task-id."},{"lineNumber":924,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":925,"author":{"gitId":"shreytheshreyas"},"content":"#### C.9 Assigning a Priority to a Task"},{"lineNumber":926,"author":{"gitId":"shreytheshreyas"},"content":"1. Assigning a Priority to a Task in Project-View. "},{"lineNumber":927,"author":{"gitId":"shreytheshreyas"},"content":"    * Prerequisites: Required to be in Project-View of a created project and have tasks created in that respective project."},{"lineNumber":928,"author":{"gitId":"shreytheshreyas"},"content":"    * Test case: `priority t/1 p/1`: Since the state of the program is in Project-View, the priority 1 will be assigned to task 1 and an acknoweldegment message is also displayed on the screen to ensure the user that the priority has been assigned."},{"lineNumber":929,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":930,"author":{"gitId":"shreytheshreyas"},"content":"2. Assigning a Priority to a Task in Home-View"},{"lineNumber":931,"author":{"gitId":"shreytheshreyas"},"content":"    * Prerequisites: Required to be in Home-View."},{"lineNumber":932,"author":{"gitId":"shreytheshreyas"},"content":"    * Test case: `priority t/1 p/1`: Since the state of the program is in Home-View, there will only be projects present, so the user will not be able to assign a prirority to a task and the program throws an exception."},{"lineNumber":933,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":934,"author":{"gitId":"shreytheshreyas"},"content":"3. Assigning a Priority to a Task whose task-id is greater than the total number of tasks"},{"lineNumber":935,"author":{"gitId":"shreytheshreyas"},"content":"    * Prerequisites: Required to be in the Project-View and have five tasks created."},{"lineNumber":936,"author":{"gitId":"shreytheshreyas"},"content":"    * Test case: `priority t/7 p/3`: Since there are only five tasks in the task list, the task-id provided to the program is invalid and the program will throw an exception to tell the user to enter a valid task-id."},{"lineNumber":937,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":938,"author":{"gitId":"shreytheshreyas"},"content":"#### C.10 Assigning Estimated Completion Time to Task"},{"lineNumber":939,"author":{"gitId":"shreytheshreyas"},"content":"1. Assigning an Estimated completion time to a Task in Project-View"},{"lineNumber":940,"author":{"gitId":"shreytheshreyas"},"content":"    * Prerequisites: Required to be in Project-View of a created project and have tasks created in that respective project."},{"lineNumber":941,"author":{"gitId":"shreytheshreyas"},"content":"    * Test case: `estimate t/1 h/3 m/10`:  Since the state of the program is in Project-View an estimated completion time of 1 hour and 10 minutes will be assigned to task 1 and an acknoweldegment message is also displayed on the screen to ensure the user that the estimated completion time has been assigned."},{"lineNumber":942,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":943,"author":{"gitId":"shreytheshreyas"},"content":"2. Assigning an Estimated completion time to a Task in Home-View"},{"lineNumber":944,"author":{"gitId":"shreytheshreyas"},"content":"    * Prerequisites: Required to be in Home-View"},{"lineNumber":945,"author":{"gitId":"shreytheshreyas"},"content":"    * Test case: `estimate t/1 h/3 m/10`: Since the state of the program is in Home-View, there will only be projects present, so the user will not be able to assign an estimated completion time to a task and the program throws an exception."},{"lineNumber":946,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":947,"author":{"gitId":"shreytheshreyas"},"content":"3. Assigning an Estimated completion time to a Task whose task-id is greater than the total number of tasks"},{"lineNumber":948,"author":{"gitId":"shreytheshreyas"},"content":"    * Prerequisites: Required to be in the Project-View and have five tasks created."},{"lineNumber":949,"author":{"gitId":"shreytheshreyas"},"content":"    * Test case: `estimate t/7 h/3 m/20`: Since there are only five tasks in the task list, the task-id provided to the program is invalid and the program will throw an exception to tell the user to enter a valid task-id."},{"lineNumber":950,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":951,"author":{"gitId":"shreytheshreyas"},"content":"#### C.11 Assigning Actual Completion Time to Task"},{"lineNumber":952,"author":{"gitId":"shreytheshreyas"},"content":"1. Assigning an Actual completion time to a completed Task in Project-View"},{"lineNumber":953,"author":{"gitId":"shreytheshreyas"},"content":"    * Prerequisites: Required to be in Project-View of a created project and have atleast one completed task in that respective project."},{"lineNumber":954,"author":{"gitId":"shreytheshreyas"},"content":"    * Test case: `actual t/1 h/3 m/10`:  Since the state of the program is in Project-View and the task in marked as completed, an actual completion time of 1 hour and 10 mimnutes will be assigned to task 1 and an acknoweldegment message is also displayed on the screen to ensure the user that the actual completion time has been assigned."},{"lineNumber":955,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":956,"author":{"gitId":"shreytheshreyas"},"content":"2. Assigning an Actual completion time to a incompleted Task in Project-View"},{"lineNumber":957,"author":{"gitId":"shreytheshreyas"},"content":"    * Prerequisites: Required to be in Project-View of a created project and have tasks created in that respective project."},{"lineNumber":958,"author":{"gitId":"shreytheshreyas"},"content":"    * Test case: `actual t/1 h/3 m/10`:  Since the state of the program is in Project-View and task 1 has not been completed an actual completion time cannot be assigned to the task and the program will display an exception message that informs the user that the task should be marked as completed."},{"lineNumber":959,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":960,"author":{"gitId":"shreytheshreyas"},"content":"3. Assigning an Actual completion time to a Task in Home-View"},{"lineNumber":961,"author":{"gitId":"shreytheshreyas"},"content":"    * Prerequisites: Required to be in Home-View."},{"lineNumber":962,"author":{"gitId":"shreytheshreyas"},"content":"    * Test case: `actual t/1 h/3 m/10`: Since the state of the program is in Home-View, there will only be projects present, so the user will not be able to assign an actual completion time to a task and the program throws an exception."},{"lineNumber":963,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":964,"author":{"gitId":"shreytheshreyas"},"content":"4. Assigning an Actual completion time to a Task whose task-id is greater than the total number of tasks"},{"lineNumber":965,"author":{"gitId":"shreytheshreyas"},"content":"    * Prerequisites: Required to be in the Project-View and have five tasks created."},{"lineNumber":966,"author":{"gitId":"shreytheshreyas"},"content":"    * Test case: `actual t/7 h/3 m/25`: Since there are only five tasks in the task list, the task-id provided to the program is invalid and the program will throw an exception to tell the user to enter a valid task-id."},{"lineNumber":967,"author":{"gitId":"shreytheshreyas"},"content":"#### C.12 Sorting Tasks in TaskList"},{"lineNumber":968,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":969,"author":{"gitId":"shreytheshreyas"},"content":"1. Sorting Tasks by deadline in Project-View"},{"lineNumber":970,"author":{"gitId":"shreytheshreyas"},"content":"    *Prerequisites: Required to be in Project-View of a created project and have tasks in that respective project."},{"lineNumber":971,"author":{"gitId":"shreytheshreyas"},"content":"    *Test case: `sort s/d`: Since the state of the program is in project-view, all the tasks in the list that have a deadline will be sorted in ascending order and the tasks that do not have a deadline are placed towards the end."},{"lineNumber":972,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":973,"author":{"gitId":"shreytheshreyas"},"content":"2. Sorting Tasks by completion time in Project-View"},{"lineNumber":974,"author":{"gitId":"shreytheshreyas"},"content":"    *Prerequisites:  Required to be in Project-View of a created project and have tasks in that respective project."},{"lineNumber":975,"author":{"gitId":"shreytheshreyas"},"content":"    *Test case: `sort s/t`: Since the state of the program is in Project-View, all the tasks in the list that have an actual time will be sorted in ascending order and the tasks that do not have an actual time are placed towards the end of the list."},{"lineNumber":976,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":977,"author":{"gitId":"shreytheshreyas"},"content":"3. Sorting Tasks by priority in Project-View"},{"lineNumber":978,"author":{"gitId":"shreytheshreyas"},"content":"    *Prerequisites:  Required to be in Project-View of a created project and have tasks in that respective project."},{"lineNumber":979,"author":{"gitId":"shreytheshreyas"},"content":"    *Test case: `sort s/p`: Since the state of the program is in Project-View, all the tasks in the list that have a priority will be sorted in ascending order of priority and the tasks that do not have a priority are placed towards the end of the list."},{"lineNumber":980,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":981,"author":{"gitId":"shreytheshreyas"},"content":"4. Sorting Tasks in Home-View."},{"lineNumber":982,"author":{"gitId":"shreytheshreyas"},"content":"    * Prerequisites: Required to be in Home-View."},{"lineNumber":983,"author":{"gitId":"shreytheshreyas"},"content":"    * Test case: `sort s/t`: Since the state of the program is in Home-View, there will only be projects present, so the user will not be able to sort any sets of tasks and the program throws an exception."},{"lineNumber":984,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":985,"author":{"gitId":"samuellleow"},"content":"### \u003cins\u003eMember-Specific Tests\u003c/ins\u003e"},{"lineNumber":986,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":987,"author":{"gitId":"shreytheshreyas"},"content":"#### C.13 Adding a Member"},{"lineNumber":988,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":989,"author":{"gitId":"shreytheshreyas"},"content":"1. Adding a member in Home-View "},{"lineNumber":990,"author":{"gitId":"shreytheshreyas"},"content":"    * Prerequisites: Required to be in Home-View."},{"lineNumber":991,"author":{"gitId":"shreytheshreyas"},"content":"    * Test case: `member n/John Doe`: Since the state of the program is in home view, the member will be created and added to the member arraylist. The program also displays an acknoweldegment message to ensure the user that a new member has been added."},{"lineNumber":992,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":993,"author":{"gitId":"shreytheshreyas"},"content":"2. Adding a member in Project-View "},{"lineNumber":994,"author":{"gitId":"shreytheshreyas"},"content":"    * Prerequisites: Required to be in Project-View."},{"lineNumber":995,"author":{"gitId":"shreytheshreyas"},"content":"    * Test case: `member n/John Doe`: Since the state of the program is in Project-View, the program will throw an exception message to the user because a member can only be added in the Home-View."},{"lineNumber":996,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":997,"author":{"gitId":"shreytheshreyas"},"content":"#### C.14 Removing a Member"},{"lineNumber":998,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":999,"author":{"gitId":"shreytheshreyas"},"content":"1. Removing a member in Home-View "},{"lineNumber":1000,"author":{"gitId":"shreytheshreyas"},"content":"    * Prerequisites: Required to be in Home-View."},{"lineNumber":1001,"author":{"gitId":"shreytheshreyas"},"content":"    * Test case: `remove m/1`: Since the state of the program is in Home-View, the member will be removed from the member arraylist. The program also displays an acknoweldegment message to ensure the user that the member has has been removed."},{"lineNumber":1002,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":1003,"author":{"gitId":"shreytheshreyas"},"content":"2. Removing a member in Project-View "},{"lineNumber":1004,"author":{"gitId":"shreytheshreyas"},"content":"    * Prerequisites: Required to be in Project-View"},{"lineNumber":1005,"author":{"gitId":"shreytheshreyas"},"content":"    * Test case: `remove m/2`: Since the state of the program is in Project-View, the program will throw an exception message to the user because a member can only be removed in the Home-View."},{"lineNumber":1006,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":1007,"author":{"gitId":"shreytheshreyas"},"content":"3. Removing a member from a Task whose task-id is greater than the total number of tasks"},{"lineNumber":1008,"author":{"gitId":"shreytheshreyas"},"content":"    * Prerequisites: Required to be in Home-View with five members added to the members list."},{"lineNumber":1009,"author":{"gitId":"shreytheshreyas"},"content":"    * Test case: `remove m/6`: Since there are only five members in the members list, the member-id provided to the program is invalid and the program will throw an exception to tell the user to enter a valid member-id."},{"lineNumber":1010,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":1011,"author":{"gitId":"shreytheshreyas"},"content":"#### C.15 Assigning a Member to a Project"},{"lineNumber":1012,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":1013,"author":{"gitId":"shreytheshreyas"},"content":"1. Assigning a member to a project in Home-View "},{"lineNumber":1014,"author":{"gitId":"shreytheshreyas"},"content":"    * Prerequisites: Required to be in Home-View."},{"lineNumber":1015,"author":{"gitId":"shreytheshreyas"},"content":"    * Test case: `assign m/2 p/1`: Since the state of the program is in Home-View, the member will be assigned to the respective project. The program also displays an acknoweldegment message to ensure the user that a new member has been added."},{"lineNumber":1016,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":1017,"author":{"gitId":"shreytheshreyas"},"content":"2. Assigning a member to a project in Project-View "},{"lineNumber":1018,"author":{"gitId":"shreytheshreyas"},"content":"    * Prerequisites: Required to be in Project-View."},{"lineNumber":1019,"author":{"gitId":"shreytheshreyas"},"content":"    * Test case: `assign m/1 p/1`: Since the state of the program is in Project-View, the program will throw an exception message to the user because a members can only be assigned to projects in the Home-View."},{"lineNumber":1020,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":1021,"author":{"gitId":"shreytheshreyas"},"content":"#### C.16 Assigning a Member to a Task"},{"lineNumber":1022,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":1023,"author":{"gitId":"shreytheshreyas"},"content":"1. Assigning a member to a project in Home-View "},{"lineNumber":1024,"author":{"gitId":"shreytheshreyas"},"content":"    * Prerequisites: Required to be in Home-View."},{"lineNumber":1025,"author":{"gitId":"shreytheshreyas"},"content":"    * Test case: `assign t/1 m/2`: Since the state of the program is in Project-View, the program will throw an exception message to the user because a member can only be assigned to tasks in the Project-View."},{"lineNumber":1026,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":1027,"author":{"gitId":"shreytheshreyas"},"content":"2. Assigning a member to a project in Project-View "},{"lineNumber":1028,"author":{"gitId":"shreytheshreyas"},"content":"    * Prerequisites: Required to be in Project-View."},{"lineNumber":1029,"author":{"gitId":"shreytheshreyas"},"content":"    * Test case: `assign t/2 m/1`: Since the state of the program is in  Project-View, the member will be assigned to the respective project. The program also displays an acknoweldegment message to ensure the user that the new member has been assigned to the respective task."},{"lineNumber":1030,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":1031,"author":{"gitId":"shreytheshreyas"},"content":"4. Assigning a member to a Task whose task-id is greater than the total number of tasks"},{"lineNumber":1032,"author":{"gitId":"shreytheshreyas"},"content":"    * Prerequisites: Required to be in the Project-View and have five tasks created."},{"lineNumber":1033,"author":{"gitId":"shreytheshreyas"},"content":"    * Test case: `assign m/1 t/8`: Since there are only five tasks in the task list, the task-id provided to the program is invalid and the program will throw an exception to tell the user to enter a valid task-id."},{"lineNumber":1034,"author":{"gitId":"-"},"content":""},{"lineNumber":1035,"author":{"gitId":"-"},"content":""},{"lineNumber":1036,"author":{"gitId":"-"},"content":""},{"lineNumber":1037,"author":{"gitId":"-"},"content":""},{"lineNumber":1038,"author":{"gitId":"-"},"content":""},{"lineNumber":1039,"author":{"gitId":"-"},"content":""},{"lineNumber":1040,"author":{"gitId":"-"},"content":""},{"lineNumber":1041,"author":{"gitId":"-"},"content":""},{"lineNumber":1042,"author":{"gitId":"-"},"content":""}],"authorContributionMap":{"thatseant":127,"samuellleow":103,"shreytheshreyas":725,"-":87}},{"path":"docs/README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"riazaham"},"content":"# Ez Manager"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"riazaham"},"content":"Have you found yourself in loads of projects and tasks"},{"lineNumber":4,"author":{"gitId":"riazaham"},"content":"but no way of managing them quickly and efficiently? "},{"lineNumber":5,"author":{"gitId":"riazaham"},"content":"Welcome to EZ Manager where managing your projects and tasks"},{"lineNumber":6,"author":{"gitId":"riazaham"},"content":"are just so \"ez\". Click on the following links to find out"},{"lineNumber":7,"author":{"gitId":"riazaham"},"content":"more!"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"Useful links:"},{"lineNumber":10,"author":{"gitId":"-"},"content":"* [User Guide](UserGuide.md)"},{"lineNumber":11,"author":{"gitId":"-"},"content":"* [Developer Guide](DeveloperGuide.md)"},{"lineNumber":12,"author":{"gitId":"-"},"content":"* [About Us](AboutUs.md)"}],"authorContributionMap":{"riazaham":6,"-":6}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide"},{"lineNumber":2,"author":{"gitId":"-"},"content":"## Introduction"},{"lineNumber":3,"author":{"gitId":"thatseant"},"content":"Welcome to EZ Manager! "},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"thatseant"},"content":"EZ Manager is a CLI (Command Line Interface) software tool for Software Engineering Project Managers like yourself to manage your projects, tasks and team members in an all in one app."},{"lineNumber":6,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":7,"author":{"gitId":"thatseant"},"content":"With Ez Manager\u0027s command line interface, you can easily make changes and updates with a few simple keystrokes! Our app also conveniently presents the most important information at a glance with just two main views: Home View and Project View."},{"lineNumber":8,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":9,"author":{"gitId":"thatseant"},"content":"### How to use this guide"},{"lineNumber":10,"author":{"gitId":"thatseant"},"content":"This guide provides a documentation of the commands in EZ Manager. "},{"lineNumber":11,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":12,"author":{"gitId":"thatseant"},"content":"These commands are categorised into the two main views they can be called from: Home View and Project View. "},{"lineNumber":13,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":14,"author":{"gitId":"thatseant"},"content":"Click on any of the links on the Table of Contents to go directly to the specific commands you want to call. "},{"lineNumber":15,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":16,"author":{"gitId":"thatseant"},"content":"At the end of the document, the command summary section provides a helpful summary of all of EZ Manager\u0027s commands."},{"lineNumber":17,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":18,"author":{"gitId":"riazaham"},"content":":warning: : This refers to any formatting issues to look out for"},{"lineNumber":19,"author":{"gitId":"thatseant"},"content":"when keying in the commands."},{"lineNumber":20,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":21,"author":{"gitId":"riazaham"},"content":":exclamation: : This refers to any other constraints to look out for"},{"lineNumber":22,"author":{"gitId":"thatseant"},"content":"besides formatting issues."},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"riazaham"},"content":":bulb: : This refers to any helpful tips that might prove helpful to you.  "},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"riazaham"},"content":"---"},{"lineNumber":27,"author":{"gitId":"riazaham"},"content":"\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"thatseant"},"content":"### Structure"},{"lineNumber":30,"author":{"gitId":"thatseant"},"content":"Under each command, a description of what the command does is provided. "},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"thatseant"},"content":"Then the format of the command is specified in a `code snippet`."},{"lineNumber":33,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":34,"author":{"gitId":"thatseant"},"content":"You can see an example usage of the command followed by the expected output. "},{"lineNumber":35,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":36,"author":{"gitId":"thatseant"},"content":"```"},{"lineNumber":37,"author":{"gitId":"thatseant"},"content":"command PARAMETER_TYPE/VALUE"},{"lineNumber":38,"author":{"gitId":"thatseant"},"content":"________________________________"},{"lineNumber":39,"author":{"gitId":"thatseant"},"content":"example output"},{"lineNumber":40,"author":{"gitId":"thatseant"},"content":"```  "},{"lineNumber":41,"author":{"gitId":"riazaham"},"content":"---  "},{"lineNumber":42,"author":{"gitId":"riazaham"},"content":"\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e  "},{"lineNumber":43,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":44,"author":{"gitId":"riazaham"},"content":"## Table of Contents"},{"lineNumber":45,"author":{"gitId":"thatseant"},"content":"1. [Quick Start](#1-quick-start)"},{"lineNumber":46,"author":{"gitId":"riazaham"},"content":"2. [Terminologies](#terminologies)"},{"lineNumber":47,"author":{"gitId":"thatseant"},"content":"3. [Home View](#home-view)"},{"lineNumber":48,"author":{"gitId":"thatseant"},"content":"    1. [Commands](#31-home-view-commands)"},{"lineNumber":49,"author":{"gitId":"samuelchristopher"},"content":"        1. [List: Viewing the updated Home View](#311-viewing-the-updated-home-view-list)"},{"lineNumber":50,"author":{"gitId":"samuelchristopher"},"content":"        2. [Project: Adding a project](#312-adding-a-project-project)"},{"lineNumber":51,"author":{"gitId":"samuelchristopher"},"content":"        3. [Select: Selecting a project](#313-selecting-a-project-select)"},{"lineNumber":52,"author":{"gitId":"samuelchristopher"},"content":"        4. [Done: Marking a project as done](#314-marking-a-project-as-done-done)"},{"lineNumber":53,"author":{"gitId":"samuelchristopher"},"content":"        5. [Deadline: Adding a deadline to a project](#315-adding-a-deadline-to-a-project-deadline)"},{"lineNumber":54,"author":{"gitId":"samuelchristopher"},"content":"        6. [Description: Adding a description to a project](#316-adding-a-description-to-a-project-description)"},{"lineNumber":55,"author":{"gitId":"samuelchristopher"},"content":"        7. [Delete: Deleting a project](#317-deleting-a-project-delete)"},{"lineNumber":56,"author":{"gitId":"samuelchristopher"},"content":"        8. [Member: Adding a member](#318-adding-a-member-member)"},{"lineNumber":57,"author":{"gitId":"samuelchristopher"},"content":"        9. [Assign: Assigning a member to a project](#319-assigning-a-member-to-a-project-assign)"},{"lineNumber":58,"author":{"gitId":"samuelchristopher"},"content":"        10. [Remove: Removing a member](#3110-removing-a-member-remove)"},{"lineNumber":59,"author":{"gitId":"samuelchristopher"},"content":"        11. [Hours: Hours worked by member](#3111-view-hours-worked-by-member-hours)"},{"lineNumber":60,"author":{"gitId":"samuelchristopher"},"content":"        12. [Bye: Exit Program](#3112-exiting-ez-Manager-bye)"},{"lineNumber":61,"author":{"gitId":"thatseant"},"content":"4. [Project View](#project-view)"},{"lineNumber":62,"author":{"gitId":"thatseant"},"content":"    1. [Commands](#project-view-commands)"},{"lineNumber":63,"author":{"gitId":"samuelchristopher"},"content":"        1. [List: Viewing the updated Project View](#411-viewing-the-updated-project-view-list)"},{"lineNumber":64,"author":{"gitId":"samuelchristopher"},"content":"        2. [Task: Adding a task](#412-adding-a-task-task)"},{"lineNumber":65,"author":{"gitId":"samuelchristopher"},"content":"        3. [Edit: Editing a task name](#413-editing-a-task-name-edit)"},{"lineNumber":66,"author":{"gitId":"samuelchristopher"},"content":"        4. [Done: Marking a task as done](#414-marking-a-task-as-done-done)"},{"lineNumber":67,"author":{"gitId":"samuelchristopher"},"content":"        5. [Deadline: Adding a deadline to a task](#415-adding-a-deadline-to-a-task-deadline)"},{"lineNumber":68,"author":{"gitId":"thatseant"},"content":"        6. [Priority: Adding a priority to a task](#416-adding-a-priority-to-a-task-priority)"},{"lineNumber":69,"author":{"gitId":"samuelchristopher"},"content":"        7. [Delete: Deleting a task](#417-deleting-a-task-delete)"},{"lineNumber":70,"author":{"gitId":"samuelchristopher"},"content":"        8. [Assign: Assigning a member to a task](#418-assigning-a-member-to-a-task-assign)"},{"lineNumber":71,"author":{"gitId":"samuelchristopher"},"content":"        9. [Remove: Removing a member from the project](#419-removing-a-member-remove)"},{"lineNumber":72,"author":{"gitId":"samuelchristopher"},"content":"        10. [Estimate: Adding estimated time to a task](#4110-add-estimated-time-estimate)"},{"lineNumber":73,"author":{"gitId":"samuelchristopher"},"content":"        11. [Actual: Adding actual time to a task](#4111-add-actual-time-taken-actual)"},{"lineNumber":74,"author":{"gitId":"samuelchristopher"},"content":"        12. [Sort: Sort tasks](#4112-sort-tasks-sort)"},{"lineNumber":75,"author":{"gitId":"samuelchristopher"},"content":"        13. [Bye: Exit Program](#4113-exiting-ez-manager-bye)"},{"lineNumber":76,"author":{"gitId":"-"},"content":"5. [FAQ](#faq)"},{"lineNumber":77,"author":{"gitId":"thatseant"},"content":"6. [Command Summary](#command-summary)  "},{"lineNumber":78,"author":{"gitId":"thatseant"},"content":"  "},{"lineNumber":79,"author":{"gitId":"riazaham"},"content":" ---  "},{"lineNumber":80,"author":{"gitId":"riazaham"},"content":"\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e      "},{"lineNumber":81,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":82,"author":{"gitId":"thatseant"},"content":"## 1. Quick Start"},{"lineNumber":83,"author":{"gitId":"-"},"content":"1. Ensure that you have Java 11 or above installed."},{"lineNumber":84,"author":{"gitId":"thatseant"},"content":"2. Download the latest version of `EZ Manager` from [here](https://github.com/AY2021S1-CS2113T-T09-1/tp/releases)."},{"lineNumber":85,"author":{"gitId":"thatseant"},"content":"3. Copy the JAR  file into an empty new folder."},{"lineNumber":86,"author":{"gitId":"thatseant"},"content":"4. Open Command Prompt (on Windows) or Terminal (on Mac) and cd into the new folder."},{"lineNumber":87,"author":{"gitId":"thatseant"},"content":"5. Then type java -jar ezManager.jar to run EZ Manager."},{"lineNumber":88,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"thatseant"},"content":"## 2. Terminologies"},{"lineNumber":91,"author":{"gitId":"riazaham"},"content":"- **Home View**: Refers to the state of the program in Home View."},{"lineNumber":92,"author":{"gitId":"riazaham"},"content":"In this view, you can execute project and member commands but"},{"lineNumber":93,"author":{"gitId":"riazaham"},"content":"you cannot execute task commands."},{"lineNumber":94,"author":{"gitId":"riazaham"},"content":"- **Project View**: Refers to the state of the program in Project View."},{"lineNumber":95,"author":{"gitId":"riazaham"},"content":"In this view, you can execute task and member commands but"},{"lineNumber":96,"author":{"gitId":"riazaham"},"content":"you cannot execute project commands."},{"lineNumber":97,"author":{"gitId":"riazaham"},"content":"- **Project list**: Refers to the list of projects currently"},{"lineNumber":98,"author":{"gitId":"riazaham"},"content":"existing in the system"},{"lineNumber":99,"author":{"gitId":"-"},"content":"- **Task list**: Refers to the list of tasks currentl"},{"lineNumber":100,"author":{"gitId":"riazaham"},"content":"existing in the system"},{"lineNumber":101,"author":{"gitId":"-"},"content":"- **Member list**: Refers to the list of membersrrently"},{"lineNumber":102,"author":{"gitId":"riazaham"},"content":"existing in the system"},{"lineNumber":103,"author":{"gitId":"riazaham"},"content":"- **PROJECT_INDEX**: Every existing project would be assigned"},{"lineNumber":104,"author":{"gitId":"riazaham"},"content":"a positive integer. Hence, the PROJECT_INDEX refers to this"},{"lineNumber":105,"author":{"gitId":"riazaham"},"content":"positive integer. You can retrieve the PROJECT_INDEXes of "},{"lineNumber":106,"author":{"gitId":"riazaham"},"content":"all projects by using the `list` command in HomeView"},{"lineNumber":107,"author":{"gitId":"riazaham"},"content":"- **TASK_INDEX**: Every existing task would be assigned"},{"lineNumber":108,"author":{"gitId":"riazaham"},"content":"a positive integer. Hence, the TASK_INDEX refers to this"},{"lineNumber":109,"author":{"gitId":"riazaham"},"content":"positive integer. You can retrieve the TASK_INDEXes of "},{"lineNumber":110,"author":{"gitId":"riazaham"},"content":"all tasks by using the `list` command in Project View"},{"lineNumber":111,"author":{"gitId":"thatseant"},"content":"- **MEMBER_INDEX**: Every existing member would be assigned"},{"lineNumber":112,"author":{"gitId":"thatseant"},"content":"a positive integer. Hence, the MEMBER_INDEX refers to this"},{"lineNumber":113,"author":{"gitId":"thatseant"},"content":"positive integer. You can retrieve the MEMBER_INDEXes of "},{"lineNumber":114,"author":{"gitId":"thatseant"},"content":"Members by using the `list` command in Home View or in Project View  "},{"lineNumber":115,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":116,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":117,"author":{"gitId":"thatseant"},"content":"\u003e  :warning: Project Index, Task Index and Member Index must be positive integers."},{"lineNumber":118,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":119,"author":{"gitId":"riazaham"},"content":"---"},{"lineNumber":120,"author":{"gitId":"riazaham"},"content":"\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"},{"lineNumber":121,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":122,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":123,"author":{"gitId":"samuellleow"},"content":"## 3. Home View (Samuel Leow Wei Han)"},{"lineNumber":124,"author":{"gitId":"samuellleow"},"content":"As a project manager, you want to have a quick overview of all the projects that are under your charge."},{"lineNumber":125,"author":{"gitId":"samuellleow"},"content":"Apart from just projects, you will also like to be able to see what your members are working on, so that you can allocate "},{"lineNumber":126,"author":{"gitId":"samuellleow"},"content":"work evenly among your members."},{"lineNumber":127,"author":{"gitId":"-"},"content":"The Home View does just that. You get a concise display of the full list of projects and members that are under your purview. "},{"lineNumber":128,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":129,"author":{"gitId":"samuellleow"},"content":"At a glance, you will notice the few most important details about your project such as its status, deadline and number of tasks completed."},{"lineNumber":130,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":131,"author":{"gitId":"samuellleow"},"content":"The Home View also conveniently provides you with warnings for uncompleted tasks with imminent deadlines."},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"samuellleow"},"content":"Remarks shown for each project depends on the deadline of its tasks."},{"lineNumber":134,"author":{"gitId":"samuellleow"},"content":"Task that you have not completed and has an upcoming deadline due in 5 days or less will have `!!!Warning!!!` shown in the remarks as well as a countdown to the deadline."},{"lineNumber":135,"author":{"gitId":"samuellleow"},"content":"Task that you have not completed but has a deadline due in 6 days or more will only have the name of task and date of deadline displayed in the remarks. "},{"lineNumber":136,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":137,"author":{"gitId":"samuellleow"},"content":"You can return to the Home View with the command shown below."},{"lineNumber":138,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":139,"author":{"gitId":"thatseant"},"content":"\u003e ### :bulb: Accessing Home View"},{"lineNumber":140,"author":{"gitId":"thatseant"},"content":"\u003e"},{"lineNumber":141,"author":{"gitId":"thatseant"},"content":"\u003e Format: `home`"},{"lineNumber":142,"author":{"gitId":"thatseant"},"content":"\u003e"},{"lineNumber":143,"author":{"gitId":"samuellleow"},"content":"\u003e Displays the Home View. If the user is in the Project View, this command changes the view to Home View and "},{"lineNumber":144,"author":{"gitId":"samuellleow"},"content":"\u003e commands specific to the Home View is enabled.  "},{"lineNumber":145,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":146,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":147,"author":{"gitId":"samuellleow"},"content":"Example of usage and output:"},{"lineNumber":148,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":149,"author":{"gitId":"samuellleow"},"content":"![ProjectView2](https://i.ibb.co/xKvJZj0/ss2.png)"},{"lineNumber":150,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":151,"author":{"gitId":"riazaham"},"content":"---"},{"lineNumber":152,"author":{"gitId":"riazaham"},"content":"\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"},{"lineNumber":153,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":154,"author":{"gitId":"thatseant"},"content":"## 3.1. Home View Commands"},{"lineNumber":155,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":156,"author":{"gitId":"thatseant"},"content":"\u003e ### Command Format"},{"lineNumber":157,"author":{"gitId":"thatseant"},"content":"\u003e"},{"lineNumber":158,"author":{"gitId":"thatseant"},"content":"\u003e Commands are specified in the following format:"},{"lineNumber":159,"author":{"gitId":"thatseant"},"content":"\u003e"},{"lineNumber":160,"author":{"gitId":"samuellleow"},"content":"\u003e\u003e `COMMAND_TYPE`  `PARAMETER1` `PARAMETER2` ..."},{"lineNumber":161,"author":{"gitId":"samuellleow"},"content":"\u003e"},{"lineNumber":162,"author":{"gitId":"thatseant"},"content":"\u003e **:bulb: Parameters can be specified in any order!**"},{"lineNumber":163,"author":{"gitId":"thatseant"},"content":"\u003e"},{"lineNumber":164,"author":{"gitId":"samuellleow"},"content":"\u003e **:bulb: Commands and parameter types can be in either lowercase or uppercase** "},{"lineNumber":165,"author":{"gitId":"samuellleow"},"content":"\u003e"},{"lineNumber":166,"author":{"gitId":"samuellleow"},"content":"\u003e Parameters are specified in the following format:"},{"lineNumber":167,"author":{"gitId":"thatseant"},"content":"\u003e"},{"lineNumber":168,"author":{"gitId":"thatseant"},"content":"\u003e `PARAMETER_TYPE/PARAMETER_VALUE`"},{"lineNumber":169,"author":{"gitId":"samuellleow"},"content":"\u003e"},{"lineNumber":170,"author":{"gitId":"samuellleow"},"content":"\u003e **:bulb: Parameter values will take in whatever that has been entered including unnecessary spacing** "},{"lineNumber":171,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":172,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":173,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":174,"author":{"gitId":"samuellleow"},"content":"### 3.1.1. Viewing the Home View: `list` (Samuel Leow Wei Han)"},{"lineNumber":175,"author":{"gitId":"samuellleow"},"content":"As a project manager, you want to keep an eye on your team\u0027s progress and workload. Viewing the Home View provides you with the big picture, allowing you to focus your attention on the projects that are more important."},{"lineNumber":176,"author":{"gitId":"samuellleow"},"content":"Additionally, after making some changes to your project information or assigning members to a new project, "},{"lineNumber":177,"author":{"gitId":"samuellleow"},"content":"you will want to see the updated Home View immediately. "},{"lineNumber":178,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":179,"author":{"gitId":"samuellleow"},"content":"You can display the Home View with the command shown below. You will not have to worry about drowning in a sea of information from now on!"},{"lineNumber":180,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":181,"author":{"gitId":"thatseant"},"content":"Format: `list`"},{"lineNumber":182,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":183,"author":{"gitId":"samuellleow"},"content":"Example of usage and output:"},{"lineNumber":184,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":185,"author":{"gitId":"samuellleow"},"content":"![ProjectView2](https://i.ibb.co/xKvJZj0/ss2.png)"},{"lineNumber":186,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":187,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":188,"author":{"gitId":"samuellleow"},"content":"### 3.1.2. Adding a project: `project` (Samuel Leow Wei Han)"},{"lineNumber":189,"author":{"gitId":"samuellleow"},"content":"You have just struck a deal with Company X and are being tasked to design a particular software."},{"lineNumber":190,"author":{"gitId":"samuellleow"},"content":"But first things first, you have to create a new project before you start creating tasks and allocating them to your team members."},{"lineNumber":191,"author":{"gitId":"samuellleow"},"content":"Why is this important? Organising your tasks, members, deadlines and more will enable you to have a clearer understanding on what to do."},{"lineNumber":192,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":193,"author":{"gitId":"samuellleow"},"content":"You can simply list a new project on your project list with the command shown below."},{"lineNumber":194,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":195,"author":{"gitId":"riazaham"},"content":"Format: `project n/PROJECT_NAME`"},{"lineNumber":196,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":197,"author":{"gitId":"samuellleow"},"content":"\u003e  :warning: Project names should not include slashes or an error will be shown."},{"lineNumber":198,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":199,"author":{"gitId":"thatseant"},"content":"Example usage and output: "},{"lineNumber":200,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":201,"author":{"gitId":"thatseant"},"content":"\u003e  Adds the project \u0027Web Development\u0027 to the project list."},{"lineNumber":202,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":203,"author":{"gitId":"thatseant"},"content":"```"},{"lineNumber":204,"author":{"gitId":"samuellleow"},"content":"project n/Web Development"},{"lineNumber":205,"author":{"gitId":"thatseant"},"content":"____________________________________________________________"},{"lineNumber":206,"author":{"gitId":"samuellleow"},"content":"Project \"Web Development\" created!"},{"lineNumber":207,"author":{"gitId":"thatseant"},"content":"```  "},{"lineNumber":208,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":209,"author":{"gitId":"samuellleow"},"content":"**Examples of Exception Handling for this command**"},{"lineNumber":210,"author":{"gitId":"shreytheshreyas"},"content":"\u003e Adding a Project without providing the n/ parameter"},{"lineNumber":211,"author":{"gitId":"shreytheshreyas"},"content":"```"},{"lineNumber":212,"author":{"gitId":"shreytheshreyas"},"content":"project New Project"},{"lineNumber":213,"author":{"gitId":"shreytheshreyas"},"content":"Certain Parameters are missing!"},{"lineNumber":214,"author":{"gitId":"shreytheshreyas"},"content":"```  "},{"lineNumber":215,"author":{"gitId":"riazaham"},"content":"---"},{"lineNumber":216,"author":{"gitId":"riazaham"},"content":"\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e    "},{"lineNumber":217,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":218,"author":{"gitId":"samuellleow"},"content":"### 3.1.3. Selecting a project: `select` (Samuel Leow Wei Han)"},{"lineNumber":219,"author":{"gitId":"samuellleow"},"content":"There are many requirements to fulfil in order to develop a new software product. "},{"lineNumber":220,"author":{"gitId":"samuellleow"},"content":"With numerous products to look after, you will want to be able to zoom in on a certain project and start working on it."},{"lineNumber":221,"author":{"gitId":"samuellleow"},"content":"You want to ensure that everything you have entered pertaining to a certain project will be stored accordingly."},{"lineNumber":222,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":223,"author":{"gitId":"samuellleow"},"content":"This can be accomplished with the command shown below, bringing you to the Project View of the project you have specified."},{"lineNumber":224,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":225,"author":{"gitId":"thatseant"},"content":"\u003e :exclamation: The project must exist before it can be selected."},{"lineNumber":226,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":227,"author":{"gitId":"riazaham"},"content":"Format: `select p/PROJECT_INDEX`"},{"lineNumber":228,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":229,"author":{"gitId":"riazaham"},"content":"Example of usage: "},{"lineNumber":230,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":231,"author":{"gitId":"thatseant"},"content":"\u003e Selects the first project in the project list and displays Project View of first project."},{"lineNumber":232,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":233,"author":{"gitId":"thatseant"},"content":"```"},{"lineNumber":234,"author":{"gitId":"thatseant"},"content":"select p/1"},{"lineNumber":235,"author":{"gitId":"thatseant"},"content":"```"},{"lineNumber":236,"author":{"gitId":"samuellleow"},"content":"**Examples of Exception Handling for this command**"},{"lineNumber":237,"author":{"gitId":"shreytheshreyas"},"content":"\u003e Adding a Project without providing the p/ parameter"},{"lineNumber":238,"author":{"gitId":"shreytheshreyas"},"content":"```"},{"lineNumber":239,"author":{"gitId":"shreytheshreyas"},"content":"select 1"},{"lineNumber":240,"author":{"gitId":"shreytheshreyas"},"content":"Certain Parameters are missing!"},{"lineNumber":241,"author":{"gitId":"shreytheshreyas"},"content":"```"},{"lineNumber":242,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":243,"author":{"gitId":"shreytheshreyas"},"content":"\u003e Providing Project name instead of Project index"},{"lineNumber":244,"author":{"gitId":"shreytheshreyas"},"content":"```"},{"lineNumber":245,"author":{"gitId":"shreytheshreyas"},"content":"select p/\"Web Development\""},{"lineNumber":246,"author":{"gitId":"shreytheshreyas"},"content":"Index must be an integer!"},{"lineNumber":247,"author":{"gitId":"shreytheshreyas"},"content":"```"},{"lineNumber":248,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":249,"author":{"gitId":"shreytheshreyas"},"content":"\u003e Selecting a invalid Project-ID"},{"lineNumber":250,"author":{"gitId":"shreytheshreyas"},"content":"```"},{"lineNumber":251,"author":{"gitId":"shreytheshreyas"},"content":"select p/8"},{"lineNumber":252,"author":{"gitId":"shreytheshreyas"},"content":"_____________________________________________________________________________________"},{"lineNumber":253,"author":{"gitId":"shreytheshreyas"},"content":"Project ID does not exist!"},{"lineNumber":254,"author":{"gitId":"shreytheshreyas"},"content":"```  "},{"lineNumber":255,"author":{"gitId":"riazaham"},"content":"---"},{"lineNumber":256,"author":{"gitId":"riazaham"},"content":"\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e  "},{"lineNumber":257,"author":{"gitId":"riazaham"},"content":"  "},{"lineNumber":258,"author":{"gitId":"samuellleow"},"content":"### 3.1.4. Marking a project as done: `done` (Samuel Leow Wei Han)"},{"lineNumber":259,"author":{"gitId":"samuellleow"},"content":"Now that you have finally finished developing your project, you will want to mark the project as done "},{"lineNumber":260,"author":{"gitId":"samuellleow"},"content":"so that you can free your mind from that project and focus on the other unfinished ones."},{"lineNumber":261,"author":{"gitId":"-"},"content":""},{"lineNumber":262,"author":{"gitId":"samuellleow"},"content":"To mark a project as done, you can use the command shown below."},{"lineNumber":263,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":264,"author":{"gitId":"thatseant"},"content":"\u003e :exclamation: The project must exist before it can be marked as done."},{"lineNumber":265,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":266,"author":{"gitId":"riazaham"},"content":"Format: `done p/PROJECT_INDEX`"},{"lineNumber":267,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":268,"author":{"gitId":"-"},"content":"Example of usage: "},{"lineNumber":269,"author":{"gitId":"-"},"content":""},{"lineNumber":270,"author":{"gitId":"thatseant"},"content":"\u003e Marks the first project in the project list as done."},{"lineNumber":271,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":272,"author":{"gitId":"thatseant"},"content":"```"},{"lineNumber":273,"author":{"gitId":"thatseant"},"content":"done t/1"},{"lineNumber":274,"author":{"gitId":"thatseant"},"content":"____________________________________________________________"},{"lineNumber":275,"author":{"gitId":"thatseant"},"content":"Task \"New Task\" is done!"},{"lineNumber":276,"author":{"gitId":"thatseant"},"content":"____________________________________________________________"},{"lineNumber":277,"author":{"gitId":"thatseant"},"content":"``` "},{"lineNumber":278,"author":{"gitId":"samuellleow"},"content":"**Examples of Exception Handling for this command**"},{"lineNumber":279,"author":{"gitId":"shreytheshreyas"},"content":"\u003e Marking a project as done without the p/ parameter"},{"lineNumber":280,"author":{"gitId":"shreytheshreyas"},"content":"```"},{"lineNumber":281,"author":{"gitId":"shreytheshreyas"},"content":"done 1"},{"lineNumber":282,"author":{"gitId":"shreytheshreyas"},"content":"Certain Parameters are missing!"},{"lineNumber":283,"author":{"gitId":"shreytheshreyas"},"content":"```"},{"lineNumber":284,"author":{"gitId":"shreytheshreyas"},"content":"\u003e Providing Project name instead of Project index"},{"lineNumber":285,"author":{"gitId":"shreytheshreyas"},"content":"```"},{"lineNumber":286,"author":{"gitId":"shreytheshreyas"},"content":"done p/\"p3\""},{"lineNumber":287,"author":{"gitId":"shreytheshreyas"},"content":"Index must be an integer!"},{"lineNumber":288,"author":{"gitId":"shreytheshreyas"},"content":"```"},{"lineNumber":289,"author":{"gitId":"shreytheshreyas"},"content":"\u003e Marking an invalid Project-ID as done"},{"lineNumber":290,"author":{"gitId":"shreytheshreyas"},"content":"```"},{"lineNumber":291,"author":{"gitId":"shreytheshreyas"},"content":"_____________________________________________________________________________________"},{"lineNumber":292,"author":{"gitId":"shreytheshreyas"},"content":"done p/8"},{"lineNumber":293,"author":{"gitId":"shreytheshreyas"},"content":"_____________________________________________________________________________________"},{"lineNumber":294,"author":{"gitId":"shreytheshreyas"},"content":"Project ID does not exist!"},{"lineNumber":295,"author":{"gitId":"shreytheshreyas"},"content":"_____________________________________________________________________________________"},{"lineNumber":296,"author":{"gitId":"shreytheshreyas"},"content":"```  "},{"lineNumber":297,"author":{"gitId":"riazaham"},"content":"---"},{"lineNumber":298,"author":{"gitId":"riazaham"},"content":"\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e  "},{"lineNumber":299,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":300,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":301,"author":{"gitId":"-"},"content":""},{"lineNumber":302,"author":{"gitId":"samuellleow"},"content":"### 3.1.5. Adding a deadline to a project: `deadline` (Samuel Leow Wei Han)"},{"lineNumber":303,"author":{"gitId":"samuellleow"},"content":"Deadlines make clear of when and what you are expected to deliver. Failing to meet them can result in bad business reputation and should not be tolerated."},{"lineNumber":304,"author":{"gitId":"samuellleow"},"content":"With multiple projects to work on, you want to be able to keep track of these projects and deliver them to your clients on time."},{"lineNumber":305,"author":{"gitId":"samuellleow"},"content":"You can simply add a deadline to an existing project. "},{"lineNumber":306,"author":{"gitId":"samuellleow"},"content":"We will sort the projects in the list for you according to their deadlines to inform you the projects that are most urgent."},{"lineNumber":307,"author":{"gitId":"-"},"content":""},{"lineNumber":308,"author":{"gitId":"samuellleow"},"content":"You can add a deadline to a specified project with the command shown below."},{"lineNumber":309,"author":{"gitId":"-"},"content":""},{"lineNumber":310,"author":{"gitId":"thatseant"},"content":"\u003e :exclamation: The project must exist before a deadline can be added."},{"lineNumber":311,"author":{"gitId":"-"},"content":""},{"lineNumber":312,"author":{"gitId":"riazaham"},"content":"Format: `deadline p/PROJECT_INDEX d/DATE`"},{"lineNumber":313,"author":{"gitId":"-"},"content":""},{"lineNumber":314,"author":{"gitId":"thatseant"},"content":"\u003e :warning: The `DATE` must be of the form `YYYY-MM-DD`"},{"lineNumber":315,"author":{"gitId":"-"},"content":""},{"lineNumber":316,"author":{"gitId":"-"},"content":"Example of usage: "},{"lineNumber":317,"author":{"gitId":"-"},"content":""},{"lineNumber":318,"author":{"gitId":"samuellleow"},"content":"\u003e  Adds the deadline 04/03/2022 to the third project."},{"lineNumber":319,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":320,"author":{"gitId":"samuellleow"},"content":"![ProjectView1](https://i.ibb.co/7VPSfCW/ss.png)"},{"lineNumber":321,"author":{"gitId":"samuellleow"},"content":"  "},{"lineNumber":322,"author":{"gitId":"riazaham"},"content":"---"},{"lineNumber":323,"author":{"gitId":"riazaham"},"content":"\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e    "},{"lineNumber":324,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":325,"author":{"gitId":"samuellleow"},"content":"\u003e Adds an earlier deadline 12/12/2020 to the third project to show sorting of projects."},{"lineNumber":326,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":327,"author":{"gitId":"samuellleow"},"content":"![HomeView](https://i.ibb.co/0rwVkQD/ss3.png)"},{"lineNumber":328,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":329,"author":{"gitId":"samuellleow"},"content":"**Examples of Exception Handling for this command**"},{"lineNumber":330,"author":{"gitId":"shreytheshreyas"},"content":"\u003e Providing a deadline to a project in in the DD-MM-YYYY format"},{"lineNumber":331,"author":{"gitId":"shreytheshreyas"},"content":"```"},{"lineNumber":332,"author":{"gitId":"shreytheshreyas"},"content":"deadline p/1 d/22-11-2020"},{"lineNumber":333,"author":{"gitId":"shreytheshreyas"},"content":"Date must be specified in format YYYY-MM-DD"},{"lineNumber":334,"author":{"gitId":"shreytheshreyas"},"content":"```"},{"lineNumber":335,"author":{"gitId":"shreytheshreyas"},"content":"\u003e Providing a deadline to a project in in the MM-DD-YYYY format"},{"lineNumber":336,"author":{"gitId":"shreytheshreyas"},"content":"```"},{"lineNumber":337,"author":{"gitId":"shreytheshreyas"},"content":"deadline p/1 d/11-27-2020"},{"lineNumber":338,"author":{"gitId":"shreytheshreyas"},"content":"Date must be specified in format YYYY-MM-DD"},{"lineNumber":339,"author":{"gitId":"shreytheshreyas"},"content":"```    "},{"lineNumber":340,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":341,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":342,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":343,"author":{"gitId":"samuellleow"},"content":"### 3.1.6. Adding a description to a project: `description` (Riaz Ahamed)"},{"lineNumber":344,"author":{"gitId":"riazaham"},"content":"As a project manager, you would like to see the descriptions of different projects."},{"lineNumber":345,"author":{"gitId":"riazaham"},"content":"The `description` command allows you to add descriptions to a project as shown below."},{"lineNumber":346,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":347,"author":{"gitId":"thatseant"},"content":"\u003e:exclamation: The project must exist before a description can be added."},{"lineNumber":348,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":349,"author":{"gitId":"riazaham"},"content":"You can use the following format to add descriptions to a specific project."},{"lineNumber":350,"author":{"gitId":"riazaham"},"content":"Format: `description p/PROJECT_INDEX d/DESCRIPTION`"},{"lineNumber":351,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":352,"author":{"gitId":"thatseant"},"content":"\u003e :warning: Project descriptions should not include slashes or an error will be shown."},{"lineNumber":353,"author":{"gitId":"riazaham"},"content":"  "},{"lineNumber":354,"author":{"gitId":"riazaham"},"content":"---"},{"lineNumber":355,"author":{"gitId":"riazaham"},"content":"\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e    "},{"lineNumber":356,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":357,"author":{"gitId":"riazaham"},"content":"Example of usage: "},{"lineNumber":358,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":359,"author":{"gitId":"riazaham"},"content":"\u003e  In the example shown below, the user adds the description `This is my Software Engineering Module` to the first project."},{"lineNumber":360,"author":{"gitId":"riazaham"},"content":"\u003e  The user inputs the `p` parameter followed by the index of the project that the user wants to add a description to."},{"lineNumber":361,"author":{"gitId":"riazaham"},"content":"\u003e  The user then inputs the `d` parameter followed by the project description that he would like to add to the first project."},{"lineNumber":362,"author":{"gitId":"riazaham"},"content":"\u003e  Once the description has been added successfully, you can see an acknowledgement message being sent to the user."},{"lineNumber":363,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":364,"author":{"gitId":"thatseant"},"content":"```"},{"lineNumber":365,"author":{"gitId":"thatseant"},"content":"description p/1 d/This is my Software Engineering Module."},{"lineNumber":366,"author":{"gitId":"thatseant"},"content":"____________________________________________________________"},{"lineNumber":367,"author":{"gitId":"thatseant"},"content":"Project description added \"This is my Software Engineering Module.\"."},{"lineNumber":368,"author":{"gitId":"thatseant"},"content":"```"},{"lineNumber":369,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":370,"author":{"gitId":"riazaham"},"content":"\u003e  :bulb: You can also input the `d` parameter first followed by the `p` parameter as shown below."},{"lineNumber":371,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":372,"author":{"gitId":"riazaham"},"content":"```"},{"lineNumber":373,"author":{"gitId":"riazaham"},"content":"description d/This is my Software Engineering Module p/1."},{"lineNumber":374,"author":{"gitId":"riazaham"},"content":"____________________________________________________________"},{"lineNumber":375,"author":{"gitId":"riazaham"},"content":"Project description added \"This is my Software Engineering Module.\"."},{"lineNumber":376,"author":{"gitId":"riazaham"},"content":"```"},{"lineNumber":377,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":378,"author":{"gitId":"samuellleow"},"content":"**Examples of Exception Handling for the `description` command** "},{"lineNumber":379,"author":{"gitId":"riazaham"},"content":"Shown below are some examples of misuse of the `description` command that you could potentially make as a user."},{"lineNumber":380,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":381,"author":{"gitId":"riazaham"},"content":"\u003e If you did not include the `d` parameter, you will be responded with an error message as shown below."},{"lineNumber":382,"author":{"gitId":"shreytheshreyas"},"content":"```"},{"lineNumber":383,"author":{"gitId":"shreytheshreyas"},"content":"description p/1 this is a new project"},{"lineNumber":384,"author":{"gitId":"shreytheshreyas"},"content":"Certain Parameters are missing!"},{"lineNumber":385,"author":{"gitId":"shreytheshreyas"},"content":"```  "},{"lineNumber":386,"author":{"gitId":"riazaham"},"content":"---"},{"lineNumber":387,"author":{"gitId":"riazaham"},"content":"\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e  "},{"lineNumber":388,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":389,"author":{"gitId":"samuellleow"},"content":"### 3.1.7. Deleting a project: `delete` (Riaz Ahamed)"},{"lineNumber":390,"author":{"gitId":"riazaham"},"content":"As a project manager, you would like to delete projects for various reasons. Some reasons"},{"lineNumber":391,"author":{"gitId":"riazaham"},"content":"include; creating a project by mistake, project is no longer in progress or the project has been discontinued."},{"lineNumber":392,"author":{"gitId":"riazaham"},"content":"Hence, the `delete` command allows you to delete a specific project, one at a time, as shown below."},{"lineNumber":393,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":394,"author":{"gitId":"riazaham"},"content":"You can use the following format to delete a specific project."},{"lineNumber":395,"author":{"gitId":"riazaham"},"content":"Format: `delete p/PROJECT_INDEX`"},{"lineNumber":396,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":397,"author":{"gitId":"thatseant"},"content":"\u003e :exclamation:  The project must exist in the project list before it can be deleted."},{"lineNumber":398,"author":{"gitId":"riazaham"},"content":"\u003e :warning:  The `PROJECT_INDEX` must be a positive integer."},{"lineNumber":399,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":400,"author":{"gitId":"riazaham"},"content":"Example of usage: "},{"lineNumber":401,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":402,"author":{"gitId":"riazaham"},"content":"\u003e  In the example shown below, the user deletes the second project in the list. "},{"lineNumber":403,"author":{"gitId":"riazaham"},"content":"\u003e  The user uses the `p` parameter followed by the index of the project from the list of projects."},{"lineNumber":404,"author":{"gitId":"riazaham"},"content":"\u003e  Once the project has been deleted successfully, you can see an acknowledgement message being sent to the user."},{"lineNumber":405,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":406,"author":{"gitId":"thatseant"},"content":"```"},{"lineNumber":407,"author":{"gitId":"thatseant"},"content":"delete p/2"},{"lineNumber":408,"author":{"gitId":"thatseant"},"content":"____________________________________________________________"},{"lineNumber":409,"author":{"gitId":"thatseant"},"content":"Project \"Home Improvement\" deleted"},{"lineNumber":410,"author":{"gitId":"thatseant"},"content":"____________________________________________________________"},{"lineNumber":411,"author":{"gitId":"thatseant"},"content":"```"},{"lineNumber":412,"author":{"gitId":"samuellleow"},"content":"**Examples of Exception Handling for the `delete` command**"},{"lineNumber":413,"author":{"gitId":"riazaham"},"content":"Shown below are some examples of misuse of the `delete` command that you could potentially make as a user."},{"lineNumber":414,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":415,"author":{"gitId":"riazaham"},"content":"\u003e In the example shown below, there are only 7 projects in the list of projects."},{"lineNumber":416,"author":{"gitId":"riazaham"},"content":"\u003e If you try to delete a project that does not exist, for example, deleting the eighth project, you will be responded with an error message as shown below."},{"lineNumber":417,"author":{"gitId":"shreytheshreyas"},"content":"```"},{"lineNumber":418,"author":{"gitId":"shreytheshreyas"},"content":"_____________________________________________________________________________________"},{"lineNumber":419,"author":{"gitId":"shreytheshreyas"},"content":"deleting p/8"},{"lineNumber":420,"author":{"gitId":"shreytheshreyas"},"content":"_____________________________________________________________________________________"},{"lineNumber":421,"author":{"gitId":"shreytheshreyas"},"content":"Project ID does not exist!"},{"lineNumber":422,"author":{"gitId":"shreytheshreyas"},"content":"_____________________________________________________________________________________"},{"lineNumber":423,"author":{"gitId":"shreytheshreyas"},"content":"```"},{"lineNumber":424,"author":{"gitId":"riazaham"},"content":"  "},{"lineNumber":425,"author":{"gitId":"riazaham"},"content":"---"},{"lineNumber":426,"author":{"gitId":"riazaham"},"content":"\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e  "},{"lineNumber":427,"author":{"gitId":"riazaham"},"content":"  "},{"lineNumber":428,"author":{"gitId":"riazaham"},"content":"  "},{"lineNumber":429,"author":{"gitId":"samuellleow"},"content":"### 3.1.8. Adding a member: `member` (Riaz Ahamed)"},{"lineNumber":430,"author":{"gitId":"riazaham"},"content":"As a project manager, you would like to add members to join your team. You can then assign members "},{"lineNumber":431,"author":{"gitId":"riazaham"},"content":"to projects or tasks in the future using the `assign` command. "},{"lineNumber":432,"author":{"gitId":"riazaham"},"content":"The `member` command allows you to add members to your team as shown below."},{"lineNumber":433,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":434,"author":{"gitId":"riazaham"},"content":"You can use the following format to add a member to your team."},{"lineNumber":435,"author":{"gitId":"thatseant"},"content":"Format: `member n/MEMBER_NAME`"},{"lineNumber":436,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":437,"author":{"gitId":"thatseant"},"content":"Example of usage: "},{"lineNumber":438,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":439,"author":{"gitId":"riazaham"},"content":"\u003e  In the example shown below, the user adds the member `John Doe`. "},{"lineNumber":440,"author":{"gitId":"riazaham"},"content":"\u003e  The user uses the `n` parameter followed by the name of the member."},{"lineNumber":441,"author":{"gitId":"riazaham"},"content":"\u003e  Once the member has been added successfully, you can see an acknowledgement message being sent to the user."},{"lineNumber":442,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":443,"author":{"gitId":"thatseant"},"content":"```"},{"lineNumber":444,"author":{"gitId":"thatseant"},"content":"member n/John Doe"},{"lineNumber":445,"author":{"gitId":"thatseant"},"content":"____________________________________________________________"},{"lineNumber":446,"author":{"gitId":"thatseant"},"content":"Team member \"John Doe\" has been added"},{"lineNumber":447,"author":{"gitId":"thatseant"},"content":"```"},{"lineNumber":448,"author":{"gitId":"samuellleow"},"content":"**Examples of Exception Handling for the `member` command** "},{"lineNumber":449,"author":{"gitId":"riazaham"},"content":"Shown below are some examples of misuse of the `member` command that you could potentially make as a user."},{"lineNumber":450,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":451,"author":{"gitId":"riazaham"},"content":"\u003e If you did not include the `n` parameter, you will be responded with an error message as shown below."},{"lineNumber":452,"author":{"gitId":"shreytheshreyas"},"content":"```"},{"lineNumber":453,"author":{"gitId":"shreytheshreyas"},"content":"member steve"},{"lineNumber":454,"author":{"gitId":"shreytheshreyas"},"content":"Certain Parameters are missing!"},{"lineNumber":455,"author":{"gitId":"shreytheshreyas"},"content":"```"},{"lineNumber":456,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":457,"author":{"gitId":"samuellleow"},"content":"### 3.1.9. Assigning a member to a project: `assign` (Riaz Ahamed)"},{"lineNumber":458,"author":{"gitId":"riazaham"},"content":"As a project manager, you would like to assign members to specific projects."},{"lineNumber":459,"author":{"gitId":"riazaham"},"content":"You can then keep track of which members are assigned to which projects using the `list` command in the Home View."},{"lineNumber":460,"author":{"gitId":"riazaham"},"content":"By using the `assign` command, you can assign members to a project as shown below."},{"lineNumber":461,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":462,"author":{"gitId":"thatseant"},"content":"\u003e :exclamation: The project must exist before it can be assigned a member."},{"lineNumber":463,"author":{"gitId":"thatseant"},"content":"\u003e :exclamation: The member must exist before they can be assigned a project."},{"lineNumber":464,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":465,"author":{"gitId":"riazaham"},"content":"You can use the following format to assign a member to a specific project of your choice."},{"lineNumber":466,"author":{"gitId":"thatseant"},"content":"Format: `assign p/PROJECT_INDEX m/MEMBER_INDEX`"},{"lineNumber":467,"author":{"gitId":"thatseant"},"content":"  "},{"lineNumber":468,"author":{"gitId":"riazaham"},"content":"---"},{"lineNumber":469,"author":{"gitId":"riazaham"},"content":"\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e  "},{"lineNumber":470,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":471,"author":{"gitId":"thatseant"},"content":"Example of usage: "},{"lineNumber":472,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":473,"author":{"gitId":"riazaham"},"content":"\u003e  In the example shown below, the user assigns the first member from the list of members to the first project from the list of projects."},{"lineNumber":474,"author":{"gitId":"riazaham"},"content":"\u003e  The user inputs the `m` parameter followed by the index of the member that the user wants to assign to a project."},{"lineNumber":475,"author":{"gitId":"riazaham"},"content":"\u003e  The user then inputs the `p` parameter followed by the index of the project that the user wants to assign to a member."},{"lineNumber":476,"author":{"gitId":"riazaham"},"content":"\u003e  Once the member has been added successfully, you can see an acknowledgement message being sent to the user."},{"lineNumber":477,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":478,"author":{"gitId":"riazaham"},"content":"```"},{"lineNumber":479,"author":{"gitId":"riazaham"},"content":"assign m/1 p/1"},{"lineNumber":480,"author":{"gitId":"riazaham"},"content":"____________________________________________________________"},{"lineNumber":481,"author":{"gitId":"riazaham"},"content":"Tom assigned to Project \"CS2113T\""},{"lineNumber":482,"author":{"gitId":"riazaham"},"content":"```"},{"lineNumber":483,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":484,"author":{"gitId":"riazaham"},"content":"\u003e  :bulb: You can also input the `p` parameter first followed by the `m` parameter as shown below."},{"lineNumber":485,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":486,"author":{"gitId":"thatseant"},"content":"```"},{"lineNumber":487,"author":{"gitId":"thatseant"},"content":"assign p/1 m/1"},{"lineNumber":488,"author":{"gitId":"thatseant"},"content":"____________________________________________________________"},{"lineNumber":489,"author":{"gitId":"thatseant"},"content":"Tom assigned to Project \"CS2113T\""},{"lineNumber":490,"author":{"gitId":"thatseant"},"content":"```"},{"lineNumber":491,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":492,"author":{"gitId":"samuellleow"},"content":"**Examples of Exception Handling for the `assign` command** "},{"lineNumber":493,"author":{"gitId":"riazaham"},"content":"Shown below are some examples of misuse of the `assign` command that you could potentially make as a user."},{"lineNumber":494,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":495,"author":{"gitId":"riazaham"},"content":"\u003e In the example shown below, there are only 8 projects in the list of projects."},{"lineNumber":496,"author":{"gitId":"riazaham"},"content":"\u003e If you try to assign a member to a project that does not exist, for example, assigning a member to the ninth project, you will be responded with an error message as shown below."},{"lineNumber":497,"author":{"gitId":"shreytheshreyas"},"content":"```"},{"lineNumber":498,"author":{"gitId":"shreytheshreyas"},"content":"assign m/1 p/9"},{"lineNumber":499,"author":{"gitId":"shreytheshreyas"},"content":"_____________________________________________________________________________________"},{"lineNumber":500,"author":{"gitId":"shreytheshreyas"},"content":"Project ID does not exist!"},{"lineNumber":501,"author":{"gitId":"shreytheshreyas"},"content":"```"},{"lineNumber":502,"author":{"gitId":"riazaham"},"content":"\u003e In the example shown below, there are only 3 members in the list of members."},{"lineNumber":503,"author":{"gitId":"riazaham"},"content":"\u003e If you try to assign a project to a member that does not exist, for example, assigning a project to the fourth member, you will be responded with an error message as shown below."},{"lineNumber":504,"author":{"gitId":"shreytheshreyas"},"content":"```"},{"lineNumber":505,"author":{"gitId":"shreytheshreyas"},"content":"assign m/4 p/1"},{"lineNumber":506,"author":{"gitId":"shreytheshreyas"},"content":"_____________________________________________________________________________________"},{"lineNumber":507,"author":{"gitId":"shreytheshreyas"},"content":"Team Member ID does not exist!"},{"lineNumber":508,"author":{"gitId":"shreytheshreyas"},"content":"```"},{"lineNumber":509,"author":{"gitId":"thatseant"},"content":"  "},{"lineNumber":510,"author":{"gitId":"riazaham"},"content":"---"},{"lineNumber":511,"author":{"gitId":"riazaham"},"content":"\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e  "},{"lineNumber":512,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":513,"author":{"gitId":"samuellleow"},"content":"### 3.1.10. Removing a member: `remove` (Riaz Ahamed)"},{"lineNumber":514,"author":{"gitId":"riazaham"},"content":"As a project manager, you would like to remove specific members from your team for various reasons."},{"lineNumber":515,"author":{"gitId":"riazaham"},"content":"Some reasons include; the member has been accidentally added to your team or the member is no longer working with you."},{"lineNumber":516,"author":{"gitId":"riazaham"},"content":"The `remove` command allows you to remove members from your team as shown below."},{"lineNumber":517,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":518,"author":{"gitId":"thatseant"},"content":"\u003e :exclamation: The member must exist before they can be removed."},{"lineNumber":519,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":520,"author":{"gitId":"riazaham"},"content":"You can use the following format to remove a member from a specific project of your choice."},{"lineNumber":521,"author":{"gitId":"thatseant"},"content":"Format: `remove m/MEMBER_INDEX`"},{"lineNumber":522,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":523,"author":{"gitId":"thatseant"},"content":"Example of usage: "},{"lineNumber":524,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":525,"author":{"gitId":"riazaham"},"content":"\u003e  In the example shown below, the user removes the first member from the list of members."},{"lineNumber":526,"author":{"gitId":"riazaham"},"content":"\u003e  The user uses the `m` parameter followed by the index of the member from the list of members."},{"lineNumber":527,"author":{"gitId":"riazaham"},"content":"\u003e  Once the member has been removed successfully, you can see an acknowledgement message being sent to the user."},{"lineNumber":528,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":529,"author":{"gitId":"thatseant"},"content":"```"},{"lineNumber":530,"author":{"gitId":"thatseant"},"content":"remove m/1"},{"lineNumber":531,"author":{"gitId":"thatseant"},"content":"___________________________________________________________"},{"lineNumber":532,"author":{"gitId":"samuellleow"},"content":"Team member \"Mike\" has been removed from program entirely"},{"lineNumber":533,"author":{"gitId":"thatseant"},"content":"```"},{"lineNumber":534,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":535,"author":{"gitId":"samuellleow"},"content":"**Examples of Exception Handling for `remove` command**"},{"lineNumber":536,"author":{"gitId":"riazaham"},"content":"Shown below are some examples of misuse of the `remove` command that you could potentially make as a user."},{"lineNumber":537,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":538,"author":{"gitId":"riazaham"},"content":"\u003e If you did not include the `m` parameter, you will be responded with an error message as shown below."},{"lineNumber":539,"author":{"gitId":"shreytheshreyas"},"content":"```"},{"lineNumber":540,"author":{"gitId":"shreytheshreyas"},"content":"remove 2"},{"lineNumber":541,"author":{"gitId":"shreytheshreyas"},"content":"Certain Parameters are missing!"},{"lineNumber":542,"author":{"gitId":"shreytheshreyas"},"content":"```"},{"lineNumber":543,"author":{"gitId":"riazaham"},"content":"\u003e In the example shown below, there are only 2 members in the list of members. "},{"lineNumber":544,"author":{"gitId":"riazaham"},"content":"\u003e If you specified a member that does not exist, for example, specifying a third member, you will be responded with an error message as shown below."},{"lineNumber":545,"author":{"gitId":"shreytheshreyas"},"content":"```"},{"lineNumber":546,"author":{"gitId":"shreytheshreyas"},"content":"_____________________________________________________________________________________"},{"lineNumber":547,"author":{"gitId":"shreytheshreyas"},"content":"remove m/3"},{"lineNumber":548,"author":{"gitId":"shreytheshreyas"},"content":"_____________________________________________________________________________________"},{"lineNumber":549,"author":{"gitId":"shreytheshreyas"},"content":"Team Member ID does not exist!"},{"lineNumber":550,"author":{"gitId":"shreytheshreyas"},"content":"_____________________________________________________________________________________"},{"lineNumber":551,"author":{"gitId":"shreytheshreyas"},"content":"```"},{"lineNumber":552,"author":{"gitId":"thatseant"},"content":"  "},{"lineNumber":553,"author":{"gitId":"riazaham"},"content":"---"},{"lineNumber":554,"author":{"gitId":"riazaham"},"content":"\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e  "},{"lineNumber":555,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":556,"author":{"gitId":"samuellleow"},"content":"### 3.1.11. View hours worked by member: `hours` (Shreyas Kumar)"},{"lineNumber":557,"author":{"gitId":"shreytheshreyas"},"content":"As a project manager you might want to keep track of the number of hours each member in a project has contributed."},{"lineNumber":558,"author":{"gitId":"shreytheshreyas"},"content":"This command achieves just and allows you to view the total number of hours worked by a worker across all tasks assigned in all projects."},{"lineNumber":559,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":560,"author":{"gitId":"thatseant"},"content":"Now, you know which of your workers are overworked and be a better manager by shifting work to members who are more free!"},{"lineNumber":561,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":562,"author":{"gitId":"thatseant"},"content":"\u003e :exclamation: ​The member must exist before hours worked can be viewed."},{"lineNumber":563,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":564,"author":{"gitId":"thatseant"},"content":"Format: `hours m/MEMBER_INDEX`"},{"lineNumber":565,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":566,"author":{"gitId":"thatseant"},"content":"Example usage and output:"},{"lineNumber":567,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":568,"author":{"gitId":"thatseant"},"content":"```"},{"lineNumber":569,"author":{"gitId":"thatseant"},"content":"hours m/1"},{"lineNumber":570,"author":{"gitId":"thatseant"},"content":"-------------------------------"},{"lineNumber":571,"author":{"gitId":"thatseant"},"content":"John worked for 2.5 hours."},{"lineNumber":572,"author":{"gitId":"thatseant"},"content":"```"},{"lineNumber":573,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":574,"author":{"gitId":"samuellleow"},"content":"**Examples of Exception Handling for this command**"},{"lineNumber":575,"author":{"gitId":"shreytheshreyas"},"content":"\u003e Providing an Invalid member index "},{"lineNumber":576,"author":{"gitId":"shreytheshreyas"},"content":"```"},{"lineNumber":577,"author":{"gitId":"shreytheshreyas"},"content":"_____________________________________________________________________________________"},{"lineNumber":578,"author":{"gitId":"shreytheshreyas"},"content":"hours m/3"},{"lineNumber":579,"author":{"gitId":"shreytheshreyas"},"content":"_____________________________________________________________________________________"},{"lineNumber":580,"author":{"gitId":"shreytheshreyas"},"content":"The member ID entered does not exist"},{"lineNumber":581,"author":{"gitId":"shreytheshreyas"},"content":"_____________________________________________________________________________________"},{"lineNumber":582,"author":{"gitId":"shreytheshreyas"},"content":"```    "},{"lineNumber":583,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":584,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":585,"author":{"gitId":"samuellleow"},"content":"### 3.1.12. Exiting EZ Manager: `bye` (Shreyas Kumar)"},{"lineNumber":586,"author":{"gitId":"shreytheshreyas"},"content":"When you are done with your work for the day you can exit the program with the `bye` command and this returns"},{"lineNumber":587,"author":{"gitId":"shreytheshreyas"},"content":"you back to the commmand line."},{"lineNumber":588,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":589,"author":{"gitId":"thatseant"},"content":"Format: `bye`"},{"lineNumber":590,"author":{"gitId":"thatseant"},"content":"  "},{"lineNumber":591,"author":{"gitId":"riazaham"},"content":"---"},{"lineNumber":592,"author":{"gitId":"riazaham"},"content":"\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e  "},{"lineNumber":593,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":594,"author":{"gitId":"samuellleow"},"content":"## 4. Project View (Shreyas Kumar)"},{"lineNumber":595,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":596,"author":{"gitId":"thatseant"},"content":"The Project View displays the full list of tasks and members in a particular project."},{"lineNumber":597,"author":{"gitId":"thatseant"},"content":"The manager can add and edit tasks and assign members to tasks."},{"lineNumber":598,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":599,"author":{"gitId":"-"},"content":""},{"lineNumber":600,"author":{"gitId":"-"},"content":""},{"lineNumber":601,"author":{"gitId":"thatseant"},"content":"\u003e ### :bulb: Accessing Project View"},{"lineNumber":602,"author":{"gitId":"thatseant"},"content":"\u003e"},{"lineNumber":603,"author":{"gitId":"thatseant"},"content":"\u003e This view is accessed by [selecting a project](#selecting-a-project-select) from the Home View."},{"lineNumber":604,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":605,"author":{"gitId":"riazaham"},"content":"![ProjectView4](https://i.ibb.co/Fq5gFjC/ss4.png)"},{"lineNumber":606,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":607,"author":{"gitId":"riazaham"},"content":"---"},{"lineNumber":608,"author":{"gitId":"riazaham"},"content":"\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e  "},{"lineNumber":609,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":610,"author":{"gitId":"thatseant"},"content":"## 4.1. Project View Commands"},{"lineNumber":611,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":612,"author":{"gitId":"samuellleow"},"content":"### 4.1.1. Viewing the updated Project View: `list` (Shreyas Kumar)"},{"lineNumber":613,"author":{"gitId":"shreytheshreyas"},"content":"When you select a project you might want to view an overview of all the tasks along with their respective priorities and deadlines. You may also be interested in viewing a list of all members associated to the project and which tasks they are working on."},{"lineNumber":614,"author":{"gitId":"shreytheshreyas"},"content":"This command allows you to view the Project View of a project and is progressively updated everytime you add in a new task and assign in a member to the project."},{"lineNumber":615,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":616,"author":{"gitId":"thatseant"},"content":"Format: `list`"},{"lineNumber":617,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":618,"author":{"gitId":"samuellleow"},"content":"### 4.1.2. Adding a task: `task` (Shreyas Kumar)"},{"lineNumber":619,"author":{"gitId":"shreytheshreyas"},"content":"Each project have their own activities and assignments associated with them. To record these activities this command allows you to create a new task and the program adds it to the task list."},{"lineNumber":620,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":621,"author":{"gitId":"riazaham"},"content":"Format: `task n/TASK_NAME`"},{"lineNumber":622,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":623,"author":{"gitId":"thatseant"},"content":"\u003e :warning: Task names should not include slashes or it will be disregarded."},{"lineNumber":624,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":625,"author":{"gitId":"riazaham"},"content":"Example of usage: "},{"lineNumber":626,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":627,"author":{"gitId":"thatseant"},"content":"\u003e  Adds the task \u0027Deploy Version 2.0\u0027 to the task list."},{"lineNumber":628,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":629,"author":{"gitId":"thatseant"},"content":"```"},{"lineNumber":630,"author":{"gitId":"thatseant"},"content":"task n/Deploy Version 2.0"},{"lineNumber":631,"author":{"gitId":"thatseant"},"content":"____________________________________________________________"},{"lineNumber":632,"author":{"gitId":"thatseant"},"content":"Task \"Deploy Version 2.0\" created!"},{"lineNumber":633,"author":{"gitId":"thatseant"},"content":"```"},{"lineNumber":634,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":635,"author":{"gitId":"samuellleow"},"content":"**Examples of Exception Handling for this command**"},{"lineNumber":636,"author":{"gitId":"shreytheshreyas"},"content":"\u003e Providing a task name without n/ parameter"},{"lineNumber":637,"author":{"gitId":"shreytheshreyas"},"content":"```"},{"lineNumber":638,"author":{"gitId":"shreytheshreyas"},"content":"task task4"},{"lineNumber":639,"author":{"gitId":"shreytheshreyas"},"content":"Certain Parameters are missing!"},{"lineNumber":640,"author":{"gitId":"shreytheshreyas"},"content":"```     "},{"lineNumber":641,"author":{"gitId":"shreytheshreyas"},"content":"  "},{"lineNumber":642,"author":{"gitId":"riazaham"},"content":"---"},{"lineNumber":643,"author":{"gitId":"riazaham"},"content":"\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e  "},{"lineNumber":644,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":645,"author":{"gitId":"samuellleow"},"content":"### 4.1.3. Editing a task name: `edit` (Shreyas Kumar)"},{"lineNumber":646,"author":{"gitId":"shreytheshreyas"},"content":"As you and your team porgess to working on the project you might want to make updates to an existing task name with the new name. This"},{"lineNumber":647,"author":{"gitId":"shreytheshreyas"},"content":"commmand helps you achieve that."},{"lineNumber":648,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":649,"author":{"gitId":"riazaham"},"content":"Format: `edit t/TASK_INDEX n/NEW_TASK_NAME`"},{"lineNumber":650,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":651,"author":{"gitId":"riazaham"},"content":"\u003e :warning: Task names should not include slashes or it will be disregarded.  "},{"lineNumber":652,"author":{"gitId":"riazaham"},"content":"\u003e :warning: The `TASK_INDEX` must be a positive integer."},{"lineNumber":653,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":654,"author":{"gitId":"riazaham"},"content":"Example of usage: "},{"lineNumber":655,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":656,"author":{"gitId":"riazaham"},"content":"\u003e  Edits the existing task, `Read documentation` to `Update documentation`."},{"lineNumber":657,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":658,"author":{"gitId":"riazaham"},"content":"```"},{"lineNumber":659,"author":{"gitId":"riazaham"},"content":"task n/Read documentation"},{"lineNumber":660,"author":{"gitId":"riazaham"},"content":"____________________________________________________________"},{"lineNumber":661,"author":{"gitId":"riazaham"},"content":"Task \"Read documentation\" created!"},{"lineNumber":662,"author":{"gitId":"riazaham"},"content":"____________________________________________________________"},{"lineNumber":663,"author":{"gitId":"riazaham"},"content":"edit t/1 n/Update documentation"},{"lineNumber":664,"author":{"gitId":"riazaham"},"content":"____________________________________________________________"},{"lineNumber":665,"author":{"gitId":"riazaham"},"content":"Task \"Read documentation\" has been updated to \"Update documentation\""},{"lineNumber":666,"author":{"gitId":"riazaham"},"content":"```"},{"lineNumber":667,"author":{"gitId":"samuellleow"},"content":"**Examples of Exception Handling for this command** "},{"lineNumber":668,"author":{"gitId":"shreytheshreyas"},"content":"\u003eEditing the name of an invalid task  "},{"lineNumber":669,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":670,"author":{"gitId":"shreytheshreyas"},"content":"```"},{"lineNumber":671,"author":{"gitId":"shreytheshreyas"},"content":"_____________________________________________________________________________________"},{"lineNumber":672,"author":{"gitId":"shreytheshreyas"},"content":"edit t/4 n/task4"},{"lineNumber":673,"author":{"gitId":"shreytheshreyas"},"content":"_____________________________________________________________________________________"},{"lineNumber":674,"author":{"gitId":"shreytheshreyas"},"content":"Task ID does not exist!"},{"lineNumber":675,"author":{"gitId":"shreytheshreyas"},"content":"_____________________________________________________________________________________"},{"lineNumber":676,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":677,"author":{"gitId":"shreytheshreyas"},"content":"```  "},{"lineNumber":678,"author":{"gitId":"riazaham"},"content":"  "},{"lineNumber":679,"author":{"gitId":"riazaham"},"content":"---"},{"lineNumber":680,"author":{"gitId":"riazaham"},"content":"\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e  "},{"lineNumber":681,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":682,"author":{"gitId":"samuellleow"},"content":"### 4.1.4. Marking a task as done: `done` (Shreyas Kumar)"},{"lineNumber":683,"author":{"gitId":"shreytheshreyas"},"content":"During your course of a project you can mark certain tasks as done and this command is used for that purpose. This command allows you to differentiate a task that is completed from a task that is still pending. This ultimately makes your management of a particular project more organised."},{"lineNumber":684,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":685,"author":{"gitId":"thatseant"},"content":"\u003e :exclamation: The task must exist before it can be selected."},{"lineNumber":686,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":687,"author":{"gitId":"thatseant"},"content":"Format: `done t/TASK_INDEX`"},{"lineNumber":688,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":689,"author":{"gitId":"riazaham"},"content":"Example of usage: "},{"lineNumber":690,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":691,"author":{"gitId":"thatseant"},"content":"\u003e Marks the first task in the task list as done.  "},{"lineNumber":692,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":693,"author":{"gitId":"thatseant"},"content":"```"},{"lineNumber":694,"author":{"gitId":"thatseant"},"content":"done t/1 "},{"lineNumber":695,"author":{"gitId":"thatseant"},"content":"____________________________________________________________"},{"lineNumber":696,"author":{"gitId":"thatseant"},"content":"Task \"Coding\" is done!"},{"lineNumber":697,"author":{"gitId":"thatseant"},"content":"```"},{"lineNumber":698,"author":{"gitId":"samuellleow"},"content":"**Examples of Exception Handling for this command** "},{"lineNumber":699,"author":{"gitId":"shreytheshreyas"},"content":"\u003e Marking a task as done without the t/ parameter"},{"lineNumber":700,"author":{"gitId":"shreytheshreyas"},"content":"```"},{"lineNumber":701,"author":{"gitId":"shreytheshreyas"},"content":"done 1"},{"lineNumber":702,"author":{"gitId":"shreytheshreyas"},"content":"Certain Parameters are missing!"},{"lineNumber":703,"author":{"gitId":"shreytheshreyas"},"content":"```"},{"lineNumber":704,"author":{"gitId":"shreytheshreyas"},"content":"\u003e Providing task name instead of Project index"},{"lineNumber":705,"author":{"gitId":"shreytheshreyas"},"content":"```"},{"lineNumber":706,"author":{"gitId":"shreytheshreyas"},"content":"done t/\"task1\""},{"lineNumber":707,"author":{"gitId":"shreytheshreyas"},"content":"Index must be an integer!"},{"lineNumber":708,"author":{"gitId":"shreytheshreyas"},"content":"```"},{"lineNumber":709,"author":{"gitId":"shreytheshreyas"},"content":"\u003e Marking an invalid task-ID as done  "},{"lineNumber":710,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":711,"author":{"gitId":"shreytheshreyas"},"content":"```"},{"lineNumber":712,"author":{"gitId":"shreytheshreyas"},"content":"_____________________________________________________________________________________"},{"lineNumber":713,"author":{"gitId":"shreytheshreyas"},"content":"done p/8"},{"lineNumber":714,"author":{"gitId":"shreytheshreyas"},"content":"_____________________________________________________________________________________"},{"lineNumber":715,"author":{"gitId":"shreytheshreyas"},"content":"Project ID does not exist!"},{"lineNumber":716,"author":{"gitId":"shreytheshreyas"},"content":"_____________________________________________________________________________________"},{"lineNumber":717,"author":{"gitId":"shreytheshreyas"},"content":"```  "},{"lineNumber":718,"author":{"gitId":"riazaham"},"content":"  "},{"lineNumber":719,"author":{"gitId":"riazaham"},"content":"---"},{"lineNumber":720,"author":{"gitId":"riazaham"},"content":"\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e  "},{"lineNumber":721,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":722,"author":{"gitId":"samuellleow"},"content":"### 4.1.5. Adding a deadline to a task: `deadline` (Sean Tan)"},{"lineNumber":723,"author":{"gitId":"thatseant"},"content":"In a typical software engineering project, implementation of various tasks are dependent on the"},{"lineNumber":724,"author":{"gitId":"thatseant"},"content":"completion of other tasks. Easily add deadlines to your tasks with the deadline command. Now your team"},{"lineNumber":725,"author":{"gitId":"thatseant"},"content":"can finish tasks on time and start work on further tasks. "},{"lineNumber":726,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":727,"author":{"gitId":"thatseant"},"content":"Simply specify the task followed by the deadline according to the format below."},{"lineNumber":728,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":729,"author":{"gitId":"riazaham"},"content":"Format: `deadline t/TASK_INDEX d/DATE`"},{"lineNumber":730,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":731,"author":{"gitId":"thatseant"},"content":"\u003e :warning: The `DATE` must be of the form `YYYY-MM-DD`"},{"lineNumber":732,"author":{"gitId":"thatseant"},"content":"\u003e"},{"lineNumber":733,"author":{"gitId":"thatseant"},"content":"\u003e :bulb: EZManager allows you to easily sort and view tasks by deadline. (See: Deadline Command)"},{"lineNumber":734,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":735,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":736,"author":{"gitId":"riazaham"},"content":"* The task must exist before a deadline can be added."},{"lineNumber":737,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":738,"author":{"gitId":"riazaham"},"content":"Example of usage: "},{"lineNumber":739,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":740,"author":{"gitId":"thatseant"},"content":"\u003e  Adds the deadline 25/10/2020 to the first task in the task list."},{"lineNumber":741,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":742,"author":{"gitId":"thatseant"},"content":"```"},{"lineNumber":743,"author":{"gitId":"thatseant"},"content":"deadline t/1 d/2020-10-25"},{"lineNumber":744,"author":{"gitId":"thatseant"},"content":"____________________________________________________________"},{"lineNumber":745,"author":{"gitId":"thatseant"},"content":"Deadline 25/10/2020 added to Task Coding"},{"lineNumber":746,"author":{"gitId":"thatseant"},"content":"```"},{"lineNumber":747,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":748,"author":{"gitId":"thatseant"},"content":"**Examples of Exception Handling for this command**"},{"lineNumber":749,"author":{"gitId":"shreytheshreyas"},"content":"\u003e Providing a deadline to a task in in the DD-MM-YYYY format"},{"lineNumber":750,"author":{"gitId":"shreytheshreyas"},"content":"```"},{"lineNumber":751,"author":{"gitId":"shreytheshreyas"},"content":"deadline t/1 d/22-11-2020"},{"lineNumber":752,"author":{"gitId":"shreytheshreyas"},"content":"Date must be specified in format YYYY-MM-DD"},{"lineNumber":753,"author":{"gitId":"shreytheshreyas"},"content":"```"},{"lineNumber":754,"author":{"gitId":"shreytheshreyas"},"content":"\u003e Providing a deadline to a project in in the MM-DD-YYYY format"},{"lineNumber":755,"author":{"gitId":"shreytheshreyas"},"content":"```"},{"lineNumber":756,"author":{"gitId":"shreytheshreyas"},"content":"deadline t/1 d/11-27-2020"},{"lineNumber":757,"author":{"gitId":"shreytheshreyas"},"content":"Date must be specified in format YYYY-MM-DD"},{"lineNumber":758,"author":{"gitId":"shreytheshreyas"},"content":"```"},{"lineNumber":759,"author":{"gitId":"riazaham"},"content":"  "},{"lineNumber":760,"author":{"gitId":"riazaham"},"content":"---"},{"lineNumber":761,"author":{"gitId":"riazaham"},"content":"\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e  "},{"lineNumber":762,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":763,"author":{"gitId":"samuellleow"},"content":"### 4.1.6. Adding a priority to a task: `priority` (Sean Tan)"},{"lineNumber":764,"author":{"gitId":"thatseant"},"content":"Over time, you discover new bugs add new features and your project starts to fill up with"},{"lineNumber":765,"author":{"gitId":"thatseant"},"content":"tasks after tasks. Add priorities to tasks and ensure your team stays focused and work on the most important tasks first. "},{"lineNumber":766,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":767,"author":{"gitId":"thatseant"},"content":"All you have to do is specify the task index followed by the priority according to the format below."},{"lineNumber":768,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":769,"author":{"gitId":"thatseant"},"content":"\u003e :bulb: 1 denotes the highest priority."},{"lineNumber":770,"author":{"gitId":"thatseant"},"content":"\u003e"},{"lineNumber":771,"author":{"gitId":"thatseant"},"content":"\u003e :bulb: EZManager will allow you to easily sort and view these tasks by priority (See: Sort command)."},{"lineNumber":772,"author":{"gitId":"thatseant"},"content":"\u003e"},{"lineNumber":773,"author":{"gitId":"thatseant"},"content":"\u003e :exclamation: The task must exist before a deadline can be added."},{"lineNumber":774,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":775,"author":{"gitId":"riazaham"},"content":"Format: `priority t/TASK_INDEX p/PRIORITY`"},{"lineNumber":776,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":777,"author":{"gitId":"thatseant"},"content":":warning: The `PRIORITY` must be a positive integer."},{"lineNumber":778,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":779,"author":{"gitId":"riazaham"},"content":"Example of usage: "},{"lineNumber":780,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":781,"author":{"gitId":"thatseant"},"content":"\u003e Adds the highest priority, 1, to the first task in the task list."},{"lineNumber":782,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":783,"author":{"gitId":"thatseant"},"content":"```"},{"lineNumber":784,"author":{"gitId":"thatseant"},"content":"priority t/1 p/1"},{"lineNumber":785,"author":{"gitId":"thatseant"},"content":"____________________________________________________________"},{"lineNumber":786,"author":{"gitId":"thatseant"},"content":"Priority \"1\" has been assigned to \"Coding\""},{"lineNumber":787,"author":{"gitId":"thatseant"},"content":"```"},{"lineNumber":788,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":789,"author":{"gitId":"samuellleow"},"content":"**Examples of Exception Handling for this command**"},{"lineNumber":790,"author":{"gitId":"shreytheshreyas"},"content":"\u003e Setting priority to an invalid task-ID"},{"lineNumber":791,"author":{"gitId":"shreytheshreyas"},"content":"```"},{"lineNumber":792,"author":{"gitId":"shreytheshreyas"},"content":"priority t/4 p/1"},{"lineNumber":793,"author":{"gitId":"shreytheshreyas"},"content":"_____________________________________________________________________________________"},{"lineNumber":794,"author":{"gitId":"shreytheshreyas"},"content":"Task ID does not exist!"},{"lineNumber":795,"author":{"gitId":"shreytheshreyas"},"content":"```"},{"lineNumber":796,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":797,"author":{"gitId":"thatseant"},"content":"\u003e Setting an invalid priority."},{"lineNumber":798,"author":{"gitId":"thatseant"},"content":"```"},{"lineNumber":799,"author":{"gitId":"thatseant"},"content":"priority t/4 p/-1"},{"lineNumber":800,"author":{"gitId":"thatseant"},"content":"_____________________________________________________________________________________"},{"lineNumber":801,"author":{"gitId":"thatseant"},"content":"Invalid priority! Please input a positive integer for priority."},{"lineNumber":802,"author":{"gitId":"thatseant"},"content":"```  "},{"lineNumber":803,"author":{"gitId":"thatseant"},"content":"  "},{"lineNumber":804,"author":{"gitId":"riazaham"},"content":"---"},{"lineNumber":805,"author":{"gitId":"riazaham"},"content":"\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e  "},{"lineNumber":806,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":807,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":808,"author":{"gitId":"samuellleow"},"content":"### 4.1.7. Deleting a task: `delete` (Sean Tan)"},{"lineNumber":809,"author":{"gitId":"thatseant"},"content":"As your project evolves, you might soon find certain tasks unnecessary or outdated. "},{"lineNumber":810,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":811,"author":{"gitId":"thatseant"},"content":"Easily delete a task from the task list with the delete command!"},{"lineNumber":812,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":813,"author":{"gitId":"thatseant"},"content":"\u003e :exclamation: The task must exist in the task list before it can be deleted."},{"lineNumber":814,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":815,"author":{"gitId":"thatseant"},"content":"Format: `delete t/TASK_INDEX`"},{"lineNumber":816,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":817,"author":{"gitId":"riazaham"},"content":"Example of usage: "},{"lineNumber":818,"author":{"gitId":"-"},"content":""},{"lineNumber":819,"author":{"gitId":"thatseant"},"content":"\u003e Deletes the first task in the task list."},{"lineNumber":820,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":821,"author":{"gitId":"thatseant"},"content":"```"},{"lineNumber":822,"author":{"gitId":"thatseant"},"content":"delete t/1"},{"lineNumber":823,"author":{"gitId":"thatseant"},"content":"____________________________________________________________"},{"lineNumber":824,"author":{"gitId":"thatseant"},"content":"Task \"Coding\" removed!"},{"lineNumber":825,"author":{"gitId":"thatseant"},"content":"```"},{"lineNumber":826,"author":{"gitId":"-"},"content":""},{"lineNumber":827,"author":{"gitId":"samuellleow"},"content":"**Examples of Exception Handling for this command**"},{"lineNumber":828,"author":{"gitId":"shreytheshreyas"},"content":"\u003e Delete a task with an invalid task-ID"},{"lineNumber":829,"author":{"gitId":"shreytheshreyas"},"content":"```"},{"lineNumber":830,"author":{"gitId":"shreytheshreyas"},"content":"_____________________________________________________________________________________"},{"lineNumber":831,"author":{"gitId":"shreytheshreyas"},"content":"delete t/4 "},{"lineNumber":832,"author":{"gitId":"shreytheshreyas"},"content":"_____________________________________________________________________________________"},{"lineNumber":833,"author":{"gitId":"shreytheshreyas"},"content":"Task ID does not exist!"},{"lineNumber":834,"author":{"gitId":"shreytheshreyas"},"content":"_____________________________________________________________________________________"},{"lineNumber":835,"author":{"gitId":"shreytheshreyas"},"content":"```"},{"lineNumber":836,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":837,"author":{"gitId":"samuellleow"},"content":"### 4.1.8. Assigning a member to a task: `assign` (Sean Tan)"},{"lineNumber":838,"author":{"gitId":"thatseant"},"content":"Easily delegate work to your team members with the assign commmand! "},{"lineNumber":839,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":840,"author":{"gitId":"thatseant"},"content":"Now each member knows exactly what they have to do and not be overwhelmed with the full list of tasks in a project. "},{"lineNumber":841,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":842,"author":{"gitId":"thatseant"},"content":"Besides, EZManager allows you to assign multiple members to tasks so they can discuss and collaborate with team members "},{"lineNumber":843,"author":{"gitId":"thatseant"},"content":"that are assigned the same task as them! "},{"lineNumber":844,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":845,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":846,"author":{"gitId":"thatseant"},"content":"\u003e :exclamation: Members must belong to a project before they can be assigned tasks."},{"lineNumber":847,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":848,"author":{"gitId":"riazaham"},"content":"Format: `assign t/TASK_INDEX m/MEMBER_INDEX`"},{"lineNumber":849,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":850,"author":{"gitId":"riazaham"},"content":"* The `TASK_INDEX` must be a positive integer."},{"lineNumber":851,"author":{"gitId":"riazaham"},"content":"* The `MEMBER_INDEX` must be a positive integer."},{"lineNumber":852,"author":{"gitId":"thatseant"},"content":"* The task must exist before it can be assigned a member."},{"lineNumber":853,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":854,"author":{"gitId":"riazaham"},"content":"Example of usage: "},{"lineNumber":855,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":856,"author":{"gitId":"thatseant"},"content":"\u003e Assigns the first member in the member list to the first task in the task list"},{"lineNumber":857,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":858,"author":{"gitId":"thatseant"},"content":"```"},{"lineNumber":859,"author":{"gitId":"thatseant"},"content":"assign m/1 t/1"},{"lineNumber":860,"author":{"gitId":"thatseant"},"content":"____________________________________________________________"},{"lineNumber":861,"author":{"gitId":"thatseant"},"content":"Member \"Tom\" has been assigned to \"Code Review\""},{"lineNumber":862,"author":{"gitId":"thatseant"},"content":"```"},{"lineNumber":863,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":864,"author":{"gitId":"thatseant"},"content":"**Examples of Exception Handling for this command**"},{"lineNumber":865,"author":{"gitId":"shreytheshreyas"},"content":"\u003e Assigning a member to a task that does not exist"},{"lineNumber":866,"author":{"gitId":"shreytheshreyas"},"content":"```"},{"lineNumber":867,"author":{"gitId":"shreytheshreyas"},"content":"assign m/1 t/11"},{"lineNumber":868,"author":{"gitId":"shreytheshreyas"},"content":"_____________________________________________________________________________________"},{"lineNumber":869,"author":{"gitId":"shreytheshreyas"},"content":"Task ID does not exist!"},{"lineNumber":870,"author":{"gitId":"shreytheshreyas"},"content":"```"},{"lineNumber":871,"author":{"gitId":"shreytheshreyas"},"content":"\u003e Assigning a member to a task who is not assigned to the respective project "},{"lineNumber":872,"author":{"gitId":"shreytheshreyas"},"content":"```"},{"lineNumber":873,"author":{"gitId":"shreytheshreyas"},"content":"assign m/4 t/1"},{"lineNumber":874,"author":{"gitId":"shreytheshreyas"},"content":"_____________________________________________________________________________________"},{"lineNumber":875,"author":{"gitId":"shreytheshreyas"},"content":"Team Member ID does not exist!"},{"lineNumber":876,"author":{"gitId":"shreytheshreyas"},"content":"```  "},{"lineNumber":877,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":878,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":879,"author":{"gitId":"samuellleow"},"content":"### 4.1.9. Removing a member: `remove` (Sean Tan)"},{"lineNumber":880,"author":{"gitId":"thatseant"},"content":"If you decide to remove a member from a project, it\u0027s incredibly simple! "},{"lineNumber":881,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":882,"author":{"gitId":"thatseant"},"content":"Easily remove a member from a project with the remove command. The member will continue to be part of your members list in"},{"lineNumber":883,"author":{"gitId":"thatseant"},"content":"the Home View so you can assign him/her to another project instead."},{"lineNumber":884,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":885,"author":{"gitId":"samuellleow"},"content":"\u003e :exclamation: The member must exist before they can be removed."},{"lineNumber":886,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":887,"author":{"gitId":"samuellleow"},"content":"Format: `remove m/MEMBER_INDEX`"},{"lineNumber":888,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":889,"author":{"gitId":"samuellleow"},"content":"Example of usage: "},{"lineNumber":890,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":891,"author":{"gitId":"samuellleow"},"content":"\u003e  Removes the first member from the member list."},{"lineNumber":892,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":893,"author":{"gitId":"samuellleow"},"content":"```"},{"lineNumber":894,"author":{"gitId":"samuellleow"},"content":"remove m/1"},{"lineNumber":895,"author":{"gitId":"samuellleow"},"content":"___________________________________________________________"},{"lineNumber":896,"author":{"gitId":"samuellleow"},"content":"Team member \"Mike\" has been removed from Project \"CS2113T\""},{"lineNumber":897,"author":{"gitId":"samuellleow"},"content":"```  "},{"lineNumber":898,"author":{"gitId":"samuellleow"},"content":"  "},{"lineNumber":899,"author":{"gitId":"riazaham"},"content":"---"},{"lineNumber":900,"author":{"gitId":"riazaham"},"content":"\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e    "},{"lineNumber":901,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":902,"author":{"gitId":"thatseant"},"content":"**Examples of Exception Handling for this command**"},{"lineNumber":903,"author":{"gitId":"shreytheshreyas"},"content":"\u003e Removing a team member without the m/ parameter"},{"lineNumber":904,"author":{"gitId":"shreytheshreyas"},"content":"```"},{"lineNumber":905,"author":{"gitId":"shreytheshreyas"},"content":"remove 2"},{"lineNumber":906,"author":{"gitId":"shreytheshreyas"},"content":"Certain Parameters are missing!"},{"lineNumber":907,"author":{"gitId":"shreytheshreyas"},"content":"```"},{"lineNumber":908,"author":{"gitId":"shreytheshreyas"},"content":"\u003e Removing a team member that was not assigned to the respective project"},{"lineNumber":909,"author":{"gitId":"shreytheshreyas"},"content":"```"},{"lineNumber":910,"author":{"gitId":"shreytheshreyas"},"content":"_____________________________________________________________________________________"},{"lineNumber":911,"author":{"gitId":"shreytheshreyas"},"content":"remove m/3"},{"lineNumber":912,"author":{"gitId":"shreytheshreyas"},"content":"_____________________________________________________________________________________"},{"lineNumber":913,"author":{"gitId":"shreytheshreyas"},"content":"Team Member ID does not exist!"},{"lineNumber":914,"author":{"gitId":"shreytheshreyas"},"content":"_____________________________________________________________________________________"},{"lineNumber":915,"author":{"gitId":"shreytheshreyas"},"content":"```"},{"lineNumber":916,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":917,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":918,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":919,"author":{"gitId":"samuellleow"},"content":"### 4.1.10. Add estimated time: `estimate` (Samuel Paul Christopher)"},{"lineNumber":920,"author":{"gitId":"samuelchristopher"},"content":"As a project manager, you need to ensure that your projects are run profitably. This means that projects cannot "},{"lineNumber":921,"author":{"gitId":"samuelchristopher"},"content":"over-run the timeline that has been agreed with your stakeholders. To ensure that time is spend well, you can add"},{"lineNumber":922,"author":{"gitId":"samuelchristopher"},"content":"estimate the amount of time that should be spent on a task. This ensures that your team will have a rough gauge on how"},{"lineNumber":923,"author":{"gitId":"samuelchristopher"},"content":"much time they can spend on a task before it becomes unprofitable. "},{"lineNumber":924,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":925,"author":{"gitId":"samuelchristopher"},"content":"Apart from maintaining profitability, this allows you to catch red flags early on when tasks require more time than "},{"lineNumber":926,"author":{"gitId":"samuelchristopher"},"content":"what has been forecasted. This gives you ample time to communicate foreseeable delays with your clients and ensure  that "},{"lineNumber":927,"author":{"gitId":"samuelchristopher"},"content":"unwanted surprises are minimised throughout your project management journey."},{"lineNumber":928,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":929,"author":{"gitId":"samuelchristopher"},"content":"To add an estimated time, you can use the format shown below."},{"lineNumber":930,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":931,"author":{"gitId":"thatseant"},"content":"Format: `estimate t/TASK_INDEX h/HOURS m/MINUTES`"},{"lineNumber":932,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":933,"author":{"gitId":"thatseant"},"content":"\u003e :warning:  `HOURS` and `MINUTES ` must both be positive numbers."},{"lineNumber":934,"author":{"gitId":"thatseant"},"content":"\u003e"},{"lineNumber":935,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":936,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":937,"author":{"gitId":"thatseant"},"content":"Example usage and output:"},{"lineNumber":938,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":939,"author":{"gitId":"thatseant"},"content":"```"},{"lineNumber":940,"author":{"gitId":"thatseant"},"content":"estimate t/1 h/12 m/30"},{"lineNumber":941,"author":{"gitId":"thatseant"},"content":"____________________________________________________________"},{"lineNumber":942,"author":{"gitId":"thatseant"},"content":"Task \"New Task\" has estimated time of 12 hours and 30 minutes"},{"lineNumber":943,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":944,"author":{"gitId":"thatseant"},"content":"```  "},{"lineNumber":945,"author":{"gitId":"thatseant"},"content":"  "},{"lineNumber":946,"author":{"gitId":"riazaham"},"content":"---"},{"lineNumber":947,"author":{"gitId":"riazaham"},"content":"\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e  "},{"lineNumber":948,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":949,"author":{"gitId":"samuellleow"},"content":"**Examples of Exception Handling for this command**"},{"lineNumber":950,"author":{"gitId":"shreytheshreyas"},"content":"\u003e Assigning a time period to a task that does not exist"},{"lineNumber":951,"author":{"gitId":"shreytheshreyas"},"content":"```"},{"lineNumber":952,"author":{"gitId":"shreytheshreyas"},"content":"estimate t/11 h/6 m/30"},{"lineNumber":953,"author":{"gitId":"shreytheshreyas"},"content":"_____________________________________________________________________________________"},{"lineNumber":954,"author":{"gitId":"shreytheshreyas"},"content":"Task ID does not exist!"},{"lineNumber":955,"author":{"gitId":"shreytheshreyas"},"content":"```"},{"lineNumber":956,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":957,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":958,"author":{"gitId":"samuellleow"},"content":"### 4.1.11. Add actual time taken: `actual` (Samuel Paul Christopher)"},{"lineNumber":959,"author":{"gitId":"samuelchristopher"},"content":"Expectations are different from reality. You may set out to finish a task in one hour but it might end up taking twice "},{"lineNumber":960,"author":{"gitId":"samuelchristopher"},"content":"that much time. Having a record of the actual time that your team members spent on a task is invaluable. This opens up "},{"lineNumber":961,"author":{"gitId":"samuelchristopher"},"content":"the opportunity for you to gauge timelines better in the future. Ensuring that your projects remain profitable."},{"lineNumber":962,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":963,"author":{"gitId":"samuelchristopher"},"content":"Here is best part. You can use the records of actual time taken to facilitate reviews with your team. Allowing them to "},{"lineNumber":964,"author":{"gitId":"samuelchristopher"},"content":"learn about the difference between perceived and actual effort needed for tasks."},{"lineNumber":965,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":966,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":967,"author":{"gitId":"samuelchristopher"},"content":"To add the actual time taken for task to be completed, the format below can be used."},{"lineNumber":968,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":969,"author":{"gitId":"thatseant"},"content":"\u003e :exclamation: Task must be marked as done before actual time taken can be added."},{"lineNumber":970,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":971,"author":{"gitId":"thatseant"},"content":"Format: `actual t/TASK_INDEX h/HOURS m/MINUTES`"},{"lineNumber":972,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":973,"author":{"gitId":"thatseant"},"content":"\u003e :warning:  `HOURS` and `MINUTES   `  must both be positive numbers."},{"lineNumber":974,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":975,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":976,"author":{"gitId":"thatseant"},"content":"Example usage and output:"},{"lineNumber":977,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":978,"author":{"gitId":"thatseant"},"content":"```"},{"lineNumber":979,"author":{"gitId":"thatseant"},"content":"done t/1"},{"lineNumber":980,"author":{"gitId":"thatseant"},"content":"actual t/1 h/12 m/30"},{"lineNumber":981,"author":{"gitId":"thatseant"},"content":"____________________________________________________________"},{"lineNumber":982,"author":{"gitId":"thatseant"},"content":"Task \"New Task\" took 12 hours and 30 minutes to be completed."},{"lineNumber":983,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":984,"author":{"gitId":"shreytheshreyas"},"content":"```"},{"lineNumber":985,"author":{"gitId":"samuellleow"},"content":"**Examples of Exception Handling for this command**"},{"lineNumber":986,"author":{"gitId":"shreytheshreyas"},"content":"\u003e Assigning a time period to a task that does not exist"},{"lineNumber":987,"author":{"gitId":"shreytheshreyas"},"content":"```"},{"lineNumber":988,"author":{"gitId":"shreytheshreyas"},"content":"actual t/11 h/5 m/20    "},{"lineNumber":989,"author":{"gitId":"shreytheshreyas"},"content":"_____________________________________________________________________________________"},{"lineNumber":990,"author":{"gitId":"shreytheshreyas"},"content":"Task ID does not exist!"},{"lineNumber":991,"author":{"gitId":"thatseant"},"content":"```"},{"lineNumber":992,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":993,"author":{"gitId":"samuellleow"},"content":"### 4.1.12. Sort tasks: `sort` (Samuel Paul Christopher)"},{"lineNumber":994,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":995,"author":{"gitId":"samuelchristopher"},"content":"What do you do when you start a week? A meticulous project manager like yourself always plans ahead. The most difficult part"},{"lineNumber":996,"author":{"gitId":"samuelchristopher"},"content":"is determining where you and your team should spend their energy. With this sorting feature, you can determine which"},{"lineNumber":997,"author":{"gitId":"samuelchristopher"},"content":"tasks you need to focus on at a glance. Simply sort tasks by priority, deadline or actual time taken."},{"lineNumber":998,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":999,"author":{"gitId":"samuelchristopher"},"content":"Here are a few things you can take note of:  "},{"lineNumber":1000,"author":{"gitId":"thatseant"},"content":":bulb: Highest priority of 1 will be displayed at top."},{"lineNumber":1001,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":1002,"author":{"gitId":"thatseant"},"content":":bulb: Earliest deadline will be displayed at top."},{"lineNumber":1003,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":1004,"author":{"gitId":"thatseant"},"content":":bulb: Shortest actual time will be displayed at top."},{"lineNumber":1005,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":1006,"author":{"gitId":"thatseant"},"content":":bulb: Shortest estimated time will be displayed at top."},{"lineNumber":1007,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":1008,"author":{"gitId":"thatseant"},"content":"Format: `sort s/SORTING_TYPE`"},{"lineNumber":1009,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":1010,"author":{"gitId":"thatseant"},"content":"* Sorting type `a` refers to actual time, `e` refers to estimated time,  `p` refers to priority and `d` refers to deadline."},{"lineNumber":1011,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":1012,"author":{"gitId":"thatseant"},"content":"Example usage and output:"},{"lineNumber":1013,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":1014,"author":{"gitId":"thatseant"},"content":"```"},{"lineNumber":1015,"author":{"gitId":"thatseant"},"content":"sort s/d"},{"lineNumber":1016,"author":{"gitId":"thatseant"},"content":"____________________________________________________________"},{"lineNumber":1017,"author":{"gitId":"thatseant"},"content":"Task List sorted based on deadline"},{"lineNumber":1018,"author":{"gitId":"thatseant"},"content":"```"},{"lineNumber":1019,"author":{"gitId":"samuellleow"},"content":"**Examples of Exception Handling for this command** "},{"lineNumber":1020,"author":{"gitId":"shreytheshreyas"},"content":"\u003e Using the sort functionality with the s/ parameter"},{"lineNumber":1021,"author":{"gitId":"shreytheshreyas"},"content":"```"},{"lineNumber":1022,"author":{"gitId":"shreytheshreyas"},"content":"_____________________________________________________________________________________"},{"lineNumber":1023,"author":{"gitId":"shreytheshreyas"},"content":"sort p"},{"lineNumber":1024,"author":{"gitId":"shreytheshreyas"},"content":"Certain Parameters are missing!"},{"lineNumber":1025,"author":{"gitId":"shreytheshreyas"},"content":"_____________________________________________________________________________________"},{"lineNumber":1026,"author":{"gitId":"shreytheshreyas"},"content":"```  "},{"lineNumber":1027,"author":{"gitId":"riazaham"},"content":"  "},{"lineNumber":1028,"author":{"gitId":"riazaham"},"content":"---"},{"lineNumber":1029,"author":{"gitId":"riazaham"},"content":"\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e    "},{"lineNumber":1030,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":1031,"author":{"gitId":"samuellleow"},"content":"### 4.1.13. Exiting EZ Manager: `bye` (Samuel Paul Christopher)"},{"lineNumber":1032,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":1033,"author":{"gitId":"samuelchristopher"},"content":"After a hard day\u0027s work, you can end your session with EZ Manager using the bye command. Fret not, when you are ready to"},{"lineNumber":1034,"author":{"gitId":"samuelchristopher"},"content":"resume work, EZ Manager will automatically load the previous data into your session so that you can pick up where you "},{"lineNumber":1035,"author":{"gitId":"samuelchristopher"},"content":"left off."},{"lineNumber":1036,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":1037,"author":{"gitId":"riazaham"},"content":"Format: `bye`"},{"lineNumber":1038,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":1039,"author":{"gitId":"samuelchristopher"},"content":"Note: If you use `Ctrl + C` to end your EZ Manager session, we have made the provisions to still ensure that your data "},{"lineNumber":1040,"author":{"gitId":"samuelchristopher"},"content":"is saved and ready for you when you have recharged."},{"lineNumber":1041,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":1042,"author":{"gitId":"samuellleow"},"content":"## 5. FAQ (Samuel Paul Christopher)"},{"lineNumber":1043,"author":{"gitId":"-"},"content":""},{"lineNumber":1044,"author":{"gitId":"samuelchristopher"},"content":"EZ Manager is here to make your life a little bit easier. Here are the most common questions that we get, we hope it "},{"lineNumber":1045,"author":{"gitId":"samuelchristopher"},"content":"answers some of the questions that you may have not found answers to yet."},{"lineNumber":1046,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":1047,"author":{"gitId":"samuellleow"},"content":"**Q**: Does the program saves the data entered when I terminate the program abruptly? "},{"lineNumber":1048,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":1049,"author":{"gitId":"samuellleow"},"content":"**A**: Yes, the program saves the data entered after every command which allows the data to be stored "},{"lineNumber":1050,"author":{"gitId":"samuellleow"},"content":"even if the program is terminated abruptly."},{"lineNumber":1051,"author":{"gitId":"-"},"content":""},{"lineNumber":1052,"author":{"gitId":"-"},"content":"**Q**: How do I transfer my data to another computer? "},{"lineNumber":1053,"author":{"gitId":"-"},"content":""},{"lineNumber":1054,"author":{"gitId":"samuellleow"},"content":"**A**: Simply transfer the ezmanager.txt file to another computer and run our program once to load the data."},{"lineNumber":1055,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":1056,"author":{"gitId":"samuellleow"},"content":"**Q**: How long does it take to get up and running? "},{"lineNumber":1057,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":1058,"author":{"gitId":"samuellleow"},"content":"**A**: Once you have the JAR file downloaded, you can run `java -jar ezmanager.jar` in the terminal "},{"lineNumber":1059,"author":{"gitId":"samuellleow"},"content":"at the specific folder the JAR file is stored and you have begun.    "},{"lineNumber":1060,"author":{"gitId":"-"},"content":""},{"lineNumber":1061,"author":{"gitId":"riazaham"},"content":"---"},{"lineNumber":1062,"author":{"gitId":"riazaham"},"content":"\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e    "},{"lineNumber":1063,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":1064,"author":{"gitId":"-"},"content":""},{"lineNumber":1065,"author":{"gitId":"thatseant"},"content":"## 6. Command Summary"},{"lineNumber":1066,"author":{"gitId":"-"},"content":""},{"lineNumber":1067,"author":{"gitId":"thatseant"},"content":"Home View Commands"},{"lineNumber":1068,"author":{"gitId":"-"},"content":"![Command Summary One](https://i.ibb.co/GMgn96K/cs1.png)"},{"lineNumber":1069,"author":{"gitId":"-"},"content":""},{"lineNumber":1070,"author":{"gitId":"thatseant"},"content":"Project View Commands"},{"lineNumber":1071,"author":{"gitId":"-"},"content":"![Command Summary Two](https://i.ibb.co/P4z4vV4/cs2.png)"}],"authorContributionMap":{"thatseant":359,"samuelchristopher":56,"samuellleow":138,"shreytheshreyas":210,"riazaham":269,"-":39}},{"path":"docs/team/riazaham.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"riazaham"},"content":"# Riaz Ahamed\u0027s Project Portfolio Page"},{"lineNumber":2,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":3,"author":{"gitId":"riazaham"},"content":"## Project: EZ Manager"},{"lineNumber":4,"author":{"gitId":"riazaham"},"content":"EZ Manager is a simple and efficient project management tool for software project managers. "},{"lineNumber":5,"author":{"gitId":"riazaham"},"content":"EZ Manager is a desktop application and the user interacts with the CLI "},{"lineNumber":6,"author":{"gitId":"riazaham"},"content":"(Command Line Interface) to manage projects, tasks and team members."},{"lineNumber":7,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":8,"author":{"gitId":"riazaham"},"content":"Given below are my contributions to the project."},{"lineNumber":9,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":10,"author":{"gitId":"riazaham"},"content":"#### Code contributed: [RepoSense Link](https://nus-cs2113-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003driazaham)"},{"lineNumber":11,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":12,"author":{"gitId":"riazaham"},"content":"### Features added"},{"lineNumber":13,"author":{"gitId":"riazaham"},"content":"**Select Task**: Allows the user to select specific tasks."},{"lineNumber":14,"author":{"gitId":"riazaham"},"content":"**Edit Task**: Allows the user to edit specific tasks."},{"lineNumber":15,"author":{"gitId":"riazaham"},"content":"**Home**: Allows the user to switch from project view to home view. "},{"lineNumber":16,"author":{"gitId":"riazaham"},"content":"**Delete Task**: Allows the user to delete specific tasks."},{"lineNumber":17,"author":{"gitId":"riazaham"},"content":"**Assign team member to task**: Allows the user to assign an existing member to a specific task."},{"lineNumber":18,"author":{"gitId":"riazaham"},"content":"**Assign priority to task**: Allows the user to assign priority to a specific task"},{"lineNumber":19,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":20,"author":{"gitId":"riazaham"},"content":"### Enhancements to the codebase"},{"lineNumber":21,"author":{"gitId":"riazaham"},"content":"The initial design of our codebase implemented the logic for the different commands in one Parser class."},{"lineNumber":22,"author":{"gitId":"riazaham"},"content":"As a team, we decided to redesign the codebase such that the logic is implemented in the respective command classes."},{"lineNumber":23,"author":{"gitId":"riazaham"},"content":"Hence, I contributed to the design by abstracting logic from most functions in the Parser class to the respective command classes."},{"lineNumber":24,"author":{"gitId":"riazaham"},"content":"This enhancement was a tedious process as I had to redesign the entire codebase for every feature."},{"lineNumber":25,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":26,"author":{"gitId":"riazaham"},"content":"#### Code testing"},{"lineNumber":27,"author":{"gitId":"riazaham"},"content":"I contributed to the testing of the program by writing JUnit tests for the features"},{"lineNumber":28,"author":{"gitId":"riazaham"},"content":"mentioned above."},{"lineNumber":29,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":30,"author":{"gitId":"riazaham"},"content":"#### Contributions to the UG (User Guide)"},{"lineNumber":31,"author":{"gitId":"riazaham"},"content":"I contributed to the UG in the following ways:"},{"lineNumber":32,"author":{"gitId":"riazaham"},"content":"- Designed the application logo"},{"lineNumber":33,"author":{"gitId":"riazaham"},"content":"- Wrote user guide for the features mentioned above"},{"lineNumber":34,"author":{"gitId":"riazaham"},"content":"- Drafted the initial official full UG with hyperlinked table of contents"},{"lineNumber":35,"author":{"gitId":"riazaham"},"content":"- Formatted the full UG with text colors, decorations and indentations"},{"lineNumber":36,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":37,"author":{"gitId":"riazaham"},"content":"#### Contributions to the DG (Developer Guide)"},{"lineNumber":38,"author":{"gitId":"riazaham"},"content":"I contributed to the DG in the following ways:"},{"lineNumber":39,"author":{"gitId":"riazaham"},"content":"- Included the code explanations and the sequence diagrams for the features mentioned above"},{"lineNumber":40,"author":{"gitId":"riazaham"},"content":"- Fixed most of the sequence diagram issues brought up by the tutor across the DG"},{"lineNumber":41,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":42,"author":{"gitId":"riazaham"},"content":"#### Contributions to reviewing/mentoring"},{"lineNumber":43,"author":{"gitId":"riazaham"},"content":"Our project has about 70 PRs (Pull requests) as of 6/11/2020. I reviewed, commented "},{"lineNumber":44,"author":{"gitId":"riazaham"},"content":"and approved almost half, 34 of the PRs."}],"authorContributionMap":{"riazaham":44}},{"path":"docs/team/samuellleow.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"samuellleow"},"content":"# Samuel Leow Wei Han - Project Portfolio Page"},{"lineNumber":2,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":3,"author":{"gitId":"samuellleow"},"content":"## Project: EzManager"},{"lineNumber":4,"author":{"gitId":"samuellleow"},"content":"EZ Manager is a simple and efficient project management tool for software project managers. "},{"lineNumber":5,"author":{"gitId":"samuellleow"},"content":"EZ Manager is a desktop application with the user interacting with the CLI "},{"lineNumber":6,"author":{"gitId":"samuellleow"},"content":"(Command Line Interface) to manage projects, tasks and team members."},{"lineNumber":7,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":8,"author":{"gitId":"samuellleow"},"content":"### Summary of Contributions"},{"lineNumber":9,"author":{"gitId":"samuellleow"},"content":"Given below are my contributions to the project."},{"lineNumber":10,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":11,"author":{"gitId":"samuellleow"},"content":"* **Code contributed**: [RepoSense Link](https://nus-cs2113-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dsamuellleow)"},{"lineNumber":12,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":13,"author":{"gitId":"samuellleow"},"content":"* **Features Added**: "},{"lineNumber":14,"author":{"gitId":"samuellleow"},"content":"    * **Home View**: Allows the user to have an overview of all the projects and members in the program."},{"lineNumber":15,"author":{"gitId":"samuellleow"},"content":"    * **Remove member (In home view)**: Allows the user to remove a specified member from the program entirely."},{"lineNumber":16,"author":{"gitId":"samuellleow"},"content":"    * **Remove member (In project view)**: Allows the user to remove a specified member from the current project. "},{"lineNumber":17,"author":{"gitId":"samuellleow"},"content":"    * **Add a new Project**: Allows the user to add a new project to the program. "},{"lineNumber":18,"author":{"gitId":"samuellleow"},"content":"    * **Add Project Description**: Allows the user to add a project description to a specified project."},{"lineNumber":19,"author":{"gitId":"samuellleow"},"content":"    * **Add Project Deadline**: Allows the user to add a deadline to a specified project."},{"lineNumber":20,"author":{"gitId":"samuellleow"},"content":"    "},{"lineNumber":21,"author":{"gitId":"samuellleow"},"content":"* **Noteworthy Feature**: Added home view feature. (Pull Requests #97 and #175)"},{"lineNumber":22,"author":{"gitId":"samuellleow"},"content":"    * What it does: Allows the user to have an overview of all the projects and members in the program."},{"lineNumber":23,"author":{"gitId":"samuellleow"},"content":"    including important information such as description, deadline, tasks completed per project and projects each member is involved in."},{"lineNumber":24,"author":{"gitId":"samuellleow"},"content":"    * Justification: This feature improves the product significantly because the user do not have to type in multiple commands"},{"lineNumber":25,"author":{"gitId":"samuellleow"},"content":"    to view a list of projects or a list of members separately. An overview could be seen with one command."},{"lineNumber":26,"author":{"gitId":"samuellleow"},"content":"    * Highlights: This feature displays remarks of each project, which shows the user the next task with an upcoming deadline."},{"lineNumber":27,"author":{"gitId":"samuellleow"},"content":"    If the deadline is within 5 days from today\u0027s date, and the task has not been done, \"!!!!!WARNING!!!!!\" will be displayed in the remarks to alert"},{"lineNumber":28,"author":{"gitId":"samuellleow"},"content":"    the user."},{"lineNumber":29,"author":{"gitId":"samuellleow"},"content":"    "},{"lineNumber":30,"author":{"gitId":"samuellleow"},"content":"* **Enhancement to existing feature**"},{"lineNumber":31,"author":{"gitId":"samuellleow"},"content":"    * Extracted printing elements to Ui class. (Pull Request #50)"},{"lineNumber":32,"author":{"gitId":"samuellleow"},"content":"    * Show correct assigned members in each project. (Pull Request #90)"},{"lineNumber":33,"author":{"gitId":"samuellleow"},"content":"    * List of projects in home view sorted by their deadlines as default view. (Pull Request #76)"},{"lineNumber":34,"author":{"gitId":"samuellleow"},"content":"    * Assign command does not allow assignment of repeated projects and tasks (Pull Request #179)"},{"lineNumber":35,"author":{"gitId":"samuellleow"},"content":"    "},{"lineNumber":36,"author":{"gitId":"samuellleow"},"content":"* **Documentation**:"},{"lineNumber":37,"author":{"gitId":"samuellleow"},"content":"    * User Guide:"},{"lineNumber":38,"author":{"gitId":"samuellleow"},"content":"        * Added documentation for the features `remove`, `project`, `description`, `deadline` and `list`."},{"lineNumber":39,"author":{"gitId":"samuellleow"},"content":"    * Developer Guide:"},{"lineNumber":40,"author":{"gitId":"samuellleow"},"content":"        * Design section: Model Component"},{"lineNumber":41,"author":{"gitId":"samuellleow"},"content":"        * Home view"},{"lineNumber":42,"author":{"gitId":"samuellleow"},"content":"        * Add deadlines to projects"},{"lineNumber":43,"author":{"gitId":"samuellleow"},"content":"        * Add description to projects"},{"lineNumber":44,"author":{"gitId":"samuellleow"},"content":"        * Delete a specified project"},{"lineNumber":45,"author":{"gitId":"samuellleow"},"content":"        * Mark project as done"},{"lineNumber":46,"author":{"gitId":"samuellleow"},"content":"        * Remove members"},{"lineNumber":47,"author":{"gitId":"samuellleow"},"content":"        * Appendix A Product Scope: User Stories"},{"lineNumber":48,"author":{"gitId":"samuellleow"},"content":"        "},{"lineNumber":49,"author":{"gitId":"samuellleow"},"content":"* **Contributions to reviewing/mentoring**:"},{"lineNumber":50,"author":{"gitId":"samuellleow"},"content":"    * Our project had about 70 closed pull requests as of 8/11/2020. I reviewed, commented and approved about 20 of those PRs."},{"lineNumber":51,"author":{"gitId":"samuellleow"},"content":"    In those reviews, I provided extensive problem recognitions to those codes that were not suitable and provided explanations"},{"lineNumber":52,"author":{"gitId":"samuellleow"},"content":"    to my teammates in parts of the codes that they did not understand. "},{"lineNumber":53,"author":{"gitId":"samuellleow"},"content":"        "},{"lineNumber":54,"author":{"gitId":"samuellleow"},"content":"    "},{"lineNumber":55,"author":{"gitId":"-"},"content":"* **Testing**:"},{"lineNumber":56,"author":{"gitId":"-"},"content":"   * I wrote the JUnit tests for the features above."}],"authorContributionMap":{"samuellleow":54,"-":2}},{"path":"docs/team/samuelpaulchristopher.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"samuelchristopher"},"content":"# Samuel Paul Christopher - Project Portfolio Page"},{"lineNumber":2,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":3,"author":{"gitId":"samuelchristopher"},"content":"## Project: EzManager"},{"lineNumber":4,"author":{"gitId":"samuelchristopher"},"content":"EZ Manager is a simple and efficient project management tool for software project managers. "},{"lineNumber":5,"author":{"gitId":"samuelchristopher"},"content":"EZ Manager is a desktop application with the user interacting with the CLI "},{"lineNumber":6,"author":{"gitId":"samuelchristopher"},"content":"(Command Line Interface) to manage projects, tasks and team members."},{"lineNumber":7,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":8,"author":{"gitId":"samuelchristopher"},"content":"### Summary of Contributions"},{"lineNumber":9,"author":{"gitId":"samuelchristopher"},"content":"Given below are my contributions to the project."},{"lineNumber":10,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":11,"author":{"gitId":"samuelchristopher"},"content":"* **Code contributed**: [RepoSense Link](https://nus-cs2113-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dsamuelchristopher)"},{"lineNumber":12,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":13,"author":{"gitId":"samuelchristopher"},"content":"* **Features Added**: "},{"lineNumber":14,"author":{"gitId":"samuelchristopher"},"content":"    * **Project View**: Allows the user to have an overview of all the tasks and members in the project."},{"lineNumber":15,"author":{"gitId":"samuelchristopher"},"content":"    * **Create Member (In home view)**: Allows the user to add a member to program."},{"lineNumber":16,"author":{"gitId":"samuelchristopher"},"content":"    * **Delete Project (In home view)**: Allows the user to remove a specified project from the program. "},{"lineNumber":17,"author":{"gitId":"samuelchristopher"},"content":"    * **Mark Project As Completed**: Allows the user to mark a new project as completed. "},{"lineNumber":18,"author":{"gitId":"samuelchristopher"},"content":"    * **Mark Tasks As Completed**: Allows the user to mark a project as completed."},{"lineNumber":19,"author":{"gitId":"samuelchristopher"},"content":"    * **Storage**: Allows the data on EZ Manager to be persisted."},{"lineNumber":20,"author":{"gitId":"samuelchristopher"},"content":"    "},{"lineNumber":21,"author":{"gitId":"samuelchristopher"},"content":"* **Noteworthy Features**: "},{"lineNumber":22,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":23,"author":{"gitId":"samuelchristopher"},"content":"1. Added Project View feature."},{"lineNumber":24,"author":{"gitId":"samuelchristopher"},"content":"    * What it does: Allows the user to have an overview of all the tasks and members in the project."},{"lineNumber":25,"author":{"gitId":"samuelchristopher"},"content":"    This includes important information such as:"},{"lineNumber":26,"author":{"gitId":"samuelchristopher"},"content":"       - status of the task (is it done or not?)"},{"lineNumber":27,"author":{"gitId":"samuelchristopher"},"content":"       - description"},{"lineNumber":28,"author":{"gitId":"samuelchristopher"},"content":"       - deadline"},{"lineNumber":29,"author":{"gitId":"samuelchristopher"},"content":"       - priority of the task"},{"lineNumber":30,"author":{"gitId":"samuelchristopher"},"content":"       - estimated hours to spend on the task"},{"lineNumber":31,"author":{"gitId":"samuelchristopher"},"content":"       - actual time spent on the task "},{"lineNumber":32,"author":{"gitId":"samuelchristopher"},"content":"       - members involved with the task"},{"lineNumber":33,"author":{"gitId":"samuelchristopher"},"content":"    * Justification: This feature allows our project managers to get a glance of the projects all in one command. "},{"lineNumber":34,"author":{"gitId":"samuelchristopher"},"content":"    Features like this one are essential to allow the project manager to determine of the project is on track."},{"lineNumber":35,"author":{"gitId":"samuelchristopher"},"content":"    "},{"lineNumber":36,"author":{"gitId":"samuelchristopher"},"content":"2. Data persistence"},{"lineNumber":37,"author":{"gitId":"samuelchristopher"},"content":"    * Allows the data on the system to be saved and loaded in after each session. This makes it convinent for "},{"lineNumber":38,"author":{"gitId":"samuelchristopher"},"content":"    the user and brings the EZ Manager application to life as the user can store the data in a safe and reliable manner."},{"lineNumber":39,"author":{"gitId":"samuelchristopher"},"content":"    "},{"lineNumber":40,"author":{"gitId":"samuelchristopher"},"content":"    "},{"lineNumber":41,"author":{"gitId":"samuelchristopher"},"content":"    "},{"lineNumber":42,"author":{"gitId":"samuelchristopher"},"content":"* **Documentation**:"},{"lineNumber":43,"author":{"gitId":"samuelchristopher"},"content":"    * User Guide:"},{"lineNumber":44,"author":{"gitId":"samuelchristopher"},"content":"        * Added documentation for the features `member`, `delete`, `done`, `list [for Project View]`, `Storage` "},{"lineNumber":45,"author":{"gitId":"samuelchristopher"},"content":"    * Developer Guide:"},{"lineNumber":46,"author":{"gitId":"samuelchristopher"},"content":"        * Storage "},{"lineNumber":47,"author":{"gitId":"samuelchristopher"},"content":"        * Add member"},{"lineNumber":48,"author":{"gitId":"samuelchristopher"},"content":"        * View member"},{"lineNumber":49,"author":{"gitId":"samuelchristopher"},"content":"        * Assign member to Project"},{"lineNumber":50,"author":{"gitId":"samuelchristopher"},"content":"        * Assign member to Task"},{"lineNumber":51,"author":{"gitId":"samuelchristopher"},"content":"        * Project view"},{"lineNumber":52,"author":{"gitId":"samuelchristopher"},"content":"        * Running Tests"},{"lineNumber":53,"author":{"gitId":"samuelchristopher"},"content":"        * Dev Ops "},{"lineNumber":54,"author":{"gitId":"samuelchristopher"},"content":"        * Appendix B: Command Summary"},{"lineNumber":55,"author":{"gitId":"samuelchristopher"},"content":"        * Generic Sections (Table of Contents, Introduction)"},{"lineNumber":56,"author":{"gitId":"samuelchristopher"},"content":"       "},{"lineNumber":57,"author":{"gitId":"samuelchristopher"},"content":"        "},{"lineNumber":58,"author":{"gitId":"-"},"content":"* **Contributions to reviewing**:"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    * Our project had about 95 closed pull requests as of 9/11/2020. I reviewed 28 of those Pull Requests."},{"lineNumber":60,"author":{"gitId":"-"},"content":"    Throughout the review, I tried my best to understand the code and provide feedback as neccessary while"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    conciously considering the phrasing of my sentences to ensure clarity, brevity and politeness."},{"lineNumber":62,"author":{"gitId":"samuelchristopher"},"content":"    "},{"lineNumber":63,"author":{"gitId":"-"},"content":"* **Testing**:"},{"lineNumber":64,"author":{"gitId":"-"},"content":"   * I wrote the JUnit tests for the features above."},{"lineNumber":65,"author":{"gitId":"-"},"content":"        "},{"lineNumber":66,"author":{"gitId":"samuelchristopher"},"content":"    "}],"authorContributionMap":{"samuelchristopher":59,"-":7}},{"path":"docs/team/shreyaskumar.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"shreytheshreyas"},"content":"# Shreyas Kumar- Project Portfolio Page"},{"lineNumber":2,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":3,"author":{"gitId":"shreytheshreyas"},"content":"## Project: EzManager"},{"lineNumber":4,"author":{"gitId":"shreytheshreyas"},"content":"Ez Manager is a simple and efficient project management tool for software project managers. "},{"lineNumber":5,"author":{"gitId":"shreytheshreyas"},"content":"Ez Manager is a desktop application with the user interacting with the CLI "},{"lineNumber":6,"author":{"gitId":"shreytheshreyas"},"content":"(Command Line Interface) to manage projects, tasks and team members."},{"lineNumber":7,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":8,"author":{"gitId":"shreytheshreyas"},"content":"### Summary of Contributions"},{"lineNumber":9,"author":{"gitId":"shreytheshreyas"},"content":"Given below are my contributions to the project."},{"lineNumber":10,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":11,"author":{"gitId":"shreytheshreyas"},"content":"* **Code contributed**: [RepoSense Link](https://nus-cs2113-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dshreytheshreyas)"},{"lineNumber":12,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":13,"author":{"gitId":"shreytheshreyas"},"content":"* **Features Added**: "},{"lineNumber":14,"author":{"gitId":"shreytheshreyas"},"content":"    * **Remove member (Initial implementation)**: Allows the user to remove a specified member from the program entirely. "},{"lineNumber":15,"author":{"gitId":"shreytheshreyas"},"content":"    * **Assign a member to a project**: Allows the user to add a new project to the program. "},{"lineNumber":16,"author":{"gitId":"shreytheshreyas"},"content":"    * **Sort tasks in Project-View**: Allows the user to sort tasks in the Project-View by a specified parameter."},{"lineNumber":17,"author":{"gitId":"shreytheshreyas"},"content":"    * **Exceptions Class**: Implemented a class so that my team members can include different types of exceptions that might occur "},{"lineNumber":18,"author":{"gitId":"shreytheshreyas"},"content":"    in out application."},{"lineNumber":19,"author":{"gitId":"shreytheshreyas"},"content":"* **Noteworthy Feature**: Task-Sort functionality (Pull Request #86)"},{"lineNumber":20,"author":{"gitId":"shreytheshreyas"},"content":"    * What it does: Allows the user to sort tasks in a paritcular project according to deadline,"},{"lineNumber":21,"author":{"gitId":"shreytheshreyas"},"content":"    * Justification: This functionality allows the user to organise the tasks in the project view according the to the "},{"lineNumber":22,"author":{"gitId":"shreytheshreyas"},"content":"    that is the most relevant to them."},{"lineNumber":23,"author":{"gitId":"shreytheshreyas"},"content":"    "},{"lineNumber":24,"author":{"gitId":"shreytheshreyas"},"content":"* **Enhancement to existing feature**"},{"lineNumber":25,"author":{"gitId":"shreytheshreyas"},"content":"    * Helped my teammates in applying SLAP(Single-Layer of Abstraction) to the parser class during the initial stages "},{"lineNumber":26,"author":{"gitId":"shreytheshreyas"},"content":"      of development of that particular class."},{"lineNumber":27,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":28,"author":{"gitId":"shreytheshreyas"},"content":"  **Tests Written**"},{"lineNumber":29,"author":{"gitId":"shreytheshreyas"},"content":"    * **Remove member test (initial test)** "},{"lineNumber":30,"author":{"gitId":"shreytheshreyas"},"content":"    * **Assign member to a project test** "},{"lineNumber":31,"author":{"gitId":"shreytheshreyas"},"content":"    * **sort command test**  "},{"lineNumber":32,"author":{"gitId":"shreytheshreyas"},"content":"* **Documentation**:"},{"lineNumber":33,"author":{"gitId":"shreytheshreyas"},"content":"    * User Guide:"},{"lineNumber":34,"author":{"gitId":"shreytheshreyas"},"content":"        Added documentation for the features:"},{"lineNumber":35,"author":{"gitId":"shreytheshreyas"},"content":"        "},{"lineNumber":36,"author":{"gitId":"shreytheshreyas"},"content":"         - `remove`(intial functionality)"},{"lineNumber":37,"author":{"gitId":"shreytheshreyas"},"content":"         - `list`(for members)"},{"lineNumber":38,"author":{"gitId":"shreytheshreyas"},"content":"         - `list`(for tasks)"},{"lineNumber":39,"author":{"gitId":"shreytheshreyas"},"content":"         - `task-sorting`"},{"lineNumber":40,"author":{"gitId":"shreytheshreyas"},"content":"    * Developer Guide:"},{"lineNumber":41,"author":{"gitId":"shreytheshreyas"},"content":"        - Explained about Add Task feature"},{"lineNumber":42,"author":{"gitId":"shreytheshreyas"},"content":"        - Explained about View list of tasks feature "},{"lineNumber":43,"author":{"gitId":"shreytheshreyas"},"content":"        - Explained about Mark task as done feature"},{"lineNumber":44,"author":{"gitId":"shreytheshreyas"},"content":"        - Explained about sorting tasks feature "},{"lineNumber":45,"author":{"gitId":"shreytheshreyas"},"content":"        - Wrote Manual Test Cases feature"},{"lineNumber":46,"author":{"gitId":"shreytheshreyas"},"content":"        - Contributed in the conversion of PDF version to the markdown version"},{"lineNumber":47,"author":{"gitId":"shreytheshreyas"},"content":"        "},{"lineNumber":48,"author":{"gitId":"shreytheshreyas"},"content":"* **Contributions to reviewing**:"},{"lineNumber":49,"author":{"gitId":"shreytheshreyas"},"content":"    * Our project had about 97 closed pull requests as of 9/11/2020. I reviewed, commented and approved about 21 of those PRs."},{"lineNumber":50,"author":{"gitId":"shreytheshreyas"},"content":"    I did my best to provide help my teammates by asking them if they could enhance certain features they themselves have already "},{"lineNumber":51,"author":{"gitId":"shreytheshreyas"},"content":"    implemented. "},{"lineNumber":52,"author":{"gitId":"shreytheshreyas"},"content":"        "},{"lineNumber":53,"author":{"gitId":"shreytheshreyas"},"content":"    "}],"authorContributionMap":{"shreytheshreyas":53}},{"path":"docs/team/thatseant.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"thatseant"},"content":"# Sean Tan\u0027s Project Portfolio Page"},{"lineNumber":2,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":3,"author":{"gitId":"thatseant"},"content":"## Project: EZ Manager"},{"lineNumber":4,"author":{"gitId":"thatseant"},"content":"EZ Manager is a CLI project management tool for software managers that allows them to manage the projects and members on their teams."},{"lineNumber":5,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":6,"author":{"gitId":"thatseant"},"content":"This documents highlights my contributions to EZ Manager."},{"lineNumber":7,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":8,"author":{"gitId":"thatseant"},"content":"### Code Contributed "},{"lineNumber":9,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":10,"author":{"gitId":"thatseant"},"content":"#### [Sean\u0027s RepoSense](https://nus-cs2113-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dthatseant)"},{"lineNumber":11,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":12,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":13,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":14,"author":{"gitId":"thatseant"},"content":"## Features added"},{"lineNumber":15,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":16,"author":{"gitId":"thatseant"},"content":"### **Architecture**"},{"lineNumber":17,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":18,"author":{"gitId":"thatseant"},"content":"**Implementation of App\u0027s Parser**"},{"lineNumber":19,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":20,"author":{"gitId":"thatseant"},"content":"My main enhancement was concentrated around the app’s architecture. I advocated the team move most of the logic to the individual command classes for iterative and independent development. I implemented the app’s parser to support this. In getParams(), a generic regex allows for retrieving any parameters for any command. With the parameters stored in a hashmap, I then sent this hashmap to the command classes in getCommand(). Furthermore, this meant that the user can specify parameters in any order. This made development so much easier for my teammates as they can concentrate on writing the logic of command execution with parsing done."},{"lineNumber":21,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":22,"author":{"gitId":"thatseant"},"content":"**Refactoring of App**"},{"lineNumber":23,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":24,"author":{"gitId":"thatseant"},"content":"I restructured the app to make it more user-friendly. Previously, there were team member list, tasks list and project list. Users were prone to confusion due to multiple lists that showed only limited information. I advocated for the team to implement Home View and Project View and replaced the List Command to display these views. Additionally, I designed mockups for the team so they understood what I meant. With this change, users immediately know which view they are in and which commands they could execute."},{"lineNumber":25,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":26,"author":{"gitId":"thatseant"},"content":"**Classes written**"},{"lineNumber":27,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":28,"author":{"gitId":"thatseant"},"content":"* Parser"},{"lineNumber":29,"author":{"gitId":"thatseant"},"content":"* TaskCommand"},{"lineNumber":30,"author":{"gitId":"thatseant"},"content":"* EstimatedTimeCommand"},{"lineNumber":31,"author":{"gitId":"thatseant"},"content":"    * Justification: Adding estimated time to tasks provides a target for managers to help the team stay focused and avoid spending excessive time on any task."},{"lineNumber":32,"author":{"gitId":"thatseant"},"content":"* ActualTimeCommand"},{"lineNumber":33,"author":{"gitId":"thatseant"},"content":"    * Justification: Adding actual time to tasks helps managers to see which areas they tend to spend the most time on."},{"lineNumber":34,"author":{"gitId":"thatseant"},"content":"* TaskAssignDeadlineCommand"},{"lineNumber":35,"author":{"gitId":"thatseant"},"content":"    * Justification: A deadline ensures the team stay on track to eventually finishing the project."},{"lineNumber":36,"author":{"gitId":"thatseant"},"content":"* TaskAssignPriorityCommand"},{"lineNumber":37,"author":{"gitId":"thatseant"},"content":"    * Justification: Adding priorities to tasks allows the team to prioritise and know which tasks to start working on first."},{"lineNumber":38,"author":{"gitId":"thatseant"},"content":"* TeamMemberHoursCommand"},{"lineNumber":39,"author":{"gitId":"thatseant"},"content":"    * Justification: This allows managers to see the committment level of individual members and avoid giving them excessive work."},{"lineNumber":40,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":41,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":42,"author":{"gitId":"thatseant"},"content":"## **Contributions to User Guide (UG)**"},{"lineNumber":43,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":44,"author":{"gitId":"thatseant"},"content":"My contributions were the following:"},{"lineNumber":45,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":46,"author":{"gitId":"thatseant"},"content":"- Restructured UG so commands were grouped by Home View and Project View"},{"lineNumber":47,"author":{"gitId":"thatseant"},"content":"- Added expected output to all UG commands."},{"lineNumber":48,"author":{"gitId":"thatseant"},"content":"- Added warnings and tips so users knew what to take note of when using the app."},{"lineNumber":49,"author":{"gitId":"thatseant"},"content":"- Added documentation for the above classes."},{"lineNumber":50,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":51,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":52,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":53,"author":{"gitId":"thatseant"},"content":"## **Contributions to Developer Guide (UG)**"},{"lineNumber":54,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":55,"author":{"gitId":"thatseant"},"content":"My contributions were the following:"},{"lineNumber":56,"author":{"gitId":"thatseant"},"content":"- Design section, specifically the introduction, consideration and overall architecture, and logic components. "},{"lineNumber":57,"author":{"gitId":"thatseant"},"content":"- Delete Task"},{"lineNumber":58,"author":{"gitId":"thatseant"},"content":"- Assign Deadlines to Task"},{"lineNumber":59,"author":{"gitId":"thatseant"},"content":"- Assign actual duration for tasks"},{"lineNumber":60,"author":{"gitId":"thatseant"},"content":"- Assign estimated duration for tasks."},{"lineNumber":61,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":62,"author":{"gitId":"thatseant"},"content":"## **Major Additional enhancements to codebase**"},{"lineNumber":63,"author":{"gitId":"thatseant"},"content":"#16 - Added project pointer to keep track of currently selected project"},{"lineNumber":64,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":65,"author":{"gitId":"thatseant"},"content":"#49 - Reduced task coupling by eliminating the need for a separate class to contain tasks."},{"lineNumber":66,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":67,"author":{"gitId":"thatseant"},"content":"#167 - Reduced user confusion by having list command display home and project view instead of separate lists for managers and tasks."},{"lineNumber":68,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":69,"author":{"gitId":"thatseant"},"content":"#208 - Added Javadocs to Task Classes"},{"lineNumber":70,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":71,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":72,"author":{"gitId":"thatseant"},"content":"## **Contributions to Team-Based Tasks**"},{"lineNumber":73,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":74,"author":{"gitId":"thatseant"},"content":"* Initiated the team’s practice of creating issues for our user stories by creating tags and opening issues during the first weeks. Advocated for my team to do these for issues they were assigned in the following weeks. "},{"lineNumber":75,"author":{"gitId":"thatseant"},"content":"* Categorise all of the issues from PE Dry-Run so my team has a better understanding of what had to be fixed and we can assign work to each other."},{"lineNumber":76,"author":{"gitId":"thatseant"},"content":"* Increased the number of approvals required for each pull request to 2 which resulted in better code quality and communication between members."},{"lineNumber":77,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":78,"author":{"gitId":"thatseant"},"content":"#### Contributions to reviewing/mentoring"},{"lineNumber":79,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":80,"author":{"gitId":"thatseant"},"content":"Of the 71 closed pull requests as of 7th November, I reviewed 34. In many of these pull requests, I looked through the code line-by-line and noted down issues or areas where the new code did not fit in well with the rest of the codebase."},{"lineNumber":81,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":82,"author":{"gitId":"thatseant"},"content":"https://github.com/AY2021S1-CS2113T-T09-1/tp/pulls?q\u003dis%3Apr+is%3Aclosed+reviewed-by%3Athatseant"}],"authorContributionMap":{"thatseant":82}},{"path":"ezmanager.txt","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"samuellleow"},"content":"Members "},{"lineNumber":2,"author":{"gitId":"samuellleow"},"content":"asd"},{"lineNumber":3,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":4,"author":{"gitId":"samuellleow"},"content":"Project two"},{"lineNumber":5,"author":{"gitId":"samuellleow"},"content":"status false"},{"lineNumber":6,"author":{"gitId":"samuellleow"},"content":"projectDescription \u003cproject description empty\u003e"},{"lineNumber":7,"author":{"gitId":"samuellleow"},"content":"projectDeadline 2020-10-10"},{"lineNumber":8,"author":{"gitId":"samuellleow"},"content":"startTasks "},{"lineNumber":9,"author":{"gitId":"samuellleow"},"content":"endTasks"},{"lineNumber":10,"author":{"gitId":"samuellleow"},"content":"pMS"},{"lineNumber":11,"author":{"gitId":"samuellleow"},"content":"pME"},{"lineNumber":12,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":13,"author":{"gitId":"samuellleow"},"content":"Project one"},{"lineNumber":14,"author":{"gitId":"samuellleow"},"content":"status false"},{"lineNumber":15,"author":{"gitId":"samuellleow"},"content":"projectDescription \u003cproject description empty\u003e"},{"lineNumber":16,"author":{"gitId":"samuellleow"},"content":"projectDeadline 2020-11-11"},{"lineNumber":17,"author":{"gitId":"samuellleow"},"content":"startTasks "},{"lineNumber":18,"author":{"gitId":"samuellleow"},"content":"endTasks"},{"lineNumber":19,"author":{"gitId":"samuellleow"},"content":"pMS"},{"lineNumber":20,"author":{"gitId":"samuellleow"},"content":"pME"},{"lineNumber":21,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":22,"author":{"gitId":"shreytheshreyas"},"content":"Project p1"},{"lineNumber":23,"author":{"gitId":"shreytheshreyas"},"content":"status false"},{"lineNumber":24,"author":{"gitId":"shreytheshreyas"},"content":"projectDescription \u003cproject description empty\u003e"},{"lineNumber":25,"author":{"gitId":"shreytheshreyas"},"content":"projectDeadline null"},{"lineNumber":26,"author":{"gitId":"shreytheshreyas"},"content":"startTasks "},{"lineNumber":27,"author":{"gitId":"shreytheshreyas"},"content":"task1 | tS 0 tE | dS 2020-12-03dE | pS 0 pE"},{"lineNumber":28,"author":{"gitId":"shreytheshreyas"},"content":"tsk2 | tS 0 tE | pS 1 pE"},{"lineNumber":29,"author":{"gitId":"shreytheshreyas"},"content":"task3 | tS 0 tE | pS 0 pE"},{"lineNumber":30,"author":{"gitId":"shreytheshreyas"},"content":"endTasks"},{"lineNumber":31,"author":{"gitId":"shreytheshreyas"},"content":"pMS"},{"lineNumber":32,"author":{"gitId":"shreytheshreyas"},"content":"pME"},{"lineNumber":33,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":34,"author":{"gitId":"shreytheshreyas"},"content":"Project p2"},{"lineNumber":35,"author":{"gitId":"shreytheshreyas"},"content":"status false"},{"lineNumber":36,"author":{"gitId":"shreytheshreyas"},"content":"projectDescription \u003cproject description empty\u003e"},{"lineNumber":37,"author":{"gitId":"shreytheshreyas"},"content":"projectDeadline null"},{"lineNumber":38,"author":{"gitId":"shreytheshreyas"},"content":"startTasks "},{"lineNumber":39,"author":{"gitId":"shreytheshreyas"},"content":"endTasks"},{"lineNumber":40,"author":{"gitId":"shreytheshreyas"},"content":"pMS"},{"lineNumber":41,"author":{"gitId":"shreytheshreyas"},"content":"pME"},{"lineNumber":42,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":43,"author":{"gitId":"shreytheshreyas"},"content":"Project p3"},{"lineNumber":44,"author":{"gitId":"samuellleow"},"content":"status false"},{"lineNumber":45,"author":{"gitId":"samuellleow"},"content":"projectDescription \u003cproject description empty\u003e"},{"lineNumber":46,"author":{"gitId":"samuellleow"},"content":"projectDeadline 2020-12-12"},{"lineNumber":47,"author":{"gitId":"samuellleow"},"content":"startTasks "},{"lineNumber":48,"author":{"gitId":"samuellleow"},"content":"das | tS 0 tE | dS 2020-12-12dE | pS 0 pE"},{"lineNumber":49,"author":{"gitId":"samuellleow"},"content":"endTasks"},{"lineNumber":50,"author":{"gitId":"samuellleow"},"content":"pMS"},{"lineNumber":51,"author":{"gitId":"samuellleow"},"content":"pME"},{"lineNumber":52,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":53,"author":{"gitId":"samuellleow"},"content":"Project Web Development"},{"lineNumber":54,"author":{"gitId":"samuellleow"},"content":"status false"},{"lineNumber":55,"author":{"gitId":"samuellleow"},"content":"projectDescription \u003cproject description empty\u003e"},{"lineNumber":56,"author":{"gitId":"samuellleow"},"content":"projectDeadline null"},{"lineNumber":57,"author":{"gitId":"samuellleow"},"content":"startTasks "},{"lineNumber":58,"author":{"gitId":"samuellleow"},"content":"endTasks"},{"lineNumber":59,"author":{"gitId":"samuellleow"},"content":"pMS"},{"lineNumber":60,"author":{"gitId":"samuellleow"},"content":"pME"},{"lineNumber":61,"author":{"gitId":"samuellleow"},"content":""}],"authorContributionMap":{"samuellleow":39,"shreytheshreyas":22}},{"path":"src/main/java/seedu/ezmanager/EzExceptions.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"thatseant"},"content":"package seedu.ezmanager;"},{"lineNumber":2,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":3,"author":{"gitId":"shreytheshreyas"},"content":"import java.util.HashMap;"},{"lineNumber":4,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":5,"author":{"gitId":"thatseant"},"content":"public class EzExceptions extends Exception {"},{"lineNumber":6,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":7,"author":{"gitId":"shreytheshreyas"},"content":"    private HashMap\u003cString,String\u003e exceptionMessageList \u003d new HashMap\u003c\u003e();"},{"lineNumber":8,"author":{"gitId":"shreytheshreyas"},"content":"    private String messageType;"},{"lineNumber":9,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":10,"author":{"gitId":"thatseant"},"content":"    public EzExceptions(String messageType) {"},{"lineNumber":11,"author":{"gitId":"shreytheshreyas"},"content":"        initializeMap();"},{"lineNumber":12,"author":{"gitId":"shreytheshreyas"},"content":"        this.messageType \u003d messageType;"},{"lineNumber":13,"author":{"gitId":"shreytheshreyas"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":15,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":16,"author":{"gitId":"shreytheshreyas"},"content":"    public void initializeMap() {"},{"lineNumber":17,"author":{"gitId":"shreytheshreyas"},"content":"        exceptionMessageList.put(\"Project\",\"Command incomplete!, You need to include a project description.\");"},{"lineNumber":18,"author":{"gitId":"shreytheshreyas"},"content":"        exceptionMessageList.put(\"Delete Project\",\"Command incomplete! You need to mention the project Id\");"},{"lineNumber":19,"author":{"gitId":"shreytheshreyas"},"content":"        exceptionMessageList.put(\"Task Description\",\"Command incomplete!, You need to include a task description.\");"},{"lineNumber":20,"author":{"gitId":"shreytheshreyas"},"content":"        exceptionMessageList.put(\"Member\",\"Command incorect! You need to mention Member\u0027s name\");"},{"lineNumber":21,"author":{"gitId":"shreytheshreyas"},"content":"        exceptionMessageList.put(\"Delete Task\",\"Command incomplete! You need to mention the project Id\");"},{"lineNumber":22,"author":{"gitId":"shreytheshreyas"},"content":"        exceptionMessageList.put(\"Switch\",\"You are already in project view\");"},{"lineNumber":23,"author":{"gitId":"shreytheshreyas"},"content":"        exceptionMessageList.put(\"Add Project\",\"You cannot add tasks in project view\");"},{"lineNumber":24,"author":{"gitId":"shreytheshreyas"},"content":"        exceptionMessageList.put(\"Add Task\",\"You cannot add projects in task view\");"},{"lineNumber":25,"author":{"gitId":"thatseant"},"content":"        exceptionMessageList.put(\"WrongDateFormat\", \"Date must be specified in format YYYY-MM-DD\");"},{"lineNumber":26,"author":{"gitId":"thatseant"},"content":"        exceptionMessageList.put(\"IndexNotFound\", \"Index not specified\");"},{"lineNumber":27,"author":{"gitId":"shreytheshreyas"},"content":"        //file handler exceptions"},{"lineNumber":28,"author":{"gitId":"shreytheshreyas"},"content":"        exceptionMessageList.put(\"Create File\",\"The file could not be created\");"},{"lineNumber":29,"author":{"gitId":"shreytheshreyas"},"content":"        exceptionMessageList.put(\"Open File\",\"The file could not be opened\");"},{"lineNumber":30,"author":{"gitId":"samuelchristopher"},"content":"        exceptionMessageList.put(\"default\",\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"},{"lineNumber":31,"author":{"gitId":"thatseant"},"content":"        exceptionMessageList.put(\"unrecognisedCommand\",\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that \""},{"lineNumber":32,"author":{"gitId":"thatseant"},"content":"                + \"command means :-(\");"},{"lineNumber":33,"author":{"gitId":"riazaham"},"content":"        exceptionMessageList.put(\"mustBeInHomeView\",\"You must be in Home View to do that!\");"},{"lineNumber":34,"author":{"gitId":"riazaham"},"content":"        exceptionMessageList.put(\"mustBeInProjectView\",\"You must be in Project View to do that!\");"},{"lineNumber":35,"author":{"gitId":"riazaham"},"content":"        exceptionMessageList.put(\"emptyProjectList\",\"Project list is empty!\");"},{"lineNumber":36,"author":{"gitId":"riazaham"},"content":"        exceptionMessageList.put(\"invalidTaskID\",\"Task ID does not exist!\");"},{"lineNumber":37,"author":{"gitId":"riazaham"},"content":"        exceptionMessageList.put(\"invalidTeamMemberID\",\"Team Member ID does not exist!\");"},{"lineNumber":38,"author":{"gitId":"riazaham"},"content":"        exceptionMessageList.put(\"invalidProjectID\",\"Project ID does not exist!\");"},{"lineNumber":39,"author":{"gitId":"thatseant"},"content":"        exceptionMessageList.put(\"taskNotDone\",\"Task must be marked as done before adding \""},{"lineNumber":40,"author":{"gitId":"thatseant"},"content":"                + \"actual duration taken to complete!\");"},{"lineNumber":41,"author":{"gitId":"riazaham"},"content":"        exceptionMessageList.put(\"emptyTeamMembersList\",\"Team Members list is empty!\");"},{"lineNumber":42,"author":{"gitId":"riazaham"},"content":"        exceptionMessageList.put(\"emptyTaskList\",\"Task list is empty!\");"},{"lineNumber":43,"author":{"gitId":"shreytheshreyas"},"content":"        exceptionMessageList.put(\"invalidMemberID\",\"The member ID entered does not exist\");"},{"lineNumber":44,"author":{"gitId":"shreytheshreyas"},"content":"        exceptionMessageList.put(\"priorityFormatError\",\"The priority should be a number\");"},{"lineNumber":45,"author":{"gitId":"shreytheshreyas"},"content":"        exceptionMessageList.put(\"InvalidSortingParameter\",\"You have entered the wrong sorting parameter\");"},{"lineNumber":46,"author":{"gitId":"thatseant"},"content":"        exceptionMessageList.put(\"indexNonInteger\",\"Index must be an integer!\");"},{"lineNumber":47,"author":{"gitId":"thatseant"},"content":"        exceptionMessageList.put(\"forwardSlashError\",\"Parameters should not contain slashes!\");"},{"lineNumber":48,"author":{"gitId":"thatseant"},"content":"        exceptionMessageList.put(\"duplicateParams\",\"Duplicate Parameters detected!\");"},{"lineNumber":49,"author":{"gitId":"thatseant"},"content":"        exceptionMessageList.put(\"missingParameters\",\"Certain Parameters are missing!\");"},{"lineNumber":50,"author":{"gitId":"samuellleow"},"content":"        exceptionMessageList.put(\"projectAlreadyAssigned\",\"Project has already been assigned to member!\");"},{"lineNumber":51,"author":{"gitId":"samuellleow"},"content":"        exceptionMessageList.put(\"TaskAlreadyAssigned\",\"Task has already been assigned to member!\");"},{"lineNumber":52,"author":{"gitId":"samuellleow"},"content":"        exceptionMessageList.put(\"incorrectListCommand\",\"Please only enter \\\"list\\\" into the command \""},{"lineNumber":53,"author":{"gitId":"samuellleow"},"content":"                + \"to display the home view or project view!\");"},{"lineNumber":54,"author":{"gitId":"riazaham"},"content":"        exceptionMessageList.put(\"invalidPriority\",\"Invalid priority! Please input a positive integer for priority\");"},{"lineNumber":55,"author":{"gitId":"shreytheshreyas"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":57,"author":{"gitId":"riazaham"},"content":"    public String toString() {"},{"lineNumber":58,"author":{"gitId":"shreytheshreyas"},"content":"        return exceptionMessageList.get(messageType);"},{"lineNumber":59,"author":{"gitId":"riazaham"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"riazaham"},"content":"}"}],"authorContributionMap":{"thatseant":13,"samuelchristopher":1,"samuellleow":4,"shreytheshreyas":28,"riazaham":14}},{"path":"src/main/java/seedu/ezmanager/EzLogger.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"thatseant"},"content":"package seedu.ezmanager;"},{"lineNumber":2,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":3,"author":{"gitId":"thatseant"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"thatseant"},"content":"import java.util.logging.FileHandler;"},{"lineNumber":5,"author":{"gitId":"thatseant"},"content":"import java.util.logging.Level;"},{"lineNumber":6,"author":{"gitId":"thatseant"},"content":"import java.util.logging.LogManager;"},{"lineNumber":7,"author":{"gitId":"thatseant"},"content":"import java.util.logging.Logger;"},{"lineNumber":8,"author":{"gitId":"thatseant"},"content":"import java.util.logging.SimpleFormatter;"},{"lineNumber":9,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":10,"author":{"gitId":"thatseant"},"content":"public class EzLogger {"},{"lineNumber":11,"author":{"gitId":"thatseant"},"content":"    private static Logger ezLogger \u003d Logger.getLogger(\"EZLogger\");"},{"lineNumber":12,"author":{"gitId":"thatseant"},"content":"    private static FileHandler fh;"},{"lineNumber":13,"author":{"gitId":"thatseant"},"content":"    private static boolean toLog;"},{"lineNumber":14,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":15,"author":{"gitId":"thatseant"},"content":"    public static void setup() {"},{"lineNumber":16,"author":{"gitId":"thatseant"},"content":"        LogManager.getLogManager().reset();"},{"lineNumber":17,"author":{"gitId":"thatseant"},"content":"        toLog \u003d true;"},{"lineNumber":18,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":19,"author":{"gitId":"thatseant"},"content":"        try {"},{"lineNumber":20,"author":{"gitId":"thatseant"},"content":"            fh \u003d new FileHandler(\"./ezlogger.log\");"},{"lineNumber":21,"author":{"gitId":"thatseant"},"content":"            fh.setLevel(Level.FINE);"},{"lineNumber":22,"author":{"gitId":"thatseant"},"content":"            fh.setFormatter(new SimpleFormatter());"},{"lineNumber":23,"author":{"gitId":"thatseant"},"content":"            ezLogger.addHandler(fh);"},{"lineNumber":24,"author":{"gitId":"thatseant"},"content":"        } catch (IOException e) {"},{"lineNumber":25,"author":{"gitId":"thatseant"},"content":"            ezLogger.log(Level.SEVERE, \"File logger not configured\", e);"},{"lineNumber":26,"author":{"gitId":"thatseant"},"content":"            toLog \u003d false;"},{"lineNumber":27,"author":{"gitId":"thatseant"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":30,"author":{"gitId":"thatseant"},"content":"    public static void log(Level level, String message) {"},{"lineNumber":31,"author":{"gitId":"thatseant"},"content":"        if (toLog) {"},{"lineNumber":32,"author":{"gitId":"thatseant"},"content":"            ezLogger.log(level, message);"},{"lineNumber":33,"author":{"gitId":"thatseant"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":36,"author":{"gitId":"thatseant"},"content":"}"}],"authorContributionMap":{"thatseant":36}},{"path":"src/main/java/seedu/ezmanager/EzManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"thatseant"},"content":"package seedu.ezmanager;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.commands.Command;"},{"lineNumber":4,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.member.TeamMember;"},{"lineNumber":5,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.project.Project;"},{"lineNumber":6,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.storage.Storage;"},{"lineNumber":7,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.ui.Ui;"},{"lineNumber":8,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":9,"author":{"gitId":"samuelchristopher"},"content":"import java.io.IOException;"},{"lineNumber":10,"author":{"gitId":"samuelchristopher"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Scanner;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"thatseant"},"content":"public class EzManager {"},{"lineNumber":14,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"thatseant"},"content":"     * Main entry-point for the java.duke.EZManager application."},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"riazaham"},"content":"    private static ArrayList\u003cTeamMember\u003e teamMembers \u003d new ArrayList\u003c\u003e();"},{"lineNumber":19,"author":{"gitId":"samuelchristopher"},"content":"    private static ArrayList\u003cProject\u003e projects \u003d  new ArrayList\u003c\u003e();"},{"lineNumber":20,"author":{"gitId":"samuelchristopher"},"content":"    private Storage storage;"},{"lineNumber":21,"author":{"gitId":"samuelchristopher"},"content":"    private Ui ui;"},{"lineNumber":22,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":23,"author":{"gitId":"thatseant"},"content":"    public EzManager(String filePath) {"},{"lineNumber":24,"author":{"gitId":"samuelchristopher"},"content":"        ui \u003d new Ui();"},{"lineNumber":25,"author":{"gitId":"samuelchristopher"},"content":"        storage \u003d new Storage(filePath);"},{"lineNumber":26,"author":{"gitId":"samuelchristopher"},"content":"        try {"},{"lineNumber":27,"author":{"gitId":"samuelchristopher"},"content":"            ArrayList\u003cTeamMember\u003e loadedMembers \u003d storage.loadTeamMembers();"},{"lineNumber":28,"author":{"gitId":"samuelchristopher"},"content":"            for (TeamMember member : loadedMembers) {"},{"lineNumber":29,"author":{"gitId":"samuelchristopher"},"content":"                teamMembers.add(member);"},{"lineNumber":30,"author":{"gitId":"samuelchristopher"},"content":"            }"},{"lineNumber":31,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":32,"author":{"gitId":"samuelchristopher"},"content":"            ArrayList\u003cProject\u003e loadedProjects \u003d storage.loadProjects(teamMembers);"},{"lineNumber":33,"author":{"gitId":"samuelchristopher"},"content":"            for (Project project : loadedProjects) {"},{"lineNumber":34,"author":{"gitId":"samuelchristopher"},"content":"                projects.add(project);"},{"lineNumber":35,"author":{"gitId":"samuelchristopher"},"content":"            }"},{"lineNumber":36,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":37,"author":{"gitId":"thatseant"},"content":"        } catch (EzExceptions e) {"},{"lineNumber":38,"author":{"gitId":"samuelchristopher"},"content":"            System.out.println(e.getMessage());"},{"lineNumber":39,"author":{"gitId":"samuelchristopher"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"samuelchristopher"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":42,"author":{"gitId":"samuelchristopher"},"content":"    public static void run() {"},{"lineNumber":43,"author":{"gitId":"thatseant"},"content":"        Ui ui \u003d new Ui();"},{"lineNumber":44,"author":{"gitId":"shreytheshreyas"},"content":"        ui.printWelcome();"},{"lineNumber":45,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":46,"author":{"gitId":"samuelchristopher"},"content":"        if (projects.size() \u003e 0) {"},{"lineNumber":47,"author":{"gitId":"samuelchristopher"},"content":"            System.out.println(ui.printHomeView(projects, teamMembers));"},{"lineNumber":48,"author":{"gitId":"samuelchristopher"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":50,"author":{"gitId":"thatseant"},"content":"        EzLogger.setup();"},{"lineNumber":51,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"        Scanner in \u003d new Scanner(System.in);"},{"lineNumber":53,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":54,"author":{"gitId":"samuellleow"},"content":"        boolean isExit \u003d false;"},{"lineNumber":55,"author":{"gitId":"samuellleow"},"content":"        while (!isExit) {"},{"lineNumber":56,"author":{"gitId":"samuellleow"},"content":"            try {"},{"lineNumber":57,"author":{"gitId":"samuellleow"},"content":"                Command commandInput \u003d Parser.parse(in.nextLine());"},{"lineNumber":58,"author":{"gitId":"thatseant"},"content":"                ui.printLine();"},{"lineNumber":59,"author":{"gitId":"riazaham"},"content":"                String output \u003d commandInput.executeCommand(projects, teamMembers);"},{"lineNumber":60,"author":{"gitId":"thatseant"},"content":"                ui.printOutput(output);"},{"lineNumber":61,"author":{"gitId":"samuelchristopher"},"content":"                Storage.save(projects, teamMembers);"},{"lineNumber":62,"author":{"gitId":"samuellleow"},"content":"                isExit \u003d commandInput.isExit();"},{"lineNumber":63,"author":{"gitId":"samuelchristopher"},"content":"            } catch (StringIndexOutOfBoundsException | ArrayIndexOutOfBoundsException"},{"lineNumber":64,"author":{"gitId":"thatseant"},"content":"                    | EzExceptions | IOException e) {"},{"lineNumber":65,"author":{"gitId":"riazaham"},"content":"                System.out.println(e);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":67,"author":{"gitId":"thatseant"},"content":"            ui.printLine();"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":69,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":70,"author":{"gitId":"samuelchristopher"},"content":"        try {"},{"lineNumber":71,"author":{"gitId":"samuelchristopher"},"content":"            Storage.save(projects, teamMembers);"},{"lineNumber":72,"author":{"gitId":"samuelchristopher"},"content":"        } catch (IOException e) {"},{"lineNumber":73,"author":{"gitId":"samuelchristopher"},"content":"            System.err.println(\"Couldn\u0027t save before terminating.\");"},{"lineNumber":74,"author":{"gitId":"samuelchristopher"},"content":"        }"},{"lineNumber":75,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":76,"author":{"gitId":"samuelchristopher"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":78,"author":{"gitId":"thatseant"},"content":"    public static void main(String[] args) throws EzExceptions {"},{"lineNumber":79,"author":{"gitId":"thatseant"},"content":"        new EzManager(\"ezmanager.txt\").run();"},{"lineNumber":80,"author":{"gitId":"samuelchristopher"},"content":"        final Thread mainThread \u003d Thread.currentThread();"},{"lineNumber":81,"author":{"gitId":"samuelchristopher"},"content":"        Runtime.getRuntime().addShutdownHook(new Thread(() -\u003e {"},{"lineNumber":82,"author":{"gitId":"samuelchristopher"},"content":"            try {"},{"lineNumber":83,"author":{"gitId":"samuelchristopher"},"content":"                Storage.save(projects, teamMembers);"},{"lineNumber":84,"author":{"gitId":"samuelchristopher"},"content":"            } catch (IOException e) {"},{"lineNumber":85,"author":{"gitId":"samuelchristopher"},"content":"                System.err.println(\"Couldn\u0027t save before terminating.\");"},{"lineNumber":86,"author":{"gitId":"samuelchristopher"},"content":"            }"},{"lineNumber":87,"author":{"gitId":"samuelchristopher"},"content":"        }));"},{"lineNumber":88,"author":{"gitId":"samuellleow"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":90,"author":{"gitId":"samuellleow"},"content":"}"}],"authorContributionMap":{"thatseant":20,"samuelchristopher":46,"samuellleow":11,"shreytheshreyas":1,"riazaham":4,"-":8}},{"path":"src/main/java/seedu/ezmanager/Parser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"thatseant"},"content":"//@@author thatseant"},{"lineNumber":2,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":3,"author":{"gitId":"thatseant"},"content":"package seedu.ezmanager;"},{"lineNumber":4,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":5,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.commands.Command;"},{"lineNumber":6,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.commands.ExitCommand;"},{"lineNumber":7,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.commands.PrintHomeViewCommand;"},{"lineNumber":8,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.commands.HomeCommand;"},{"lineNumber":9,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.commands.member.AssignMemberToProjectCommand;"},{"lineNumber":10,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.commands.member.TeamMemberAddCommand;"},{"lineNumber":11,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.commands.member.TeamMemberAssignToTaskCommand;"},{"lineNumber":12,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.commands.member.TeamMemberDeleteCommand;"},{"lineNumber":13,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.commands.member.TeamMemberHoursCommand;"},{"lineNumber":14,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.commands.project.ProjectDeadlineCommand;"},{"lineNumber":15,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.commands.project.ProjectDescriptionCommand;"},{"lineNumber":16,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.commands.project.ProjectDeleteCommand;"},{"lineNumber":17,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.commands.project.ProjectCommand;"},{"lineNumber":18,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.commands.project.ProjectSelectCommand;"},{"lineNumber":19,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.commands.project.ProjectDoneCommand;"},{"lineNumber":20,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.commands.task.TaskAssignPriorityCommand;"},{"lineNumber":21,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.commands.task.TaskDeleteCommand;"},{"lineNumber":22,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.commands.task.TaskListCommand;"},{"lineNumber":23,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.commands.task.TaskCommand;"},{"lineNumber":24,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.commands.task.TaskDoneCommand;"},{"lineNumber":25,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.commands.task.TaskAssignDeadlineCommand;"},{"lineNumber":26,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.commands.task.TaskEditCommand;"},{"lineNumber":27,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.commands.task.ActualTimeCommand;"},{"lineNumber":28,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.commands.task.EstimatedTimeCommand;"},{"lineNumber":29,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.commands.task.TaskSortCommand;"},{"lineNumber":30,"author":{"gitId":"thatseant"},"content":"import java.util.HashMap;"},{"lineNumber":31,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":32,"author":{"gitId":"thatseant"},"content":"import java.util.logging.Level;"},{"lineNumber":33,"author":{"gitId":"thatseant"},"content":"import java.util.regex.Matcher;"},{"lineNumber":34,"author":{"gitId":"thatseant"},"content":"import java.util.regex.Pattern;"},{"lineNumber":35,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":36,"author":{"gitId":"thatseant"},"content":"public class Parser {"},{"lineNumber":37,"author":{"gitId":"thatseant"},"content":"    private static int projectIndex \u003d -1;"},{"lineNumber":38,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":39,"author":{"gitId":"thatseant"},"content":"    public static void setProjectIndex(int newIndex) {"},{"lineNumber":40,"author":{"gitId":"thatseant"},"content":"        projectIndex \u003d newIndex;"},{"lineNumber":41,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":43,"author":{"gitId":"thatseant"},"content":"    public static int getProjectIndex() {"},{"lineNumber":44,"author":{"gitId":"thatseant"},"content":"        return projectIndex;"},{"lineNumber":45,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":47,"author":{"gitId":"thatseant"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"thatseant"},"content":"     * Retrieves command parameters and returns hashmap of parameter type and value."},{"lineNumber":49,"author":{"gitId":"thatseant"},"content":"     * @param paramsString String of all parameters from user input"},{"lineNumber":50,"author":{"gitId":"thatseant"},"content":"     * @return Hashmap of parameter type and value."},{"lineNumber":51,"author":{"gitId":"thatseant"},"content":"     * @throws EzExceptions EzException"},{"lineNumber":52,"author":{"gitId":"thatseant"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"thatseant"},"content":"    public static HashMap\u003cString, String\u003e getParams(String paramsString) throws EzExceptions {"},{"lineNumber":54,"author":{"gitId":"thatseant"},"content":"        EzLogger.log(Level.INFO, \"Getting parameters from parser\");"},{"lineNumber":55,"author":{"gitId":"thatseant"},"content":"        HashMap\u003cString, String\u003e inputParams \u003d new HashMap\u003c\u003e();"},{"lineNumber":56,"author":{"gitId":"thatseant"},"content":"        Pattern p \u003d Pattern.compile(\"./.+?(?\u003d\\\\s./.+)|./.+\"); //Regex to extract parameter terms"},{"lineNumber":57,"author":{"gitId":"thatseant"},"content":"        Matcher m \u003d p.matcher(paramsString);"},{"lineNumber":58,"author":{"gitId":"thatseant"},"content":"        while (m.find()) {"},{"lineNumber":59,"author":{"gitId":"thatseant"},"content":"            EzLogger.log(Level.INFO, \"Parameter: \" + m.group() + \" found.\");"},{"lineNumber":60,"author":{"gitId":"thatseant"},"content":"            String[] keyAndValue \u003d m.group().split(\"/\");"},{"lineNumber":61,"author":{"gitId":"thatseant"},"content":"            if (keyAndValue.length !\u003d 2) {"},{"lineNumber":62,"author":{"gitId":"thatseant"},"content":"                EzLogger.log(Level.WARNING, \"Parameter: \" + m.group() + \"contains multiple slashes!\");"},{"lineNumber":63,"author":{"gitId":"thatseant"},"content":"                throw new EzExceptions(\"forwardSlashError\");"},{"lineNumber":64,"author":{"gitId":"thatseant"},"content":"            }"},{"lineNumber":65,"author":{"gitId":"thatseant"},"content":"            String paramType \u003d keyAndValue[0].toLowerCase();"},{"lineNumber":66,"author":{"gitId":"thatseant"},"content":"            String paramValue \u003d keyAndValue[1];"},{"lineNumber":67,"author":{"gitId":"thatseant"},"content":"            if (inputParams.containsKey(paramType)) {"},{"lineNumber":68,"author":{"gitId":"thatseant"},"content":"                EzLogger.log(Level.WARNING, \"Parameter: \" + m.group() + \"is a duplicate.\");"},{"lineNumber":69,"author":{"gitId":"thatseant"},"content":"                throw new EzExceptions(\"duplicateParams\");"},{"lineNumber":70,"author":{"gitId":"thatseant"},"content":"            }"},{"lineNumber":71,"author":{"gitId":"thatseant"},"content":"            inputParams.put(paramType, paramValue);"},{"lineNumber":72,"author":{"gitId":"thatseant"},"content":"        }"},{"lineNumber":73,"author":{"gitId":"thatseant"},"content":"        return inputParams;"},{"lineNumber":74,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":76,"author":{"gitId":"thatseant"},"content":"    /**"},{"lineNumber":77,"author":{"gitId":"thatseant"},"content":"     * Retrieves key from hashmap if available."},{"lineNumber":78,"author":{"gitId":"thatseant"},"content":"     * @param hashmap hashmap of parameter key-value pairs"},{"lineNumber":79,"author":{"gitId":"thatseant"},"content":"     * @param key key to retrieve value from hashmap"},{"lineNumber":80,"author":{"gitId":"thatseant"},"content":"     * @return value"},{"lineNumber":81,"author":{"gitId":"thatseant"},"content":"     * @throws EzExceptions missingParameters Exceptions"},{"lineNumber":82,"author":{"gitId":"thatseant"},"content":"     */"},{"lineNumber":83,"author":{"gitId":"thatseant"},"content":"    public static String getHashValue(HashMap\u003cString, String\u003e hashmap, String key) throws EzExceptions {"},{"lineNumber":84,"author":{"gitId":"thatseant"},"content":"        if (!hashmap.containsKey(key)) {"},{"lineNumber":85,"author":{"gitId":"thatseant"},"content":"            EzLogger.log(Level.WARNING, \"Parameter: \" + key + \"is missing.\");"},{"lineNumber":86,"author":{"gitId":"thatseant"},"content":"            throw new EzExceptions(\"missingParameters\");"},{"lineNumber":87,"author":{"gitId":"thatseant"},"content":"        } else {"},{"lineNumber":88,"author":{"gitId":"thatseant"},"content":"            return hashmap.get(key);"},{"lineNumber":89,"author":{"gitId":"thatseant"},"content":"        }"},{"lineNumber":90,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":92,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":93,"author":{"gitId":"thatseant"},"content":"    /**"},{"lineNumber":94,"author":{"gitId":"thatseant"},"content":"     * Parses user input and retrieves project command for execution."},{"lineNumber":95,"author":{"gitId":"thatseant"},"content":"     *"},{"lineNumber":96,"author":{"gitId":"thatseant"},"content":"     * @param inputCommand Full user input command string"},{"lineNumber":97,"author":{"gitId":"thatseant"},"content":"     * @return Command object corresponding to the input command of the user"},{"lineNumber":98,"author":{"gitId":"thatseant"},"content":"     */"},{"lineNumber":99,"author":{"gitId":"thatseant"},"content":"    public static Command parse(String inputCommand) throws EzExceptions {"},{"lineNumber":100,"author":{"gitId":"thatseant"},"content":"        EzLogger.log(Level.INFO, \"Parsing Command\");"},{"lineNumber":101,"author":{"gitId":"thatseant"},"content":"        String[] inputWords \u003d inputCommand.split(\"\\\\s+\", 2); //Splits command into type and parameters"},{"lineNumber":102,"author":{"gitId":"thatseant"},"content":"        String commandType \u003d inputWords[0].toLowerCase();"},{"lineNumber":103,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":104,"author":{"gitId":"thatseant"},"content":"        EzLogger.log(Level.INFO, \"Command Type:\" + commandType);"},{"lineNumber":105,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":106,"author":{"gitId":"thatseant"},"content":"        HashMap\u003cString, String\u003e params \u003d new HashMap\u003c\u003e();"},{"lineNumber":107,"author":{"gitId":"thatseant"},"content":"        if (inputWords.length \u003d\u003d 2) {"},{"lineNumber":108,"author":{"gitId":"thatseant"},"content":"            params \u003d getParams(inputWords[1]);"},{"lineNumber":109,"author":{"gitId":"thatseant"},"content":"        }"},{"lineNumber":110,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":111,"author":{"gitId":"thatseant"},"content":"        boolean isHomeView \u003d (projectIndex \u003d\u003d -1); //In main project list view"},{"lineNumber":112,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":113,"author":{"gitId":"thatseant"},"content":"        EzLogger.log(Level.INFO, \"Project Index currently :\" + projectIndex);"},{"lineNumber":114,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":115,"author":{"gitId":"thatseant"},"content":"        Command command \u003d getCommand(isHomeView, commandType, params, projectIndex, inputWords);"},{"lineNumber":116,"author":{"gitId":"thatseant"},"content":"        return command;"},{"lineNumber":117,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":119,"author":{"gitId":"thatseant"},"content":"    /**"},{"lineNumber":120,"author":{"gitId":"thatseant"},"content":"     * Retrieves Command Object by passing in command type and parameters."},{"lineNumber":121,"author":{"gitId":"thatseant"},"content":"     * @param isHomeView Boolean"},{"lineNumber":122,"author":{"gitId":"thatseant"},"content":"     * @param commandType String of command type"},{"lineNumber":123,"author":{"gitId":"thatseant"},"content":"     * @param params Hashmap of command parameters."},{"lineNumber":124,"author":{"gitId":"thatseant"},"content":"     * @param projectIndex integer pointer to currently selected project."},{"lineNumber":125,"author":{"gitId":"thatseant"},"content":"     * @param inputWords Array to check if command contains parameters."},{"lineNumber":126,"author":{"gitId":"thatseant"},"content":"     * @return Command"},{"lineNumber":127,"author":{"gitId":"thatseant"},"content":"     * @throws EzExceptions EzException"},{"lineNumber":128,"author":{"gitId":"thatseant"},"content":"     */"},{"lineNumber":129,"author":{"gitId":"thatseant"},"content":"    public static Command getCommand(boolean isHomeView, String commandType, HashMap\u003cString, String\u003e params,"},{"lineNumber":130,"author":{"gitId":"thatseant"},"content":"                                     int projectIndex, String[] inputWords) throws EzExceptions {"},{"lineNumber":131,"author":{"gitId":"thatseant"},"content":"        Command command;"},{"lineNumber":132,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":133,"author":{"gitId":"thatseant"},"content":"        switch (commandType) {"},{"lineNumber":134,"author":{"gitId":"thatseant"},"content":"        case \"list\":"},{"lineNumber":135,"author":{"gitId":"thatseant"},"content":"            if (inputWords.length \u003d\u003d 2) {"},{"lineNumber":136,"author":{"gitId":"thatseant"},"content":"                throw new EzExceptions(\"incorrectListCommand\");"},{"lineNumber":137,"author":{"gitId":"thatseant"},"content":"            }"},{"lineNumber":138,"author":{"gitId":"thatseant"},"content":"            command \u003d (isHomeView)"},{"lineNumber":139,"author":{"gitId":"thatseant"},"content":"                    ? new PrintHomeViewCommand() : new TaskListCommand(projectIndex);"},{"lineNumber":140,"author":{"gitId":"thatseant"},"content":"            break;"},{"lineNumber":141,"author":{"gitId":"thatseant"},"content":"        case \"select\":"},{"lineNumber":142,"author":{"gitId":"thatseant"},"content":"            if (!isHomeView) {"},{"lineNumber":143,"author":{"gitId":"thatseant"},"content":"                throw new EzExceptions(\"mustBeInHomeView\");"},{"lineNumber":144,"author":{"gitId":"thatseant"},"content":"            }"},{"lineNumber":145,"author":{"gitId":"thatseant"},"content":"            command \u003d new ProjectSelectCommand(params);"},{"lineNumber":146,"author":{"gitId":"thatseant"},"content":"            break;"},{"lineNumber":147,"author":{"gitId":"thatseant"},"content":"        case \"description\":"},{"lineNumber":148,"author":{"gitId":"thatseant"},"content":"            if (!isHomeView) {"},{"lineNumber":149,"author":{"gitId":"thatseant"},"content":"                throw new EzExceptions(\"mustBeInHomeView\");"},{"lineNumber":150,"author":{"gitId":"thatseant"},"content":"            }"},{"lineNumber":151,"author":{"gitId":"thatseant"},"content":"            command \u003d new ProjectDescriptionCommand(params);"},{"lineNumber":152,"author":{"gitId":"thatseant"},"content":"            break;"},{"lineNumber":153,"author":{"gitId":"thatseant"},"content":"        case \"project\":"},{"lineNumber":154,"author":{"gitId":"thatseant"},"content":"            if (!isHomeView) {"},{"lineNumber":155,"author":{"gitId":"thatseant"},"content":"                throw new EzExceptions(\"mustBeInHomeView\");"},{"lineNumber":156,"author":{"gitId":"thatseant"},"content":"            }"},{"lineNumber":157,"author":{"gitId":"thatseant"},"content":"            command \u003d new ProjectCommand(params);"},{"lineNumber":158,"author":{"gitId":"thatseant"},"content":"            break;"},{"lineNumber":159,"author":{"gitId":"thatseant"},"content":"        case \"task\":"},{"lineNumber":160,"author":{"gitId":"thatseant"},"content":"            if (isHomeView) {"},{"lineNumber":161,"author":{"gitId":"thatseant"},"content":"                throw new EzExceptions(\"mustBeInProjectView\");"},{"lineNumber":162,"author":{"gitId":"thatseant"},"content":"            }"},{"lineNumber":163,"author":{"gitId":"thatseant"},"content":"            command \u003d new TaskCommand(params, projectIndex);"},{"lineNumber":164,"author":{"gitId":"thatseant"},"content":"            break;"},{"lineNumber":165,"author":{"gitId":"thatseant"},"content":"        case \"edit\":"},{"lineNumber":166,"author":{"gitId":"thatseant"},"content":"            if (isHomeView) {"},{"lineNumber":167,"author":{"gitId":"thatseant"},"content":"                throw new EzExceptions(\"mustBeInProjectView\");"},{"lineNumber":168,"author":{"gitId":"thatseant"},"content":"            }"},{"lineNumber":169,"author":{"gitId":"thatseant"},"content":"            command \u003d new TaskEditCommand(params, projectIndex);"},{"lineNumber":170,"author":{"gitId":"thatseant"},"content":"            break;"},{"lineNumber":171,"author":{"gitId":"thatseant"},"content":"        case \"done\":"},{"lineNumber":172,"author":{"gitId":"thatseant"},"content":"            command \u003d (isHomeView)"},{"lineNumber":173,"author":{"gitId":"thatseant"},"content":"                    ? new ProjectDoneCommand(params, projectIndex) : new TaskDoneCommand(params, projectIndex);"},{"lineNumber":174,"author":{"gitId":"thatseant"},"content":"            break;"},{"lineNumber":175,"author":{"gitId":"thatseant"},"content":"        case \"deadline\":"},{"lineNumber":176,"author":{"gitId":"thatseant"},"content":"            command \u003d (isHomeView)"},{"lineNumber":177,"author":{"gitId":"thatseant"},"content":"                    ? new ProjectDeadlineCommand(params) : new TaskAssignDeadlineCommand(params, projectIndex);"},{"lineNumber":178,"author":{"gitId":"thatseant"},"content":"            break;"},{"lineNumber":179,"author":{"gitId":"thatseant"},"content":"        case \"delete\":"},{"lineNumber":180,"author":{"gitId":"thatseant"},"content":"            command \u003d (isHomeView)"},{"lineNumber":181,"author":{"gitId":"thatseant"},"content":"                    ? new ProjectDeleteCommand(params) : new TaskDeleteCommand(params, projectIndex);"},{"lineNumber":182,"author":{"gitId":"thatseant"},"content":"            break;"},{"lineNumber":183,"author":{"gitId":"thatseant"},"content":"        case \"actual\":"},{"lineNumber":184,"author":{"gitId":"thatseant"},"content":"            command \u003d new ActualTimeCommand(params, projectIndex);"},{"lineNumber":185,"author":{"gitId":"thatseant"},"content":"            break;"},{"lineNumber":186,"author":{"gitId":"thatseant"},"content":"        case \"estimate\":"},{"lineNumber":187,"author":{"gitId":"thatseant"},"content":"            command \u003d new EstimatedTimeCommand(params, projectIndex);"},{"lineNumber":188,"author":{"gitId":"thatseant"},"content":"            break;"},{"lineNumber":189,"author":{"gitId":"thatseant"},"content":"        case \"home\":"},{"lineNumber":190,"author":{"gitId":"thatseant"},"content":"            command \u003d new HomeCommand(projectIndex);"},{"lineNumber":191,"author":{"gitId":"thatseant"},"content":"            break;"},{"lineNumber":192,"author":{"gitId":"thatseant"},"content":"        case \"member\":"},{"lineNumber":193,"author":{"gitId":"thatseant"},"content":"            if (!isHomeView) {"},{"lineNumber":194,"author":{"gitId":"thatseant"},"content":"                throw new EzExceptions(\"mustBeInHomeView\");"},{"lineNumber":195,"author":{"gitId":"thatseant"},"content":"            }"},{"lineNumber":196,"author":{"gitId":"thatseant"},"content":"            command \u003d new TeamMemberAddCommand(params);"},{"lineNumber":197,"author":{"gitId":"thatseant"},"content":"            break;"},{"lineNumber":198,"author":{"gitId":"thatseant"},"content":"        case \"remove\":"},{"lineNumber":199,"author":{"gitId":"thatseant"},"content":"            command \u003d new TeamMemberDeleteCommand(params, projectIndex);"},{"lineNumber":200,"author":{"gitId":"thatseant"},"content":"            break;"},{"lineNumber":201,"author":{"gitId":"thatseant"},"content":"        case \"assign\":"},{"lineNumber":202,"author":{"gitId":"thatseant"},"content":"            command \u003d (isHomeView)"},{"lineNumber":203,"author":{"gitId":"thatseant"},"content":"                    ? new AssignMemberToProjectCommand(params, projectIndex)"},{"lineNumber":204,"author":{"gitId":"thatseant"},"content":"                    : new TeamMemberAssignToTaskCommand(params, projectIndex);"},{"lineNumber":205,"author":{"gitId":"thatseant"},"content":"            break;"},{"lineNumber":206,"author":{"gitId":"thatseant"},"content":"        case \"priority\":"},{"lineNumber":207,"author":{"gitId":"thatseant"},"content":"            if (isHomeView) {"},{"lineNumber":208,"author":{"gitId":"thatseant"},"content":"                throw new EzExceptions(\"mustBeInProjectView\");"},{"lineNumber":209,"author":{"gitId":"thatseant"},"content":"            }"},{"lineNumber":210,"author":{"gitId":"thatseant"},"content":"            command \u003d new TaskAssignPriorityCommand(params, projectIndex);"},{"lineNumber":211,"author":{"gitId":"thatseant"},"content":"            break;"},{"lineNumber":212,"author":{"gitId":"thatseant"},"content":"        case \"bye\":"},{"lineNumber":213,"author":{"gitId":"thatseant"},"content":"            command \u003d new ExitCommand();"},{"lineNumber":214,"author":{"gitId":"thatseant"},"content":"            break;"},{"lineNumber":215,"author":{"gitId":"thatseant"},"content":"        case \"sort\":"},{"lineNumber":216,"author":{"gitId":"thatseant"},"content":"            if (isHomeView) {"},{"lineNumber":217,"author":{"gitId":"thatseant"},"content":"                throw new EzExceptions(\"mustBeInProjectView\");"},{"lineNumber":218,"author":{"gitId":"thatseant"},"content":"            }"},{"lineNumber":219,"author":{"gitId":"thatseant"},"content":"            command \u003d new TaskSortCommand(params, projectIndex);"},{"lineNumber":220,"author":{"gitId":"thatseant"},"content":"            break;"},{"lineNumber":221,"author":{"gitId":"thatseant"},"content":"        case \"hours\":"},{"lineNumber":222,"author":{"gitId":"thatseant"},"content":"            if (!isHomeView) {"},{"lineNumber":223,"author":{"gitId":"thatseant"},"content":"                throw new EzExceptions(\"mustBeInHomeView\");"},{"lineNumber":224,"author":{"gitId":"thatseant"},"content":"            }"},{"lineNumber":225,"author":{"gitId":"thatseant"},"content":"            command \u003d new TeamMemberHoursCommand(params, projectIndex);"},{"lineNumber":226,"author":{"gitId":"thatseant"},"content":"            break;"},{"lineNumber":227,"author":{"gitId":"thatseant"},"content":"        default:"},{"lineNumber":228,"author":{"gitId":"thatseant"},"content":"            EzLogger.log(Level.WARNING, \"Unrecognised Command :\" + commandType);"},{"lineNumber":229,"author":{"gitId":"thatseant"},"content":"            throw new EzExceptions(\"unrecognisedCommand\");"},{"lineNumber":230,"author":{"gitId":"thatseant"},"content":"        }"},{"lineNumber":231,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":232,"author":{"gitId":"thatseant"},"content":"        return command;"},{"lineNumber":233,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":234,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":235,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":236,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":237,"author":{"gitId":"thatseant"},"content":"}"},{"lineNumber":238,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":239,"author":{"gitId":"thatseant"},"content":""}],"authorContributionMap":{"thatseant":239}},{"path":"src/main/java/seedu/ezmanager/Util.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"thatseant"},"content":"package seedu.ezmanager;"},{"lineNumber":2,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":3,"author":{"gitId":"thatseant"},"content":"public class Util {"},{"lineNumber":4,"author":{"gitId":"thatseant"},"content":"    public static final int USER_JAVA_INDEX_DIFF \u003d 1;"},{"lineNumber":5,"author":{"gitId":"thatseant"},"content":"    public static final String TASK_INDEX_KEY \u003d \"t\";"},{"lineNumber":6,"author":{"gitId":"thatseant"},"content":"    public static final String TASK_NAME_KEY \u003d \"n\";"},{"lineNumber":7,"author":{"gitId":"thatseant"},"content":"    public static final String DATE_KEY \u003d \"d\";"},{"lineNumber":8,"author":{"gitId":"thatseant"},"content":"    public static final String PROJECT_INDEX_KEY \u003d \"p\";"},{"lineNumber":9,"author":{"gitId":"thatseant"},"content":"    public static final int MINUTES_IN_HOUR_INT \u003d 60;"},{"lineNumber":10,"author":{"gitId":"thatseant"},"content":"    public static final double MINUTES_IN_HOUR_DOUBLE \u003d 60.0;"},{"lineNumber":11,"author":{"gitId":"thatseant"},"content":"    public static final String HOUR_INDEX_KEY \u003d \"h\";"},{"lineNumber":12,"author":{"gitId":"thatseant"},"content":"    public static final String MINUTE_INDEX_KEY \u003d \"m\";"},{"lineNumber":13,"author":{"gitId":"thatseant"},"content":"    public static final String MEMBER_INDEX_KEY \u003d \"m\";"},{"lineNumber":14,"author":{"gitId":"thatseant"},"content":"    public static final String INDEX_NON_INTEGER \u003d \"indexNonInteger\";"},{"lineNumber":15,"author":{"gitId":"thatseant"},"content":"    public static final String INVALID_TEAM_MEMBER_ID \u003d \"invalidTeamMemberID\";"},{"lineNumber":16,"author":{"gitId":"thatseant"},"content":"    public static final String INVALID_PROJECT_ID \u003d \"invalidProjectID\";"},{"lineNumber":17,"author":{"gitId":"thatseant"},"content":"    public static final String INVALID_MEMBER_ID \u003d \"invalidMemberID\";"},{"lineNumber":18,"author":{"gitId":"thatseant"},"content":"    public static final String INVALID_TASK_ID \u003d \"invalidTaskID\";"},{"lineNumber":19,"author":{"gitId":"thatseant"},"content":"    public static final String TASK_NOT_DONE \u003d \"taskNotDone\";"},{"lineNumber":20,"author":{"gitId":"thatseant"},"content":"    public static final String WRONG_DATE_FORMAT \u003d \"WrongDateFormat\";"},{"lineNumber":21,"author":{"gitId":"thatseant"},"content":"    public static final String EMPTY_PROJECT_LIST \u003d \"emptyProjectList\";"},{"lineNumber":22,"author":{"gitId":"samuellleow"},"content":"    public static final String EMPTY_TEAM_MEMBERS_LIST \u003d \"emptyTeamMembersList\";"},{"lineNumber":23,"author":{"gitId":"thatseant"},"content":"}"}],"authorContributionMap":{"thatseant":22,"samuellleow":1}},{"path":"src/main/java/seedu/ezmanager/commands/Command.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"thatseant"},"content":"package seedu.ezmanager.commands;"},{"lineNumber":2,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":3,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.EzExceptions;"},{"lineNumber":4,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.member.TeamMember;"},{"lineNumber":5,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.project.Project;"},{"lineNumber":6,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":7,"author":{"gitId":"samuelchristopher"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":9,"author":{"gitId":"samuellleow"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"samuellleow"},"content":" * Represents an executable command."},{"lineNumber":11,"author":{"gitId":"samuellleow"},"content":" */"},{"lineNumber":12,"author":{"gitId":"samuellleow"},"content":"public abstract class Command {"},{"lineNumber":13,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":14,"author":{"gitId":"riazaham"},"content":"    public abstract String executeCommand(ArrayList\u003cProject\u003e projects,"},{"lineNumber":15,"author":{"gitId":"riazaham"},"content":"                                          ArrayList\u003cTeamMember\u003e teamMembers)"},{"lineNumber":16,"author":{"gitId":"thatseant"},"content":"            throws EzExceptions;"},{"lineNumber":17,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":18,"author":{"gitId":"samuellleow"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"samuellleow"},"content":"     * Returns an exit flag that is determined by user\u0027s command."},{"lineNumber":20,"author":{"gitId":"samuellleow"},"content":"     * @return Terminate the program if user\u0027s command equals \u0027bye\u0027"},{"lineNumber":21,"author":{"gitId":"samuellleow"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":23,"author":{"gitId":"samuellleow"},"content":"    public abstract Boolean isExit();"},{"lineNumber":24,"author":{"gitId":"samuellleow"},"content":"}"}],"authorContributionMap":{"thatseant":5,"samuelchristopher":2,"samuellleow":13,"shreytheshreyas":1,"riazaham":3}},{"path":"src/main/java/seedu/ezmanager/commands/ExitCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"thatseant"},"content":"package seedu.ezmanager.commands;"},{"lineNumber":2,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":3,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":4,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.member.TeamMember;"},{"lineNumber":5,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.project.Project;"},{"lineNumber":6,"author":{"gitId":"samuelchristopher"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.ui.Ui;"},{"lineNumber":8,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":9,"author":{"gitId":"samuellleow"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"samuellleow"},"content":" * Displays goodbye message when application is terminated by the user."},{"lineNumber":11,"author":{"gitId":"samuellleow"},"content":" */"},{"lineNumber":12,"author":{"gitId":"samuellleow"},"content":"public class ExitCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"samuellleow"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"samuellleow"},"content":"     * Print goodbye message."},{"lineNumber":15,"author":{"gitId":"samuellleow"},"content":"     * @param projects ArrayList of Projects."},{"lineNumber":16,"author":{"gitId":"samuellleow"},"content":"     * @param teamMembers ArrayList of TeamMembers in the program."},{"lineNumber":17,"author":{"gitId":"samuellleow"},"content":"     * @return Print goodbye message."},{"lineNumber":18,"author":{"gitId":"samuellleow"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"riazaham"},"content":"    public String executeCommand(ArrayList\u003cProject\u003e projects, ArrayList\u003cTeamMember\u003e teamMembers) {"},{"lineNumber":20,"author":{"gitId":"thatseant"},"content":"        return printGoodbyeMessage();"},{"lineNumber":21,"author":{"gitId":"samuellleow"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":23,"author":{"gitId":"samuellleow"},"content":"    public Boolean isExit() {"},{"lineNumber":24,"author":{"gitId":"samuellleow"},"content":"        return true;"},{"lineNumber":25,"author":{"gitId":"samuellleow"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":27,"author":{"gitId":"thatseant"},"content":"    private String printGoodbyeMessage() {"},{"lineNumber":28,"author":{"gitId":"samuellleow"},"content":"        return Ui.printGoodbyeMessage();"},{"lineNumber":29,"author":{"gitId":"samuellleow"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"samuellleow"},"content":"}"}],"authorContributionMap":{"thatseant":6,"samuelchristopher":2,"samuellleow":20,"riazaham":2}},{"path":"src/main/java/seedu/ezmanager/commands/HomeCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"thatseant"},"content":"package seedu.ezmanager.commands;"},{"lineNumber":2,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":3,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.Parser;"},{"lineNumber":4,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.member.TeamMember;"},{"lineNumber":5,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.project.Project;"},{"lineNumber":6,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.ui.Ui;"},{"lineNumber":7,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":8,"author":{"gitId":"riazaham"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":10,"author":{"gitId":"samuellleow"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"samuellleow"},"content":" * Switch back to home view."},{"lineNumber":12,"author":{"gitId":"samuellleow"},"content":" */"},{"lineNumber":13,"author":{"gitId":"riazaham"},"content":"public class HomeCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":15,"author":{"gitId":"riazaham"},"content":"    private int projectIndex;"},{"lineNumber":16,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":17,"author":{"gitId":"riazaham"},"content":"    public HomeCommand(int projectIndex) {"},{"lineNumber":18,"author":{"gitId":"riazaham"},"content":"        this.projectIndex \u003d projectIndex;"},{"lineNumber":19,"author":{"gitId":"riazaham"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":21,"author":{"gitId":"samuellleow"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"samuellleow"},"content":"     * Switch back to home view."},{"lineNumber":23,"author":{"gitId":"samuellleow"},"content":"     * Print home view display."},{"lineNumber":24,"author":{"gitId":"samuellleow"},"content":"     * @param projects ArrayList of Projects."},{"lineNumber":25,"author":{"gitId":"samuellleow"},"content":"     * @param teamMembers ArrayList of TeamMembers in the program."},{"lineNumber":26,"author":{"gitId":"samuellleow"},"content":"     * @return Prints home view display."},{"lineNumber":27,"author":{"gitId":"samuellleow"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"riazaham"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"riazaham"},"content":"    public String executeCommand(ArrayList\u003cProject\u003e projects, ArrayList\u003cTeamMember\u003e teamMembers) {"},{"lineNumber":30,"author":{"gitId":"riazaham"},"content":"        if (projectIndex \u003d\u003d -1) {"},{"lineNumber":31,"author":{"gitId":"thatseant"},"content":"            return Ui.printHomeView(projects, teamMembers);"},{"lineNumber":32,"author":{"gitId":"riazaham"},"content":"        } else {"},{"lineNumber":33,"author":{"gitId":"riazaham"},"content":"            Parser.setProjectIndex(-1);"},{"lineNumber":34,"author":{"gitId":"thatseant"},"content":"            return Ui.printHomeView(projects, teamMembers);"},{"lineNumber":35,"author":{"gitId":"riazaham"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"riazaham"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":38,"author":{"gitId":"riazaham"},"content":"    @Override"},{"lineNumber":39,"author":{"gitId":"riazaham"},"content":"    public Boolean isExit() {"},{"lineNumber":40,"author":{"gitId":"riazaham"},"content":"        return false;"},{"lineNumber":41,"author":{"gitId":"riazaham"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"riazaham"},"content":"}"}],"authorContributionMap":{"thatseant":7,"samuellleow":10,"riazaham":25}},{"path":"src/main/java/seedu/ezmanager/commands/PrintHomeViewCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"thatseant"},"content":"package seedu.ezmanager.commands;"},{"lineNumber":2,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":3,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.EzExceptions;"},{"lineNumber":4,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.member.TeamMember;"},{"lineNumber":5,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.project.Project;"},{"lineNumber":6,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.ui.Ui;"},{"lineNumber":7,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":8,"author":{"gitId":"samuellleow"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":10,"author":{"gitId":"samuellleow"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"samuellleow"},"content":" * Prints the home view display."},{"lineNumber":12,"author":{"gitId":"samuellleow"},"content":" */"},{"lineNumber":13,"author":{"gitId":"samuellleow"},"content":"public class PrintHomeViewCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":15,"author":{"gitId":"samuellleow"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"samuellleow"},"content":"     * Print home view display."},{"lineNumber":17,"author":{"gitId":"samuellleow"},"content":"     * @param projects ArrayList of Projects."},{"lineNumber":18,"author":{"gitId":"samuellleow"},"content":"     * @param teamMembers ArrayList of TeamMembers in the program."},{"lineNumber":19,"author":{"gitId":"samuellleow"},"content":"     * @return Print home view display."},{"lineNumber":20,"author":{"gitId":"samuellleow"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"samuellleow"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"samuellleow"},"content":"    public String executeCommand(ArrayList\u003cProject\u003e projects, ArrayList\u003cTeamMember\u003e teamMembers) {"},{"lineNumber":23,"author":{"gitId":"samuellleow"},"content":"        return Ui.printHomeView(projects, teamMembers);"},{"lineNumber":24,"author":{"gitId":"samuellleow"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":26,"author":{"gitId":"samuellleow"},"content":"    public Boolean isExit() {"},{"lineNumber":27,"author":{"gitId":"samuellleow"},"content":"        return false;"},{"lineNumber":28,"author":{"gitId":"samuellleow"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":30,"author":{"gitId":"samuellleow"},"content":"}"}],"authorContributionMap":{"thatseant":5,"samuellleow":25}},{"path":"src/main/java/seedu/ezmanager/commands/member/AssignMemberToProjectCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"thatseant"},"content":"//@@author thatseant"},{"lineNumber":2,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":3,"author":{"gitId":"thatseant"},"content":"package seedu.ezmanager.commands.member;"},{"lineNumber":4,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":5,"author":{"gitId":"thatseant"},"content":"import java.util.HashMap;"},{"lineNumber":6,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.EzExceptions;"},{"lineNumber":7,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.EzLogger;"},{"lineNumber":8,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.commands.Command;"},{"lineNumber":9,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.member.TeamMember;"},{"lineNumber":10,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.project.Project;"},{"lineNumber":11,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.ui.Ui;"},{"lineNumber":12,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":13,"author":{"gitId":"thatseant"},"content":"import static seedu.ezmanager.Parser.getHashValue;"},{"lineNumber":14,"author":{"gitId":"thatseant"},"content":"import static seedu.ezmanager.Util.INDEX_NON_INTEGER;"},{"lineNumber":15,"author":{"gitId":"thatseant"},"content":"import static seedu.ezmanager.Util.INVALID_PROJECT_ID;"},{"lineNumber":16,"author":{"gitId":"thatseant"},"content":"import static seedu.ezmanager.Util.INVALID_TEAM_MEMBER_ID;"},{"lineNumber":17,"author":{"gitId":"thatseant"},"content":"import static seedu.ezmanager.Util.MEMBER_INDEX_KEY;"},{"lineNumber":18,"author":{"gitId":"thatseant"},"content":"import static seedu.ezmanager.Util.PROJECT_INDEX_KEY;"},{"lineNumber":19,"author":{"gitId":"thatseant"},"content":"import static seedu.ezmanager.Util.USER_JAVA_INDEX_DIFF;"},{"lineNumber":20,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":21,"author":{"gitId":"thatseant"},"content":"import java.util.ArrayList;"},{"lineNumber":22,"author":{"gitId":"thatseant"},"content":"import java.util.logging.Level;"},{"lineNumber":23,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":24,"author":{"gitId":"thatseant"},"content":"/**"},{"lineNumber":25,"author":{"gitId":"thatseant"},"content":" * Assign TeamMember object to Project object."},{"lineNumber":26,"author":{"gitId":"thatseant"},"content":" */"},{"lineNumber":27,"author":{"gitId":"thatseant"},"content":"public class AssignMemberToProjectCommand extends Command {"},{"lineNumber":28,"author":{"gitId":"thatseant"},"content":"    private int memberIndex;"},{"lineNumber":29,"author":{"gitId":"thatseant"},"content":"    private int projectIndex;"},{"lineNumber":30,"author":{"gitId":"thatseant"},"content":"    private HashMap\u003cString, String\u003e paramsList;"},{"lineNumber":31,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":32,"author":{"gitId":"thatseant"},"content":"    public AssignMemberToProjectCommand(HashMap\u003cString,String\u003e paramsList, int projectIndex)"},{"lineNumber":33,"author":{"gitId":"thatseant"},"content":"            throws EzExceptions {"},{"lineNumber":34,"author":{"gitId":"thatseant"},"content":"        this.paramsList \u003d paramsList;"},{"lineNumber":35,"author":{"gitId":"thatseant"},"content":"        assert projectIndex \u003d\u003d -1 : \"projectIndex must be -1\";"},{"lineNumber":36,"author":{"gitId":"thatseant"},"content":"        parse();"},{"lineNumber":37,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":39,"author":{"gitId":"thatseant"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"thatseant"},"content":"     * Parse user parameter inputs for execution."},{"lineNumber":41,"author":{"gitId":"thatseant"},"content":"     *"},{"lineNumber":42,"author":{"gitId":"thatseant"},"content":"     * @throws EzExceptions Invalid index when parameter values entered is not an integer."},{"lineNumber":43,"author":{"gitId":"thatseant"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"thatseant"},"content":"    public void parse() throws EzExceptions {"},{"lineNumber":45,"author":{"gitId":"thatseant"},"content":"        try {"},{"lineNumber":46,"author":{"gitId":"thatseant"},"content":"            projectIndex \u003d Integer.parseInt(getHashValue(paramsList, PROJECT_INDEX_KEY)) - USER_JAVA_INDEX_DIFF;"},{"lineNumber":47,"author":{"gitId":"thatseant"},"content":"            memberIndex \u003d Integer.parseInt(getHashValue(paramsList, MEMBER_INDEX_KEY)) - USER_JAVA_INDEX_DIFF;"},{"lineNumber":48,"author":{"gitId":"thatseant"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":49,"author":{"gitId":"thatseant"},"content":"            EzLogger.log(Level.WARNING, \"Index is not an integer.\");"},{"lineNumber":50,"author":{"gitId":"thatseant"},"content":"            throw new EzExceptions(INDEX_NON_INTEGER);"},{"lineNumber":51,"author":{"gitId":"thatseant"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":54,"author":{"gitId":"thatseant"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"thatseant"},"content":"     * Assign specified member to specified project."},{"lineNumber":56,"author":{"gitId":"thatseant"},"content":"     * 1. Add TeamMember object to ArrayList of TeamMember in specified Project."},{"lineNumber":57,"author":{"gitId":"thatseant"},"content":"     * 2. Add Project object to ArrayList of Project in specified TeamMember."},{"lineNumber":58,"author":{"gitId":"thatseant"},"content":"     * 3. Prints member assigned to project message."},{"lineNumber":59,"author":{"gitId":"thatseant"},"content":"     *"},{"lineNumber":60,"author":{"gitId":"thatseant"},"content":"     * @param projects ArrayList of Projects."},{"lineNumber":61,"author":{"gitId":"thatseant"},"content":"     * @param teamMembers ArrayList of TeamMembers in the program."},{"lineNumber":62,"author":{"gitId":"thatseant"},"content":"     * @return Print member assigned to project message."},{"lineNumber":63,"author":{"gitId":"thatseant"},"content":"     * @throws EzExceptions Invalid TeamMember ID if when parameter values provided is outside"},{"lineNumber":64,"author":{"gitId":"thatseant"},"content":"     *     the range of the TeamMember list."},{"lineNumber":65,"author":{"gitId":"thatseant"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"thatseant"},"content":"    @Override"},{"lineNumber":67,"author":{"gitId":"thatseant"},"content":"    public String executeCommand(ArrayList\u003cProject\u003e projects,"},{"lineNumber":68,"author":{"gitId":"thatseant"},"content":"                                 ArrayList\u003cTeamMember\u003e teamMembers) throws EzExceptions {"},{"lineNumber":69,"author":{"gitId":"thatseant"},"content":"        EzLogger.log(Level.INFO, \"Executing Command\");"},{"lineNumber":70,"author":{"gitId":"thatseant"},"content":"        if (memberIndex \u003e\u003d teamMembers.size() || memberIndex \u003c 0) {"},{"lineNumber":71,"author":{"gitId":"thatseant"},"content":"            throw new EzExceptions(INVALID_TEAM_MEMBER_ID);"},{"lineNumber":72,"author":{"gitId":"thatseant"},"content":"        }"},{"lineNumber":73,"author":{"gitId":"thatseant"},"content":"        if (projectIndex \u003e\u003d projects.size() || projectIndex \u003c 0) {"},{"lineNumber":74,"author":{"gitId":"thatseant"},"content":"            throw new EzExceptions(INVALID_PROJECT_ID);"},{"lineNumber":75,"author":{"gitId":"thatseant"},"content":"        }"},{"lineNumber":76,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":77,"author":{"gitId":"thatseant"},"content":"        TeamMember teamMember \u003d teamMembers.get(memberIndex);"},{"lineNumber":78,"author":{"gitId":"thatseant"},"content":"        EzLogger.log(Level.INFO, \"Team Member Retrieved\");"},{"lineNumber":79,"author":{"gitId":"thatseant"},"content":"        Project projectToAdd \u003d projects.get(projectIndex);"},{"lineNumber":80,"author":{"gitId":"thatseant"},"content":"        EzLogger.log(Level.INFO, \"Project Retrieved\");"},{"lineNumber":81,"author":{"gitId":"thatseant"},"content":"        teamMember.assignProject(projectToAdd);"},{"lineNumber":82,"author":{"gitId":"thatseant"},"content":"        projectToAdd.addTeamMemberToProject(teamMember);"},{"lineNumber":83,"author":{"gitId":"thatseant"},"content":"        EzLogger.log(Level.INFO, \"Team Member Assigned to Project\");"},{"lineNumber":84,"author":{"gitId":"thatseant"},"content":"        return Ui.printMemberAssignedToProjectMessage(teamMember.getName(), projectToAdd.getProjectName());"},{"lineNumber":85,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":87,"author":{"gitId":"thatseant"},"content":"    public Boolean isExit() {"},{"lineNumber":88,"author":{"gitId":"thatseant"},"content":"        return false;"},{"lineNumber":89,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"thatseant"},"content":"}"}],"authorContributionMap":{"thatseant":90}},{"path":"src/main/java/seedu/ezmanager/commands/member/TeamMemberAddCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"thatseant"},"content":"package seedu.ezmanager.commands.member;"},{"lineNumber":2,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":3,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.EzExceptions;"},{"lineNumber":4,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.commands.Command;"},{"lineNumber":5,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.member.TeamMember;"},{"lineNumber":6,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.project.Project;"},{"lineNumber":7,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.ui.Ui;"},{"lineNumber":8,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":9,"author":{"gitId":"samuelchristopher"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitId":"riazaham"},"content":"import java.util.HashMap;"},{"lineNumber":11,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":12,"author":{"gitId":"thatseant"},"content":"import static seedu.ezmanager.Parser.getHashValue;"},{"lineNumber":13,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":14,"author":{"gitId":"samuellleow"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"samuellleow"},"content":" * Add a new TeamMember object to the program."},{"lineNumber":16,"author":{"gitId":"samuellleow"},"content":" */"},{"lineNumber":17,"author":{"gitId":"riazaham"},"content":"public class TeamMemberAddCommand extends Command {"},{"lineNumber":18,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":19,"author":{"gitId":"samuelchristopher"},"content":"    private String name;"},{"lineNumber":20,"author":{"gitId":"riazaham"},"content":"    HashMap\u003cString, String\u003e params;"},{"lineNumber":21,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":22,"author":{"gitId":"thatseant"},"content":"    public TeamMemberAddCommand(HashMap\u003cString, String\u003e params) throws EzExceptions {"},{"lineNumber":23,"author":{"gitId":"riazaham"},"content":"        this.params \u003d params;"},{"lineNumber":24,"author":{"gitId":"riazaham"},"content":"        this.parse();"},{"lineNumber":25,"author":{"gitId":"riazaham"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":27,"author":{"gitId":"samuellleow"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"samuellleow"},"content":"     * Parse user parameter inputs for execution."},{"lineNumber":29,"author":{"gitId":"samuellleow"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"samuellleow"},"content":"     * @throws EzExceptions if there are missing parameter values."},{"lineNumber":31,"author":{"gitId":"samuellleow"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"thatseant"},"content":"    public void parse() throws EzExceptions {"},{"lineNumber":33,"author":{"gitId":"thatseant"},"content":"        name \u003d getHashValue(params, \"n\");"},{"lineNumber":34,"author":{"gitId":"samuelchristopher"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":36,"author":{"gitId":"samuellleow"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"samuellleow"},"content":"     * Adds a new TeamMember object to the ArrayList of TeamMember in the program."},{"lineNumber":38,"author":{"gitId":"samuellleow"},"content":"     * Prints member added message."},{"lineNumber":39,"author":{"gitId":"samuellleow"},"content":"     *"},{"lineNumber":40,"author":{"gitId":"samuellleow"},"content":"     * @param projects ArrayList of Projects."},{"lineNumber":41,"author":{"gitId":"samuellleow"},"content":"     * @param teamMembers ArrayList of TeamMembers in the program."},{"lineNumber":42,"author":{"gitId":"samuellleow"},"content":"     * @return Print member added message."},{"lineNumber":43,"author":{"gitId":"samuellleow"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"riazaham"},"content":"    public String executeCommand(ArrayList\u003cProject\u003e projects, ArrayList\u003cTeamMember\u003e teamMembers) {"},{"lineNumber":45,"author":{"gitId":"samuelchristopher"},"content":"        TeamMember newMember \u003d new TeamMember(name);"},{"lineNumber":46,"author":{"gitId":"riazaham"},"content":"        teamMembers.add(newMember);"},{"lineNumber":47,"author":{"gitId":"samuellleow"},"content":"        return Ui.printMemberAddedMessage(name);"},{"lineNumber":48,"author":{"gitId":"samuelchristopher"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":50,"author":{"gitId":"samuelchristopher"},"content":"    public Boolean isExit() {"},{"lineNumber":51,"author":{"gitId":"samuelchristopher"},"content":"        return false;"},{"lineNumber":52,"author":{"gitId":"samuelchristopher"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"samuelchristopher"},"content":"}"}],"authorContributionMap":{"thatseant":10,"samuelchristopher":15,"samuellleow":17,"riazaham":11}},{"path":"src/main/java/seedu/ezmanager/commands/member/TeamMemberAssignToTaskCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"thatseant"},"content":"package seedu.ezmanager.commands.member;"},{"lineNumber":2,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":3,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.EzExceptions;"},{"lineNumber":4,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.commands.Command;"},{"lineNumber":5,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.member.TeamMember;"},{"lineNumber":6,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.project.Project;"},{"lineNumber":7,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.task.Task;"},{"lineNumber":8,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.ui.Ui;"},{"lineNumber":9,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":10,"author":{"gitId":"riazaham"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitId":"riazaham"},"content":"import java.util.HashMap;"},{"lineNumber":12,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":13,"author":{"gitId":"thatseant"},"content":"import static seedu.ezmanager.Parser.getHashValue;"},{"lineNumber":14,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":15,"author":{"gitId":"samuellleow"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"samuellleow"},"content":" * Assign TeamMember object to Task object."},{"lineNumber":17,"author":{"gitId":"samuellleow"},"content":" */"},{"lineNumber":18,"author":{"gitId":"riazaham"},"content":"public class TeamMemberAssignToTaskCommand extends Command {"},{"lineNumber":19,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":20,"author":{"gitId":"riazaham"},"content":"    private int taskIndex;"},{"lineNumber":21,"author":{"gitId":"riazaham"},"content":"    private int projectIndex;"},{"lineNumber":22,"author":{"gitId":"riazaham"},"content":"    private int memberIndex;"},{"lineNumber":23,"author":{"gitId":"riazaham"},"content":"    HashMap\u003cString, String\u003e params;"},{"lineNumber":24,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":25,"author":{"gitId":"riazaham"},"content":"    public TeamMemberAssignToTaskCommand(HashMap\u003cString, String\u003e params, int projectIndex)"},{"lineNumber":26,"author":{"gitId":"thatseant"},"content":"            throws EzExceptions {"},{"lineNumber":27,"author":{"gitId":"riazaham"},"content":"        this.params \u003d params;"},{"lineNumber":28,"author":{"gitId":"riazaham"},"content":"        this.projectIndex \u003d projectIndex;"},{"lineNumber":29,"author":{"gitId":"riazaham"},"content":"        this.parse();"},{"lineNumber":30,"author":{"gitId":"riazaham"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":32,"author":{"gitId":"samuellleow"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"samuellleow"},"content":"     * Parse user parameter inputs for execution."},{"lineNumber":34,"author":{"gitId":"samuellleow"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"samuellleow"},"content":"     * @throws EzExceptions Invalid index when parameter values entered is not an integer."},{"lineNumber":36,"author":{"gitId":"samuellleow"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"thatseant"},"content":"    public void parse() throws EzExceptions {"},{"lineNumber":38,"author":{"gitId":"samuellleow"},"content":"        try {"},{"lineNumber":39,"author":{"gitId":"riazaham"},"content":"            taskIndex \u003d Integer.parseInt(getHashValue(params, \"t\")) - 1;"},{"lineNumber":40,"author":{"gitId":"riazaham"},"content":"            memberIndex \u003d Integer.parseInt(getHashValue(params, \"m\")) - 1;"},{"lineNumber":41,"author":{"gitId":"samuellleow"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":42,"author":{"gitId":"samuellleow"},"content":"            throw new EzExceptions(\"indexNonInteger\");"},{"lineNumber":43,"author":{"gitId":"samuellleow"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"riazaham"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":46,"author":{"gitId":"samuellleow"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"samuellleow"},"content":"     * Assign specified member to specified task."},{"lineNumber":48,"author":{"gitId":"samuellleow"},"content":"     * 1. Adds Task to ArrayList of Task in specified TeamMember."},{"lineNumber":49,"author":{"gitId":"samuellleow"},"content":"     * 2. Adds TeamMember to ArrayList of TeamMember in specified Task."},{"lineNumber":50,"author":{"gitId":"samuellleow"},"content":"     * 3. Prints member assigned to task message."},{"lineNumber":51,"author":{"gitId":"samuellleow"},"content":"     *"},{"lineNumber":52,"author":{"gitId":"samuellleow"},"content":"     * @param projects ArrayList of Projects."},{"lineNumber":53,"author":{"gitId":"samuellleow"},"content":"     * @param teamMembers ArrayList of TeamMembers in the program."},{"lineNumber":54,"author":{"gitId":"samuellleow"},"content":"     * @return Print member assigned to task message."},{"lineNumber":55,"author":{"gitId":"samuellleow"},"content":"     * @throws EzExceptions Empty Task list if the list is empty or"},{"lineNumber":56,"author":{"gitId":"samuellleow"},"content":"     *     Invalid Task ID if when parameter values provided is outside"},{"lineNumber":57,"author":{"gitId":"samuellleow"},"content":"     *     the range of the Task list."},{"lineNumber":58,"author":{"gitId":"samuellleow"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"riazaham"},"content":"    public String executeCommand(ArrayList\u003cProject\u003e projects,"},{"lineNumber":60,"author":{"gitId":"thatseant"},"content":"                                 ArrayList\u003cTeamMember\u003e teamMembers) throws EzExceptions {"},{"lineNumber":61,"author":{"gitId":"riazaham"},"content":"        Task selectedTask;"},{"lineNumber":62,"author":{"gitId":"riazaham"},"content":"        TeamMember teamMember;"},{"lineNumber":63,"author":{"gitId":"samuellleow"},"content":"        assert projectIndex \u003e\u003d 0 : \"projectIndex should be minus one \""},{"lineNumber":64,"author":{"gitId":"samuellleow"},"content":"                + \"of the current project it was selected\";"},{"lineNumber":65,"author":{"gitId":"samuellleow"},"content":"        Project project \u003d projects.get(projectIndex);"},{"lineNumber":66,"author":{"gitId":"riazaham"},"content":"        try {"},{"lineNumber":67,"author":{"gitId":"samuellleow"},"content":"            if (project.getTaskList().isEmpty()) {"},{"lineNumber":68,"author":{"gitId":"thatseant"},"content":"                throw new EzExceptions(\"emptyTaskList\");"},{"lineNumber":69,"author":{"gitId":"samuellleow"},"content":"            }"},{"lineNumber":70,"author":{"gitId":"samuellleow"},"content":"            selectedTask \u003d project.getTask(taskIndex);"},{"lineNumber":71,"author":{"gitId":"riazaham"},"content":"        } catch (NumberFormatException | IndexOutOfBoundsException e) {"},{"lineNumber":72,"author":{"gitId":"thatseant"},"content":"            throw new EzExceptions(\"invalidTaskID\");"},{"lineNumber":73,"author":{"gitId":"riazaham"},"content":"        }"},{"lineNumber":74,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":75,"author":{"gitId":"riazaham"},"content":"        try {"},{"lineNumber":76,"author":{"gitId":"samuellleow"},"content":"            if (project.getTeamMembers().isEmpty()) {"},{"lineNumber":77,"author":{"gitId":"thatseant"},"content":"                throw new EzExceptions(\"emptyTeamMembersList\");"},{"lineNumber":78,"author":{"gitId":"samuellleow"},"content":"            }"},{"lineNumber":79,"author":{"gitId":"samuellleow"},"content":"            teamMember \u003d project.getTeamMembers().get(memberIndex);"},{"lineNumber":80,"author":{"gitId":"riazaham"},"content":"        } catch (NumberFormatException | IndexOutOfBoundsException e) {"},{"lineNumber":81,"author":{"gitId":"thatseant"},"content":"            throw new EzExceptions(\"invalidTeamMemberID\");"},{"lineNumber":82,"author":{"gitId":"riazaham"},"content":"        }"},{"lineNumber":83,"author":{"gitId":"samuellleow"},"content":"        selectedTask.setMember(teamMember);"},{"lineNumber":84,"author":{"gitId":"samuellleow"},"content":"        teamMember.setTask(selectedTask);"},{"lineNumber":85,"author":{"gitId":"samuellleow"},"content":"        return Ui.printMemberAssignedToTaskMessage(teamMember.getName(), selectedTask.getTaskDescription());"},{"lineNumber":86,"author":{"gitId":"riazaham"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":88,"author":{"gitId":"riazaham"},"content":"    public Boolean isExit() {"},{"lineNumber":89,"author":{"gitId":"riazaham"},"content":"        return false;"},{"lineNumber":90,"author":{"gitId":"riazaham"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"riazaham"},"content":"}"}],"authorContributionMap":{"thatseant":15,"samuellleow":37,"riazaham":39}},{"path":"src/main/java/seedu/ezmanager/commands/member/TeamMemberDeleteCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"thatseant"},"content":"package seedu.ezmanager.commands.member;"},{"lineNumber":2,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":3,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.EzExceptions;"},{"lineNumber":4,"author":{"gitId":"samuellleow"},"content":"import seedu.ezmanager.EzLogger;"},{"lineNumber":5,"author":{"gitId":"samuellleow"},"content":"import java.util.logging.Level;"},{"lineNumber":6,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.commands.Command;"},{"lineNumber":7,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.member.TeamMember;"},{"lineNumber":8,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.project.Project;"},{"lineNumber":9,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.task.Task;"},{"lineNumber":10,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.ui.Ui;"},{"lineNumber":11,"author":{"gitId":"samuellleow"},"content":"import static seedu.ezmanager.Util.INDEX_NON_INTEGER;"},{"lineNumber":12,"author":{"gitId":"samuellleow"},"content":"import static seedu.ezmanager.Util.INVALID_TEAM_MEMBER_ID;"},{"lineNumber":13,"author":{"gitId":"samuellleow"},"content":"import static seedu.ezmanager.Util.EMPTY_TEAM_MEMBERS_LIST;"},{"lineNumber":14,"author":{"gitId":"riazaham"},"content":"import java.util.ArrayList;"},{"lineNumber":15,"author":{"gitId":"riazaham"},"content":"import java.util.HashMap;"},{"lineNumber":16,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":17,"author":{"gitId":"thatseant"},"content":"import static seedu.ezmanager.Parser.getHashValue;"},{"lineNumber":18,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":19,"author":{"gitId":"samuellleow"},"content":"/**"},{"lineNumber":20,"author":{"gitId":"samuellleow"},"content":" * Delete TeamMember object from program or from a specified Project object."},{"lineNumber":21,"author":{"gitId":"samuellleow"},"content":" */"},{"lineNumber":22,"author":{"gitId":"riazaham"},"content":"public class TeamMemberDeleteCommand extends Command {"},{"lineNumber":23,"author":{"gitId":"riazaham"},"content":"    private int memberIndex;"},{"lineNumber":24,"author":{"gitId":"riazaham"},"content":"    HashMap\u003cString, String\u003e params;"},{"lineNumber":25,"author":{"gitId":"samuellleow"},"content":"    private int projectIndex;"},{"lineNumber":26,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":27,"author":{"gitId":"thatseant"},"content":"    public TeamMemberDeleteCommand(HashMap\u003cString, String\u003e params, int projectIndex) throws EzExceptions {"},{"lineNumber":28,"author":{"gitId":"riazaham"},"content":"        this.params \u003d params;"},{"lineNumber":29,"author":{"gitId":"riazaham"},"content":"        this.parse();"},{"lineNumber":30,"author":{"gitId":"samuellleow"},"content":"        this.projectIndex \u003d projectIndex;"},{"lineNumber":31,"author":{"gitId":"riazaham"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":33,"author":{"gitId":"samuellleow"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"samuellleow"},"content":"     * Parse user parameter inputs for execution."},{"lineNumber":35,"author":{"gitId":"samuellleow"},"content":"     *"},{"lineNumber":36,"author":{"gitId":"samuellleow"},"content":"     * @throws EzExceptions Invalid Team Member ID when parameter values entered is not an integer."},{"lineNumber":37,"author":{"gitId":"samuellleow"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"thatseant"},"content":"    public void parse() throws EzExceptions {"},{"lineNumber":39,"author":{"gitId":"riazaham"},"content":"        try {"},{"lineNumber":40,"author":{"gitId":"riazaham"},"content":"            memberIndex \u003d Integer.parseInt(getHashValue(params, \"m\")) - 1;"},{"lineNumber":41,"author":{"gitId":"riazaham"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":42,"author":{"gitId":"samuellleow"},"content":"            EzLogger.log(Level.WARNING, \"Input not an integer\");"},{"lineNumber":43,"author":{"gitId":"samuellleow"},"content":"            throw new EzExceptions(INDEX_NON_INTEGER);"},{"lineNumber":44,"author":{"gitId":"riazaham"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"riazaham"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":47,"author":{"gitId":"samuellleow"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"samuellleow"},"content":"     * Removes specified member from the program or from a specified project depending on the view"},{"lineNumber":49,"author":{"gitId":"samuellleow"},"content":"     * [In Home View] Removes member from the program entirely, including every project and every task"},{"lineNumber":50,"author":{"gitId":"samuellleow"},"content":"     * he/she is assigned to."},{"lineNumber":51,"author":{"gitId":"samuellleow"},"content":"     * [In Project View] Removes member from the project, including the task he/she is assigned to."},{"lineNumber":52,"author":{"gitId":"samuellleow"},"content":"     * Prints member removed message."},{"lineNumber":53,"author":{"gitId":"samuellleow"},"content":"     *"},{"lineNumber":54,"author":{"gitId":"samuellleow"},"content":"     * @param projects ArrayList of Projects."},{"lineNumber":55,"author":{"gitId":"samuellleow"},"content":"     * @param teamMembers ArrayList of TeamMembers in the program."},{"lineNumber":56,"author":{"gitId":"samuellleow"},"content":"     * @return Print message of member being removed from either the program entirely or the project."},{"lineNumber":57,"author":{"gitId":"samuellleow"},"content":"     * @throws EzExceptions if TeamMembers list is empty or if TeamMember ID provided is outside"},{"lineNumber":58,"author":{"gitId":"samuellleow"},"content":"     *     the range of the TeamMembers list"},{"lineNumber":59,"author":{"gitId":"samuellleow"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"riazaham"},"content":"    @Override"},{"lineNumber":61,"author":{"gitId":"riazaham"},"content":"    public String executeCommand(ArrayList\u003cProject\u003e projects,"},{"lineNumber":62,"author":{"gitId":"thatseant"},"content":"                                 ArrayList\u003cTeamMember\u003e teamMembers) throws EzExceptions {"},{"lineNumber":63,"author":{"gitId":"riazaham"},"content":"        if (teamMembers.size() \u003d\u003d 0) {"},{"lineNumber":64,"author":{"gitId":"samuellleow"},"content":"            EzLogger.log(Level.WARNING, \"Empty TeamMember List\");"},{"lineNumber":65,"author":{"gitId":"samuellleow"},"content":"            throw new EzExceptions(EMPTY_TEAM_MEMBERS_LIST);"},{"lineNumber":66,"author":{"gitId":"riazaham"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"riazaham"},"content":"        try {"},{"lineNumber":68,"author":{"gitId":"samuellleow"},"content":"            TeamMember memberToBeRemoved;"},{"lineNumber":69,"author":{"gitId":"samuellleow"},"content":"            // Removing of Members in HomeView"},{"lineNumber":70,"author":{"gitId":"samuellleow"},"content":"            if (projectIndex \u003d\u003d -1) {"},{"lineNumber":71,"author":{"gitId":"samuellleow"},"content":"                memberToBeRemoved \u003d removeMemberFromHomeView(projects, teamMembers);"},{"lineNumber":72,"author":{"gitId":"samuellleow"},"content":"                return Ui.printMemberRemovedInHomeViewMessage(memberToBeRemoved.getName());"},{"lineNumber":73,"author":{"gitId":"samuellleow"},"content":"            // Removing of members in ProjectView"},{"lineNumber":74,"author":{"gitId":"samuellleow"},"content":"            } else {"},{"lineNumber":75,"author":{"gitId":"samuellleow"},"content":"                Project project \u003d projects.get(projectIndex);"},{"lineNumber":76,"author":{"gitId":"samuellleow"},"content":"                memberToBeRemoved \u003d removeMemberFromCurrentProjectView(project);"},{"lineNumber":77,"author":{"gitId":"samuellleow"},"content":"                return Ui.printMemberRemovedInProjectViewMessage(memberToBeRemoved.getName(), project.getProjectName());"},{"lineNumber":78,"author":{"gitId":"samuellleow"},"content":"            }"},{"lineNumber":79,"author":{"gitId":"riazaham"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":80,"author":{"gitId":"samuellleow"},"content":"            EzLogger.log(Level.WARNING, \"Invalid TeamMember ID\");"},{"lineNumber":81,"author":{"gitId":"samuellleow"},"content":"            throw new EzExceptions(INVALID_TEAM_MEMBER_ID);"},{"lineNumber":82,"author":{"gitId":"riazaham"},"content":"        }"},{"lineNumber":83,"author":{"gitId":"riazaham"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":85,"author":{"gitId":"samuellleow"},"content":"    private TeamMember removeMemberFromHomeView(ArrayList\u003cProject\u003e projects,"},{"lineNumber":86,"author":{"gitId":"samuellleow"},"content":"                                        ArrayList\u003cTeamMember\u003e teamMembers) {"},{"lineNumber":87,"author":{"gitId":"samuellleow"},"content":"        assert projectIndex \u003d\u003d -1 : \"projectIndex should equal to -1 since it is in home view\";"},{"lineNumber":88,"author":{"gitId":"samuellleow"},"content":"        TeamMember memberToBeRemoved \u003d teamMembers.get(memberIndex);"},{"lineNumber":89,"author":{"gitId":"samuellleow"},"content":"        teamMembers.remove(memberIndex);"},{"lineNumber":90,"author":{"gitId":"samuellleow"},"content":"        EzLogger.log(Level.INFO, \"TeamMember removed\");"},{"lineNumber":91,"author":{"gitId":"samuellleow"},"content":"        removeMemberFromEachProject(projects, memberToBeRemoved);"},{"lineNumber":92,"author":{"gitId":"samuellleow"},"content":"        return memberToBeRemoved;"},{"lineNumber":93,"author":{"gitId":"samuellleow"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":95,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":96,"author":{"gitId":"samuellleow"},"content":"    private void removeMemberFromEachProject(ArrayList\u003cProject\u003e projects, TeamMember memberToBeRemoved) {"},{"lineNumber":97,"author":{"gitId":"samuellleow"},"content":"        for (Project project : projects) {"},{"lineNumber":98,"author":{"gitId":"samuellleow"},"content":"            for (int i \u003d 0; i \u003c project.getTeamMembers().size(); i++) {"},{"lineNumber":99,"author":{"gitId":"samuellleow"},"content":"                TeamMember member \u003d project.getTeamMembers().get(i);"},{"lineNumber":100,"author":{"gitId":"samuellleow"},"content":"                if (member \u003d\u003d memberToBeRemoved) {"},{"lineNumber":101,"author":{"gitId":"samuellleow"},"content":"                    project.getTeamMembers().remove(i);"},{"lineNumber":102,"author":{"gitId":"samuellleow"},"content":"                    i--;"},{"lineNumber":103,"author":{"gitId":"samuellleow"},"content":"                }"},{"lineNumber":104,"author":{"gitId":"samuellleow"},"content":"            }"},{"lineNumber":105,"author":{"gitId":"samuellleow"},"content":"            removeMemberFromTask(project, memberToBeRemoved);"},{"lineNumber":106,"author":{"gitId":"samuellleow"},"content":"        }"},{"lineNumber":107,"author":{"gitId":"samuellleow"},"content":"        EzLogger.log(Level.INFO, \"TeamMember removed from each assigned project\");"},{"lineNumber":108,"author":{"gitId":"samuellleow"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":110,"author":{"gitId":"samuellleow"},"content":"    private TeamMember removeMemberFromCurrentProjectView(Project project) {"},{"lineNumber":111,"author":{"gitId":"samuellleow"},"content":"        assert projectIndex \u003e\u003d 0 : \"projectIndex should be minus one \""},{"lineNumber":112,"author":{"gitId":"samuellleow"},"content":"                + \"of the current project it was selected\";"},{"lineNumber":113,"author":{"gitId":"samuellleow"},"content":"        TeamMember memberToBeRemoved \u003d project.getTeamMembers().get(memberIndex);"},{"lineNumber":114,"author":{"gitId":"samuellleow"},"content":"        EzLogger.log(Level.INFO, \"To be removed TeamMember Retrieved\");"},{"lineNumber":115,"author":{"gitId":"samuellleow"},"content":"        project.getTeamMembers().remove(memberIndex);"},{"lineNumber":116,"author":{"gitId":"samuellleow"},"content":"        removeMemberFromTask(project, memberToBeRemoved);"},{"lineNumber":117,"author":{"gitId":"samuellleow"},"content":"        memberToBeRemoved.getAssignedProjects().remove(project);"},{"lineNumber":118,"author":{"gitId":"samuellleow"},"content":"        EzLogger.log(Level.INFO, \"TeamMember removed from current project\");"},{"lineNumber":119,"author":{"gitId":"samuellleow"},"content":"        return memberToBeRemoved;"},{"lineNumber":120,"author":{"gitId":"samuellleow"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":122,"author":{"gitId":"samuellleow"},"content":"    private void removeMemberFromTask(Project project, TeamMember memberToBeRemoved) {"},{"lineNumber":123,"author":{"gitId":"samuellleow"},"content":"        for (Task task : project.getTaskList()) {"},{"lineNumber":124,"author":{"gitId":"samuellleow"},"content":"            for (int j \u003d 0; j \u003c task.getMembers().size(); j++) {"},{"lineNumber":125,"author":{"gitId":"samuellleow"},"content":"                TeamMember member \u003d task.getMembers().get(j);"},{"lineNumber":126,"author":{"gitId":"samuellleow"},"content":"                if (member \u003d\u003d memberToBeRemoved) {"},{"lineNumber":127,"author":{"gitId":"samuellleow"},"content":"                    task.getMembers().remove(j);"},{"lineNumber":128,"author":{"gitId":"samuellleow"},"content":"                    j--;"},{"lineNumber":129,"author":{"gitId":"samuellleow"},"content":"                }"},{"lineNumber":130,"author":{"gitId":"samuellleow"},"content":"            }"},{"lineNumber":131,"author":{"gitId":"samuellleow"},"content":"        }"},{"lineNumber":132,"author":{"gitId":"samuellleow"},"content":"        EzLogger.log(Level.INFO, \"TeamMember removed from each assigned task\");"},{"lineNumber":133,"author":{"gitId":"samuellleow"},"content":"    }"},{"lineNumber":134,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":135,"author":{"gitId":"riazaham"},"content":"    @Override"},{"lineNumber":136,"author":{"gitId":"riazaham"},"content":"    public Boolean isExit() {"},{"lineNumber":137,"author":{"gitId":"riazaham"},"content":"        return false;"},{"lineNumber":138,"author":{"gitId":"riazaham"},"content":"    }"},{"lineNumber":139,"author":{"gitId":"riazaham"},"content":"}"}],"authorContributionMap":{"thatseant":11,"samuellleow":95,"riazaham":33}},{"path":"src/main/java/seedu/ezmanager/commands/member/TeamMemberHoursCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"thatseant"},"content":"package seedu.ezmanager.commands.member;"},{"lineNumber":2,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":3,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.EzExceptions;"},{"lineNumber":4,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.commands.Command;"},{"lineNumber":5,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.member.TeamMember;"},{"lineNumber":6,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.project.Project;"},{"lineNumber":7,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.task.Task;"},{"lineNumber":8,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.ui.Ui;"},{"lineNumber":9,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":10,"author":{"gitId":"thatseant"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitId":"thatseant"},"content":"import java.util.HashMap;"},{"lineNumber":12,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":13,"author":{"gitId":"thatseant"},"content":"import static seedu.ezmanager.Parser.getHashValue;"},{"lineNumber":14,"author":{"gitId":"thatseant"},"content":"import static seedu.ezmanager.Util.INVALID_MEMBER_ID;"},{"lineNumber":15,"author":{"gitId":"thatseant"},"content":"import static seedu.ezmanager.Util.MEMBER_INDEX_KEY;"},{"lineNumber":16,"author":{"gitId":"thatseant"},"content":"import static seedu.ezmanager.Util.MINUTES_IN_HOUR_DOUBLE;"},{"lineNumber":17,"author":{"gitId":"thatseant"},"content":"import static seedu.ezmanager.Util.USER_JAVA_INDEX_DIFF;"},{"lineNumber":18,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":19,"author":{"gitId":"samuellleow"},"content":"/**"},{"lineNumber":20,"author":{"gitId":"samuellleow"},"content":" * Calculate total number of hours worked by specified member for all tasks in every project."},{"lineNumber":21,"author":{"gitId":"samuellleow"},"content":" */"},{"lineNumber":22,"author":{"gitId":"thatseant"},"content":"public class TeamMemberHoursCommand extends Command {"},{"lineNumber":23,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":24,"author":{"gitId":"thatseant"},"content":"    private int memberIndex;"},{"lineNumber":25,"author":{"gitId":"thatseant"},"content":"    HashMap\u003cString, String\u003e params;"},{"lineNumber":26,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":27,"author":{"gitId":"thatseant"},"content":"    public TeamMemberHoursCommand(HashMap\u003cString, String\u003e params, int projectIndex)"},{"lineNumber":28,"author":{"gitId":"thatseant"},"content":"            throws EzExceptions {"},{"lineNumber":29,"author":{"gitId":"thatseant"},"content":"        assert projectIndex \u003d\u003d -1 : \"projectIndex must be -1\";"},{"lineNumber":30,"author":{"gitId":"thatseant"},"content":"        this.params \u003d params;"},{"lineNumber":31,"author":{"gitId":"thatseant"},"content":"        this.parse();"},{"lineNumber":32,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":34,"author":{"gitId":"samuellleow"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"samuellleow"},"content":"     * Parse user parameter inputs for execution."},{"lineNumber":36,"author":{"gitId":"samuellleow"},"content":"     *"},{"lineNumber":37,"author":{"gitId":"samuellleow"},"content":"     * @throws EzExceptions Invalid index when parameter values entered is not an integer."},{"lineNumber":38,"author":{"gitId":"samuellleow"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"thatseant"},"content":"    public void parse() throws EzExceptions {"},{"lineNumber":40,"author":{"gitId":"thatseant"},"content":"        try {"},{"lineNumber":41,"author":{"gitId":"thatseant"},"content":"            memberIndex \u003d Integer.parseInt(getHashValue(params, MEMBER_INDEX_KEY)) - USER_JAVA_INDEX_DIFF;"},{"lineNumber":42,"author":{"gitId":"thatseant"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":43,"author":{"gitId":"thatseant"},"content":"            throw new EzExceptions(INVALID_MEMBER_ID);"},{"lineNumber":44,"author":{"gitId":"thatseant"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":47,"author":{"gitId":"samuellleow"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"samuellleow"},"content":"     * Calculates the total hours worked by specified TeamMember for every tasks in every project."},{"lineNumber":49,"author":{"gitId":"samuellleow"},"content":"     * Prints total hours worked by members."},{"lineNumber":50,"author":{"gitId":"samuellleow"},"content":"     *"},{"lineNumber":51,"author":{"gitId":"samuellleow"},"content":"     * @param projects ArrayList of Projects."},{"lineNumber":52,"author":{"gitId":"samuellleow"},"content":"     * @param members ArrayList of TeamMembers in the program."},{"lineNumber":53,"author":{"gitId":"samuellleow"},"content":"     * @return Print total hours worked by members message."},{"lineNumber":54,"author":{"gitId":"samuellleow"},"content":"     * @throws EzExceptions if TeamMember ID provided is outside the range of the TeamMembers list"},{"lineNumber":55,"author":{"gitId":"samuellleow"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"thatseant"},"content":"    public String executeCommand(ArrayList\u003cProject\u003e projects, ArrayList\u003cTeamMember\u003e members) throws EzExceptions {"},{"lineNumber":57,"author":{"gitId":"thatseant"},"content":"        try {"},{"lineNumber":58,"author":{"gitId":"thatseant"},"content":"            double hoursWorked \u003d 0;"},{"lineNumber":59,"author":{"gitId":"thatseant"},"content":"            assert memberIndex \u003e\u003d 0 : memberIndex;"},{"lineNumber":60,"author":{"gitId":"thatseant"},"content":"            TeamMember member \u003d members.get(memberIndex);"},{"lineNumber":61,"author":{"gitId":"thatseant"},"content":"            for (int i \u003d 0; i \u003c member.getTasks().size(); i++) {"},{"lineNumber":62,"author":{"gitId":"thatseant"},"content":"                Task task \u003d member.getTasks().get(i);"},{"lineNumber":63,"author":{"gitId":"thatseant"},"content":"                hoursWorked +\u003d task.getActual() / MINUTES_IN_HOUR_DOUBLE;"},{"lineNumber":64,"author":{"gitId":"thatseant"},"content":"            }"},{"lineNumber":65,"author":{"gitId":"thatseant"},"content":"            return Ui.printHoursWorkedMessage(member.getName(), hoursWorked);"},{"lineNumber":66,"author":{"gitId":"thatseant"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":67,"author":{"gitId":"thatseant"},"content":"            throw new EzExceptions(INVALID_MEMBER_ID);"},{"lineNumber":68,"author":{"gitId":"thatseant"},"content":"        }"},{"lineNumber":69,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":71,"author":{"gitId":"thatseant"},"content":"    public Boolean isExit() {"},{"lineNumber":72,"author":{"gitId":"thatseant"},"content":"        return false;"},{"lineNumber":73,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":75,"author":{"gitId":"thatseant"},"content":"}"}],"authorContributionMap":{"thatseant":58,"samuellleow":17}},{"path":"src/main/java/seedu/ezmanager/commands/member/TeamMembersListCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"thatseant"},"content":"package seedu.ezmanager.commands.member;"},{"lineNumber":2,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":3,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.commands.Command;"},{"lineNumber":4,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.member.TeamMember;"},{"lineNumber":5,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.project.Project;"},{"lineNumber":6,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":7,"author":{"gitId":"samuelchristopher"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":9,"author":{"gitId":"riazaham"},"content":"public class TeamMembersListCommand extends Command {"},{"lineNumber":10,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":11,"author":{"gitId":"samuelchristopher"},"content":"    private String name;"},{"lineNumber":12,"author":{"gitId":"samuellleow"},"content":"    private boolean isHomeView;"},{"lineNumber":13,"author":{"gitId":"samuellleow"},"content":"    private int projectIndex;"},{"lineNumber":14,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":15,"author":{"gitId":"samuellleow"},"content":"    public TeamMembersListCommand(boolean isHomeView, int projectIndex) {"},{"lineNumber":16,"author":{"gitId":"samuellleow"},"content":"        this.isHomeView \u003d isHomeView;"},{"lineNumber":17,"author":{"gitId":"samuellleow"},"content":"        this.projectIndex \u003d projectIndex;"},{"lineNumber":18,"author":{"gitId":"samuelchristopher"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":20,"author":{"gitId":"riazaham"},"content":"    public String executeCommand(ArrayList\u003cProject\u003e projects, ArrayList\u003cTeamMember\u003e teamMembers) {"},{"lineNumber":21,"author":{"gitId":"riazaham"},"content":"        if (teamMembers.size() \u003d\u003d 0) {"},{"lineNumber":22,"author":{"gitId":"samuelchristopher"},"content":"            return \"No team members have been added.\";"},{"lineNumber":23,"author":{"gitId":"samuelchristopher"},"content":"        }"},{"lineNumber":24,"author":{"gitId":"samuellleow"},"content":"        String listOfMembers \u003d \"List of members:              Project(s) Assigned:\";"},{"lineNumber":25,"author":{"gitId":"samuelchristopher"},"content":"        int i \u003d 0;"},{"lineNumber":26,"author":{"gitId":"samuellleow"},"content":"        int amountOfPadding \u003d 0;"},{"lineNumber":27,"author":{"gitId":"samuellleow"},"content":"        if (isHomeView) {"},{"lineNumber":28,"author":{"gitId":"riazaham"},"content":"            for (TeamMember member : teamMembers) {"},{"lineNumber":29,"author":{"gitId":"samuellleow"},"content":"                if (member.getName().length() \u003e 26) {"},{"lineNumber":30,"author":{"gitId":"samuellleow"},"content":"                    listOfMembers +\u003d \"\\n\" + (i + 1) + \". \" + member.getName().substring(0,26) + \" \";"},{"lineNumber":31,"author":{"gitId":"samuellleow"},"content":"                } else {"},{"lineNumber":32,"author":{"gitId":"samuellleow"},"content":"                    listOfMembers +\u003d \"\\n\" + String.format(\"%-30s\", (i + 1) + \". \" + member.getName());;"},{"lineNumber":33,"author":{"gitId":"samuellleow"},"content":"                }"},{"lineNumber":34,"author":{"gitId":"samuellleow"},"content":"                if (!member.getAssignedProjects().isEmpty()) {"},{"lineNumber":35,"author":{"gitId":"samuellleow"},"content":"                    for (int j \u003d 0; j \u003c member.getAssignedProjects().size(); j++) {"},{"lineNumber":36,"author":{"gitId":"samuellleow"},"content":"                        Project assignedProject \u003d member.getAssignedProjects().get(j);"},{"lineNumber":37,"author":{"gitId":"samuellleow"},"content":"                        if (j \u003d\u003d 0) {"},{"lineNumber":38,"author":{"gitId":"samuellleow"},"content":"                            listOfMembers +\u003d (j + 1) + \") \" + assignedProject.getProjectName();"},{"lineNumber":39,"author":{"gitId":"samuellleow"},"content":"                        } else {"},{"lineNumber":40,"author":{"gitId":"samuellleow"},"content":"                            amountOfPadding \u003d 33 + assignedProject.getProjectName().length();"},{"lineNumber":41,"author":{"gitId":"samuellleow"},"content":"                            listOfMembers +\u003d \"\\n\" + String.format(\"%1$\" + amountOfPadding + \"s\", (j + 1) + \") \""},{"lineNumber":42,"author":{"gitId":"samuellleow"},"content":"                                    + assignedProject.getProjectName());"},{"lineNumber":43,"author":{"gitId":"samuellleow"},"content":"                        }"},{"lineNumber":44,"author":{"gitId":"samuellleow"},"content":"                    }"},{"lineNumber":45,"author":{"gitId":"samuellleow"},"content":"                } else {"},{"lineNumber":46,"author":{"gitId":"samuellleow"},"content":"                    listOfMembers +\u003d \"Not assigned to a project\";"},{"lineNumber":47,"author":{"gitId":"samuellleow"},"content":"                }"},{"lineNumber":48,"author":{"gitId":"samuellleow"},"content":"                listOfMembers +\u003d System.lineSeparator();"},{"lineNumber":49,"author":{"gitId":"samuelchristopher"},"content":"                i++;"},{"lineNumber":50,"author":{"gitId":"samuelchristopher"},"content":"            }"},{"lineNumber":51,"author":{"gitId":"samuellleow"},"content":"        } else {"},{"lineNumber":52,"author":{"gitId":"samuellleow"},"content":"            ArrayList\u003cTeamMember\u003e teamMembersInSelectedProject \u003d projects.get(projectIndex).getTeamMembers();"},{"lineNumber":53,"author":{"gitId":"samuellleow"},"content":"            for (TeamMember member : teamMembersInSelectedProject) {"},{"lineNumber":54,"author":{"gitId":"samuellleow"},"content":"                listOfMembers +\u003d \"\\n\" + (i + 1) + \". \" + member.getName();"},{"lineNumber":55,"author":{"gitId":"samuellleow"},"content":"                i++;"},{"lineNumber":56,"author":{"gitId":"samuellleow"},"content":"            }"},{"lineNumber":57,"author":{"gitId":"samuellleow"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"samuelchristopher"},"content":"        return listOfMembers;"},{"lineNumber":59,"author":{"gitId":"samuelchristopher"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":61,"author":{"gitId":"samuelchristopher"},"content":"    public Boolean isExit() {"},{"lineNumber":62,"author":{"gitId":"samuelchristopher"},"content":"        return false;"},{"lineNumber":63,"author":{"gitId":"samuelchristopher"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"samuelchristopher"},"content":"}"}],"authorContributionMap":{"thatseant":4,"samuelchristopher":20,"samuellleow":35,"riazaham":5}},{"path":"src/main/java/seedu/ezmanager/commands/project/ProjectCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"thatseant"},"content":"package seedu.ezmanager.commands.project;"},{"lineNumber":2,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":3,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.EzExceptions;"},{"lineNumber":4,"author":{"gitId":"samuellleow"},"content":"import seedu.ezmanager.EzLogger;"},{"lineNumber":5,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.commands.Command;"},{"lineNumber":6,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.member.TeamMember;"},{"lineNumber":7,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.project.Project;"},{"lineNumber":8,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.ui.Ui;"},{"lineNumber":9,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":10,"author":{"gitId":"samuelchristopher"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitId":"riazaham"},"content":"import java.util.HashMap;"},{"lineNumber":12,"author":{"gitId":"samuellleow"},"content":"import java.util.logging.Level;"},{"lineNumber":13,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":14,"author":{"gitId":"thatseant"},"content":"import static seedu.ezmanager.Parser.getHashValue;"},{"lineNumber":15,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":16,"author":{"gitId":"samuellleow"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"samuellleow"},"content":" * Add a new Project object to the program."},{"lineNumber":18,"author":{"gitId":"samuellleow"},"content":" */"},{"lineNumber":19,"author":{"gitId":"samuellleow"},"content":"public class ProjectCommand extends Command {"},{"lineNumber":20,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":21,"author":{"gitId":"samuellleow"},"content":"    private String description;"},{"lineNumber":22,"author":{"gitId":"riazaham"},"content":"    HashMap\u003cString, String\u003e params;"},{"lineNumber":23,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":24,"author":{"gitId":"thatseant"},"content":"    public ProjectCommand(HashMap\u003cString, String\u003e params) throws EzExceptions {"},{"lineNumber":25,"author":{"gitId":"riazaham"},"content":"        this.params \u003d params;"},{"lineNumber":26,"author":{"gitId":"riazaham"},"content":"        this.parse();"},{"lineNumber":27,"author":{"gitId":"riazaham"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":29,"author":{"gitId":"thatseant"},"content":"    public void parse() throws EzExceptions {"},{"lineNumber":30,"author":{"gitId":"riazaham"},"content":"        this.description \u003d getHashValue(params, \"n\");"},{"lineNumber":31,"author":{"gitId":"samuellleow"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":33,"author":{"gitId":"samuellleow"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"samuellleow"},"content":"     * Adds a new Project object into the ArrayList of Projects."},{"lineNumber":35,"author":{"gitId":"samuellleow"},"content":"     * Prints project created message."},{"lineNumber":36,"author":{"gitId":"samuellleow"},"content":"     *"},{"lineNumber":37,"author":{"gitId":"samuellleow"},"content":"     * @param projects ArrayList of Projects."},{"lineNumber":38,"author":{"gitId":"samuellleow"},"content":"     * @param teamMembers ArrayList of TeamMembers in the program."},{"lineNumber":39,"author":{"gitId":"samuellleow"},"content":"     * @return Prints project created message."},{"lineNumber":40,"author":{"gitId":"samuellleow"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"riazaham"},"content":"    public String executeCommand(ArrayList\u003cProject\u003e projects, ArrayList\u003cTeamMember\u003e teamMembers) {"},{"lineNumber":42,"author":{"gitId":"samuellleow"},"content":"        assert description !\u003d null : \"description should not be null\";"},{"lineNumber":43,"author":{"gitId":"samuelchristopher"},"content":"        Project newProject \u003d new Project(description);"},{"lineNumber":44,"author":{"gitId":"samuelchristopher"},"content":"        projects.add(newProject);"},{"lineNumber":45,"author":{"gitId":"samuellleow"},"content":"        EzLogger.log(Level.INFO, \"New Project added\");"},{"lineNumber":46,"author":{"gitId":"samuellleow"},"content":"        return Ui.printProjectCreatedMessage(newProject.getProjectName());"},{"lineNumber":47,"author":{"gitId":"samuellleow"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":49,"author":{"gitId":"samuellleow"},"content":"    public Boolean isExit() {"},{"lineNumber":50,"author":{"gitId":"samuellleow"},"content":"        return false;"},{"lineNumber":51,"author":{"gitId":"samuellleow"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"samuellleow"},"content":"}"}],"authorContributionMap":{"thatseant":9,"samuelchristopher":4,"samuellleow":29,"riazaham":10}},{"path":"src/main/java/seedu/ezmanager/commands/project/ProjectDeadlineCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"thatseant"},"content":"package seedu.ezmanager.commands.project;"},{"lineNumber":2,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":3,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.EzExceptions;"},{"lineNumber":4,"author":{"gitId":"samuellleow"},"content":"import seedu.ezmanager.EzLogger;"},{"lineNumber":5,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.commands.Command;"},{"lineNumber":6,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.member.TeamMember;"},{"lineNumber":7,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.project.Project;"},{"lineNumber":8,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.ui.Ui;"},{"lineNumber":9,"author":{"gitId":"samuellleow"},"content":"import static seedu.ezmanager.Util.INDEX_NON_INTEGER;"},{"lineNumber":10,"author":{"gitId":"samuellleow"},"content":"import static seedu.ezmanager.Util.WRONG_DATE_FORMAT;"},{"lineNumber":11,"author":{"gitId":"samuellleow"},"content":"import static seedu.ezmanager.Util.INVALID_PROJECT_ID;"},{"lineNumber":12,"author":{"gitId":"samuellleow"},"content":"import java.time.LocalDate;"},{"lineNumber":13,"author":{"gitId":"samuellleow"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":14,"author":{"gitId":"samuellleow"},"content":"import java.util.ArrayList;"},{"lineNumber":15,"author":{"gitId":"samuellleow"},"content":"import java.util.Collections;"},{"lineNumber":16,"author":{"gitId":"riazaham"},"content":"import java.util.HashMap;"},{"lineNumber":17,"author":{"gitId":"samuellleow"},"content":"import java.util.logging.Level;"},{"lineNumber":18,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":19,"author":{"gitId":"thatseant"},"content":"import static seedu.ezmanager.Parser.getHashValue;"},{"lineNumber":20,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":21,"author":{"gitId":"samuellleow"},"content":"/**"},{"lineNumber":22,"author":{"gitId":"samuellleow"},"content":" * Add deadline to a specified Project object."},{"lineNumber":23,"author":{"gitId":"samuellleow"},"content":" */"},{"lineNumber":24,"author":{"gitId":"samuellleow"},"content":"public class ProjectDeadlineCommand extends Command {"},{"lineNumber":25,"author":{"gitId":"samuellleow"},"content":"    private int projectIndex;"},{"lineNumber":26,"author":{"gitId":"samuellleow"},"content":"    private LocalDate date;"},{"lineNumber":27,"author":{"gitId":"riazaham"},"content":"    HashMap\u003cString, String\u003e params;"},{"lineNumber":28,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":29,"author":{"gitId":"thatseant"},"content":"    public ProjectDeadlineCommand(HashMap\u003cString, String\u003e params) throws EzExceptions {"},{"lineNumber":30,"author":{"gitId":"riazaham"},"content":"        this.params \u003d params;"},{"lineNumber":31,"author":{"gitId":"riazaham"},"content":"        this.parse();"},{"lineNumber":32,"author":{"gitId":"riazaham"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":34,"author":{"gitId":"samuellleow"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"samuellleow"},"content":"     * Parse user parameter inputs for execution."},{"lineNumber":36,"author":{"gitId":"samuellleow"},"content":"     *"},{"lineNumber":37,"author":{"gitId":"samuellleow"},"content":"     * @throws EzExceptions Invalid index when parameter values entered is not an integer."},{"lineNumber":38,"author":{"gitId":"samuellleow"},"content":"     *     Invalid DateTime format when parameter values entered is not in YYYY-MM-DD format."},{"lineNumber":39,"author":{"gitId":"samuellleow"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"thatseant"},"content":"    public void parse() throws EzExceptions {"},{"lineNumber":41,"author":{"gitId":"riazaham"},"content":"        try {"},{"lineNumber":42,"author":{"gitId":"riazaham"},"content":"            projectIndex \u003d Integer.parseInt(getHashValue(params, \"p\")) - 1;"},{"lineNumber":43,"author":{"gitId":"riazaham"},"content":"            date \u003d LocalDate.parse(getHashValue(params, \"d\"));"},{"lineNumber":44,"author":{"gitId":"riazaham"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":45,"author":{"gitId":"samuellleow"},"content":"            EzLogger.log(Level.WARNING, INDEX_NON_INTEGER);"},{"lineNumber":46,"author":{"gitId":"samuellleow"},"content":"            throw new EzExceptions(INDEX_NON_INTEGER);"},{"lineNumber":47,"author":{"gitId":"riazaham"},"content":"        } catch (StringIndexOutOfBoundsException | DateTimeParseException e) {"},{"lineNumber":48,"author":{"gitId":"samuellleow"},"content":"            EzLogger.log(Level.WARNING, \"Wrong date format\");"},{"lineNumber":49,"author":{"gitId":"samuellleow"},"content":"            throw new EzExceptions(WRONG_DATE_FORMAT);"},{"lineNumber":50,"author":{"gitId":"riazaham"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"samuellleow"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":53,"author":{"gitId":"samuellleow"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"samuellleow"},"content":"     * Add deadline to a specified project."},{"lineNumber":55,"author":{"gitId":"samuellleow"},"content":"     * 1. Sorts the ArrayList of Projects by deadline."},{"lineNumber":56,"author":{"gitId":"samuellleow"},"content":"     * 2. Projects without deadline will be shifted to the back of the list."},{"lineNumber":57,"author":{"gitId":"samuellleow"},"content":"     * 3. Prints project deadline added message as well as new home view display."},{"lineNumber":58,"author":{"gitId":"samuellleow"},"content":"     *"},{"lineNumber":59,"author":{"gitId":"samuellleow"},"content":"     * @param projects ArrayList of Projects."},{"lineNumber":60,"author":{"gitId":"samuellleow"},"content":"     * @param teamMembers ArrayList of TeamMembers in the program."},{"lineNumber":61,"author":{"gitId":"samuellleow"},"content":"     * @return Prints project deadline added message together with new home view display."},{"lineNumber":62,"author":{"gitId":"samuellleow"},"content":"     * @throws EzExceptions Invalid Project ID when parameter values provided"},{"lineNumber":63,"author":{"gitId":"samuellleow"},"content":"     *     is outside the range of the Project list."},{"lineNumber":64,"author":{"gitId":"samuellleow"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"riazaham"},"content":"    public String executeCommand(ArrayList\u003cProject\u003e projects,"},{"lineNumber":66,"author":{"gitId":"thatseant"},"content":"                                 ArrayList\u003cTeamMember\u003e teamMembers) throws EzExceptions {"},{"lineNumber":67,"author":{"gitId":"samuellleow"},"content":"        try {"},{"lineNumber":68,"author":{"gitId":"samuellleow"},"content":"            Project project \u003d projects.get(projectIndex);"},{"lineNumber":69,"author":{"gitId":"samuellleow"},"content":"            project.addProjectDeadline(date);"},{"lineNumber":70,"author":{"gitId":"samuellleow"},"content":"            EzLogger.log(Level.INFO, \"Deadline added to Project\");"},{"lineNumber":71,"author":{"gitId":"samuellleow"},"content":"            projects \u003d shiftProjectWithNoDeadlineToBackOfList(projects);"},{"lineNumber":72,"author":{"gitId":"samuellleow"},"content":"            EzLogger.log(Level.INFO, \"Project with no deadline shifted to the back\");"},{"lineNumber":73,"author":{"gitId":"samuellleow"},"content":"            Collections.sort(projects);"},{"lineNumber":74,"author":{"gitId":"samuellleow"},"content":"            EzLogger.log(Level.INFO, \"Project sorted by deadline\");"},{"lineNumber":75,"author":{"gitId":"samuellleow"},"content":"            return Ui.printProjectDeadlineAddedMessage(projects, project, date, teamMembers);"},{"lineNumber":76,"author":{"gitId":"samuellleow"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":77,"author":{"gitId":"samuellleow"},"content":"            EzLogger.log(Level.WARNING, \"Invalid project ID\");"},{"lineNumber":78,"author":{"gitId":"samuellleow"},"content":"            throw new EzExceptions(INVALID_PROJECT_ID);"},{"lineNumber":79,"author":{"gitId":"samuellleow"},"content":"        }"},{"lineNumber":80,"author":{"gitId":"samuellleow"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":82,"author":{"gitId":"samuellleow"},"content":"    private ArrayList\u003cProject\u003e shiftProjectWithNoDeadlineToBackOfList(ArrayList\u003cProject\u003e projects) {"},{"lineNumber":83,"author":{"gitId":"samuellleow"},"content":"        int projectCounter \u003d 0;"},{"lineNumber":84,"author":{"gitId":"samuellleow"},"content":"        int i \u003d 0;"},{"lineNumber":85,"author":{"gitId":"samuellleow"},"content":"        while (projectCounter \u003c projects.size()) {"},{"lineNumber":86,"author":{"gitId":"samuellleow"},"content":"            if (projects.get(i).getProjectDeadline() \u003d\u003d null) {"},{"lineNumber":87,"author":{"gitId":"samuellleow"},"content":"                Project projectWithNullDeadline \u003d projects.get(i);"},{"lineNumber":88,"author":{"gitId":"samuellleow"},"content":"                projects.remove(i);"},{"lineNumber":89,"author":{"gitId":"samuellleow"},"content":"                projects.add(projectWithNullDeadline);"},{"lineNumber":90,"author":{"gitId":"samuellleow"},"content":"            } else {"},{"lineNumber":91,"author":{"gitId":"samuellleow"},"content":"                i++;"},{"lineNumber":92,"author":{"gitId":"samuellleow"},"content":"            }"},{"lineNumber":93,"author":{"gitId":"samuellleow"},"content":"            projectCounter++;"},{"lineNumber":94,"author":{"gitId":"samuellleow"},"content":"        }"},{"lineNumber":95,"author":{"gitId":"samuellleow"},"content":"        return projects;"},{"lineNumber":96,"author":{"gitId":"samuellleow"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":98,"author":{"gitId":"samuellleow"},"content":"    public Boolean isExit() {"},{"lineNumber":99,"author":{"gitId":"samuellleow"},"content":"        return false;"},{"lineNumber":100,"author":{"gitId":"samuellleow"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":102,"author":{"gitId":"samuellleow"},"content":"}"}],"authorContributionMap":{"thatseant":10,"samuellleow":78,"riazaham":14}},{"path":"src/main/java/seedu/ezmanager/commands/project/ProjectDeleteCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"thatseant"},"content":"package seedu.ezmanager.commands.project;"},{"lineNumber":2,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":3,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.EzExceptions;"},{"lineNumber":4,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.commands.Command;"},{"lineNumber":5,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.member.TeamMember;"},{"lineNumber":6,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.project.Project;"},{"lineNumber":7,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.ui.Ui;"},{"lineNumber":8,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":9,"author":{"gitId":"riazaham"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitId":"riazaham"},"content":"import java.util.HashMap;"},{"lineNumber":11,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":12,"author":{"gitId":"thatseant"},"content":"import static seedu.ezmanager.Parser.getHashValue;"},{"lineNumber":13,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":14,"author":{"gitId":"samuellleow"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"samuellleow"},"content":" * Deletes a specified Project object from the program."},{"lineNumber":16,"author":{"gitId":"samuellleow"},"content":" */"},{"lineNumber":17,"author":{"gitId":"riazaham"},"content":"public class ProjectDeleteCommand extends Command {"},{"lineNumber":18,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":19,"author":{"gitId":"riazaham"},"content":"    private int projectIndex;"},{"lineNumber":20,"author":{"gitId":"riazaham"},"content":"    HashMap\u003cString, String\u003e params;"},{"lineNumber":21,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":22,"author":{"gitId":"riazaham"},"content":"    public ProjectDeleteCommand(HashMap\u003cString, String\u003e params)"},{"lineNumber":23,"author":{"gitId":"thatseant"},"content":"            throws EzExceptions {"},{"lineNumber":24,"author":{"gitId":"riazaham"},"content":"        this.params \u003d params;"},{"lineNumber":25,"author":{"gitId":"riazaham"},"content":"        this.parse();"},{"lineNumber":26,"author":{"gitId":"riazaham"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":28,"author":{"gitId":"samuellleow"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"samuellleow"},"content":"     * Parse user parameter inputs for execution."},{"lineNumber":30,"author":{"gitId":"samuellleow"},"content":"     *"},{"lineNumber":31,"author":{"gitId":"samuellleow"},"content":"     * @throws EzExceptions Invalid index when parameter values entered is not an integer."},{"lineNumber":32,"author":{"gitId":"samuellleow"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"thatseant"},"content":"    public void parse() throws EzExceptions {"},{"lineNumber":34,"author":{"gitId":"riazaham"},"content":"        try {"},{"lineNumber":35,"author":{"gitId":"riazaham"},"content":"            projectIndex \u003d Integer.parseInt(getHashValue(params, \"p\")) - 1;"},{"lineNumber":36,"author":{"gitId":"samuellleow"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":37,"author":{"gitId":"samuellleow"},"content":"            throw new EzExceptions(\"indexNonInteger\");"},{"lineNumber":38,"author":{"gitId":"riazaham"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"riazaham"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":41,"author":{"gitId":"samuellleow"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"samuellleow"},"content":"     * Deletes a Project from the ArrayList of Projects."},{"lineNumber":43,"author":{"gitId":"samuellleow"},"content":"     * 1. Removes the Project object from the ArrayList of Projects of each assigned TeamMember."},{"lineNumber":44,"author":{"gitId":"samuellleow"},"content":"     * 2. Print project deleted message."},{"lineNumber":45,"author":{"gitId":"samuellleow"},"content":"     *"},{"lineNumber":46,"author":{"gitId":"samuellleow"},"content":"     * @param projects ArrayList of Projects."},{"lineNumber":47,"author":{"gitId":"samuellleow"},"content":"     * @param teamMembers ArrayList of TeamMembers in the program."},{"lineNumber":48,"author":{"gitId":"samuellleow"},"content":"     * @return Prints project deleted message."},{"lineNumber":49,"author":{"gitId":"samuellleow"},"content":"     * @throws EzExceptions Invalid Project ID if when parameter values provided is outside"},{"lineNumber":50,"author":{"gitId":"samuellleow"},"content":"     *     the range of the Project list."},{"lineNumber":51,"author":{"gitId":"samuellleow"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"thatseant"},"content":"    public String executeCommand(ArrayList\u003cProject\u003e projects, ArrayList\u003cTeamMember\u003e teamMembers) throws EzExceptions {"},{"lineNumber":53,"author":{"gitId":"riazaham"},"content":"        if (projects.size() \u003d\u003d 0) {"},{"lineNumber":54,"author":{"gitId":"thatseant"},"content":"            throw new EzExceptions(\"emptyProjectList\");"},{"lineNumber":55,"author":{"gitId":"riazaham"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"riazaham"},"content":"        try {"},{"lineNumber":57,"author":{"gitId":"riazaham"},"content":"            Project projectToBeDeleted \u003d projects.get(projectIndex);"},{"lineNumber":58,"author":{"gitId":"riazaham"},"content":"            projects.remove(projectIndex);"},{"lineNumber":59,"author":{"gitId":"samuellleow"},"content":"            ArrayList\u003cTeamMember\u003e membersInProjectToBeDeleted \u003d projectToBeDeleted.getTeamMembers();"},{"lineNumber":60,"author":{"gitId":"samuellleow"},"content":"            for (TeamMember member : membersInProjectToBeDeleted) {"},{"lineNumber":61,"author":{"gitId":"samuellleow"},"content":"                member.getAssignedProjects().remove(projectToBeDeleted);"},{"lineNumber":62,"author":{"gitId":"samuellleow"},"content":"            }"},{"lineNumber":63,"author":{"gitId":"riazaham"},"content":"            return Ui.printProjectDeletedMessage(projectToBeDeleted);"},{"lineNumber":64,"author":{"gitId":"samuellleow"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":65,"author":{"gitId":"thatseant"},"content":"            throw new EzExceptions(\"invalidProjectID\");"},{"lineNumber":66,"author":{"gitId":"riazaham"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"riazaham"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":69,"author":{"gitId":"riazaham"},"content":"    public Boolean isExit() {"},{"lineNumber":70,"author":{"gitId":"riazaham"},"content":"        return false;"},{"lineNumber":71,"author":{"gitId":"riazaham"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"riazaham"},"content":"}"}],"authorContributionMap":{"thatseant":12,"samuellleow":26,"riazaham":34}},{"path":"src/main/java/seedu/ezmanager/commands/project/ProjectDescriptionCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"thatseant"},"content":"package seedu.ezmanager.commands.project;"},{"lineNumber":2,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":3,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.EzExceptions;"},{"lineNumber":4,"author":{"gitId":"samuellleow"},"content":"import seedu.ezmanager.EzLogger;"},{"lineNumber":5,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.commands.Command;"},{"lineNumber":6,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.member.TeamMember;"},{"lineNumber":7,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.project.Project;"},{"lineNumber":8,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.ui.Ui;"},{"lineNumber":9,"author":{"gitId":"samuellleow"},"content":"import static seedu.ezmanager.Util.INDEX_NON_INTEGER;"},{"lineNumber":10,"author":{"gitId":"samuellleow"},"content":"import static seedu.ezmanager.Util.INVALID_PROJECT_ID;"},{"lineNumber":11,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":12,"author":{"gitId":"samuelchristopher"},"content":"import java.util.ArrayList;"},{"lineNumber":13,"author":{"gitId":"riazaham"},"content":"import java.util.HashMap;"},{"lineNumber":14,"author":{"gitId":"samuellleow"},"content":"import java.util.logging.Level;"},{"lineNumber":15,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":16,"author":{"gitId":"thatseant"},"content":"import static seedu.ezmanager.Parser.getHashValue;"},{"lineNumber":17,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":18,"author":{"gitId":"samuellleow"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"samuellleow"},"content":" * Adds a project description to a specified Project object."},{"lineNumber":20,"author":{"gitId":"samuellleow"},"content":" */"},{"lineNumber":21,"author":{"gitId":"samuellleow"},"content":"public class ProjectDescriptionCommand extends Command {"},{"lineNumber":22,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":23,"author":{"gitId":"samuellleow"},"content":"    private String projectDescription;"},{"lineNumber":24,"author":{"gitId":"samuellleow"},"content":"    private int projectIndex;"},{"lineNumber":25,"author":{"gitId":"riazaham"},"content":"    HashMap\u003cString, String\u003e params;"},{"lineNumber":26,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":27,"author":{"gitId":"thatseant"},"content":"    public ProjectDescriptionCommand(HashMap\u003cString, String\u003e params) throws EzExceptions {"},{"lineNumber":28,"author":{"gitId":"riazaham"},"content":"        this.params \u003d params;"},{"lineNumber":29,"author":{"gitId":"riazaham"},"content":"        this.parse();"},{"lineNumber":30,"author":{"gitId":"riazaham"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":32,"author":{"gitId":"samuellleow"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"samuellleow"},"content":"     * Parse user parameter inputs for execution."},{"lineNumber":34,"author":{"gitId":"samuellleow"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"samuellleow"},"content":"     * @throws EzExceptions Invalid index when parameter values entered is not an integer."},{"lineNumber":36,"author":{"gitId":"samuellleow"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"thatseant"},"content":"    public void parse() throws EzExceptions {"},{"lineNumber":38,"author":{"gitId":"riazaham"},"content":"        projectDescription \u003d getHashValue(params, \"d\");"},{"lineNumber":39,"author":{"gitId":"samuellleow"},"content":"        try {"},{"lineNumber":40,"author":{"gitId":"thatseant"},"content":"            projectIndex \u003d Integer.parseInt(getHashValue(params, \"p\")) - 1;"},{"lineNumber":41,"author":{"gitId":"samuellleow"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":42,"author":{"gitId":"samuellleow"},"content":"            EzLogger.log(Level.WARNING, \"Input not an integer\");"},{"lineNumber":43,"author":{"gitId":"samuellleow"},"content":"            throw new EzExceptions(INDEX_NON_INTEGER);"},{"lineNumber":44,"author":{"gitId":"thatseant"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"samuellleow"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":47,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":48,"author":{"gitId":"samuellleow"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"samuellleow"},"content":"     * Add project description to specified Project object."},{"lineNumber":50,"author":{"gitId":"samuellleow"},"content":"     * Print project description added message."},{"lineNumber":51,"author":{"gitId":"samuellleow"},"content":"     *"},{"lineNumber":52,"author":{"gitId":"samuellleow"},"content":"     * @param projects ArrayList of Projects."},{"lineNumber":53,"author":{"gitId":"samuellleow"},"content":"     * @param teamMembers ArrayList of TeamMembers in the program."},{"lineNumber":54,"author":{"gitId":"samuellleow"},"content":"     * @return Print project description added message."},{"lineNumber":55,"author":{"gitId":"samuellleow"},"content":"     * @throws EzExceptions Invalid Project ID if when parameter values provided is outside"},{"lineNumber":56,"author":{"gitId":"samuellleow"},"content":"     *     the range of the Project list."},{"lineNumber":57,"author":{"gitId":"samuellleow"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"thatseant"},"content":"    public String executeCommand(ArrayList\u003cProject\u003e projects, ArrayList\u003cTeamMember\u003e teamMembers) throws EzExceptions {"},{"lineNumber":59,"author":{"gitId":"samuellleow"},"content":"        try {"},{"lineNumber":60,"author":{"gitId":"samuelchristopher"},"content":"            Project project \u003d projects.get(projectIndex);"},{"lineNumber":61,"author":{"gitId":"samuellleow"},"content":"            EzLogger.log(Level.INFO, \"Project Retrieved\");"},{"lineNumber":62,"author":{"gitId":"samuellleow"},"content":"            project.addDescription(projectDescription);"},{"lineNumber":63,"author":{"gitId":"samuellleow"},"content":"            EzLogger.log(Level.INFO, \"Description added to project\");"},{"lineNumber":64,"author":{"gitId":"samuellleow"},"content":"            return Ui.printProjectDescriptionAddedMessage(project);"},{"lineNumber":65,"author":{"gitId":"samuellleow"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":66,"author":{"gitId":"samuellleow"},"content":"            EzLogger.log(Level.WARNING, \"Invalid project ID\");"},{"lineNumber":67,"author":{"gitId":"samuellleow"},"content":"            throw new EzExceptions(INVALID_PROJECT_ID);"},{"lineNumber":68,"author":{"gitId":"samuellleow"},"content":"        }"},{"lineNumber":69,"author":{"gitId":"samuellleow"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":71,"author":{"gitId":"samuellleow"},"content":"    public Boolean isExit() {"},{"lineNumber":72,"author":{"gitId":"samuellleow"},"content":"        return false;"},{"lineNumber":73,"author":{"gitId":"samuellleow"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"samuellleow"},"content":"}"}],"authorContributionMap":{"thatseant":12,"samuelchristopher":3,"samuellleow":51,"riazaham":8}},{"path":"src/main/java/seedu/ezmanager/commands/project/ProjectDoneCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"thatseant"},"content":"package seedu.ezmanager.commands.project;"},{"lineNumber":2,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":3,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.EzExceptions;"},{"lineNumber":4,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.commands.Command;"},{"lineNumber":5,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.member.TeamMember;"},{"lineNumber":6,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.project.Project;"},{"lineNumber":7,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.ui.Ui;"},{"lineNumber":8,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":9,"author":{"gitId":"samuelchristopher"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitId":"samuelchristopher"},"content":"import java.util.HashMap;"},{"lineNumber":11,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":12,"author":{"gitId":"thatseant"},"content":"import static seedu.ezmanager.Parser.getHashValue;"},{"lineNumber":13,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":14,"author":{"gitId":"samuellleow"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"samuellleow"},"content":" * Mark a specified Project object as done."},{"lineNumber":16,"author":{"gitId":"samuellleow"},"content":" */"},{"lineNumber":17,"author":{"gitId":"samuelchristopher"},"content":"public class ProjectDoneCommand extends Command {"},{"lineNumber":18,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":19,"author":{"gitId":"samuelchristopher"},"content":"    private int projectIndex;"},{"lineNumber":20,"author":{"gitId":"samuelchristopher"},"content":"    HashMap\u003cString, String\u003e params;"},{"lineNumber":21,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":22,"author":{"gitId":"thatseant"},"content":"    public ProjectDoneCommand(HashMap\u003cString, String\u003e params, int projectIndex) throws EzExceptions {"},{"lineNumber":23,"author":{"gitId":"samuelchristopher"},"content":"        this.params \u003d params;"},{"lineNumber":24,"author":{"gitId":"samuelchristopher"},"content":"        this.parse();"},{"lineNumber":25,"author":{"gitId":"samuelchristopher"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":27,"author":{"gitId":"samuellleow"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"samuellleow"},"content":"     * Parse user parameter inputs for execution."},{"lineNumber":29,"author":{"gitId":"samuellleow"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"samuellleow"},"content":"     * @throws EzExceptions Invalid index when parameter values entered is not an integer."},{"lineNumber":31,"author":{"gitId":"samuellleow"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"thatseant"},"content":"    public void parse() throws EzExceptions {"},{"lineNumber":33,"author":{"gitId":"samuelchristopher"},"content":"        try {"},{"lineNumber":34,"author":{"gitId":"samuelchristopher"},"content":"            projectIndex \u003d Integer.parseInt(getHashValue(params, \"p\")) - 1;"},{"lineNumber":35,"author":{"gitId":"samuelchristopher"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":36,"author":{"gitId":"samuellleow"},"content":"            throw new EzExceptions(\"indexNonInteger\");"},{"lineNumber":37,"author":{"gitId":"samuelchristopher"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"samuelchristopher"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":40,"author":{"gitId":"samuellleow"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"samuellleow"},"content":"     * Mark specified Project object as done."},{"lineNumber":42,"author":{"gitId":"samuellleow"},"content":"     * Print project marked as done message."},{"lineNumber":43,"author":{"gitId":"samuellleow"},"content":"     *"},{"lineNumber":44,"author":{"gitId":"samuellleow"},"content":"     * @param projects ArrayList of Projects."},{"lineNumber":45,"author":{"gitId":"samuellleow"},"content":"     * @param members ArrayList of TeamMembers in the program."},{"lineNumber":46,"author":{"gitId":"samuellleow"},"content":"     * @return Prints project marked as done message."},{"lineNumber":47,"author":{"gitId":"samuellleow"},"content":"     * @throws EzExceptions Invalid Project ID if when parameter values provided is outside"},{"lineNumber":48,"author":{"gitId":"samuellleow"},"content":"     *     the range of the Project list."},{"lineNumber":49,"author":{"gitId":"samuellleow"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"riazaham"},"content":"    public String executeCommand(ArrayList\u003cProject\u003e projects,"},{"lineNumber":51,"author":{"gitId":"thatseant"},"content":"                                 ArrayList\u003cTeamMember\u003e members) throws EzExceptions {"},{"lineNumber":52,"author":{"gitId":"samuelchristopher"},"content":"        try {"},{"lineNumber":53,"author":{"gitId":"samuelchristopher"},"content":"            Project project \u003d projects.get(projectIndex);"},{"lineNumber":54,"author":{"gitId":"samuelchristopher"},"content":"            project.markAsDone();"},{"lineNumber":55,"author":{"gitId":"samuelchristopher"},"content":"            return Ui.printProjectDoneMessage(project.getProjectName());"},{"lineNumber":56,"author":{"gitId":"samuelchristopher"},"content":"        }  catch (NumberFormatException | IndexOutOfBoundsException e) {"},{"lineNumber":57,"author":{"gitId":"thatseant"},"content":"            throw new EzExceptions(\"invalidProjectID\");"},{"lineNumber":58,"author":{"gitId":"samuelchristopher"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"samuelchristopher"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":61,"author":{"gitId":"samuelchristopher"},"content":"    public Boolean isExit() {"},{"lineNumber":62,"author":{"gitId":"samuelchristopher"},"content":"        return false;"},{"lineNumber":63,"author":{"gitId":"samuelchristopher"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":65,"author":{"gitId":"samuelchristopher"},"content":"    @Override"},{"lineNumber":66,"author":{"gitId":"samuelchristopher"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":67,"author":{"gitId":"samuelchristopher"},"content":"        if (obj instanceof ProjectDoneCommand) {"},{"lineNumber":68,"author":{"gitId":"samuelchristopher"},"content":"            ProjectDoneCommand taskCommand \u003d (ProjectDoneCommand) obj;"},{"lineNumber":69,"author":{"gitId":"samuelchristopher"},"content":"            return (this.projectIndex \u003d\u003d taskCommand.projectIndex);"},{"lineNumber":70,"author":{"gitId":"samuelchristopher"},"content":"        } else {"},{"lineNumber":71,"author":{"gitId":"samuelchristopher"},"content":"            return false;"},{"lineNumber":72,"author":{"gitId":"samuelchristopher"},"content":"        }"},{"lineNumber":73,"author":{"gitId":"samuelchristopher"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"samuelchristopher"},"content":"}"}],"authorContributionMap":{"thatseant":11,"samuelchristopher":43,"samuellleow":19,"riazaham":1}},{"path":"src/main/java/seedu/ezmanager/commands/project/ProjectSelectCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"thatseant"},"content":"package seedu.ezmanager.commands.project;"},{"lineNumber":2,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":3,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.EzExceptions;"},{"lineNumber":4,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.Parser;"},{"lineNumber":5,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.commands.Command;"},{"lineNumber":6,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.member.TeamMember;"},{"lineNumber":7,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.project.Project;"},{"lineNumber":8,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.ui.Ui;"},{"lineNumber":9,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":10,"author":{"gitId":"samuelchristopher"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitId":"riazaham"},"content":"import java.util.HashMap;"},{"lineNumber":12,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":13,"author":{"gitId":"thatseant"},"content":"import static seedu.ezmanager.Parser.getHashValue;"},{"lineNumber":14,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":15,"author":{"gitId":"samuellleow"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"samuellleow"},"content":" * Selects a specified Project object and moves into the project view of that project."},{"lineNumber":17,"author":{"gitId":"samuellleow"},"content":" */"},{"lineNumber":18,"author":{"gitId":"thatseant"},"content":"public class ProjectSelectCommand extends Command {"},{"lineNumber":19,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":20,"author":{"gitId":"samuelchristopher"},"content":"    private int projectIndex;"},{"lineNumber":21,"author":{"gitId":"riazaham"},"content":"    HashMap\u003cString, String\u003e params;"},{"lineNumber":22,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":23,"author":{"gitId":"thatseant"},"content":"    public ProjectSelectCommand(HashMap\u003cString, String\u003e params) throws EzExceptions {"},{"lineNumber":24,"author":{"gitId":"riazaham"},"content":"        this.params \u003d params;"},{"lineNumber":25,"author":{"gitId":"riazaham"},"content":"        this.parse();"},{"lineNumber":26,"author":{"gitId":"samuellleow"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":28,"author":{"gitId":"samuellleow"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"samuellleow"},"content":"     * Parse user parameter inputs for execution."},{"lineNumber":30,"author":{"gitId":"samuellleow"},"content":"     *"},{"lineNumber":31,"author":{"gitId":"samuellleow"},"content":"     * @throws EzExceptions Invalid index when parameter values entered is not an integer."},{"lineNumber":32,"author":{"gitId":"samuellleow"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"thatseant"},"content":"    public void parse() throws EzExceptions {"},{"lineNumber":34,"author":{"gitId":"samuellleow"},"content":"        try {"},{"lineNumber":35,"author":{"gitId":"riazaham"},"content":"            projectIndex \u003d Integer.parseInt(getHashValue(params, \"p\")) - 1;"},{"lineNumber":36,"author":{"gitId":"samuellleow"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":37,"author":{"gitId":"samuellleow"},"content":"            throw new EzExceptions(\"indexNonInteger\");"},{"lineNumber":38,"author":{"gitId":"samuelchristopher"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"samuellleow"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":41,"author":{"gitId":"samuellleow"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"samuellleow"},"content":"     * Selects a specified Project object and move into its project view."},{"lineNumber":43,"author":{"gitId":"samuellleow"},"content":"     * 1. Set projectIndex in Parser class with the new project index."},{"lineNumber":44,"author":{"gitId":"samuellleow"},"content":"     * 2. Prints project view."},{"lineNumber":45,"author":{"gitId":"samuellleow"},"content":"     *"},{"lineNumber":46,"author":{"gitId":"samuellleow"},"content":"     * @param projects ArrayList of Projects."},{"lineNumber":47,"author":{"gitId":"samuellleow"},"content":"     * @param teamMembers ArrayList of TeamMembers in the program."},{"lineNumber":48,"author":{"gitId":"samuellleow"},"content":"     * @return Prints project view."},{"lineNumber":49,"author":{"gitId":"samuellleow"},"content":"     * @throws EzExceptions Empty project list if the ArrayList of Project is empty"},{"lineNumber":50,"author":{"gitId":"samuellleow"},"content":"     *     or Invalid Project ID if when parameter values provided is outside"},{"lineNumber":51,"author":{"gitId":"samuellleow"},"content":"     *     the range of the Project list."},{"lineNumber":52,"author":{"gitId":"samuellleow"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"thatseant"},"content":"    public String executeCommand(ArrayList\u003cProject\u003e projects, ArrayList\u003cTeamMember\u003e teamMembers) throws EzExceptions {"},{"lineNumber":54,"author":{"gitId":"riazaham"},"content":"        if (projects.size() \u003d\u003d 0) {"},{"lineNumber":55,"author":{"gitId":"thatseant"},"content":"            throw new EzExceptions(\"emptyProjectList\");"},{"lineNumber":56,"author":{"gitId":"samuellleow"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"samuellleow"},"content":"        try {"},{"lineNumber":58,"author":{"gitId":"riazaham"},"content":"            Project selectedProject \u003d projects.get(projectIndex);"},{"lineNumber":59,"author":{"gitId":"thatseant"},"content":"            Parser.setProjectIndex(projectIndex);"},{"lineNumber":60,"author":{"gitId":"samuelchristopher"},"content":"            String projectView \u003d Ui.projectViewMessage(selectedProject);"},{"lineNumber":61,"author":{"gitId":"samuelchristopher"},"content":"            return projectView;"},{"lineNumber":62,"author":{"gitId":"samuellleow"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":63,"author":{"gitId":"thatseant"},"content":"            throw new EzExceptions(\"invalidProjectID\");"},{"lineNumber":64,"author":{"gitId":"samuellleow"},"content":"        }"},{"lineNumber":65,"author":{"gitId":"samuellleow"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":67,"author":{"gitId":"samuellleow"},"content":"    public Boolean isExit() {"},{"lineNumber":68,"author":{"gitId":"samuellleow"},"content":"        return false;"},{"lineNumber":69,"author":{"gitId":"samuellleow"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":71,"author":{"gitId":"samuellleow"},"content":"}"}],"authorContributionMap":{"thatseant":15,"samuelchristopher":6,"samuellleow":40,"riazaham":10}},{"path":"src/main/java/seedu/ezmanager/commands/task/ActualTimeCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"thatseant"},"content":"//@@author thatseant"},{"lineNumber":2,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":3,"author":{"gitId":"thatseant"},"content":"package seedu.ezmanager.commands.task;"},{"lineNumber":4,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":5,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.EzLogger;"},{"lineNumber":6,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.Util;"},{"lineNumber":7,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.EzExceptions;"},{"lineNumber":8,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.commands.Command;"},{"lineNumber":9,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.member.TeamMember;"},{"lineNumber":10,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.project.Project;"},{"lineNumber":11,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.task.Task;"},{"lineNumber":12,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.ui.Ui;"},{"lineNumber":13,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":14,"author":{"gitId":"thatseant"},"content":"import java.util.ArrayList;"},{"lineNumber":15,"author":{"gitId":"thatseant"},"content":"import java.util.HashMap;"},{"lineNumber":16,"author":{"gitId":"thatseant"},"content":"import java.util.logging.Level;"},{"lineNumber":17,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":18,"author":{"gitId":"thatseant"},"content":"import static seedu.ezmanager.Util.HOUR_INDEX_KEY;"},{"lineNumber":19,"author":{"gitId":"thatseant"},"content":"import static seedu.ezmanager.Util.MINUTES_IN_HOUR_INT;"},{"lineNumber":20,"author":{"gitId":"thatseant"},"content":"import static seedu.ezmanager.Util.TASK_INDEX_KEY;"},{"lineNumber":21,"author":{"gitId":"thatseant"},"content":"import static seedu.ezmanager.Util.USER_JAVA_INDEX_DIFF;"},{"lineNumber":22,"author":{"gitId":"thatseant"},"content":"import static seedu.ezmanager.Parser.getHashValue;"},{"lineNumber":23,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":24,"author":{"gitId":"thatseant"},"content":"/**"},{"lineNumber":25,"author":{"gitId":"thatseant"},"content":" * Command that adds the actual time taken for a specific task after it is marked as done."},{"lineNumber":26,"author":{"gitId":"thatseant"},"content":" */"},{"lineNumber":27,"author":{"gitId":"thatseant"},"content":"public class ActualTimeCommand extends Command {"},{"lineNumber":28,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":29,"author":{"gitId":"thatseant"},"content":"    private int taskIndex;"},{"lineNumber":30,"author":{"gitId":"thatseant"},"content":"    private int durationInMinutes;"},{"lineNumber":31,"author":{"gitId":"thatseant"},"content":"    private int projectIndex;"},{"lineNumber":32,"author":{"gitId":"thatseant"},"content":"    HashMap\u003cString, String\u003e params;"},{"lineNumber":33,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":34,"author":{"gitId":"thatseant"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"thatseant"},"content":"     * Constructor for ActualTimeCommand. Calls parse() method."},{"lineNumber":36,"author":{"gitId":"thatseant"},"content":"     * @param params Hashmap of parameters the command requires."},{"lineNumber":37,"author":{"gitId":"thatseant"},"content":"     * @param projectIndex Integer pointer to currently selected project"},{"lineNumber":38,"author":{"gitId":"thatseant"},"content":"     * @throws EzExceptions EzException"},{"lineNumber":39,"author":{"gitId":"thatseant"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"thatseant"},"content":"    public ActualTimeCommand(HashMap\u003cString, String\u003e params, int projectIndex)"},{"lineNumber":41,"author":{"gitId":"thatseant"},"content":"            throws EzExceptions {"},{"lineNumber":42,"author":{"gitId":"thatseant"},"content":"        assert projectIndex \u003e\u003d 0 : \"projectIndex must be positive integer!\";"},{"lineNumber":43,"author":{"gitId":"thatseant"},"content":"        this.params \u003d params;"},{"lineNumber":44,"author":{"gitId":"thatseant"},"content":"        this.projectIndex \u003d projectIndex;"},{"lineNumber":45,"author":{"gitId":"thatseant"},"content":"        this.parse();"},{"lineNumber":46,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":48,"author":{"gitId":"thatseant"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"thatseant"},"content":"     * Retrieves task index, actual time in hours and minutes from hashmap passed to it from constructor."},{"lineNumber":50,"author":{"gitId":"thatseant"},"content":"     * @throws EzExceptions EzException"},{"lineNumber":51,"author":{"gitId":"thatseant"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"thatseant"},"content":"    public void parse() throws EzExceptions {"},{"lineNumber":53,"author":{"gitId":"thatseant"},"content":"        try {"},{"lineNumber":54,"author":{"gitId":"thatseant"},"content":"            taskIndex \u003d Integer.parseInt(getHashValue(params, TASK_INDEX_KEY)) - USER_JAVA_INDEX_DIFF;"},{"lineNumber":55,"author":{"gitId":"thatseant"},"content":"            int hours \u003d Integer.parseInt(getHashValue(params, HOUR_INDEX_KEY));"},{"lineNumber":56,"author":{"gitId":"thatseant"},"content":"            int minutes \u003d Integer.parseInt(getHashValue(params, Util.MINUTE_INDEX_KEY));"},{"lineNumber":57,"author":{"gitId":"thatseant"},"content":"            durationInMinutes \u003d hours * MINUTES_IN_HOUR_INT + minutes;"},{"lineNumber":58,"author":{"gitId":"thatseant"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":59,"author":{"gitId":"thatseant"},"content":"            throw new EzExceptions(Util.INVALID_TASK_ID);"},{"lineNumber":60,"author":{"gitId":"thatseant"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":63,"author":{"gitId":"thatseant"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"thatseant"},"content":"     * Executes command to add actual time taken to tasks."},{"lineNumber":65,"author":{"gitId":"thatseant"},"content":"     * @param projects list of all projects in program"},{"lineNumber":66,"author":{"gitId":"thatseant"},"content":"     * @param members list of all members in program"},{"lineNumber":67,"author":{"gitId":"thatseant"},"content":"     * @return duration added UI message."},{"lineNumber":68,"author":{"gitId":"thatseant"},"content":"     * @throws EzExceptions EzException"},{"lineNumber":69,"author":{"gitId":"thatseant"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"thatseant"},"content":"    public String executeCommand(ArrayList\u003cProject\u003e projects, ArrayList\u003cTeamMember\u003e members) throws EzExceptions {"},{"lineNumber":71,"author":{"gitId":"thatseant"},"content":"        try {"},{"lineNumber":72,"author":{"gitId":"thatseant"},"content":"            EzLogger.log(Level.INFO, \"Executing Command\");"},{"lineNumber":73,"author":{"gitId":"thatseant"},"content":"            Project project \u003d projects.get(projectIndex);"},{"lineNumber":74,"author":{"gitId":"thatseant"},"content":"            Task task \u003d project.getTask(taskIndex);"},{"lineNumber":75,"author":{"gitId":"thatseant"},"content":"            EzLogger.log(Level.INFO, \"Task Retrieved\");"},{"lineNumber":76,"author":{"gitId":"thatseant"},"content":"            if (!task.isDone()) {"},{"lineNumber":77,"author":{"gitId":"thatseant"},"content":"                EzLogger.log(Level.WARNING, \"Task Not Done!\");"},{"lineNumber":78,"author":{"gitId":"thatseant"},"content":"                throw new EzExceptions(Util.TASK_NOT_DONE);"},{"lineNumber":79,"author":{"gitId":"thatseant"},"content":"            }"},{"lineNumber":80,"author":{"gitId":"thatseant"},"content":"            task.addActual(durationInMinutes);"},{"lineNumber":81,"author":{"gitId":"thatseant"},"content":"            EzLogger.log(Level.INFO, \"Actual Time Taken added to task.\");"},{"lineNumber":82,"author":{"gitId":"thatseant"},"content":"            int hours \u003d task.getActual() / MINUTES_IN_HOUR_INT;"},{"lineNumber":83,"author":{"gitId":"thatseant"},"content":"            int minutes \u003d task.getActual() % MINUTES_IN_HOUR_INT;"},{"lineNumber":84,"author":{"gitId":"thatseant"},"content":"            return Ui.printActualDurationAddedMessage(task.getDescription(), hours, minutes);"},{"lineNumber":85,"author":{"gitId":"thatseant"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":86,"author":{"gitId":"thatseant"},"content":"            EzLogger.log(Level.WARNING, \"Task Not Found.\");"},{"lineNumber":87,"author":{"gitId":"thatseant"},"content":"            throw new EzExceptions(Util.INVALID_TASK_ID);"},{"lineNumber":88,"author":{"gitId":"thatseant"},"content":"        }"},{"lineNumber":89,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":91,"author":{"gitId":"thatseant"},"content":"    /**"},{"lineNumber":92,"author":{"gitId":"thatseant"},"content":"     * Checks if command will exit program."},{"lineNumber":93,"author":{"gitId":"thatseant"},"content":"     * @return isExit status."},{"lineNumber":94,"author":{"gitId":"thatseant"},"content":"     */"},{"lineNumber":95,"author":{"gitId":"thatseant"},"content":"    public Boolean isExit() {"},{"lineNumber":96,"author":{"gitId":"thatseant"},"content":"        return false;"},{"lineNumber":97,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":99,"author":{"gitId":"thatseant"},"content":"}"}],"authorContributionMap":{"thatseant":99}},{"path":"src/main/java/seedu/ezmanager/commands/task/EstimatedTimeCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"thatseant"},"content":"//@@author thatseant"},{"lineNumber":2,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":3,"author":{"gitId":"thatseant"},"content":"package seedu.ezmanager.commands.task;"},{"lineNumber":4,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":5,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.EzExceptions;"},{"lineNumber":6,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.EzLogger;"},{"lineNumber":7,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.commands.Command;"},{"lineNumber":8,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.member.TeamMember;"},{"lineNumber":9,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.project.Project;"},{"lineNumber":10,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.task.Task;"},{"lineNumber":11,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.ui.Ui;"},{"lineNumber":12,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":13,"author":{"gitId":"thatseant"},"content":"import java.util.ArrayList;"},{"lineNumber":14,"author":{"gitId":"thatseant"},"content":"import java.util.HashMap;"},{"lineNumber":15,"author":{"gitId":"thatseant"},"content":"import java.util.logging.Level;"},{"lineNumber":16,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":17,"author":{"gitId":"thatseant"},"content":"import static seedu.ezmanager.Parser.getHashValue;"},{"lineNumber":18,"author":{"gitId":"thatseant"},"content":"import static seedu.ezmanager.Util.HOUR_INDEX_KEY;"},{"lineNumber":19,"author":{"gitId":"thatseant"},"content":"import static seedu.ezmanager.Util.INVALID_TASK_ID;"},{"lineNumber":20,"author":{"gitId":"thatseant"},"content":"import static seedu.ezmanager.Util.MINUTES_IN_HOUR_INT;"},{"lineNumber":21,"author":{"gitId":"thatseant"},"content":"import static seedu.ezmanager.Util.MINUTE_INDEX_KEY;"},{"lineNumber":22,"author":{"gitId":"thatseant"},"content":"import static seedu.ezmanager.Util.TASK_INDEX_KEY;"},{"lineNumber":23,"author":{"gitId":"thatseant"},"content":"import static seedu.ezmanager.Util.USER_JAVA_INDEX_DIFF;"},{"lineNumber":24,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":25,"author":{"gitId":"thatseant"},"content":"/**"},{"lineNumber":26,"author":{"gitId":"thatseant"},"content":" * Command that adds the estimated time taken for a specific task."},{"lineNumber":27,"author":{"gitId":"thatseant"},"content":" */"},{"lineNumber":28,"author":{"gitId":"thatseant"},"content":"public class EstimatedTimeCommand extends Command {"},{"lineNumber":29,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":30,"author":{"gitId":"thatseant"},"content":"    private int taskIndex;"},{"lineNumber":31,"author":{"gitId":"thatseant"},"content":"    private int durationInMinutes;"},{"lineNumber":32,"author":{"gitId":"thatseant"},"content":"    private int projectIndex;"},{"lineNumber":33,"author":{"gitId":"thatseant"},"content":"    HashMap\u003cString, String\u003e params;"},{"lineNumber":34,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":35,"author":{"gitId":"thatseant"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"thatseant"},"content":"     * Constructor for EstimatedTimeCommand. Calls parse() method."},{"lineNumber":37,"author":{"gitId":"thatseant"},"content":"     * @param params Hashmap of parameters the command requires."},{"lineNumber":38,"author":{"gitId":"thatseant"},"content":"     * @param projectIndex Integer pointer to currently selected project"},{"lineNumber":39,"author":{"gitId":"thatseant"},"content":"     * @throws EzExceptions EzException"},{"lineNumber":40,"author":{"gitId":"thatseant"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"thatseant"},"content":"    public EstimatedTimeCommand(HashMap\u003cString, String\u003e params, int projectIndex)"},{"lineNumber":42,"author":{"gitId":"thatseant"},"content":"            throws EzExceptions {"},{"lineNumber":43,"author":{"gitId":"thatseant"},"content":"        assert projectIndex \u003e\u003d 0 : \"projectIndex must be positive integer!\";"},{"lineNumber":44,"author":{"gitId":"thatseant"},"content":"        this.params \u003d params;"},{"lineNumber":45,"author":{"gitId":"thatseant"},"content":"        this.projectIndex \u003d projectIndex;"},{"lineNumber":46,"author":{"gitId":"thatseant"},"content":"        this.parse();"},{"lineNumber":47,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":49,"author":{"gitId":"thatseant"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"thatseant"},"content":"     * Retrieves task index, estimated time in hours and minutes from parameter hashmap passed to it from constructor."},{"lineNumber":51,"author":{"gitId":"thatseant"},"content":"     * @throws EzExceptions EzException"},{"lineNumber":52,"author":{"gitId":"thatseant"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"thatseant"},"content":"    public void parse() throws EzExceptions {"},{"lineNumber":54,"author":{"gitId":"thatseant"},"content":"        try {"},{"lineNumber":55,"author":{"gitId":"thatseant"},"content":"            taskIndex \u003d Integer.parseInt(getHashValue(params, TASK_INDEX_KEY)) - USER_JAVA_INDEX_DIFF;"},{"lineNumber":56,"author":{"gitId":"thatseant"},"content":"            int hours \u003d Integer.parseInt(getHashValue(params, HOUR_INDEX_KEY));"},{"lineNumber":57,"author":{"gitId":"thatseant"},"content":"            int minutes \u003d Integer.parseInt(getHashValue(params, MINUTE_INDEX_KEY));"},{"lineNumber":58,"author":{"gitId":"thatseant"},"content":"            durationInMinutes \u003d hours * MINUTES_IN_HOUR_INT + minutes;"},{"lineNumber":59,"author":{"gitId":"thatseant"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":60,"author":{"gitId":"thatseant"},"content":"            throw new EzExceptions(INVALID_TASK_ID);"},{"lineNumber":61,"author":{"gitId":"thatseant"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":64,"author":{"gitId":"thatseant"},"content":"    /**"},{"lineNumber":65,"author":{"gitId":"thatseant"},"content":"     * Executes command to add estimated time taken to tasks."},{"lineNumber":66,"author":{"gitId":"thatseant"},"content":"     * @param projects list of all projects in program"},{"lineNumber":67,"author":{"gitId":"thatseant"},"content":"     * @param members list of all members in program"},{"lineNumber":68,"author":{"gitId":"thatseant"},"content":"     * @return duration added UI message."},{"lineNumber":69,"author":{"gitId":"thatseant"},"content":"     * @throws EzExceptions EzException"},{"lineNumber":70,"author":{"gitId":"thatseant"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"thatseant"},"content":"    public String executeCommand(ArrayList\u003cProject\u003e projects, ArrayList\u003cTeamMember\u003e members) throws EzExceptions {"},{"lineNumber":72,"author":{"gitId":"thatseant"},"content":"        try {"},{"lineNumber":73,"author":{"gitId":"thatseant"},"content":"            EzLogger.log(Level.INFO, \"Executing Command\");"},{"lineNumber":74,"author":{"gitId":"thatseant"},"content":"            Project project \u003d projects.get(projectIndex);"},{"lineNumber":75,"author":{"gitId":"thatseant"},"content":"            Task task \u003d project.getTask(taskIndex);"},{"lineNumber":76,"author":{"gitId":"thatseant"},"content":"            EzLogger.log(Level.INFO, \"Task Retrieved\");"},{"lineNumber":77,"author":{"gitId":"thatseant"},"content":"            task.addEstimate(durationInMinutes);"},{"lineNumber":78,"author":{"gitId":"thatseant"},"content":"            EzLogger.log(Level.INFO, \"Estimated Time Taken added to task.\");"},{"lineNumber":79,"author":{"gitId":"thatseant"},"content":"            int hours \u003d task.getEstimate() / MINUTES_IN_HOUR_INT;"},{"lineNumber":80,"author":{"gitId":"thatseant"},"content":"            int minutes \u003d task.getEstimate() % MINUTES_IN_HOUR_INT;"},{"lineNumber":81,"author":{"gitId":"thatseant"},"content":"            return Ui.printEstimateAddedMessage(task.getDescription(), hours, minutes);"},{"lineNumber":82,"author":{"gitId":"thatseant"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":83,"author":{"gitId":"thatseant"},"content":"            EzLogger.log(Level.WARNING, \"Task Not Found.\");"},{"lineNumber":84,"author":{"gitId":"thatseant"},"content":"            throw new EzExceptions(INVALID_TASK_ID);"},{"lineNumber":85,"author":{"gitId":"thatseant"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":88,"author":{"gitId":"thatseant"},"content":"    /**"},{"lineNumber":89,"author":{"gitId":"thatseant"},"content":"     * Checks if command will exit program."},{"lineNumber":90,"author":{"gitId":"thatseant"},"content":"     * @return isExit status."},{"lineNumber":91,"author":{"gitId":"thatseant"},"content":"     */"},{"lineNumber":92,"author":{"gitId":"thatseant"},"content":"    public Boolean isExit() {"},{"lineNumber":93,"author":{"gitId":"thatseant"},"content":"        return false;"},{"lineNumber":94,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":96,"author":{"gitId":"thatseant"},"content":"}"}],"authorContributionMap":{"thatseant":96}},{"path":"src/main/java/seedu/ezmanager/commands/task/TaskAssignDeadlineCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"thatseant"},"content":"//@@author thatseant"},{"lineNumber":2,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":3,"author":{"gitId":"thatseant"},"content":"package seedu.ezmanager.commands.task;"},{"lineNumber":4,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":5,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.EzExceptions;"},{"lineNumber":6,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.EzLogger;"},{"lineNumber":7,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.commands.Command;"},{"lineNumber":8,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.member.TeamMember;"},{"lineNumber":9,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.project.Project;"},{"lineNumber":10,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.task.Task;"},{"lineNumber":11,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.ui.Ui;"},{"lineNumber":12,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":13,"author":{"gitId":"thatseant"},"content":"import java.time.LocalDate;"},{"lineNumber":14,"author":{"gitId":"thatseant"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":15,"author":{"gitId":"thatseant"},"content":"import java.util.ArrayList;"},{"lineNumber":16,"author":{"gitId":"thatseant"},"content":"import java.util.HashMap;"},{"lineNumber":17,"author":{"gitId":"thatseant"},"content":"import java.util.logging.Level;"},{"lineNumber":18,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":19,"author":{"gitId":"thatseant"},"content":"import static seedu.ezmanager.Parser.getHashValue;"},{"lineNumber":20,"author":{"gitId":"thatseant"},"content":"import static seedu.ezmanager.Util.DATE_KEY;"},{"lineNumber":21,"author":{"gitId":"thatseant"},"content":"import static seedu.ezmanager.Util.EMPTY_PROJECT_LIST;"},{"lineNumber":22,"author":{"gitId":"thatseant"},"content":"import static seedu.ezmanager.Util.INVALID_TASK_ID;"},{"lineNumber":23,"author":{"gitId":"thatseant"},"content":"import static seedu.ezmanager.Util.TASK_INDEX_KEY;"},{"lineNumber":24,"author":{"gitId":"thatseant"},"content":"import static seedu.ezmanager.Util.USER_JAVA_INDEX_DIFF;"},{"lineNumber":25,"author":{"gitId":"thatseant"},"content":"import static seedu.ezmanager.Util.WRONG_DATE_FORMAT;"},{"lineNumber":26,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":27,"author":{"gitId":"thatseant"},"content":"/**"},{"lineNumber":28,"author":{"gitId":"thatseant"},"content":" * Command that adds deadline for a specific task."},{"lineNumber":29,"author":{"gitId":"thatseant"},"content":" */"},{"lineNumber":30,"author":{"gitId":"thatseant"},"content":"public class TaskAssignDeadlineCommand extends Command {"},{"lineNumber":31,"author":{"gitId":"thatseant"},"content":"    private int projectIndex;"},{"lineNumber":32,"author":{"gitId":"thatseant"},"content":"    private int taskIndex;"},{"lineNumber":33,"author":{"gitId":"thatseant"},"content":"    private LocalDate date;"},{"lineNumber":34,"author":{"gitId":"thatseant"},"content":"    HashMap\u003cString, String\u003e params;"},{"lineNumber":35,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":36,"author":{"gitId":"thatseant"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"thatseant"},"content":"     * Constructor for TaskAssignDeadlineCommand. Calls parse() method."},{"lineNumber":38,"author":{"gitId":"thatseant"},"content":"     * @param params Hashmap of parameters the command requires."},{"lineNumber":39,"author":{"gitId":"thatseant"},"content":"     * @param projectIndex Integer pointer to currently selected project"},{"lineNumber":40,"author":{"gitId":"thatseant"},"content":"     * @throws EzExceptions EzException"},{"lineNumber":41,"author":{"gitId":"thatseant"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"thatseant"},"content":"    public TaskAssignDeadlineCommand(HashMap\u003cString, String\u003e params, int projectIndex) throws EzExceptions {"},{"lineNumber":43,"author":{"gitId":"thatseant"},"content":"        this.params \u003d params;"},{"lineNumber":44,"author":{"gitId":"thatseant"},"content":"        this.projectIndex \u003d projectIndex;"},{"lineNumber":45,"author":{"gitId":"thatseant"},"content":"        this.parse();"},{"lineNumber":46,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":48,"author":{"gitId":"thatseant"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"thatseant"},"content":"     * Retrieves task index, deadline from parameter hashmap passed to it from constructor."},{"lineNumber":50,"author":{"gitId":"thatseant"},"content":"     * @throws EzExceptions EzException"},{"lineNumber":51,"author":{"gitId":"thatseant"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"thatseant"},"content":"    public void parse() throws EzExceptions {"},{"lineNumber":53,"author":{"gitId":"thatseant"},"content":"        try {"},{"lineNumber":54,"author":{"gitId":"thatseant"},"content":"            taskIndex \u003d Integer.parseInt(getHashValue(params, TASK_INDEX_KEY)) - USER_JAVA_INDEX_DIFF;"},{"lineNumber":55,"author":{"gitId":"thatseant"},"content":"            date \u003d LocalDate.parse(getHashValue(params, DATE_KEY));"},{"lineNumber":56,"author":{"gitId":"thatseant"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":57,"author":{"gitId":"thatseant"},"content":"            throw new EzExceptions(INVALID_TASK_ID);"},{"lineNumber":58,"author":{"gitId":"thatseant"},"content":"        } catch (StringIndexOutOfBoundsException | DateTimeParseException e) {"},{"lineNumber":59,"author":{"gitId":"thatseant"},"content":"            EzLogger.log(Level.WARNING, \"Wrong Date Format: \" + date);"},{"lineNumber":60,"author":{"gitId":"thatseant"},"content":"            throw new EzExceptions(WRONG_DATE_FORMAT);"},{"lineNumber":61,"author":{"gitId":"thatseant"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":64,"author":{"gitId":"thatseant"},"content":"    /**"},{"lineNumber":65,"author":{"gitId":"thatseant"},"content":"     * Executes command to add deadline to tasks."},{"lineNumber":66,"author":{"gitId":"thatseant"},"content":"     * @param projects list of all projects in program"},{"lineNumber":67,"author":{"gitId":"thatseant"},"content":"     * @param teamMembers list of all members in program"},{"lineNumber":68,"author":{"gitId":"thatseant"},"content":"     * @return deadline added UI message."},{"lineNumber":69,"author":{"gitId":"thatseant"},"content":"     * @throws EzExceptions EzException"},{"lineNumber":70,"author":{"gitId":"thatseant"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"thatseant"},"content":"    public String executeCommand(ArrayList\u003cProject\u003e projects,"},{"lineNumber":72,"author":{"gitId":"thatseant"},"content":"                                 ArrayList\u003cTeamMember\u003e teamMembers) throws EzExceptions {"},{"lineNumber":73,"author":{"gitId":"thatseant"},"content":"        EzLogger.log(Level.INFO, \"Executing Command\");"},{"lineNumber":74,"author":{"gitId":"thatseant"},"content":"        if (projects.size() \u003d\u003d 0) {"},{"lineNumber":75,"author":{"gitId":"thatseant"},"content":"            throw new EzExceptions(EMPTY_PROJECT_LIST);"},{"lineNumber":76,"author":{"gitId":"thatseant"},"content":"        }"},{"lineNumber":77,"author":{"gitId":"thatseant"},"content":"        try {"},{"lineNumber":78,"author":{"gitId":"thatseant"},"content":"            Project project \u003d projects.get(projectIndex);"},{"lineNumber":79,"author":{"gitId":"thatseant"},"content":"            Task task \u003d project.getTaskList().get(taskIndex);"},{"lineNumber":80,"author":{"gitId":"thatseant"},"content":"            EzLogger.log(Level.INFO, \"Task Retrieved\");"},{"lineNumber":81,"author":{"gitId":"thatseant"},"content":"            task.addDeadline(date);"},{"lineNumber":82,"author":{"gitId":"thatseant"},"content":"            EzLogger.log(Level.INFO, \"Deadline added to task.\");"},{"lineNumber":83,"author":{"gitId":"thatseant"},"content":"            return Ui.printTaskDeadlineMessage(date, task.getDescription());"},{"lineNumber":84,"author":{"gitId":"thatseant"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":85,"author":{"gitId":"thatseant"},"content":"            EzLogger.log(Level.WARNING, \"Task Not Found.\");"},{"lineNumber":86,"author":{"gitId":"thatseant"},"content":"            throw new EzExceptions(INVALID_TASK_ID);"},{"lineNumber":87,"author":{"gitId":"thatseant"},"content":"        }"},{"lineNumber":88,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":90,"author":{"gitId":"thatseant"},"content":"    /**"},{"lineNumber":91,"author":{"gitId":"thatseant"},"content":"     * Checks if command will exit program."},{"lineNumber":92,"author":{"gitId":"thatseant"},"content":"     * @return exit status."},{"lineNumber":93,"author":{"gitId":"thatseant"},"content":"     */"},{"lineNumber":94,"author":{"gitId":"thatseant"},"content":"    public Boolean isExit() {"},{"lineNumber":95,"author":{"gitId":"thatseant"},"content":"        return false;"},{"lineNumber":96,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"thatseant"},"content":"}"}],"authorContributionMap":{"thatseant":97}},{"path":"src/main/java/seedu/ezmanager/commands/task/TaskAssignPriorityCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"thatseant"},"content":"package seedu.ezmanager.commands.task;"},{"lineNumber":2,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":3,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.EzExceptions;"},{"lineNumber":4,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.commands.Command;"},{"lineNumber":5,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.member.TeamMember;"},{"lineNumber":6,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.project.Project;"},{"lineNumber":7,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.task.Task;"},{"lineNumber":8,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.ui.Ui;"},{"lineNumber":9,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":10,"author":{"gitId":"riazaham"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitId":"riazaham"},"content":"import java.util.HashMap;"},{"lineNumber":12,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":13,"author":{"gitId":"thatseant"},"content":"import static seedu.ezmanager.Parser.getHashValue;"},{"lineNumber":14,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":15,"author":{"gitId":"thatseant"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"thatseant"},"content":" * Command that adds priority for a specific task."},{"lineNumber":17,"author":{"gitId":"thatseant"},"content":" */"},{"lineNumber":18,"author":{"gitId":"riazaham"},"content":"public class TaskAssignPriorityCommand extends Command {"},{"lineNumber":19,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":20,"author":{"gitId":"riazaham"},"content":"    private int taskIndex;"},{"lineNumber":21,"author":{"gitId":"riazaham"},"content":"    private int projectIndex;"},{"lineNumber":22,"author":{"gitId":"thatseant"},"content":"    private int priority;"},{"lineNumber":23,"author":{"gitId":"riazaham"},"content":"    HashMap\u003cString, String\u003e params;"},{"lineNumber":24,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":25,"author":{"gitId":"thatseant"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"thatseant"},"content":"     * Constructor for TaskAssignPriorityCommand. Calls parse() method."},{"lineNumber":27,"author":{"gitId":"thatseant"},"content":"     * @param params Hashmap of parameters the command requires."},{"lineNumber":28,"author":{"gitId":"thatseant"},"content":"     * @param projectIndex Integer pointer to currently selected project"},{"lineNumber":29,"author":{"gitId":"thatseant"},"content":"     * @throws EzExceptions EzException"},{"lineNumber":30,"author":{"gitId":"thatseant"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"riazaham"},"content":"    public TaskAssignPriorityCommand(HashMap\u003cString, String\u003e params, int projectIndex)"},{"lineNumber":32,"author":{"gitId":"thatseant"},"content":"            throws EzExceptions {"},{"lineNumber":33,"author":{"gitId":"thatseant"},"content":"        assert projectIndex \u003e\u003d 0 : \"projectIndex must be positive integer!\";"},{"lineNumber":34,"author":{"gitId":"riazaham"},"content":"        this.params \u003d params;"},{"lineNumber":35,"author":{"gitId":"riazaham"},"content":"        this.projectIndex \u003d projectIndex;"},{"lineNumber":36,"author":{"gitId":"riazaham"},"content":"        this.parse();"},{"lineNumber":37,"author":{"gitId":"riazaham"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":39,"author":{"gitId":"thatseant"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"thatseant"},"content":"     * Retrieves task index, priority from parameter hashmap passed to it from constructor."},{"lineNumber":41,"author":{"gitId":"thatseant"},"content":"     * @throws EzExceptions EzException"},{"lineNumber":42,"author":{"gitId":"thatseant"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"thatseant"},"content":"    public void parse() throws EzExceptions {"},{"lineNumber":44,"author":{"gitId":"thatseant"},"content":"        try {"},{"lineNumber":45,"author":{"gitId":"riazaham"},"content":"            taskIndex \u003d Integer.parseInt(getHashValue(params, \"t\")) - 1;"},{"lineNumber":46,"author":{"gitId":"thatseant"},"content":"            priority \u003d Integer.parseInt(getHashValue(params, \"p\"));"},{"lineNumber":47,"author":{"gitId":"riazaham"},"content":"            if (priority \u003c 0) {"},{"lineNumber":48,"author":{"gitId":"thatseant"},"content":"                throw new EzExceptions(\"invalidPriority\");"},{"lineNumber":49,"author":{"gitId":"riazaham"},"content":"            }"},{"lineNumber":50,"author":{"gitId":"thatseant"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":51,"author":{"gitId":"thatseant"},"content":"            throw new EzExceptions(\"indexNonInteger\");"},{"lineNumber":52,"author":{"gitId":"thatseant"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"riazaham"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":55,"author":{"gitId":"thatseant"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"thatseant"},"content":"     * Executes command to add priority to tasks."},{"lineNumber":57,"author":{"gitId":"thatseant"},"content":"     * @param projects list of all projects in program"},{"lineNumber":58,"author":{"gitId":"thatseant"},"content":"     * @param teamMembers list of all members in program"},{"lineNumber":59,"author":{"gitId":"thatseant"},"content":"     * @return priority added UI message."},{"lineNumber":60,"author":{"gitId":"thatseant"},"content":"     * @throws EzExceptions EzException"},{"lineNumber":61,"author":{"gitId":"thatseant"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"riazaham"},"content":"    public String executeCommand(ArrayList\u003cProject\u003e projects,"},{"lineNumber":63,"author":{"gitId":"thatseant"},"content":"                                 ArrayList\u003cTeamMember\u003e teamMembers) throws EzExceptions {"},{"lineNumber":64,"author":{"gitId":"riazaham"},"content":"        if (projects.size() \u003d\u003d 0) {"},{"lineNumber":65,"author":{"gitId":"thatseant"},"content":"            throw new EzExceptions(\"emptyProjectList\");"},{"lineNumber":66,"author":{"gitId":"riazaham"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"riazaham"},"content":"        try {"},{"lineNumber":68,"author":{"gitId":"riazaham"},"content":"            Task selectedTask \u003d projects.get(projectIndex).getTask(taskIndex);"},{"lineNumber":69,"author":{"gitId":"riazaham"},"content":"            selectedTask.setPriority(priority);"},{"lineNumber":70,"author":{"gitId":"riazaham"},"content":"            return Ui.printPriorityAssignedToTaskMessage(priority, selectedTask.getTaskDescription());"},{"lineNumber":71,"author":{"gitId":"riazaham"},"content":"        } catch (NumberFormatException | IndexOutOfBoundsException e) {"},{"lineNumber":72,"author":{"gitId":"thatseant"},"content":"            throw new EzExceptions(\"invalidTaskID\");"},{"lineNumber":73,"author":{"gitId":"riazaham"},"content":"        }"},{"lineNumber":74,"author":{"gitId":"riazaham"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":76,"author":{"gitId":"thatseant"},"content":"    /**"},{"lineNumber":77,"author":{"gitId":"thatseant"},"content":"     * Checks if command will exit program."},{"lineNumber":78,"author":{"gitId":"thatseant"},"content":"     * @return exit status."},{"lineNumber":79,"author":{"gitId":"thatseant"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"riazaham"},"content":"    public Boolean isExit() {"},{"lineNumber":81,"author":{"gitId":"riazaham"},"content":"        return false;"},{"lineNumber":82,"author":{"gitId":"riazaham"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":84,"author":{"gitId":"riazaham"},"content":"}"}],"authorContributionMap":{"thatseant":45,"riazaham":39}},{"path":"src/main/java/seedu/ezmanager/commands/task/TaskCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"thatseant"},"content":"//@@author thatseant"},{"lineNumber":2,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":3,"author":{"gitId":"thatseant"},"content":"package seedu.ezmanager.commands.task;"},{"lineNumber":4,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":5,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.EzExceptions;"},{"lineNumber":6,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.EzLogger;"},{"lineNumber":7,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.commands.Command;"},{"lineNumber":8,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.member.TeamMember;"},{"lineNumber":9,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.project.Project;"},{"lineNumber":10,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.task.Task;"},{"lineNumber":11,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.ui.Ui;"},{"lineNumber":12,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":13,"author":{"gitId":"thatseant"},"content":"import java.util.ArrayList;"},{"lineNumber":14,"author":{"gitId":"thatseant"},"content":"import java.util.HashMap;"},{"lineNumber":15,"author":{"gitId":"thatseant"},"content":"import java.util.logging.Level;"},{"lineNumber":16,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":17,"author":{"gitId":"thatseant"},"content":"import static seedu.ezmanager.Util.TASK_NAME_KEY;"},{"lineNumber":18,"author":{"gitId":"thatseant"},"content":"import static seedu.ezmanager.Parser.getHashValue;"},{"lineNumber":19,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":20,"author":{"gitId":"thatseant"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"thatseant"},"content":" * Command that creates a new task within project."},{"lineNumber":22,"author":{"gitId":"thatseant"},"content":" */"},{"lineNumber":23,"author":{"gitId":"thatseant"},"content":"public class TaskCommand extends Command {"},{"lineNumber":24,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":25,"author":{"gitId":"thatseant"},"content":"    private int projectIndex;"},{"lineNumber":26,"author":{"gitId":"thatseant"},"content":"    private String name;"},{"lineNumber":27,"author":{"gitId":"thatseant"},"content":"    HashMap\u003cString, String\u003e params;"},{"lineNumber":28,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":29,"author":{"gitId":"thatseant"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"thatseant"},"content":"     * Constructor for TaskCommand. Calls parse() method."},{"lineNumber":31,"author":{"gitId":"thatseant"},"content":"     * @param params Hashmap of parameters the command requires."},{"lineNumber":32,"author":{"gitId":"thatseant"},"content":"     * @param projectIndex Integer pointer to currently selected project"},{"lineNumber":33,"author":{"gitId":"thatseant"},"content":"     * @throws EzExceptions EzException"},{"lineNumber":34,"author":{"gitId":"thatseant"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"thatseant"},"content":"    public TaskCommand(HashMap\u003cString, String\u003e params, int projectIndex) throws EzExceptions {"},{"lineNumber":36,"author":{"gitId":"thatseant"},"content":"        assert projectIndex \u003e\u003d 0 : \"projectIndex must be positive integer!\";"},{"lineNumber":37,"author":{"gitId":"thatseant"},"content":"        this.params \u003d params;"},{"lineNumber":38,"author":{"gitId":"thatseant"},"content":"        this.projectIndex \u003d projectIndex;"},{"lineNumber":39,"author":{"gitId":"thatseant"},"content":"        this.parse();"},{"lineNumber":40,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":42,"author":{"gitId":"thatseant"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"thatseant"},"content":"     * Retrieves task name from hashmap passed to it from constructor."},{"lineNumber":44,"author":{"gitId":"thatseant"},"content":"     * @throws EzExceptions EzException"},{"lineNumber":45,"author":{"gitId":"thatseant"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"thatseant"},"content":"    public void parse() throws EzExceptions {"},{"lineNumber":47,"author":{"gitId":"thatseant"},"content":"        this.name \u003d getHashValue(params, TASK_NAME_KEY);"},{"lineNumber":48,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":50,"author":{"gitId":"thatseant"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"thatseant"},"content":"     * Executes command to add task to project."},{"lineNumber":52,"author":{"gitId":"thatseant"},"content":"     * @param projects list of all projects in program"},{"lineNumber":53,"author":{"gitId":"thatseant"},"content":"     * @param teamMembers list of all members in program"},{"lineNumber":54,"author":{"gitId":"thatseant"},"content":"     * @return task added UI message."},{"lineNumber":55,"author":{"gitId":"thatseant"},"content":"     * @throws EzExceptions EzException"},{"lineNumber":56,"author":{"gitId":"thatseant"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"thatseant"},"content":"    public String executeCommand(ArrayList\u003cProject\u003e projects, ArrayList\u003cTeamMember\u003e teamMembers) {"},{"lineNumber":58,"author":{"gitId":"thatseant"},"content":"        EzLogger.log(Level.INFO, \"Executing Command\");"},{"lineNumber":59,"author":{"gitId":"thatseant"},"content":"        Project project \u003d projects.get(projectIndex);"},{"lineNumber":60,"author":{"gitId":"thatseant"},"content":"        EzLogger.log(Level.INFO, \"Project Retrieved\");"},{"lineNumber":61,"author":{"gitId":"thatseant"},"content":"        Task newTask \u003d new Task(name);"},{"lineNumber":62,"author":{"gitId":"thatseant"},"content":"        EzLogger.log(Level.INFO, \"Task Created\");"},{"lineNumber":63,"author":{"gitId":"thatseant"},"content":"        project.addTask(newTask);"},{"lineNumber":64,"author":{"gitId":"thatseant"},"content":"        EzLogger.log(Level.INFO, \"Task Added\");"},{"lineNumber":65,"author":{"gitId":"thatseant"},"content":"        return Ui.printTaskCreatedMessage(newTask.toString());"},{"lineNumber":66,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":68,"author":{"gitId":"thatseant"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"thatseant"},"content":"     * Checks if command will exit program."},{"lineNumber":70,"author":{"gitId":"thatseant"},"content":"     * @return isExit status."},{"lineNumber":71,"author":{"gitId":"thatseant"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"thatseant"},"content":"    public Boolean isExit() {"},{"lineNumber":73,"author":{"gitId":"thatseant"},"content":"        return false;"},{"lineNumber":74,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"thatseant"},"content":"}"}],"authorContributionMap":{"thatseant":75}},{"path":"src/main/java/seedu/ezmanager/commands/task/TaskDeleteCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"thatseant"},"content":"package seedu.ezmanager.commands.task;"},{"lineNumber":2,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":3,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.EzExceptions;"},{"lineNumber":4,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.commands.Command;"},{"lineNumber":5,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.member.TeamMember;"},{"lineNumber":6,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.project.Project;"},{"lineNumber":7,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":8,"author":{"gitId":"samuelchristopher"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"riazaham"},"content":"import java.util.HashMap;"},{"lineNumber":10,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":11,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.ui.Ui;"},{"lineNumber":12,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":13,"author":{"gitId":"thatseant"},"content":"import static seedu.ezmanager.Parser.getHashValue;"},{"lineNumber":14,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":15,"author":{"gitId":"thatseant"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"thatseant"},"content":" * Command that deletes a task within project."},{"lineNumber":17,"author":{"gitId":"thatseant"},"content":" */"},{"lineNumber":18,"author":{"gitId":"riazaham"},"content":"public class TaskDeleteCommand extends Command {"},{"lineNumber":19,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":20,"author":{"gitId":"riazaham"},"content":"    private int taskIndex;"},{"lineNumber":21,"author":{"gitId":"riazaham"},"content":"    private int projectIndex;"},{"lineNumber":22,"author":{"gitId":"riazaham"},"content":"    HashMap\u003cString, String\u003e params;"},{"lineNumber":23,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":24,"author":{"gitId":"thatseant"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"thatseant"},"content":"     * Constructor for TaskDeleteCommand. Calls parse() method."},{"lineNumber":26,"author":{"gitId":"thatseant"},"content":"     * @param params Hashmap of parameters the command requires."},{"lineNumber":27,"author":{"gitId":"thatseant"},"content":"     * @param projectIndex Integer pointer to currently selected project"},{"lineNumber":28,"author":{"gitId":"thatseant"},"content":"     * @throws EzExceptions EzException"},{"lineNumber":29,"author":{"gitId":"thatseant"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"riazaham"},"content":"    public TaskDeleteCommand(HashMap\u003cString, String\u003e params, int projectIndex)"},{"lineNumber":31,"author":{"gitId":"thatseant"},"content":"            throws EzExceptions {"},{"lineNumber":32,"author":{"gitId":"thatseant"},"content":"        assert projectIndex \u003e\u003d 0 : \"projectIndex must be positive integer!\";"},{"lineNumber":33,"author":{"gitId":"riazaham"},"content":"        this.params \u003d params;"},{"lineNumber":34,"author":{"gitId":"riazaham"},"content":"        this.projectIndex \u003d projectIndex;"},{"lineNumber":35,"author":{"gitId":"riazaham"},"content":"        this.parse();"},{"lineNumber":36,"author":{"gitId":"riazaham"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":38,"author":{"gitId":"thatseant"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"thatseant"},"content":"     * Retrieves task index from hashmap passed to it from constructor."},{"lineNumber":40,"author":{"gitId":"thatseant"},"content":"     * @throws EzExceptions EzException"},{"lineNumber":41,"author":{"gitId":"thatseant"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"thatseant"},"content":"    public void parse() throws EzExceptions {"},{"lineNumber":43,"author":{"gitId":"riazaham"},"content":"        try {"},{"lineNumber":44,"author":{"gitId":"riazaham"},"content":"            taskIndex \u003d Integer.parseInt(getHashValue(params, \"t\")) - 1;"},{"lineNumber":45,"author":{"gitId":"samuellleow"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":46,"author":{"gitId":"thatseant"},"content":"            throw new EzExceptions(\"invalidTaskID\");"},{"lineNumber":47,"author":{"gitId":"riazaham"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"riazaham"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":50,"author":{"gitId":"thatseant"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"thatseant"},"content":"     * Executes command to delete task within project."},{"lineNumber":52,"author":{"gitId":"thatseant"},"content":"     * @param projects list of all projects in program"},{"lineNumber":53,"author":{"gitId":"thatseant"},"content":"     * @param teamMembers list of all members in program"},{"lineNumber":54,"author":{"gitId":"thatseant"},"content":"     * @return task deleted UI message."},{"lineNumber":55,"author":{"gitId":"thatseant"},"content":"     * @throws EzExceptions EzException"},{"lineNumber":56,"author":{"gitId":"thatseant"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"riazaham"},"content":"    @Override"},{"lineNumber":58,"author":{"gitId":"riazaham"},"content":"    public String executeCommand(ArrayList\u003cProject\u003e projects,"},{"lineNumber":59,"author":{"gitId":"thatseant"},"content":"                                 ArrayList\u003cTeamMember\u003e teamMembers) throws EzExceptions {"},{"lineNumber":60,"author":{"gitId":"riazaham"},"content":"        if (projects.size() \u003d\u003d 0) {"},{"lineNumber":61,"author":{"gitId":"thatseant"},"content":"            throw new EzExceptions(\"emptyProjectList\");"},{"lineNumber":62,"author":{"gitId":"riazaham"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"riazaham"},"content":"        try {"},{"lineNumber":64,"author":{"gitId":"riazaham"},"content":"            Project selectedProject \u003d projects.get(projectIndex);"},{"lineNumber":65,"author":{"gitId":"riazaham"},"content":"            //Get task before deletion"},{"lineNumber":66,"author":{"gitId":"riazaham"},"content":"            String taskToBeDeleted \u003d selectedProject.getTask(taskIndex).getTaskDescription();"},{"lineNumber":67,"author":{"gitId":"riazaham"},"content":"            selectedProject.deleteTask(taskIndex);"},{"lineNumber":68,"author":{"gitId":"riazaham"},"content":"            return Ui.printTaskDeletedMessage(taskToBeDeleted);"},{"lineNumber":69,"author":{"gitId":"samuellleow"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":70,"author":{"gitId":"thatseant"},"content":"            throw new EzExceptions(\"invalidTaskID\");"},{"lineNumber":71,"author":{"gitId":"riazaham"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"riazaham"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":74,"author":{"gitId":"thatseant"},"content":"    /**"},{"lineNumber":75,"author":{"gitId":"thatseant"},"content":"     * Checks if command will exit program."},{"lineNumber":76,"author":{"gitId":"thatseant"},"content":"     * @return isExit status."},{"lineNumber":77,"author":{"gitId":"thatseant"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"riazaham"},"content":"    @Override"},{"lineNumber":79,"author":{"gitId":"riazaham"},"content":"    public Boolean isExit() {"},{"lineNumber":80,"author":{"gitId":"riazaham"},"content":"        return false;"},{"lineNumber":81,"author":{"gitId":"riazaham"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"riazaham"},"content":"}"}],"authorContributionMap":{"thatseant":38,"samuelchristopher":2,"samuellleow":2,"riazaham":40}},{"path":"src/main/java/seedu/ezmanager/commands/task/TaskDoneCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"thatseant"},"content":"package seedu.ezmanager.commands.task;"},{"lineNumber":2,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":3,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.EzExceptions;"},{"lineNumber":4,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.commands.Command;"},{"lineNumber":5,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.member.TeamMember;"},{"lineNumber":6,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.project.Project;"},{"lineNumber":7,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.task.Task;"},{"lineNumber":8,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.ui.Ui;"},{"lineNumber":9,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":10,"author":{"gitId":"samuelchristopher"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitId":"samuelchristopher"},"content":"import java.util.HashMap;"},{"lineNumber":12,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":13,"author":{"gitId":"thatseant"},"content":"import static seedu.ezmanager.Parser.getHashValue;"},{"lineNumber":14,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":15,"author":{"gitId":"thatseant"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"thatseant"},"content":" * Command that marks a task as done."},{"lineNumber":17,"author":{"gitId":"thatseant"},"content":" */"},{"lineNumber":18,"author":{"gitId":"samuelchristopher"},"content":"public class TaskDoneCommand extends Command {"},{"lineNumber":19,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":20,"author":{"gitId":"samuelchristopher"},"content":"    private int projectIndex;"},{"lineNumber":21,"author":{"gitId":"samuelchristopher"},"content":"    private int taskIndex;"},{"lineNumber":22,"author":{"gitId":"samuelchristopher"},"content":"    HashMap\u003cString, String\u003e params;"},{"lineNumber":23,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":24,"author":{"gitId":"thatseant"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"thatseant"},"content":"     * Constructor for TaskDoneCommand. Calls parse() method."},{"lineNumber":26,"author":{"gitId":"thatseant"},"content":"     * @param params Hashmap of parameters the command requires."},{"lineNumber":27,"author":{"gitId":"thatseant"},"content":"     * @param projectIndex Integer pointer to currently selected project"},{"lineNumber":28,"author":{"gitId":"thatseant"},"content":"     * @throws EzExceptions EzException"},{"lineNumber":29,"author":{"gitId":"thatseant"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"thatseant"},"content":"    public TaskDoneCommand(HashMap\u003cString, String\u003e params, int projectIndex) throws EzExceptions {"},{"lineNumber":31,"author":{"gitId":"thatseant"},"content":"        assert projectIndex \u003e\u003d 0 : \"projectIndex must be positive integer!\";"},{"lineNumber":32,"author":{"gitId":"samuelchristopher"},"content":"        this.params \u003d params;"},{"lineNumber":33,"author":{"gitId":"samuelchristopher"},"content":"        this.projectIndex \u003d projectIndex;"},{"lineNumber":34,"author":{"gitId":"samuelchristopher"},"content":"        this.parse();"},{"lineNumber":35,"author":{"gitId":"samuelchristopher"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":37,"author":{"gitId":"thatseant"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"thatseant"},"content":"     * Retrieves task index from hashmap passed to it from constructor."},{"lineNumber":39,"author":{"gitId":"thatseant"},"content":"     * @throws EzExceptions EzException"},{"lineNumber":40,"author":{"gitId":"thatseant"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"thatseant"},"content":"    public void parse() throws EzExceptions {"},{"lineNumber":42,"author":{"gitId":"samuelchristopher"},"content":"        try {"},{"lineNumber":43,"author":{"gitId":"samuelchristopher"},"content":"            taskIndex \u003d Integer.parseInt(getHashValue(params, \"t\")) - 1;"},{"lineNumber":44,"author":{"gitId":"samuelchristopher"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":45,"author":{"gitId":"thatseant"},"content":"            throw new EzExceptions(\"invalidTaskID\");"},{"lineNumber":46,"author":{"gitId":"samuelchristopher"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":48,"author":{"gitId":"samuelchristopher"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":50,"author":{"gitId":"thatseant"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"thatseant"},"content":"     * Executes command to mark task as done within project."},{"lineNumber":52,"author":{"gitId":"thatseant"},"content":"     * @param projects list of all projects in program"},{"lineNumber":53,"author":{"gitId":"thatseant"},"content":"     * @param teamMembers list of all members in program"},{"lineNumber":54,"author":{"gitId":"thatseant"},"content":"     * @return task done UI message."},{"lineNumber":55,"author":{"gitId":"thatseant"},"content":"     * @throws EzExceptions EzException"},{"lineNumber":56,"author":{"gitId":"thatseant"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"riazaham"},"content":"    public String executeCommand(ArrayList\u003cProject\u003e projects,"},{"lineNumber":58,"author":{"gitId":"thatseant"},"content":"                                 ArrayList\u003cTeamMember\u003e teamMembers) throws EzExceptions {"},{"lineNumber":59,"author":{"gitId":"samuelchristopher"},"content":"        Project project \u003d projects.get(projectIndex);"},{"lineNumber":60,"author":{"gitId":"samuelchristopher"},"content":"        try {"},{"lineNumber":61,"author":{"gitId":"samuelchristopher"},"content":"            Task selectedTask \u003d project.getTask(taskIndex);"},{"lineNumber":62,"author":{"gitId":"samuelchristopher"},"content":"            selectedTask.markAsDone();"},{"lineNumber":63,"author":{"gitId":"samuelchristopher"},"content":"            return Ui.printTaskDoneMessage(selectedTask.toString());"},{"lineNumber":64,"author":{"gitId":"samuelchristopher"},"content":"        }  catch (NumberFormatException | IndexOutOfBoundsException e) {"},{"lineNumber":65,"author":{"gitId":"thatseant"},"content":"            throw new EzExceptions(\"invalidTaskID\");"},{"lineNumber":66,"author":{"gitId":"samuelchristopher"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"samuelchristopher"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":69,"author":{"gitId":"thatseant"},"content":"    /**"},{"lineNumber":70,"author":{"gitId":"thatseant"},"content":"     * Checks if command will exit program."},{"lineNumber":71,"author":{"gitId":"thatseant"},"content":"     * @return isExit status."},{"lineNumber":72,"author":{"gitId":"thatseant"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"samuelchristopher"},"content":"    public Boolean isExit() {"},{"lineNumber":74,"author":{"gitId":"samuelchristopher"},"content":"        return false;"},{"lineNumber":75,"author":{"gitId":"samuelchristopher"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":77,"author":{"gitId":"samuelchristopher"},"content":"}"}],"authorContributionMap":{"thatseant":38,"samuelchristopher":38,"riazaham":1}},{"path":"src/main/java/seedu/ezmanager/commands/task/TaskEditCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"thatseant"},"content":"package seedu.ezmanager.commands.task;"},{"lineNumber":2,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":3,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.EzExceptions;"},{"lineNumber":4,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.commands.Command;"},{"lineNumber":5,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.member.TeamMember;"},{"lineNumber":6,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.project.Project;"},{"lineNumber":7,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.task.Task;"},{"lineNumber":8,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.ui.Ui;"},{"lineNumber":9,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":10,"author":{"gitId":"riazaham"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitId":"riazaham"},"content":"import java.util.HashMap;"},{"lineNumber":12,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":13,"author":{"gitId":"thatseant"},"content":"import static seedu.ezmanager.Parser.getHashValue;"},{"lineNumber":14,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":15,"author":{"gitId":"thatseant"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"thatseant"},"content":" * Command that updates the name of a specific task."},{"lineNumber":17,"author":{"gitId":"thatseant"},"content":" */"},{"lineNumber":18,"author":{"gitId":"riazaham"},"content":"public class TaskEditCommand extends Command {"},{"lineNumber":19,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":20,"author":{"gitId":"riazaham"},"content":"    private int taskIndex;"},{"lineNumber":21,"author":{"gitId":"riazaham"},"content":"    private String taskName;"},{"lineNumber":22,"author":{"gitId":"riazaham"},"content":"    private int projectIndex;"},{"lineNumber":23,"author":{"gitId":"riazaham"},"content":"    HashMap\u003cString, String\u003e params;"},{"lineNumber":24,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":25,"author":{"gitId":"thatseant"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"thatseant"},"content":"     * Constructor for TaskEditCommand. Calls parse() method."},{"lineNumber":27,"author":{"gitId":"thatseant"},"content":"     * @param params Hashmap of parameters the command requires."},{"lineNumber":28,"author":{"gitId":"thatseant"},"content":"     * @param projectIndex Integer pointer to currently selected project"},{"lineNumber":29,"author":{"gitId":"thatseant"},"content":"     * @throws EzExceptions EzException"},{"lineNumber":30,"author":{"gitId":"thatseant"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"riazaham"},"content":"    public TaskEditCommand(HashMap\u003cString, String\u003e params, int projectIndex)"},{"lineNumber":32,"author":{"gitId":"thatseant"},"content":"            throws EzExceptions {"},{"lineNumber":33,"author":{"gitId":"riazaham"},"content":"        this.params \u003d params;"},{"lineNumber":34,"author":{"gitId":"riazaham"},"content":"        this.projectIndex \u003d projectIndex;"},{"lineNumber":35,"author":{"gitId":"riazaham"},"content":"        this.parse();"},{"lineNumber":36,"author":{"gitId":"riazaham"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":38,"author":{"gitId":"thatseant"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"thatseant"},"content":"     * Retrieves task index and task name from hashmap passed to it from constructor."},{"lineNumber":40,"author":{"gitId":"thatseant"},"content":"     * @throws EzExceptions EzException"},{"lineNumber":41,"author":{"gitId":"thatseant"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"thatseant"},"content":"    public void parse() throws EzExceptions {"},{"lineNumber":43,"author":{"gitId":"riazaham"},"content":"        try {"},{"lineNumber":44,"author":{"gitId":"riazaham"},"content":"            taskIndex \u003d Integer.parseInt(getHashValue(params, \"t\")) - 1;"},{"lineNumber":45,"author":{"gitId":"riazaham"},"content":"            taskName \u003d getHashValue(params, \"n\");"},{"lineNumber":46,"author":{"gitId":"riazaham"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":47,"author":{"gitId":"thatseant"},"content":"            throw new EzExceptions(\"invalidTaskID\");"},{"lineNumber":48,"author":{"gitId":"riazaham"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"riazaham"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":51,"author":{"gitId":"thatseant"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"thatseant"},"content":"     * Executes command to update name of task."},{"lineNumber":53,"author":{"gitId":"thatseant"},"content":"     * @param projects list of all projects in program"},{"lineNumber":54,"author":{"gitId":"thatseant"},"content":"     * @param teamMembers list of all members in program"},{"lineNumber":55,"author":{"gitId":"thatseant"},"content":"     * @return task name updated UI message."},{"lineNumber":56,"author":{"gitId":"thatseant"},"content":"     * @throws EzExceptions EzException"},{"lineNumber":57,"author":{"gitId":"thatseant"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"thatseant"},"content":"    public String executeCommand(ArrayList\u003cProject\u003e projects, ArrayList\u003cTeamMember\u003e teamMembers) throws EzExceptions {"},{"lineNumber":59,"author":{"gitId":"riazaham"},"content":"        if (projects.size() \u003d\u003d 0) {"},{"lineNumber":60,"author":{"gitId":"thatseant"},"content":"            throw new EzExceptions(\"emptyProjectList\");"},{"lineNumber":61,"author":{"gitId":"riazaham"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"riazaham"},"content":"        try {"},{"lineNumber":63,"author":{"gitId":"riazaham"},"content":"            Task selectedTask \u003d projects.get(projectIndex).getTask(taskIndex);"},{"lineNumber":64,"author":{"gitId":"riazaham"},"content":"            String oldTaskName \u003d selectedTask.getTaskDescription();"},{"lineNumber":65,"author":{"gitId":"riazaham"},"content":"            selectedTask.setTaskDescription(taskName);"},{"lineNumber":66,"author":{"gitId":"riazaham"},"content":"            return Ui.printTaskNameUpdatedMessage(oldTaskName, taskName);"},{"lineNumber":67,"author":{"gitId":"riazaham"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":68,"author":{"gitId":"thatseant"},"content":"            throw new EzExceptions(\"invalidTaskID\");"},{"lineNumber":69,"author":{"gitId":"riazaham"},"content":"        }"},{"lineNumber":70,"author":{"gitId":"riazaham"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":72,"author":{"gitId":"thatseant"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"thatseant"},"content":"     * Checks if command will exit program."},{"lineNumber":74,"author":{"gitId":"thatseant"},"content":"     * @return isExit status."},{"lineNumber":75,"author":{"gitId":"thatseant"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"riazaham"},"content":"    public Boolean isExit() {"},{"lineNumber":77,"author":{"gitId":"riazaham"},"content":"        return false;"},{"lineNumber":78,"author":{"gitId":"riazaham"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"riazaham"},"content":"}"}],"authorContributionMap":{"thatseant":38,"riazaham":41}},{"path":"src/main/java/seedu/ezmanager/commands/task/TaskListCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"thatseant"},"content":"package seedu.ezmanager.commands.task;"},{"lineNumber":2,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":3,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.EzExceptions;"},{"lineNumber":4,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.commands.Command;"},{"lineNumber":5,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.member.TeamMember;"},{"lineNumber":6,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.project.Project;"},{"lineNumber":7,"author":{"gitId":"samuelchristopher"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":9,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.ui.Ui;"},{"lineNumber":10,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":11,"author":{"gitId":"thatseant"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"thatseant"},"content":" * Prints the Project View which shows list of tasks and members within a project."},{"lineNumber":13,"author":{"gitId":"thatseant"},"content":" */"},{"lineNumber":14,"author":{"gitId":"thatseant"},"content":"public class TaskListCommand extends Command {"},{"lineNumber":15,"author":{"gitId":"thatseant"},"content":"    private int projectIndex;"},{"lineNumber":16,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":17,"author":{"gitId":"thatseant"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"thatseant"},"content":"     * Constructor for TaskListCommand. Calls parse() method."},{"lineNumber":19,"author":{"gitId":"thatseant"},"content":"     * @param projectIndex Integer pointer to currently selected project"},{"lineNumber":20,"author":{"gitId":"thatseant"},"content":"     * @throws EzExceptions EzException"},{"lineNumber":21,"author":{"gitId":"thatseant"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"thatseant"},"content":"    public TaskListCommand(int projectIndex) {"},{"lineNumber":23,"author":{"gitId":"thatseant"},"content":"        this.projectIndex \u003d projectIndex;"},{"lineNumber":24,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":26,"author":{"gitId":"thatseant"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"thatseant"},"content":"     * Executes command that displays project view."},{"lineNumber":28,"author":{"gitId":"thatseant"},"content":"     * @param projects list of all projects in program"},{"lineNumber":29,"author":{"gitId":"thatseant"},"content":"     * @param teamMembers list of all members in program"},{"lineNumber":30,"author":{"gitId":"thatseant"},"content":"     * @return projectView"},{"lineNumber":31,"author":{"gitId":"thatseant"},"content":"     * @throws EzExceptions EzException"},{"lineNumber":32,"author":{"gitId":"thatseant"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"riazaham"},"content":"    public String executeCommand(ArrayList\u003cProject\u003e projects,"},{"lineNumber":34,"author":{"gitId":"thatseant"},"content":"                                 ArrayList\u003cTeamMember\u003e teamMembers) throws EzExceptions {"},{"lineNumber":35,"author":{"gitId":"thatseant"},"content":"        Project selectedProject \u003d projects.get(projectIndex);"},{"lineNumber":36,"author":{"gitId":"thatseant"},"content":"        String projectView \u003d Ui.projectViewMessage(selectedProject);"},{"lineNumber":37,"author":{"gitId":"thatseant"},"content":"        return projectView;"},{"lineNumber":38,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":40,"author":{"gitId":"thatseant"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"thatseant"},"content":"     * Checks if command will exit program."},{"lineNumber":42,"author":{"gitId":"thatseant"},"content":"     * @return isExit status."},{"lineNumber":43,"author":{"gitId":"thatseant"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"thatseant"},"content":"    public Boolean isExit() {"},{"lineNumber":45,"author":{"gitId":"thatseant"},"content":"        return false;"},{"lineNumber":46,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"thatseant"},"content":"}"}],"authorContributionMap":{"thatseant":44,"samuelchristopher":1,"riazaham":2}},{"path":"src/main/java/seedu/ezmanager/commands/task/TaskSortCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"thatseant"},"content":"package seedu.ezmanager.commands.task;"},{"lineNumber":2,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":3,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.EzExceptions;"},{"lineNumber":4,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.member.TeamMember;"},{"lineNumber":5,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.project.Project;"},{"lineNumber":6,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.commands.Command;"},{"lineNumber":7,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.task.Task;"},{"lineNumber":8,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":9,"author":{"gitId":"shreytheshreyas"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitId":"shreytheshreyas"},"content":"import java.util.Collections;"},{"lineNumber":11,"author":{"gitId":"shreytheshreyas"},"content":"import java.util.Comparator;"},{"lineNumber":12,"author":{"gitId":"thatseant"},"content":"import java.util.HashMap;"},{"lineNumber":13,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":14,"author":{"gitId":"thatseant"},"content":"import static seedu.ezmanager.Parser.getHashValue;"},{"lineNumber":15,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":16,"author":{"gitId":"thatseant"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"thatseant"},"content":" * Sorts the tasks within a project by priority, actual time, estimated time or deadline."},{"lineNumber":18,"author":{"gitId":"thatseant"},"content":" */"},{"lineNumber":19,"author":{"gitId":"shreytheshreyas"},"content":"public class TaskSortCommand extends Command {"},{"lineNumber":20,"author":{"gitId":"shreytheshreyas"},"content":"    private int projectIndex;"},{"lineNumber":21,"author":{"gitId":"thatseant"},"content":"    HashMap\u003cString, String\u003e params;"},{"lineNumber":22,"author":{"gitId":"shreytheshreyas"},"content":"    private String sortingType;"},{"lineNumber":23,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":24,"author":{"gitId":"thatseant"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"thatseant"},"content":"     * Constructor for TaskSortCommand. Calls parse() method."},{"lineNumber":26,"author":{"gitId":"thatseant"},"content":"     * @param projectIndex Integer pointer to currently selected project"},{"lineNumber":27,"author":{"gitId":"thatseant"},"content":"     * @throws EzExceptions EzException"},{"lineNumber":28,"author":{"gitId":"thatseant"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"thatseant"},"content":"    public TaskSortCommand(HashMap\u003cString, String\u003e params, int projectIndex)"},{"lineNumber":30,"author":{"gitId":"thatseant"},"content":"            throws EzExceptions {"},{"lineNumber":31,"author":{"gitId":"thatseant"},"content":"        this.params \u003d params;"},{"lineNumber":32,"author":{"gitId":"shreytheshreyas"},"content":"        this.projectIndex \u003d projectIndex;"},{"lineNumber":33,"author":{"gitId":"shreytheshreyas"},"content":"        this.parse();"},{"lineNumber":34,"author":{"gitId":"shreytheshreyas"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":36,"author":{"gitId":"thatseant"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"thatseant"},"content":"     * Retrieves sorting type from hashmap passed to it from constructor."},{"lineNumber":38,"author":{"gitId":"thatseant"},"content":"     * @throws EzExceptions EzException"},{"lineNumber":39,"author":{"gitId":"thatseant"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"thatseant"},"content":"    public void parse() throws EzExceptions {"},{"lineNumber":41,"author":{"gitId":"shreytheshreyas"},"content":"        try {"},{"lineNumber":42,"author":{"gitId":"thatseant"},"content":"            sortingType \u003d getHashValue(params, \"s\");"},{"lineNumber":43,"author":{"gitId":"shreytheshreyas"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":44,"author":{"gitId":"thatseant"},"content":"            throw new EzExceptions(\"invalidTaskID\");"},{"lineNumber":45,"author":{"gitId":"shreytheshreyas"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"shreytheshreyas"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":48,"author":{"gitId":"thatseant"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"thatseant"},"content":"     * Executes command to sort tasks."},{"lineNumber":50,"author":{"gitId":"thatseant"},"content":"     * @param projects list of all projects in program"},{"lineNumber":51,"author":{"gitId":"thatseant"},"content":"     * @param teamMembers list of all members in program"},{"lineNumber":52,"author":{"gitId":"thatseant"},"content":"     * @return task sorted UI message."},{"lineNumber":53,"author":{"gitId":"thatseant"},"content":"     * @throws EzExceptions EzException"},{"lineNumber":54,"author":{"gitId":"thatseant"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"thatseant"},"content":"    public String executeCommand(ArrayList\u003cProject\u003e projects, ArrayList\u003cTeamMember\u003e teamMembers) throws EzExceptions {"},{"lineNumber":56,"author":{"gitId":"shreytheshreyas"},"content":"        Project project \u003d projects.get(projectIndex);"},{"lineNumber":57,"author":{"gitId":"shreytheshreyas"},"content":"        switch (sortingType) {"},{"lineNumber":58,"author":{"gitId":"shreytheshreyas"},"content":"        case \"p\":"},{"lineNumber":59,"author":{"gitId":"shreytheshreyas"},"content":"            Collections.sort(project.getTaskList(), new Comparator\u003cTask\u003e() {"},{"lineNumber":60,"author":{"gitId":"shreytheshreyas"},"content":"                @Override"},{"lineNumber":61,"author":{"gitId":"shreytheshreyas"},"content":"                public int compare(Task o1, Task o2) {"},{"lineNumber":62,"author":{"gitId":"shreytheshreyas"},"content":"                    if (o1.getPriority() \u003d\u003d 0) {"},{"lineNumber":63,"author":{"gitId":"shreytheshreyas"},"content":"                        return 1;"},{"lineNumber":64,"author":{"gitId":"shreytheshreyas"},"content":"                    }"},{"lineNumber":65,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":66,"author":{"gitId":"shreytheshreyas"},"content":"                    if (o2.getPriority() \u003d\u003d 0) {"},{"lineNumber":67,"author":{"gitId":"shreytheshreyas"},"content":"                        return -1;"},{"lineNumber":68,"author":{"gitId":"shreytheshreyas"},"content":"                    }"},{"lineNumber":69,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":70,"author":{"gitId":"shreytheshreyas"},"content":"                    return o1.getPriority() - o2.getPriority(); //sort based on priority"},{"lineNumber":71,"author":{"gitId":"shreytheshreyas"},"content":"                }"},{"lineNumber":72,"author":{"gitId":"shreytheshreyas"},"content":"            });"},{"lineNumber":73,"author":{"gitId":"shreytheshreyas"},"content":"            System.out.println(\"Task List sorted based on priority\");"},{"lineNumber":74,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":75,"author":{"gitId":"shreytheshreyas"},"content":"            break;"},{"lineNumber":76,"author":{"gitId":"shreytheshreyas"},"content":"        case \"d\":"},{"lineNumber":77,"author":{"gitId":"shreytheshreyas"},"content":"            Collections.sort(project.getTaskList(), new Comparator\u003cTask\u003e() {"},{"lineNumber":78,"author":{"gitId":"shreytheshreyas"},"content":"                    @Override"},{"lineNumber":79,"author":{"gitId":"shreytheshreyas"},"content":"                    public int compare(Task o1, Task o2) {"},{"lineNumber":80,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":81,"author":{"gitId":"shreytheshreyas"},"content":"                        if (o1.getDeadline() \u003d\u003d null) {"},{"lineNumber":82,"author":{"gitId":"shreytheshreyas"},"content":"                            return 1;"},{"lineNumber":83,"author":{"gitId":"shreytheshreyas"},"content":"                        }"},{"lineNumber":84,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":85,"author":{"gitId":"shreytheshreyas"},"content":"                        if (o2.getDeadline() \u003d\u003d null) {"},{"lineNumber":86,"author":{"gitId":"shreytheshreyas"},"content":"                            return -1;"},{"lineNumber":87,"author":{"gitId":"shreytheshreyas"},"content":"                        }"},{"lineNumber":88,"author":{"gitId":"shreytheshreyas"},"content":"                        return o1.getDeadline().compareTo(o2.getDeadline());"},{"lineNumber":89,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":90,"author":{"gitId":"shreytheshreyas"},"content":"                    }"},{"lineNumber":91,"author":{"gitId":"shreytheshreyas"},"content":"                });"},{"lineNumber":92,"author":{"gitId":"shreytheshreyas"},"content":"            System.out.println(\"Task List sorted based on deadline\");"},{"lineNumber":93,"author":{"gitId":"shreytheshreyas"},"content":"            break;"},{"lineNumber":94,"author":{"gitId":"thatseant"},"content":"        case \"a\":"},{"lineNumber":95,"author":{"gitId":"shreytheshreyas"},"content":"            Collections.sort(project.getTaskList(), new Comparator\u003cTask\u003e() {"},{"lineNumber":96,"author":{"gitId":"shreytheshreyas"},"content":"                @Override"},{"lineNumber":97,"author":{"gitId":"shreytheshreyas"},"content":"                public int compare(Task o1, Task o2) {"},{"lineNumber":98,"author":{"gitId":"shreytheshreyas"},"content":"                    if (o1.getActual() \u003d\u003d 0) {"},{"lineNumber":99,"author":{"gitId":"shreytheshreyas"},"content":"                        return 1;"},{"lineNumber":100,"author":{"gitId":"shreytheshreyas"},"content":"                    }"},{"lineNumber":101,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":102,"author":{"gitId":"shreytheshreyas"},"content":"                    if (o2.getActual() \u003d\u003d 0) {"},{"lineNumber":103,"author":{"gitId":"shreytheshreyas"},"content":"                        return -1;"},{"lineNumber":104,"author":{"gitId":"shreytheshreyas"},"content":"                    }"},{"lineNumber":105,"author":{"gitId":"shreytheshreyas"},"content":"                    return o1.getActual() - o2.getActual(); //sort based on actual time"},{"lineNumber":106,"author":{"gitId":"shreytheshreyas"},"content":"                }"},{"lineNumber":107,"author":{"gitId":"shreytheshreyas"},"content":"            });"},{"lineNumber":108,"author":{"gitId":"thatseant"},"content":"            System.out.println(\"Task List sorted based on actual time taken\");"},{"lineNumber":109,"author":{"gitId":"thatseant"},"content":"            break;"},{"lineNumber":110,"author":{"gitId":"thatseant"},"content":"        case \"e\":"},{"lineNumber":111,"author":{"gitId":"thatseant"},"content":"            Collections.sort(project.getTaskList(), new Comparator\u003cTask\u003e() {"},{"lineNumber":112,"author":{"gitId":"thatseant"},"content":"                @Override"},{"lineNumber":113,"author":{"gitId":"thatseant"},"content":"                public int compare(Task o1, Task o2) {"},{"lineNumber":114,"author":{"gitId":"thatseant"},"content":"                    if (o1.getEstimate() \u003d\u003d 0) {"},{"lineNumber":115,"author":{"gitId":"thatseant"},"content":"                        return 1;"},{"lineNumber":116,"author":{"gitId":"thatseant"},"content":"                    }"},{"lineNumber":117,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":118,"author":{"gitId":"thatseant"},"content":"                    if (o2.getEstimate() \u003d\u003d 0) {"},{"lineNumber":119,"author":{"gitId":"thatseant"},"content":"                        return -1;"},{"lineNumber":120,"author":{"gitId":"thatseant"},"content":"                    }"},{"lineNumber":121,"author":{"gitId":"thatseant"},"content":"                    return o1.getEstimate() - o2.getEstimate(); //sort based on actual time"},{"lineNumber":122,"author":{"gitId":"thatseant"},"content":"                }"},{"lineNumber":123,"author":{"gitId":"thatseant"},"content":"            });"},{"lineNumber":124,"author":{"gitId":"thatseant"},"content":"            System.out.println(\"Task List sorted based on estimated time taken\");"},{"lineNumber":125,"author":{"gitId":"shreytheshreyas"},"content":"            break;"},{"lineNumber":126,"author":{"gitId":"thatseant"},"content":"        default: throw new EzExceptions(\"InvalidSortingParameter\");"},{"lineNumber":127,"author":{"gitId":"shreytheshreyas"},"content":"        }"},{"lineNumber":128,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":129,"author":{"gitId":"shreytheshreyas"},"content":"        return \"\";"},{"lineNumber":130,"author":{"gitId":"shreytheshreyas"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":132,"author":{"gitId":"thatseant"},"content":"    /**"},{"lineNumber":133,"author":{"gitId":"thatseant"},"content":"     * Checks if command will exit program."},{"lineNumber":134,"author":{"gitId":"thatseant"},"content":"     * @return isExit status."},{"lineNumber":135,"author":{"gitId":"thatseant"},"content":"     */"},{"lineNumber":136,"author":{"gitId":"shreytheshreyas"},"content":"    public Boolean isExit() {"},{"lineNumber":137,"author":{"gitId":"shreytheshreyas"},"content":"        return false;"},{"lineNumber":138,"author":{"gitId":"shreytheshreyas"},"content":"    }"},{"lineNumber":139,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":140,"author":{"gitId":"shreytheshreyas"},"content":"}"}],"authorContributionMap":{"thatseant":58,"shreytheshreyas":82}},{"path":"src/main/java/seedu/ezmanager/member/TeamMember.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"thatseant"},"content":"package seedu.ezmanager.member;"},{"lineNumber":2,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":3,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.EzExceptions;"},{"lineNumber":4,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.project.Project;"},{"lineNumber":5,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.task.Task;"},{"lineNumber":6,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":7,"author":{"gitId":"samuellleow"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":9,"author":{"gitId":"samuelchristopher"},"content":"public class TeamMember {"},{"lineNumber":10,"author":{"gitId":"samuelchristopher"},"content":"    private String name;"},{"lineNumber":11,"author":{"gitId":"samuellleow"},"content":"    private ArrayList\u003cProject\u003e assignedProjects;"},{"lineNumber":12,"author":{"gitId":"thatseant"},"content":"    private ArrayList\u003cTask\u003e tasks;"},{"lineNumber":13,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":14,"author":{"gitId":"samuelchristopher"},"content":"    public TeamMember(String name) {"},{"lineNumber":15,"author":{"gitId":"samuelchristopher"},"content":"        this.name \u003d name;"},{"lineNumber":16,"author":{"gitId":"thatseant"},"content":"        tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":17,"author":{"gitId":"samuellleow"},"content":"        this.assignedProjects \u003d new ArrayList\u003c\u003e();"},{"lineNumber":18,"author":{"gitId":"samuelchristopher"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":20,"author":{"gitId":"samuellleow"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"samuellleow"},"content":"     * Assign project to specified member."},{"lineNumber":22,"author":{"gitId":"samuellleow"},"content":"     * Adds project into ArrayList of Projects."},{"lineNumber":23,"author":{"gitId":"samuellleow"},"content":"     * @param project Project object assigned to current member."},{"lineNumber":24,"author":{"gitId":"samuellleow"},"content":"     * @throws EzExceptions if project already exists in the ArrayList of TeamMembers."},{"lineNumber":25,"author":{"gitId":"samuellleow"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"thatseant"},"content":"    public void assignProject(Project project) throws EzExceptions {"},{"lineNumber":27,"author":{"gitId":"samuellleow"},"content":"        for (Project assignedProject : assignedProjects) {"},{"lineNumber":28,"author":{"gitId":"samuellleow"},"content":"            if (assignedProject \u003d\u003d project) {"},{"lineNumber":29,"author":{"gitId":"thatseant"},"content":"                throw new EzExceptions(\"projectAlreadyAssigned\");"},{"lineNumber":30,"author":{"gitId":"samuellleow"},"content":"            }"},{"lineNumber":31,"author":{"gitId":"samuellleow"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"samuellleow"},"content":"        assignedProjects.add(project);"},{"lineNumber":33,"author":{"gitId":"samuellleow"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"samuellleow"},"content":"    "},{"lineNumber":35,"author":{"gitId":"thatseant"},"content":"    public void setTask(Task selectedTask) {"},{"lineNumber":36,"author":{"gitId":"thatseant"},"content":"        tasks.add(selectedTask);"},{"lineNumber":37,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"thatseant"},"content":"    "},{"lineNumber":39,"author":{"gitId":"thatseant"},"content":"    public ArrayList\u003cTask\u003e getTasks() {"},{"lineNumber":40,"author":{"gitId":"thatseant"},"content":"        return tasks;"},{"lineNumber":41,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":43,"author":{"gitId":"samuellleow"},"content":"    public ArrayList\u003cProject\u003e getAssignedProjects() {"},{"lineNumber":44,"author":{"gitId":"samuellleow"},"content":"        return assignedProjects;"},{"lineNumber":45,"author":{"gitId":"samuellleow"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":47,"author":{"gitId":"samuelchristopher"},"content":"    public String getName() {"},{"lineNumber":48,"author":{"gitId":"samuelchristopher"},"content":"        return name;"},{"lineNumber":49,"author":{"gitId":"samuelchristopher"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":51,"author":{"gitId":"riazaham"},"content":"    @Override"},{"lineNumber":52,"author":{"gitId":"riazaham"},"content":"    public String toString() {"},{"lineNumber":53,"author":{"gitId":"riazaham"},"content":"        return name;"},{"lineNumber":54,"author":{"gitId":"riazaham"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":56,"author":{"gitId":"samuelchristopher"},"content":"    public String saveFormat() {"},{"lineNumber":57,"author":{"gitId":"samuelchristopher"},"content":"        String memberString \u003d \"\";"},{"lineNumber":58,"author":{"gitId":"samuelchristopher"},"content":"        memberString +\u003d this.toString();"},{"lineNumber":59,"author":{"gitId":"samuelchristopher"},"content":"        /*"},{"lineNumber":60,"author":{"gitId":"samuelchristopher"},"content":"        memberString +\u003d \"\\npS\\n\";"},{"lineNumber":61,"author":{"gitId":"samuelchristopher"},"content":"        if (assignedProjects.size() \u003e 0) {"},{"lineNumber":62,"author":{"gitId":"samuelchristopher"},"content":"            for (Project project : assignedProjects) {"},{"lineNumber":63,"author":{"gitId":"samuelchristopher"},"content":"                memberString +\u003d project.getProjectName();"},{"lineNumber":64,"author":{"gitId":"samuelchristopher"},"content":"            }"},{"lineNumber":65,"author":{"gitId":"samuelchristopher"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"samuelchristopher"},"content":"        memberString +\u003d \"\\npE\";"},{"lineNumber":67,"author":{"gitId":"samuelchristopher"},"content":"        */"},{"lineNumber":68,"author":{"gitId":"samuelchristopher"},"content":"        return memberString;"},{"lineNumber":69,"author":{"gitId":"samuelchristopher"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"samuelchristopher"},"content":"}"}],"authorContributionMap":{"thatseant":16,"samuelchristopher":28,"samuellleow":22,"riazaham":4}},{"path":"src/main/java/seedu/ezmanager/project/Project.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"thatseant"},"content":"package seedu.ezmanager.project;"},{"lineNumber":2,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":3,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.member.TeamMember;"},{"lineNumber":4,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.task.Task;"},{"lineNumber":5,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.storage.Storage;"},{"lineNumber":6,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":7,"author":{"gitId":"samuellleow"},"content":"import java.time.LocalDate;"},{"lineNumber":8,"author":{"gitId":"thatseant"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":10,"author":{"gitId":"samuellleow"},"content":"public class Project implements Comparable\u003cProject\u003e {"},{"lineNumber":11,"author":{"gitId":"samuellleow"},"content":"    protected String projectName;"},{"lineNumber":12,"author":{"gitId":"samuellleow"},"content":"    protected boolean isDone;"},{"lineNumber":13,"author":{"gitId":"thatseant"},"content":"    private ArrayList\u003cTask\u003e tasks;"},{"lineNumber":14,"author":{"gitId":"samuellleow"},"content":"    private String projectDescription;"},{"lineNumber":15,"author":{"gitId":"samuellleow"},"content":"    private LocalDate projectDeadline;"},{"lineNumber":16,"author":{"gitId":"samuellleow"},"content":"    private ArrayList\u003cTeamMember\u003e teamMembers;"},{"lineNumber":17,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":18,"author":{"gitId":"samuellleow"},"content":"    public Project(String projectName) {"},{"lineNumber":19,"author":{"gitId":"samuellleow"},"content":"        this.projectName \u003d projectName;"},{"lineNumber":20,"author":{"gitId":"samuellleow"},"content":"        this.isDone \u003d false;"},{"lineNumber":21,"author":{"gitId":"thatseant"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":22,"author":{"gitId":"samuellleow"},"content":"        this.teamMembers \u003d new ArrayList\u003c\u003e();"},{"lineNumber":23,"author":{"gitId":"riazaham"},"content":"        this.projectDescription \u003d \"\u003cproject description empty\u003e\";"},{"lineNumber":24,"author":{"gitId":"samuellleow"},"content":"        this.projectDeadline \u003d null;"},{"lineNumber":25,"author":{"gitId":"samuellleow"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":27,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":28,"author":{"gitId":"shreytheshreyas"},"content":"    public void sortTasksList() {"},{"lineNumber":29,"author":{"gitId":"shreytheshreyas"},"content":"        //Collections.sort(tasks);"},{"lineNumber":30,"author":{"gitId":"shreytheshreyas"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":32,"author":{"gitId":"samuellleow"},"content":"    public int compareTo(Project project) {"},{"lineNumber":33,"author":{"gitId":"samuellleow"},"content":"        if (getProjectDeadline() \u003d\u003d null || project.getProjectDeadline() \u003d\u003d null) {"},{"lineNumber":34,"author":{"gitId":"samuellleow"},"content":"            return 0;"},{"lineNumber":35,"author":{"gitId":"samuellleow"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"samuellleow"},"content":"        return getProjectDeadline().compareTo(project.getProjectDeadline());"},{"lineNumber":37,"author":{"gitId":"samuellleow"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":39,"author":{"gitId":"thatseant"},"content":"    public Task getTask(int taskIndex) {"},{"lineNumber":40,"author":{"gitId":"thatseant"},"content":"        return tasks.get(taskIndex);"},{"lineNumber":41,"author":{"gitId":"riazaham"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":43,"author":{"gitId":"riazaham"},"content":"    public void addTask(Task task) {"},{"lineNumber":44,"author":{"gitId":"thatseant"},"content":"        tasks.add(task);"},{"lineNumber":45,"author":{"gitId":"shreytheshreyas"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":47,"author":{"gitId":"thatseant"},"content":"    public void deleteTask(int taskIndex) {"},{"lineNumber":48,"author":{"gitId":"thatseant"},"content":"        tasks.remove(taskIndex);"},{"lineNumber":49,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":51,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":52,"author":{"gitId":"samuellleow"},"content":"    public int getNumberOfTask() {"},{"lineNumber":53,"author":{"gitId":"samuellleow"},"content":"        return tasks.size();"},{"lineNumber":54,"author":{"gitId":"samuellleow"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":56,"author":{"gitId":"samuellleow"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"samuellleow"},"content":"     * Counts the total number of tasks in the current project."},{"lineNumber":58,"author":{"gitId":"samuellleow"},"content":"     * @return Number of tasks marked as done."},{"lineNumber":59,"author":{"gitId":"samuellleow"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"samuellleow"},"content":"    public int getNumberOfFinishedTask() {"},{"lineNumber":61,"author":{"gitId":"samuellleow"},"content":"        int finishedTaskCounter \u003d 0;"},{"lineNumber":62,"author":{"gitId":"samuellleow"},"content":"        for (Task task : tasks) {"},{"lineNumber":63,"author":{"gitId":"samuellleow"},"content":"            if (task.isDone()) {"},{"lineNumber":64,"author":{"gitId":"samuellleow"},"content":"                finishedTaskCounter++;"},{"lineNumber":65,"author":{"gitId":"samuellleow"},"content":"            }"},{"lineNumber":66,"author":{"gitId":"samuellleow"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"samuellleow"},"content":"        return finishedTaskCounter;"},{"lineNumber":68,"author":{"gitId":"samuellleow"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":70,"author":{"gitId":"samuellleow"},"content":"    public void addDescription(String projectDescription) {"},{"lineNumber":71,"author":{"gitId":"samuellleow"},"content":"        this.projectDescription \u003d projectDescription;"},{"lineNumber":72,"author":{"gitId":"samuellleow"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":74,"author":{"gitId":"samuellleow"},"content":"    public String getDescription() {"},{"lineNumber":75,"author":{"gitId":"samuellleow"},"content":"        return projectDescription;"},{"lineNumber":76,"author":{"gitId":"samuellleow"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":78,"author":{"gitId":"samuellleow"},"content":"    public String getProjectName() {"},{"lineNumber":79,"author":{"gitId":"samuellleow"},"content":"        return projectName;"},{"lineNumber":80,"author":{"gitId":"samuellleow"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":82,"author":{"gitId":"samuellleow"},"content":"    public void addProjectDeadline(LocalDate date) {"},{"lineNumber":83,"author":{"gitId":"samuellleow"},"content":"        this.projectDeadline \u003d date;"},{"lineNumber":84,"author":{"gitId":"samuellleow"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":86,"author":{"gitId":"riazaham"},"content":"    public LocalDate getProjectDeadline() {"},{"lineNumber":87,"author":{"gitId":"riazaham"},"content":"        return this.projectDeadline;"},{"lineNumber":88,"author":{"gitId":"riazaham"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":90,"author":{"gitId":"samuellleow"},"content":"    public ArrayList\u003cTeamMember\u003e getTeamMembers() {"},{"lineNumber":91,"author":{"gitId":"samuellleow"},"content":"        return this.teamMembers;"},{"lineNumber":92,"author":{"gitId":"samuellleow"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":94,"author":{"gitId":"samuellleow"},"content":"    public void addTeamMemberToProject(TeamMember addedMember) {"},{"lineNumber":95,"author":{"gitId":"samuellleow"},"content":"        teamMembers.add(addedMember);"},{"lineNumber":96,"author":{"gitId":"samuellleow"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":98,"author":{"gitId":"samuellleow"},"content":"    /**"},{"lineNumber":99,"author":{"gitId":"samuellleow"},"content":"     * Returns details of the specified task."},{"lineNumber":100,"author":{"gitId":"samuellleow"},"content":"     *"},{"lineNumber":101,"author":{"gitId":"samuellleow"},"content":"     * @return Details of Project"},{"lineNumber":102,"author":{"gitId":"samuellleow"},"content":"     */"},{"lineNumber":103,"author":{"gitId":"samuellleow"},"content":"    @Override"},{"lineNumber":104,"author":{"gitId":"samuellleow"},"content":"    public String toString() {"},{"lineNumber":105,"author":{"gitId":"samuellleow"},"content":"        if (!projectDescription.equals(\"\") \u0026 projectDeadline !\u003d null) {"},{"lineNumber":106,"author":{"gitId":"samuellleow"},"content":"            return \"Description: \" + projectDescription + \" | Deadline: \" + projectDeadline;"},{"lineNumber":107,"author":{"gitId":"samuellleow"},"content":"        } else if (!projectDescription.equals(\"\") \u0026 projectDeadline \u003d\u003d null) {"},{"lineNumber":108,"author":{"gitId":"samuellleow"},"content":"            return \"Description: \" + projectDescription + \" | \u003cproject deadline empty\u003e\";"},{"lineNumber":109,"author":{"gitId":"samuellleow"},"content":"        } else if (projectDeadline !\u003d null) {"},{"lineNumber":110,"author":{"gitId":"samuellleow"},"content":"            return \"\u003cproject description empty\u003e | Deadline: \" + projectDeadline;"},{"lineNumber":111,"author":{"gitId":"samuellleow"},"content":"        } else {"},{"lineNumber":112,"author":{"gitId":"samuellleow"},"content":"            return \"\u003cproject description empty\u003e | \u003cproject deadline empty\u003e\";"},{"lineNumber":113,"author":{"gitId":"samuellleow"},"content":"        }"},{"lineNumber":114,"author":{"gitId":"samuellleow"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":116,"author":{"gitId":"samuelchristopher"},"content":"    public ArrayList\u003cTask\u003e getTaskList() {"},{"lineNumber":117,"author":{"gitId":"samuelchristopher"},"content":"        return tasks;"},{"lineNumber":118,"author":{"gitId":"samuelchristopher"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":120,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":121,"author":{"gitId":"samuelchristopher"},"content":"    /*"},{"lineNumber":122,"author":{"gitId":"samuelchristopher"},"content":"        Returns a string that will be saved in the text file."},{"lineNumber":123,"author":{"gitId":"samuelchristopher"},"content":"        @returns String"},{"lineNumber":124,"author":{"gitId":"samuelchristopher"},"content":"    */"},{"lineNumber":125,"author":{"gitId":"samuelchristopher"},"content":"    public String saveFormat() {"},{"lineNumber":126,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":127,"author":{"gitId":"samuelchristopher"},"content":"        String tasksLines \u003d \"startTasks \\n\";"},{"lineNumber":128,"author":{"gitId":"samuelchristopher"},"content":"        if (tasks.size() \u003e 0) {"},{"lineNumber":129,"author":{"gitId":"samuelchristopher"},"content":"            for (Task task : tasks) {"},{"lineNumber":130,"author":{"gitId":"samuelchristopher"},"content":"                tasksLines +\u003d (task.saveFormat() + \"\\n\");"},{"lineNumber":131,"author":{"gitId":"samuelchristopher"},"content":"            }"},{"lineNumber":132,"author":{"gitId":"samuelchristopher"},"content":"        }"},{"lineNumber":133,"author":{"gitId":"samuelchristopher"},"content":"        tasksLines +\u003d \"endTasks\";"},{"lineNumber":134,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":135,"author":{"gitId":"samuelchristopher"},"content":"        String membersLines \u003d \"pMS\\n\";"},{"lineNumber":136,"author":{"gitId":"samuelchristopher"},"content":"        if (teamMembers.size() \u003e 0) {"},{"lineNumber":137,"author":{"gitId":"samuelchristopher"},"content":"            for (TeamMember member : teamMembers) {"},{"lineNumber":138,"author":{"gitId":"samuelchristopher"},"content":"                membersLines +\u003d member.getName() + \"\\n\";"},{"lineNumber":139,"author":{"gitId":"samuelchristopher"},"content":"            }"},{"lineNumber":140,"author":{"gitId":"samuelchristopher"},"content":"        }"},{"lineNumber":141,"author":{"gitId":"samuelchristopher"},"content":"        membersLines +\u003d \"pME\";"},{"lineNumber":142,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":143,"author":{"gitId":"samuelchristopher"},"content":"        String projectNameLine \u003d \"Project \" + projectName;"},{"lineNumber":144,"author":{"gitId":"samuelchristopher"},"content":"        String statusLine \u003d \"status \" + isDone;"},{"lineNumber":145,"author":{"gitId":"samuelchristopher"},"content":"        String projectDescriptionLine \u003d \"projectDescription \" + projectDescription;"},{"lineNumber":146,"author":{"gitId":"samuelchristopher"},"content":"        String projectDeadlineLine \u003d \"projectDeadline \" + projectDeadline;"},{"lineNumber":147,"author":{"gitId":"samuelchristopher"},"content":"        return projectNameLine + \"\\n\" + statusLine + \"\\n\" + projectDescriptionLine + \"\\n\""},{"lineNumber":148,"author":{"gitId":"samuelchristopher"},"content":"                + projectDeadlineLine + \"\\n\" + tasksLines + \"\\n\" + membersLines + \"\\n\";"},{"lineNumber":149,"author":{"gitId":"samuelchristopher"},"content":"    }"},{"lineNumber":150,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":151,"author":{"gitId":"samuelchristopher"},"content":"    public void markAsDone() {"},{"lineNumber":152,"author":{"gitId":"samuelchristopher"},"content":"        this.isDone \u003d true;"},{"lineNumber":153,"author":{"gitId":"samuelchristopher"},"content":"    }"},{"lineNumber":154,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":155,"author":{"gitId":"samuellleow"},"content":"    public boolean isProjectDone() {"},{"lineNumber":156,"author":{"gitId":"samuellleow"},"content":"        return isDone;"},{"lineNumber":157,"author":{"gitId":"samuellleow"},"content":"    }"},{"lineNumber":158,"author":{"gitId":"samuellleow"},"content":"}"}],"authorContributionMap":{"thatseant":16,"samuelchristopher":39,"samuellleow":86,"shreytheshreyas":8,"riazaham":9}},{"path":"src/main/java/seedu/ezmanager/storage/Storage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"thatseant"},"content":"package seedu.ezmanager.storage;"},{"lineNumber":2,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":3,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.EzExceptions;"},{"lineNumber":4,"author":{"gitId":"samuelchristopher"},"content":"import seedu.ezmanager.EzLogger;"},{"lineNumber":5,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.member.TeamMember;"},{"lineNumber":6,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.project.Project;"},{"lineNumber":7,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.task.Task;"},{"lineNumber":8,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":9,"author":{"gitId":"samuelchristopher"},"content":"import java.io.File;"},{"lineNumber":10,"author":{"gitId":"samuelchristopher"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":11,"author":{"gitId":"samuelchristopher"},"content":"import java.io.FileWriter;"},{"lineNumber":12,"author":{"gitId":"samuelchristopher"},"content":"import java.io.IOException;"},{"lineNumber":13,"author":{"gitId":"samuelchristopher"},"content":"import java.time.DateTimeException;"},{"lineNumber":14,"author":{"gitId":"samuelchristopher"},"content":"import java.time.LocalDate;"},{"lineNumber":15,"author":{"gitId":"samuelchristopher"},"content":"import java.util.ArrayList;"},{"lineNumber":16,"author":{"gitId":"samuelchristopher"},"content":"import java.util.NoSuchElementException;"},{"lineNumber":17,"author":{"gitId":"samuelchristopher"},"content":"import java.util.Scanner;"},{"lineNumber":18,"author":{"gitId":"samuelchristopher"},"content":"import java.util.logging.Level;"},{"lineNumber":19,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":20,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":21,"author":{"gitId":"samuelchristopher"},"content":"/**"},{"lineNumber":22,"author":{"gitId":"samuelchristopher"},"content":" * Class that saves and loads the data that is used in EZ Manager."},{"lineNumber":23,"author":{"gitId":"samuelchristopher"},"content":" */"},{"lineNumber":24,"author":{"gitId":"samuelchristopher"},"content":"public class Storage {"},{"lineNumber":25,"author":{"gitId":"samuelchristopher"},"content":"    private static File f;"},{"lineNumber":26,"author":{"gitId":"samuelchristopher"},"content":"    private static ArrayList\u003cProject\u003e temp \u003d new ArrayList\u003c\u003e();"},{"lineNumber":27,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":28,"author":{"gitId":"samuelchristopher"},"content":"    public Storage(String filePath) {"},{"lineNumber":29,"author":{"gitId":"samuelchristopher"},"content":"        f \u003d new File(filePath);"},{"lineNumber":30,"author":{"gitId":"samuelchristopher"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":32,"author":{"gitId":"samuelchristopher"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"samuelchristopher"},"content":"     * Loads the projects from the ezmanager.txt file"},{"lineNumber":34,"author":{"gitId":"samuelchristopher"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"samuelchristopher"},"content":"     * @param members ArrayList of TeamMember."},{"lineNumber":36,"author":{"gitId":"samuelchristopher"},"content":"     * @return projects ArrayList of Projects that have been added to EZ Manager previously."},{"lineNumber":37,"author":{"gitId":"samuelchristopher"},"content":"     * @throws EzExceptions When cannot access the file will throw \"Open File\" EzException"},{"lineNumber":38,"author":{"gitId":"samuelchristopher"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"thatseant"},"content":"    public static ArrayList\u003cProject\u003e loadProjects(ArrayList\u003cTeamMember\u003e members) throws EzExceptions {"},{"lineNumber":40,"author":{"gitId":"samuelchristopher"},"content":"        try {"},{"lineNumber":41,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":42,"author":{"gitId":"samuelchristopher"},"content":"            Scanner s \u003d new Scanner(f); // create a Scanner using the File as the source"},{"lineNumber":43,"author":{"gitId":"samuelchristopher"},"content":"            ArrayList\u003cProject\u003e projects \u003d new ArrayList\u003c\u003e();"},{"lineNumber":44,"author":{"gitId":"samuelchristopher"},"content":"            String currentLine;"},{"lineNumber":45,"author":{"gitId":"samuelchristopher"},"content":"            EzLogger.log(Level.INFO, \"Begin loading projects\");"},{"lineNumber":46,"author":{"gitId":"samuelchristopher"},"content":"            while (s.hasNext()) {"},{"lineNumber":47,"author":{"gitId":"samuelchristopher"},"content":"                currentLine \u003d s.nextLine();"},{"lineNumber":48,"author":{"gitId":"samuelchristopher"},"content":"                if (currentLine.contains(\"Project\")) {"},{"lineNumber":49,"author":{"gitId":"samuelchristopher"},"content":"                    String projectName \u003d currentLine.replaceFirst(\"Project\", \"\").trim();"},{"lineNumber":50,"author":{"gitId":"samuelchristopher"},"content":"                    boolean status \u003d Boolean.parseBoolean(s.nextLine().split(\" \")[1]);"},{"lineNumber":51,"author":{"gitId":"samuelchristopher"},"content":"                    String projectDescription \u003d s.nextLine().replaceFirst(\"projectDescription\", \"\");"},{"lineNumber":52,"author":{"gitId":"samuelchristopher"},"content":"                    String deadline \u003d s.nextLine().replaceFirst(\"projectDeadline\", \"\").trim();"},{"lineNumber":53,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":54,"author":{"gitId":"samuelchristopher"},"content":"                    Project newProject \u003d new Project(projectName);"},{"lineNumber":55,"author":{"gitId":"samuelchristopher"},"content":"                    if (status) {"},{"lineNumber":56,"author":{"gitId":"samuelchristopher"},"content":"                        newProject.markAsDone();"},{"lineNumber":57,"author":{"gitId":"samuelchristopher"},"content":"                    }"},{"lineNumber":58,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":59,"author":{"gitId":"samuelchristopher"},"content":"                    newProject.addDescription(projectDescription.trim());"},{"lineNumber":60,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":61,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":62,"author":{"gitId":"samuelchristopher"},"content":"                    if (!deadline.equals(\"null\")) {"},{"lineNumber":63,"author":{"gitId":"samuelchristopher"},"content":"                        LocalDate deadlineDate \u003d LocalDate.parse(deadline);"},{"lineNumber":64,"author":{"gitId":"samuelchristopher"},"content":"                        newProject.addProjectDeadline(deadlineDate);"},{"lineNumber":65,"author":{"gitId":"samuelchristopher"},"content":"                    }"},{"lineNumber":66,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":67,"author":{"gitId":"samuelchristopher"},"content":"                    // begin adding tasks to project"},{"lineNumber":68,"author":{"gitId":"samuelchristopher"},"content":"                    currentLine \u003d s.nextLine().trim();"},{"lineNumber":69,"author":{"gitId":"samuelchristopher"},"content":"                    while (!currentLine.equals(\"endTasks\")) {"},{"lineNumber":70,"author":{"gitId":"samuelchristopher"},"content":"                        if (currentLine.equals(\"startTasks\")) {"},{"lineNumber":71,"author":{"gitId":"samuelchristopher"},"content":"                            currentLine \u003d s.nextLine();"},{"lineNumber":72,"author":{"gitId":"samuelchristopher"},"content":"                            continue;"},{"lineNumber":73,"author":{"gitId":"samuelchristopher"},"content":"                        }"},{"lineNumber":74,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":75,"author":{"gitId":"samuelchristopher"},"content":"                        int taskDescriptionEndIndex \u003d currentLine.indexOf(\"|\");"},{"lineNumber":76,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":77,"author":{"gitId":"samuelchristopher"},"content":"                        if (taskDescriptionEndIndex !\u003d -1) {"},{"lineNumber":78,"author":{"gitId":"samuelchristopher"},"content":"                            Task newTask \u003d new Task(currentLine.substring(0, taskDescriptionEndIndex - 1).trim());"},{"lineNumber":79,"author":{"gitId":"samuelchristopher"},"content":"                            String taskString \u003d currentLine.substring(taskDescriptionEndIndex + 2);"},{"lineNumber":80,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":81,"author":{"gitId":"samuelchristopher"},"content":"                            // is task done?"},{"lineNumber":82,"author":{"gitId":"samuelchristopher"},"content":"                            int taskDoneStartIndex \u003d taskString.indexOf(\"tS\");"},{"lineNumber":83,"author":{"gitId":"samuelchristopher"},"content":"                            int taskDoneEndIndex \u003d taskString.indexOf(\"tE\");"},{"lineNumber":84,"author":{"gitId":"samuelchristopher"},"content":"                            if (taskDoneStartIndex !\u003d -1) {"},{"lineNumber":85,"author":{"gitId":"samuelchristopher"},"content":"                                String isTaskDoneString \u003d taskString.substring(taskDoneStartIndex + 2, taskDoneEndIndex)"},{"lineNumber":86,"author":{"gitId":"samuelchristopher"},"content":"                                        .trim();"},{"lineNumber":87,"author":{"gitId":"samuelchristopher"},"content":"                                boolean isTaskDone \u003d isTaskDoneString.equals(\"1\") ? true : false;"},{"lineNumber":88,"author":{"gitId":"samuelchristopher"},"content":"                                if (isTaskDone) {"},{"lineNumber":89,"author":{"gitId":"samuelchristopher"},"content":"                                    newTask.markAsDone();"},{"lineNumber":90,"author":{"gitId":"samuelchristopher"},"content":"                                }"},{"lineNumber":91,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":92,"author":{"gitId":"samuelchristopher"},"content":"                            }"},{"lineNumber":93,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":94,"author":{"gitId":"samuelchristopher"},"content":"                            // extract deadline"},{"lineNumber":95,"author":{"gitId":"samuelchristopher"},"content":"                            int deadlineStartIndex \u003d taskString.indexOf(\"dS\");"},{"lineNumber":96,"author":{"gitId":"samuelchristopher"},"content":"                            int deadlineEndIndex \u003d taskString.indexOf(\"dE\");"},{"lineNumber":97,"author":{"gitId":"samuelchristopher"},"content":"                            if (deadlineStartIndex !\u003d -1 \u0026\u0026 (deadlineEndIndex - deadlineStartIndex) \u003e 4) {"},{"lineNumber":98,"author":{"gitId":"samuelchristopher"},"content":"                                newTask.addDeadline("},{"lineNumber":99,"author":{"gitId":"samuelchristopher"},"content":"                                        LocalDate.parse("},{"lineNumber":100,"author":{"gitId":"samuelchristopher"},"content":"                                                taskString.substring(deadlineStartIndex + 3, deadlineEndIndex"},{"lineNumber":101,"author":{"gitId":"samuelchristopher"},"content":"                                                )"},{"lineNumber":102,"author":{"gitId":"samuelchristopher"},"content":"                                        )"},{"lineNumber":103,"author":{"gitId":"samuelchristopher"},"content":"                                );"},{"lineNumber":104,"author":{"gitId":"samuelchristopher"},"content":"                            }"},{"lineNumber":105,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":106,"author":{"gitId":"samuelchristopher"},"content":"                            taskString \u003d taskString.substring(taskString.indexOf(\"|\") + 1);"},{"lineNumber":107,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":108,"author":{"gitId":"samuelchristopher"},"content":"                            int priorityStartIndex \u003d taskString.indexOf(\"pS\");"},{"lineNumber":109,"author":{"gitId":"samuelchristopher"},"content":"                            int priorityEndIndex \u003d taskString.indexOf(\"pE\");"},{"lineNumber":110,"author":{"gitId":"samuelchristopher"},"content":"                            if (priorityStartIndex !\u003d -1 \u0026\u0026 (priorityEndIndex - priorityStartIndex) \u003e 4) {"},{"lineNumber":111,"author":{"gitId":"samuelchristopher"},"content":"                                String priority \u003d taskString.substring(priorityStartIndex + 3, priorityEndIndex).trim();"},{"lineNumber":112,"author":{"gitId":"samuelchristopher"},"content":"                                if (priority.length() \u003e\u003d 1) {"},{"lineNumber":113,"author":{"gitId":"samuelchristopher"},"content":"                                    newTask.setPriority(Integer.parseInt(priority));"},{"lineNumber":114,"author":{"gitId":"samuelchristopher"},"content":"                                }"},{"lineNumber":115,"author":{"gitId":"samuelchristopher"},"content":"                            }"},{"lineNumber":116,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":117,"author":{"gitId":"samuelchristopher"},"content":"                            int estimateStartIndex \u003d taskString.indexOf(\"eMS\");"},{"lineNumber":118,"author":{"gitId":"samuelchristopher"},"content":"                            int estimateEndIndex \u003d taskString.indexOf(\"eME\");"},{"lineNumber":119,"author":{"gitId":"samuelchristopher"},"content":"                            if (estimateStartIndex !\u003d -1 \u0026\u0026 (estimateEndIndex - estimateStartIndex) \u003e 6) {"},{"lineNumber":120,"author":{"gitId":"samuelchristopher"},"content":"                                String estimate \u003d taskString.substring(estimateStartIndex + 3, estimateEndIndex);"},{"lineNumber":121,"author":{"gitId":"samuelchristopher"},"content":"                                if (estimate.length() \u003e 1) {"},{"lineNumber":122,"author":{"gitId":"samuelchristopher"},"content":"                                    newTask.addEstimate(Integer.parseInt(estimate.trim()));"},{"lineNumber":123,"author":{"gitId":"samuelchristopher"},"content":"                                }"},{"lineNumber":124,"author":{"gitId":"samuelchristopher"},"content":"                            }"},{"lineNumber":125,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":126,"author":{"gitId":"samuelchristopher"},"content":"                            int actualStartIndex \u003d taskString.indexOf(\"aMS\");"},{"lineNumber":127,"author":{"gitId":"samuelchristopher"},"content":"                            int actualEndIndex \u003d taskString.indexOf(\"aME\");"},{"lineNumber":128,"author":{"gitId":"samuelchristopher"},"content":"                            if (actualStartIndex !\u003d -1 \u0026\u0026 (actualEndIndex - actualStartIndex) \u003e 6) {"},{"lineNumber":129,"author":{"gitId":"samuelchristopher"},"content":"                                String actual \u003d taskString.substring(actualStartIndex + 3, actualEndIndex);"},{"lineNumber":130,"author":{"gitId":"samuelchristopher"},"content":"                                if (actual.length() \u003e 1) {"},{"lineNumber":131,"author":{"gitId":"samuelchristopher"},"content":"                                    newTask.addActual(Integer.parseInt(actual.trim()));"},{"lineNumber":132,"author":{"gitId":"samuelchristopher"},"content":"                                }"},{"lineNumber":133,"author":{"gitId":"samuelchristopher"},"content":"                            }"},{"lineNumber":134,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":135,"author":{"gitId":"samuelchristopher"},"content":"                            currentLine \u003d s.nextLine();"},{"lineNumber":136,"author":{"gitId":"samuelchristopher"},"content":"                            if (currentLine.equals(\"tMS\")) {"},{"lineNumber":137,"author":{"gitId":"samuelchristopher"},"content":"                                currentLine \u003d s.nextLine();"},{"lineNumber":138,"author":{"gitId":"samuelchristopher"},"content":"                                while (!currentLine.equals(\"tME\")) {"},{"lineNumber":139,"author":{"gitId":"samuelchristopher"},"content":"                                    String memberName \u003d currentLine;"},{"lineNumber":140,"author":{"gitId":"samuelchristopher"},"content":"                                    TeamMember member \u003d getMember(memberName, members);"},{"lineNumber":141,"author":{"gitId":"samuelchristopher"},"content":"                                    newTask.setMember(member);"},{"lineNumber":142,"author":{"gitId":"samuelchristopher"},"content":"                                    currentLine \u003d s.nextLine();"},{"lineNumber":143,"author":{"gitId":"samuelchristopher"},"content":"                                }"},{"lineNumber":144,"author":{"gitId":"samuelchristopher"},"content":"                                currentLine \u003d s.nextLine();"},{"lineNumber":145,"author":{"gitId":"samuelchristopher"},"content":"                            }"},{"lineNumber":146,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":147,"author":{"gitId":"samuelchristopher"},"content":"                            newProject.addTask(newTask);"},{"lineNumber":148,"author":{"gitId":"samuelchristopher"},"content":"                        }"},{"lineNumber":149,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":150,"author":{"gitId":"samuelchristopher"},"content":"                        if (currentLine.equals(\"endTasks\")) {"},{"lineNumber":151,"author":{"gitId":"samuelchristopher"},"content":"                            break;"},{"lineNumber":152,"author":{"gitId":"samuelchristopher"},"content":"                        }"},{"lineNumber":153,"author":{"gitId":"samuelchristopher"},"content":"                    }"},{"lineNumber":154,"author":{"gitId":"samuelchristopher"},"content":"                    // end adding tasks to project"},{"lineNumber":155,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":156,"author":{"gitId":"samuelchristopher"},"content":"                    // begin adding team members"},{"lineNumber":157,"author":{"gitId":"samuelchristopher"},"content":"                    currentLine \u003d s.nextLine();"},{"lineNumber":158,"author":{"gitId":"samuelchristopher"},"content":"                    int projectMemberStartIndex \u003d currentLine.indexOf(\"pMS\");"},{"lineNumber":159,"author":{"gitId":"samuelchristopher"},"content":"                    if (projectMemberStartIndex !\u003d -1) {"},{"lineNumber":160,"author":{"gitId":"samuelchristopher"},"content":"                        while (!currentLine.equals(\"pME\")) {"},{"lineNumber":161,"author":{"gitId":"samuelchristopher"},"content":"                            if (currentLine.equals(\"pMS\")) {"},{"lineNumber":162,"author":{"gitId":"samuelchristopher"},"content":"                                currentLine \u003d s.nextLine();"},{"lineNumber":163,"author":{"gitId":"samuelchristopher"},"content":"                                continue;"},{"lineNumber":164,"author":{"gitId":"samuelchristopher"},"content":"                            }"},{"lineNumber":165,"author":{"gitId":"samuelchristopher"},"content":"                            TeamMember member \u003d getMember(currentLine, members);"},{"lineNumber":166,"author":{"gitId":"samuelchristopher"},"content":"                            if (member !\u003d null) {"},{"lineNumber":167,"author":{"gitId":"samuelchristopher"},"content":"                                newProject.addTeamMemberToProject(member);"},{"lineNumber":168,"author":{"gitId":"samuelchristopher"},"content":"                                member.assignProject(newProject);"},{"lineNumber":169,"author":{"gitId":"samuelchristopher"},"content":"                            }"},{"lineNumber":170,"author":{"gitId":"samuelchristopher"},"content":"                            currentLine \u003d s.nextLine();"},{"lineNumber":171,"author":{"gitId":"samuelchristopher"},"content":"                        }"},{"lineNumber":172,"author":{"gitId":"samuelchristopher"},"content":"                    }"},{"lineNumber":173,"author":{"gitId":"samuelchristopher"},"content":"                    // end adding team members"},{"lineNumber":174,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":175,"author":{"gitId":"samuelchristopher"},"content":"                    projects.add(newProject);"},{"lineNumber":176,"author":{"gitId":"samuelchristopher"},"content":"                    if (s.hasNextLine()) {"},{"lineNumber":177,"author":{"gitId":"samuelchristopher"},"content":"                        currentLine \u003d s.nextLine();"},{"lineNumber":178,"author":{"gitId":"samuelchristopher"},"content":"                    }"},{"lineNumber":179,"author":{"gitId":"samuelchristopher"},"content":"                }"},{"lineNumber":180,"author":{"gitId":"samuelchristopher"},"content":"                /*"},{"lineNumber":181,"author":{"gitId":"samuelchristopher"},"content":"                else {"},{"lineNumber":182,"author":{"gitId":"samuelchristopher"},"content":"                    if (s.hasNextLine()) {"},{"lineNumber":183,"author":{"gitId":"samuelchristopher"},"content":"                        currentLine \u003d s.nextLine();"},{"lineNumber":184,"author":{"gitId":"samuelchristopher"},"content":"                    }"},{"lineNumber":185,"author":{"gitId":"samuelchristopher"},"content":"                }"},{"lineNumber":186,"author":{"gitId":"samuelchristopher"},"content":"                 */"},{"lineNumber":187,"author":{"gitId":"samuelchristopher"},"content":"            }"},{"lineNumber":188,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":189,"author":{"gitId":"samuelchristopher"},"content":"            EzLogger.log(Level.INFO, \"Done loading projects\");"},{"lineNumber":190,"author":{"gitId":"samuelchristopher"},"content":"            return projects;"},{"lineNumber":191,"author":{"gitId":"thatseant"},"content":"        } catch (FileNotFoundException | EzExceptions e) {"},{"lineNumber":192,"author":{"gitId":"samuelchristopher"},"content":"            //System.out.println(\"Creating file...\");"},{"lineNumber":193,"author":{"gitId":"samuelchristopher"},"content":"        }"},{"lineNumber":194,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":195,"author":{"gitId":"samuelchristopher"},"content":"        return temp;"},{"lineNumber":196,"author":{"gitId":"samuelchristopher"},"content":"    }"},{"lineNumber":197,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":198,"author":{"gitId":"samuelchristopher"},"content":"    /**"},{"lineNumber":199,"author":{"gitId":"samuelchristopher"},"content":"     * Loads the team members from the ezmanager.txt file"},{"lineNumber":200,"author":{"gitId":"samuelchristopher"},"content":"     *"},{"lineNumber":201,"author":{"gitId":"samuelchristopher"},"content":"     * @return members ArrayList of TeamMember that have been added to EZ Manager previously."},{"lineNumber":202,"author":{"gitId":"samuelchristopher"},"content":"     */"},{"lineNumber":203,"author":{"gitId":"samuelchristopher"},"content":"    public static ArrayList\u003cTeamMember\u003e loadTeamMembers() {"},{"lineNumber":204,"author":{"gitId":"samuelchristopher"},"content":"        try {"},{"lineNumber":205,"author":{"gitId":"samuelchristopher"},"content":"            Scanner s \u003d new Scanner(f);"},{"lineNumber":206,"author":{"gitId":"samuelchristopher"},"content":"            String currentLine \u003d s.nextLine();"},{"lineNumber":207,"author":{"gitId":"samuelchristopher"},"content":"            ArrayList\u003cTeamMember\u003e members \u003d new ArrayList\u003c\u003e();"},{"lineNumber":208,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":209,"author":{"gitId":"samuelchristopher"},"content":"            while (!currentLine.equals(\"Project\") \u0026\u0026 currentLine.length() \u003e 1) {"},{"lineNumber":210,"author":{"gitId":"samuelchristopher"},"content":"                if (currentLine.trim().equals(\"Members\")) {"},{"lineNumber":211,"author":{"gitId":"samuelchristopher"},"content":"                    currentLine \u003d s.nextLine();"},{"lineNumber":212,"author":{"gitId":"samuelchristopher"},"content":"                    continue;"},{"lineNumber":213,"author":{"gitId":"samuelchristopher"},"content":"                }"},{"lineNumber":214,"author":{"gitId":"samuelchristopher"},"content":"                TeamMember newMember \u003d new TeamMember(currentLine.trim());"},{"lineNumber":215,"author":{"gitId":"samuelchristopher"},"content":"                members.add(newMember);"},{"lineNumber":216,"author":{"gitId":"samuelchristopher"},"content":"                currentLine \u003d s.nextLine();"},{"lineNumber":217,"author":{"gitId":"samuelchristopher"},"content":"            }"},{"lineNumber":218,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":219,"author":{"gitId":"samuelchristopher"},"content":"            return members;"},{"lineNumber":220,"author":{"gitId":"samuelchristopher"},"content":"        } catch (FileNotFoundException | NoSuchElementException e) {"},{"lineNumber":221,"author":{"gitId":"samuelchristopher"},"content":"            EzLogger.log(Level.WARNING, \"Creating file for storage...\");"},{"lineNumber":222,"author":{"gitId":"samuelchristopher"},"content":"            System.out.println(\"Creating file...\");"},{"lineNumber":223,"author":{"gitId":"samuelchristopher"},"content":"        }"},{"lineNumber":224,"author":{"gitId":"samuelchristopher"},"content":"        return new ArrayList\u003c\u003e();"},{"lineNumber":225,"author":{"gitId":"samuelchristopher"},"content":"    }"},{"lineNumber":226,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":227,"author":{"gitId":"samuelchristopher"},"content":"    public static TeamMember getMember(String name, ArrayList\u003cTeamMember\u003e members) {"},{"lineNumber":228,"author":{"gitId":"samuelchristopher"},"content":"        for (TeamMember member : members) {"},{"lineNumber":229,"author":{"gitId":"samuelchristopher"},"content":"            if (member.getName().equals(name)) {"},{"lineNumber":230,"author":{"gitId":"samuelchristopher"},"content":"                return member;"},{"lineNumber":231,"author":{"gitId":"samuelchristopher"},"content":"            }"},{"lineNumber":232,"author":{"gitId":"samuelchristopher"},"content":"        }"},{"lineNumber":233,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":234,"author":{"gitId":"samuelchristopher"},"content":"        return null;"},{"lineNumber":235,"author":{"gitId":"samuelchristopher"},"content":"    }"},{"lineNumber":236,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":237,"author":{"gitId":"samuelchristopher"},"content":"    /**"},{"lineNumber":238,"author":{"gitId":"samuelchristopher"},"content":"     * Saves the data to the text file."},{"lineNumber":239,"author":{"gitId":"samuelchristopher"},"content":"     *"},{"lineNumber":240,"author":{"gitId":"samuelchristopher"},"content":"     * @param projects ArrayList of Project."},{"lineNumber":241,"author":{"gitId":"samuelchristopher"},"content":"     * @param members ArrayList of TeamMember."},{"lineNumber":242,"author":{"gitId":"samuelchristopher"},"content":"     * @throws IOException When encountering errors when saving files."},{"lineNumber":243,"author":{"gitId":"samuelchristopher"},"content":"     */"},{"lineNumber":244,"author":{"gitId":"samuelchristopher"},"content":"    public static void save(ArrayList\u003cProject\u003e projects, ArrayList\u003cTeamMember\u003e members) throws IOException {"},{"lineNumber":245,"author":{"gitId":"samuelchristopher"},"content":"        // empty current saved items;"},{"lineNumber":246,"author":{"gitId":"samuelchristopher"},"content":"        EzLogger.log(Level.INFO, \"Begin saving items...\");"},{"lineNumber":247,"author":{"gitId":"samuelchristopher"},"content":"        FileWriter clear \u003d new FileWriter(f);"},{"lineNumber":248,"author":{"gitId":"samuelchristopher"},"content":"        clear.write(\"\");"},{"lineNumber":249,"author":{"gitId":"samuelchristopher"},"content":"        clear.close();"},{"lineNumber":250,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":251,"author":{"gitId":"samuelchristopher"},"content":"        FileWriter fw \u003d new FileWriter(f, true);"},{"lineNumber":252,"author":{"gitId":"samuelchristopher"},"content":"        fw.write(\"Members \\n\");"},{"lineNumber":253,"author":{"gitId":"samuelchristopher"},"content":"        for (TeamMember member : members) {"},{"lineNumber":254,"author":{"gitId":"samuelchristopher"},"content":"            fw.write(member.saveFormat() + \"\\n\");"},{"lineNumber":255,"author":{"gitId":"samuelchristopher"},"content":"        }"},{"lineNumber":256,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":257,"author":{"gitId":"samuelchristopher"},"content":"        fw.write(\"\\n\");"},{"lineNumber":258,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":259,"author":{"gitId":"samuelchristopher"},"content":"        for (Project project : projects) {"},{"lineNumber":260,"author":{"gitId":"samuelchristopher"},"content":"            fw.write(project.saveFormat() + \"\\n\");"},{"lineNumber":261,"author":{"gitId":"samuelchristopher"},"content":"        }"},{"lineNumber":262,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":263,"author":{"gitId":"samuelchristopher"},"content":"        fw.close();"},{"lineNumber":264,"author":{"gitId":"samuelchristopher"},"content":"        EzLogger.log(Level.INFO, \"Done saving items...\");"},{"lineNumber":265,"author":{"gitId":"samuelchristopher"},"content":"    }"},{"lineNumber":266,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":267,"author":{"gitId":"samuelchristopher"},"content":"}"}],"authorContributionMap":{"thatseant":7,"samuelchristopher":260}},{"path":"src/main/java/seedu/ezmanager/task/Task.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"thatseant"},"content":"package seedu.ezmanager.task;"},{"lineNumber":2,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":3,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.EzExceptions;"},{"lineNumber":4,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.member.TeamMember;"},{"lineNumber":5,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":6,"author":{"gitId":"thatseant"},"content":"import java.time.LocalDate;"},{"lineNumber":7,"author":{"gitId":"thatseant"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":8,"author":{"gitId":"thatseant"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":10,"author":{"gitId":"thatseant"},"content":"public class Task {"},{"lineNumber":11,"author":{"gitId":"thatseant"},"content":"    public String getDescription() {"},{"lineNumber":12,"author":{"gitId":"thatseant"},"content":"        return description;"},{"lineNumber":13,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":15,"author":{"gitId":"thatseant"},"content":"    public boolean isDone() {"},{"lineNumber":16,"author":{"gitId":"thatseant"},"content":"        return isDone;"},{"lineNumber":17,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":19,"author":{"gitId":"thatseant"},"content":"    protected String description;"},{"lineNumber":20,"author":{"gitId":"thatseant"},"content":"    protected boolean isDone;"},{"lineNumber":21,"author":{"gitId":"thatseant"},"content":"    protected LocalDate date;"},{"lineNumber":22,"author":{"gitId":"thatseant"},"content":"    protected ArrayList\u003cTeamMember\u003e members \u003d new ArrayList\u003c\u003e();"},{"lineNumber":23,"author":{"gitId":"thatseant"},"content":"    protected int estimateInMinutes \u003d 0;"},{"lineNumber":24,"author":{"gitId":"thatseant"},"content":"    protected int actualInMinutes;"},{"lineNumber":25,"author":{"gitId":"shreytheshreyas"},"content":"    protected int priority;"},{"lineNumber":26,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":27,"author":{"gitId":"shreytheshreyas"},"content":"    public int getPriority() {"},{"lineNumber":28,"author":{"gitId":"riazaham"},"content":"        return priority;"},{"lineNumber":29,"author":{"gitId":"riazaham"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":31,"author":{"gitId":"shreytheshreyas"},"content":"    public void setPriority(int priority) {"},{"lineNumber":32,"author":{"gitId":"riazaham"},"content":"        this.priority \u003d priority;"},{"lineNumber":33,"author":{"gitId":"riazaham"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":35,"author":{"gitId":"thatseant"},"content":"    public Task(String description) {"},{"lineNumber":36,"author":{"gitId":"thatseant"},"content":"        this.description \u003d description;"},{"lineNumber":37,"author":{"gitId":"thatseant"},"content":"        this.isDone \u003d false;"},{"lineNumber":38,"author":{"gitId":"shreytheshreyas"},"content":"        this.date \u003d null;"},{"lineNumber":39,"author":{"gitId":"shreytheshreyas"},"content":"        this.priority \u003d 0;"},{"lineNumber":40,"author":{"gitId":"shreytheshreyas"},"content":"        actualInMinutes \u003d 0;"},{"lineNumber":41,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":43,"author":{"gitId":"thatseant"},"content":"    public void addDeadline(LocalDate date) {"},{"lineNumber":44,"author":{"gitId":"thatseant"},"content":"        this.date \u003d date;"},{"lineNumber":45,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":47,"author":{"gitId":"thatseant"},"content":"    public void addEstimate(int durationInMinutes) {"},{"lineNumber":48,"author":{"gitId":"thatseant"},"content":"        this.estimateInMinutes \u003d durationInMinutes;"},{"lineNumber":49,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":51,"author":{"gitId":"thatseant"},"content":"    public int getEstimate() {"},{"lineNumber":52,"author":{"gitId":"thatseant"},"content":"        return estimateInMinutes;"},{"lineNumber":53,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":55,"author":{"gitId":"thatseant"},"content":"    public int getActual() {"},{"lineNumber":56,"author":{"gitId":"thatseant"},"content":"        return actualInMinutes;"},{"lineNumber":57,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":59,"author":{"gitId":"thatseant"},"content":"    public void addActual(int durationInMinutes) {"},{"lineNumber":60,"author":{"gitId":"thatseant"},"content":"        this.actualInMinutes \u003d durationInMinutes;"},{"lineNumber":61,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":63,"author":{"gitId":"samuelchristopher"},"content":"    public void markAsDone() {"},{"lineNumber":64,"author":{"gitId":"samuelchristopher"},"content":"        this.isDone \u003d true;"},{"lineNumber":65,"author":{"gitId":"samuelchristopher"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":67,"author":{"gitId":"samuellleow"},"content":"    public String getTaskDescription() {"},{"lineNumber":68,"author":{"gitId":"samuellleow"},"content":"        return description;"},{"lineNumber":69,"author":{"gitId":"samuellleow"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":71,"author":{"gitId":"riazaham"},"content":"    public void setTaskDescription(String newDescription) {"},{"lineNumber":72,"author":{"gitId":"riazaham"},"content":"        description \u003d newDescription;"},{"lineNumber":73,"author":{"gitId":"riazaham"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":75,"author":{"gitId":"thatseant"},"content":"    public String getDateString() {"},{"lineNumber":76,"author":{"gitId":"thatseant"},"content":"        return (date !\u003d null) ? date.format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy\")) : \"\";"},{"lineNumber":77,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":79,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":80,"author":{"gitId":"shreytheshreyas"},"content":"    public LocalDate getDeadline() {"},{"lineNumber":81,"author":{"gitId":"shreytheshreyas"},"content":"        return this.date;"},{"lineNumber":82,"author":{"gitId":"shreytheshreyas"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":84,"author":{"gitId":"thatseant"},"content":"    public ArrayList\u003cTeamMember\u003e getMembers() {"},{"lineNumber":85,"author":{"gitId":"thatseant"},"content":"        return members;"},{"lineNumber":86,"author":{"gitId":"riazaham"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":88,"author":{"gitId":"samuellleow"},"content":"    /**"},{"lineNumber":89,"author":{"gitId":"samuellleow"},"content":"     * Add TeamMember to task iif member is not present in ArrayList."},{"lineNumber":90,"author":{"gitId":"samuellleow"},"content":"     * @param newMember New TeamMember to be added into task."},{"lineNumber":91,"author":{"gitId":"samuellleow"},"content":"     * @throws EzExceptions if member already exist in the ArrayList of TeamMembers."},{"lineNumber":92,"author":{"gitId":"samuellleow"},"content":"     */"},{"lineNumber":93,"author":{"gitId":"thatseant"},"content":"    public void setMember(TeamMember newMember) throws EzExceptions {"},{"lineNumber":94,"author":{"gitId":"samuellleow"},"content":"        for (TeamMember member : members) {"},{"lineNumber":95,"author":{"gitId":"samuellleow"},"content":"            if (newMember \u003d\u003d member) {"},{"lineNumber":96,"author":{"gitId":"thatseant"},"content":"                throw new EzExceptions(\"TaskAlreadyAssigned\");"},{"lineNumber":97,"author":{"gitId":"samuellleow"},"content":"            }"},{"lineNumber":98,"author":{"gitId":"samuellleow"},"content":"        }"},{"lineNumber":99,"author":{"gitId":"thatseant"},"content":"        members.add(newMember);"},{"lineNumber":100,"author":{"gitId":"riazaham"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":102,"author":{"gitId":"samuelchristopher"},"content":"    public boolean getStatus() {"},{"lineNumber":103,"author":{"gitId":"samuelchristopher"},"content":"        return isDone;"},{"lineNumber":104,"author":{"gitId":"riazaham"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":106,"author":{"gitId":"thatseant"},"content":"    /**"},{"lineNumber":107,"author":{"gitId":"thatseant"},"content":"     * Returns details of the specified task."},{"lineNumber":108,"author":{"gitId":"thatseant"},"content":"     *"},{"lineNumber":109,"author":{"gitId":"thatseant"},"content":"     * @return Details of task"},{"lineNumber":110,"author":{"gitId":"thatseant"},"content":"     */"},{"lineNumber":111,"author":{"gitId":"thatseant"},"content":"    @Override"},{"lineNumber":112,"author":{"gitId":"thatseant"},"content":"    public String toString() {"},{"lineNumber":113,"author":{"gitId":"thatseant"},"content":"        String taskStatus \u003d description;"},{"lineNumber":114,"author":{"gitId":"thatseant"},"content":"        if (date !\u003d null) {"},{"lineNumber":115,"author":{"gitId":"thatseant"},"content":"            taskStatus +\u003d \" | \" + getDateString();"},{"lineNumber":116,"author":{"gitId":"thatseant"},"content":"        }"},{"lineNumber":117,"author":{"gitId":"thatseant"},"content":"        if (estimateInMinutes !\u003d 0) {"},{"lineNumber":118,"author":{"gitId":"thatseant"},"content":"            int hours \u003d estimateInMinutes / 60;"},{"lineNumber":119,"author":{"gitId":"thatseant"},"content":"            int minutes \u003d estimateInMinutes % 60;"},{"lineNumber":120,"author":{"gitId":"thatseant"},"content":"            taskStatus +\u003d \" | \" + \"Estimated: \" + hours + \" hours \" + minutes + \" minutes\";"},{"lineNumber":121,"author":{"gitId":"thatseant"},"content":"        }"},{"lineNumber":122,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":123,"author":{"gitId":"thatseant"},"content":"        if (actualInMinutes !\u003d 0) {"},{"lineNumber":124,"author":{"gitId":"thatseant"},"content":"            int hours \u003d actualInMinutes / 60;"},{"lineNumber":125,"author":{"gitId":"thatseant"},"content":"            int minutes \u003d actualInMinutes % 60;"},{"lineNumber":126,"author":{"gitId":"thatseant"},"content":"            taskStatus +\u003d \" | \" + \"Actual: \" + hours + \" hours \" + minutes + \" minutes\";"},{"lineNumber":127,"author":{"gitId":"thatseant"},"content":"        }"},{"lineNumber":128,"author":{"gitId":"thatseant"},"content":"        return taskStatus;"},{"lineNumber":129,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":130,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":131,"author":{"gitId":"samuelchristopher"},"content":"    public String saveFormat() {"},{"lineNumber":132,"author":{"gitId":"samuelchristopher"},"content":"        String taskLine \u003d description;"},{"lineNumber":133,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":134,"author":{"gitId":"samuelchristopher"},"content":"        taskLine +\u003d \" | tS \" + (isDone ? \"1\" : \"0\") + \" tE\";"},{"lineNumber":135,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":136,"author":{"gitId":"samuelchristopher"},"content":"        if (date !\u003d null) {"},{"lineNumber":137,"author":{"gitId":"samuelchristopher"},"content":"            taskLine +\u003d \" | dS \" + date.toString() + \"dE\";"},{"lineNumber":138,"author":{"gitId":"samuelchristopher"},"content":"        }"},{"lineNumber":139,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":140,"author":{"gitId":"samuelchristopher"},"content":"        taskLine +\u003d \" | \" + \"pS \" + priority + \" pE\";"},{"lineNumber":141,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":142,"author":{"gitId":"samuelchristopher"},"content":"        if (estimateInMinutes !\u003d 0) {"},{"lineNumber":143,"author":{"gitId":"samuelchristopher"},"content":"            taskLine +\u003d \" | \" + \"eMS \" + estimateInMinutes + \" eME\";"},{"lineNumber":144,"author":{"gitId":"samuelchristopher"},"content":"        }"},{"lineNumber":145,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":146,"author":{"gitId":"samuelchristopher"},"content":"        if (actualInMinutes !\u003d 0) {"},{"lineNumber":147,"author":{"gitId":"samuelchristopher"},"content":"            taskLine +\u003d \" | \" + \"aMS \" + actualInMinutes + \" aME\";"},{"lineNumber":148,"author":{"gitId":"samuelchristopher"},"content":"        }"},{"lineNumber":149,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":150,"author":{"gitId":"samuelchristopher"},"content":"        if (members.size() \u003e 0) {"},{"lineNumber":151,"author":{"gitId":"samuelchristopher"},"content":"            taskLine +\u003d \"\\ntMS\\n\"; // tMS stands for task member start"},{"lineNumber":152,"author":{"gitId":"samuelchristopher"},"content":"            for (TeamMember member : members) {"},{"lineNumber":153,"author":{"gitId":"samuelchristopher"},"content":"                taskLine +\u003d member.getName() + \"\\n\";"},{"lineNumber":154,"author":{"gitId":"samuelchristopher"},"content":"            }"},{"lineNumber":155,"author":{"gitId":"samuelchristopher"},"content":"            taskLine +\u003d \"tME\";"},{"lineNumber":156,"author":{"gitId":"samuelchristopher"},"content":"        }"},{"lineNumber":157,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":158,"author":{"gitId":"samuelchristopher"},"content":"        return taskLine;"},{"lineNumber":159,"author":{"gitId":"samuelchristopher"},"content":"    }"},{"lineNumber":160,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":161,"author":{"gitId":"thatseant"},"content":"    @Override"},{"lineNumber":162,"author":{"gitId":"thatseant"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":163,"author":{"gitId":"thatseant"},"content":"        if (obj instanceof Task) {"},{"lineNumber":164,"author":{"gitId":"thatseant"},"content":"            Task task \u003d (Task) obj;"},{"lineNumber":165,"author":{"gitId":"thatseant"},"content":"            return ((task.description.equals(this.description))"},{"lineNumber":166,"author":{"gitId":"thatseant"},"content":"                    \u0026\u0026 (task.isDone \u003d\u003d this.isDone) \u0026\u0026 (task.date.equals(this.date)));"},{"lineNumber":167,"author":{"gitId":"thatseant"},"content":"        } else {"},{"lineNumber":168,"author":{"gitId":"thatseant"},"content":"            return false;"},{"lineNumber":169,"author":{"gitId":"thatseant"},"content":"        }"},{"lineNumber":170,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":171,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":172,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":173,"author":{"gitId":"thatseant"},"content":"}"}],"authorContributionMap":{"thatseant":94,"samuelchristopher":36,"samuellleow":13,"shreytheshreyas":13,"riazaham":17}},{"path":"src/main/java/seedu/ezmanager/ui/Ui.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"thatseant"},"content":"package seedu.ezmanager.ui;"},{"lineNumber":2,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":3,"author":{"gitId":"samuellleow"},"content":"import seedu.ezmanager.EzLogger;"},{"lineNumber":4,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.member.TeamMember;"},{"lineNumber":5,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.project.Project;"},{"lineNumber":6,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.task.Task;"},{"lineNumber":7,"author":{"gitId":"samuellleow"},"content":"import java.time.LocalDate;"},{"lineNumber":8,"author":{"gitId":"samuellleow"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":9,"author":{"gitId":"samuelchristopher"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitId":"samuellleow"},"content":"import java.time.Period;"},{"lineNumber":11,"author":{"gitId":"samuellleow"},"content":"import java.util.logging.Level;"},{"lineNumber":12,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":13,"author":{"gitId":"samuellleow"},"content":"import static seedu.ezmanager.Util.MINUTES_IN_HOUR_DOUBLE;"},{"lineNumber":14,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":15,"author":{"gitId":"samuellleow"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"samuellleow"},"content":" * Text UI of the application."},{"lineNumber":17,"author":{"gitId":"samuellleow"},"content":" */"},{"lineNumber":18,"author":{"gitId":"thatseant"},"content":"public class Ui {"},{"lineNumber":19,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":20,"author":{"gitId":"samuellleow"},"content":"    private static final String MESSAGE_SINGLE_LINE \u003d \"_________________________________________\""},{"lineNumber":21,"author":{"gitId":"samuellleow"},"content":"            + \"____________________________________________\";"},{"lineNumber":22,"author":{"gitId":"samuellleow"},"content":"    private static final String MESSAGE_WELCOME \u003d \"Hello from EzManager!\\n\""},{"lineNumber":23,"author":{"gitId":"samuellleow"},"content":"            + \"What can I do for you?\";"},{"lineNumber":24,"author":{"gitId":"samuellleow"},"content":"    private static final String MESSAGE_GOODBYE \u003d \"See you again!\";"},{"lineNumber":25,"author":{"gitId":"samuellleow"},"content":"    private static final String MESSAGE_LOGO \u003d \" _____         ___     ___\\n\""},{"lineNumber":26,"author":{"gitId":"samuellleow"},"content":"            + \"|  ___|       |   \\\\  /   |\\n\""},{"lineNumber":27,"author":{"gitId":"samuellleow"},"content":"            + \"| |___  _____ |    \\\\/    | ______    ______  ______    ______  ______   _____  _____\\n\""},{"lineNumber":28,"author":{"gitId":"samuellleow"},"content":"            + \"|  ___||___ / |  |\\\\  /|  ||  __  |  |  __  ||  __  |  |  __  ||  __  | / ___ \\\\|  ___|\\n\""},{"lineNumber":29,"author":{"gitId":"samuellleow"},"content":"            + \"| |___   / /_ |  | \\\\/ |  || |__| |_ | |  | || |__| |_ | |  | || |__| ||   ___/|  |\\n\""},{"lineNumber":30,"author":{"gitId":"samuellleow"},"content":"            + \"|_____| /____||__|    |__||________||_|  |_||________||_|  |_||____  ||______||__|\\n\""},{"lineNumber":31,"author":{"gitId":"samuellleow"},"content":"            + \"                                                                   | |\\n\""},{"lineNumber":32,"author":{"gitId":"samuellleow"},"content":"            + \"                                                               ____| |\\n\""},{"lineNumber":33,"author":{"gitId":"samuellleow"},"content":"            + \"                                                              |______|\\n\";"},{"lineNumber":34,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":35,"author":{"gitId":"samuellleow"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"samuellleow"},"content":"     * Print welcome message together with EzManage Logo."},{"lineNumber":37,"author":{"gitId":"samuellleow"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"samuellleow"},"content":"    public void printWelcome() {"},{"lineNumber":39,"author":{"gitId":"thatseant"},"content":"        System.out.println(MESSAGE_SINGLE_LINE);"},{"lineNumber":40,"author":{"gitId":"shreytheshreyas"},"content":"        System.out.println(MESSAGE_LOGO);"},{"lineNumber":41,"author":{"gitId":"samuellleow"},"content":"        System.out.println(MESSAGE_WELCOME);"},{"lineNumber":42,"author":{"gitId":"samuellleow"},"content":"        System.out.println(MESSAGE_SINGLE_LINE);"},{"lineNumber":43,"author":{"gitId":"samuellleow"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":45,"author":{"gitId":"samuellleow"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"samuellleow"},"content":"     * Print goodbye message."},{"lineNumber":47,"author":{"gitId":"samuellleow"},"content":"     * @return Goodbye message String."},{"lineNumber":48,"author":{"gitId":"samuellleow"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"samuellleow"},"content":"    public static String printGoodbyeMessage() {"},{"lineNumber":50,"author":{"gitId":"samuellleow"},"content":"        return MESSAGE_GOODBYE;"},{"lineNumber":51,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":53,"author":{"gitId":"samuellleow"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"samuellleow"},"content":"     * Print a String of lines to separate commands and outputs."},{"lineNumber":55,"author":{"gitId":"samuellleow"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"thatseant"},"content":"    public void printLine() {"},{"lineNumber":57,"author":{"gitId":"samuellleow"},"content":"        System.out.println(MESSAGE_SINGLE_LINE);"},{"lineNumber":58,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":60,"author":{"gitId":"samuellleow"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"samuellleow"},"content":"     * Print the output after every execution of command."},{"lineNumber":62,"author":{"gitId":"samuellleow"},"content":"     * @param output String of output messages after every execution of command."},{"lineNumber":63,"author":{"gitId":"samuellleow"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"riazaham"},"content":"    public static void printOutput(String output) {"},{"lineNumber":65,"author":{"gitId":"thatseant"},"content":"        System.out.println(output);"},{"lineNumber":66,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":68,"author":{"gitId":"samuellleow"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"samuellleow"},"content":"     * Return member added message."},{"lineNumber":70,"author":{"gitId":"samuellleow"},"content":"     * @param name Name of added member."},{"lineNumber":71,"author":{"gitId":"samuellleow"},"content":"     * @return String of member added message."},{"lineNumber":72,"author":{"gitId":"samuellleow"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"samuellleow"},"content":"    public static String printMemberAddedMessage(String name) {"},{"lineNumber":74,"author":{"gitId":"samuellleow"},"content":"        return \"Team member \\\"\" + name + \"\\\" has been added\";"},{"lineNumber":75,"author":{"gitId":"samuellleow"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":77,"author":{"gitId":"samuellleow"},"content":"    /**"},{"lineNumber":78,"author":{"gitId":"samuellleow"},"content":"     * Return member in home view removed message."},{"lineNumber":79,"author":{"gitId":"samuellleow"},"content":"     * @param name Name of removed member."},{"lineNumber":80,"author":{"gitId":"samuellleow"},"content":"     * @return String of member in home view being removed message."},{"lineNumber":81,"author":{"gitId":"samuellleow"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"samuellleow"},"content":"    public static String printMemberRemovedInHomeViewMessage(String name) {"},{"lineNumber":83,"author":{"gitId":"samuellleow"},"content":"        return \"Team member \\\"\" + name + \"\\\" has been removed from program entirely\";"},{"lineNumber":84,"author":{"gitId":"samuellleow"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":86,"author":{"gitId":"samuellleow"},"content":"    /**"},{"lineNumber":87,"author":{"gitId":"samuellleow"},"content":"     * Return member in project view removed message."},{"lineNumber":88,"author":{"gitId":"samuellleow"},"content":"     * @param name Name of removed member."},{"lineNumber":89,"author":{"gitId":"samuellleow"},"content":"     * @param projectName Name of project that member is removed from."},{"lineNumber":90,"author":{"gitId":"samuellleow"},"content":"     * @return String of member in project view being removed message."},{"lineNumber":91,"author":{"gitId":"samuellleow"},"content":"     */"},{"lineNumber":92,"author":{"gitId":"samuellleow"},"content":"    public static String printMemberRemovedInProjectViewMessage(String name, String projectName) {"},{"lineNumber":93,"author":{"gitId":"samuellleow"},"content":"        return \"Team member \\\"\" + name + \"\\\" has been removed from Project \\\"\" + projectName + \"\\\"\";"},{"lineNumber":94,"author":{"gitId":"riazaham"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":96,"author":{"gitId":"samuellleow"},"content":"    /**"},{"lineNumber":97,"author":{"gitId":"samuellleow"},"content":"     * Return project deleted message."},{"lineNumber":98,"author":{"gitId":"samuellleow"},"content":"     * @param project Removed Project object."},{"lineNumber":99,"author":{"gitId":"samuellleow"},"content":"     * @return String of project being deleted message."},{"lineNumber":100,"author":{"gitId":"samuellleow"},"content":"     */"},{"lineNumber":101,"author":{"gitId":"samuellleow"},"content":"    public static String printProjectDeletedMessage(Project project) {"},{"lineNumber":102,"author":{"gitId":"samuellleow"},"content":"        return \"Project \\\"\" + project.getProjectName() + \"\\\" deleted\";"},{"lineNumber":103,"author":{"gitId":"samuellleow"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":105,"author":{"gitId":"samuellleow"},"content":"    public static String printTaskListMessage(Project project) {"},{"lineNumber":106,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":107,"author":{"gitId":"shreytheshreyas"},"content":"        project.sortTasksList();"},{"lineNumber":108,"author":{"gitId":"riazaham"},"content":"        int numberOfTasks \u003d project.getTaskList().size();"},{"lineNumber":109,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":110,"author":{"gitId":"samuellleow"},"content":"        String output \u003d \"List of Tasks:\";"},{"lineNumber":111,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":112,"author":{"gitId":"samuellleow"},"content":"        for (int i \u003d 0; i \u003c numberOfTasks; i++) {"},{"lineNumber":113,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":114,"author":{"gitId":"shreytheshreyas"},"content":"            output +\u003d \"\\n     \" + (i + 1) + \".\" + project.getTask(i)"},{"lineNumber":115,"author":{"gitId":"shreytheshreyas"},"content":"                    + ((project.getTask(i).getPriority() !\u003d 0) ? \"|\""},{"lineNumber":116,"author":{"gitId":"shreytheshreyas"},"content":"                    + \"priority: \" + project.getTask(i).getPriority() : \"\");"},{"lineNumber":117,"author":{"gitId":"samuellleow"},"content":"        }"},{"lineNumber":118,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":119,"author":{"gitId":"samuellleow"},"content":"        return output;"},{"lineNumber":120,"author":{"gitId":"samuellleow"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":122,"author":{"gitId":"samuellleow"},"content":"    /**"},{"lineNumber":123,"author":{"gitId":"samuellleow"},"content":"     * Return project created message."},{"lineNumber":124,"author":{"gitId":"samuellleow"},"content":"     * @param projectName Name of specified project."},{"lineNumber":125,"author":{"gitId":"samuellleow"},"content":"     * @return String of project being created message."},{"lineNumber":126,"author":{"gitId":"samuellleow"},"content":"     */"},{"lineNumber":127,"author":{"gitId":"samuellleow"},"content":"    public static String printProjectCreatedMessage(String projectName) {"},{"lineNumber":128,"author":{"gitId":"riazaham"},"content":"        return \"Project \\\"\" + projectName + \"\\\" created!\";"},{"lineNumber":129,"author":{"gitId":"samuellleow"},"content":"    }"},{"lineNumber":130,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":131,"author":{"gitId":"samuellleow"},"content":"    /**"},{"lineNumber":132,"author":{"gitId":"samuellleow"},"content":"     * Return project description added message."},{"lineNumber":133,"author":{"gitId":"samuellleow"},"content":"     * @param project Specified Project object."},{"lineNumber":134,"author":{"gitId":"samuellleow"},"content":"     * @return String of project description being added message."},{"lineNumber":135,"author":{"gitId":"samuellleow"},"content":"     */"},{"lineNumber":136,"author":{"gitId":"samuellleow"},"content":"    public static String printProjectDescriptionAddedMessage(Project project) {"},{"lineNumber":137,"author":{"gitId":"samuellleow"},"content":"        return \"Project description added \\\"\" + project.getDescription() + \"\\\".\";"},{"lineNumber":138,"author":{"gitId":"samuellleow"},"content":"    }"},{"lineNumber":139,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":140,"author":{"gitId":"samuellleow"},"content":"    /**"},{"lineNumber":141,"author":{"gitId":"samuellleow"},"content":"     * Return project marked as done message."},{"lineNumber":142,"author":{"gitId":"samuellleow"},"content":"     * @param projectName Name of specified project that is marked as done."},{"lineNumber":143,"author":{"gitId":"samuellleow"},"content":"     * @return String of project marked as done message."},{"lineNumber":144,"author":{"gitId":"samuellleow"},"content":"     */"},{"lineNumber":145,"author":{"gitId":"samuelchristopher"},"content":"    public static String printProjectDoneMessage(String projectName) {"},{"lineNumber":146,"author":{"gitId":"samuelchristopher"},"content":"        return \"Project \\\"\" + projectName + \"\\\" is done!\";"},{"lineNumber":147,"author":{"gitId":"samuelchristopher"},"content":"    }"},{"lineNumber":148,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":149,"author":{"gitId":"samuellleow"},"content":"    /**"},{"lineNumber":150,"author":{"gitId":"samuellleow"},"content":"     * Return project deadline added message as well as newly sorted home view."},{"lineNumber":151,"author":{"gitId":"samuellleow"},"content":"     * @param projects ArrayList of Projects."},{"lineNumber":152,"author":{"gitId":"samuellleow"},"content":"     * @param project Specified Project object that has deadline to be added."},{"lineNumber":153,"author":{"gitId":"samuellleow"},"content":"     * @param date deadline of specified project to be added."},{"lineNumber":154,"author":{"gitId":"samuellleow"},"content":"     * @param members ArrayList of TeamMembers in the program."},{"lineNumber":155,"author":{"gitId":"samuellleow"},"content":"     * @return String of project deadline being added message as well as"},{"lineNumber":156,"author":{"gitId":"samuellleow"},"content":"     *     newly sorted home view display."},{"lineNumber":157,"author":{"gitId":"samuellleow"},"content":"     */"},{"lineNumber":158,"author":{"gitId":"samuellleow"},"content":"    public static String printProjectDeadlineAddedMessage(ArrayList\u003cProject\u003e projects, Project project,"},{"lineNumber":159,"author":{"gitId":"samuellleow"},"content":"                                                          LocalDate date, ArrayList\u003cTeamMember\u003e members) {"},{"lineNumber":160,"author":{"gitId":"samuellleow"},"content":"        String output \u003d  \"Deadline \" + date.format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy\"))"},{"lineNumber":161,"author":{"gitId":"samuellleow"},"content":"                + \" added to Project \" + project.getProjectName() + \"\\n\\n\";"},{"lineNumber":162,"author":{"gitId":"samuellleow"},"content":"        output +\u003d printHomeView(projects, members);"},{"lineNumber":163,"author":{"gitId":"samuellleow"},"content":"        return output;"},{"lineNumber":164,"author":{"gitId":"samuellleow"},"content":"    }"},{"lineNumber":165,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":166,"author":{"gitId":"samuellleow"},"content":"    /**"},{"lineNumber":167,"author":{"gitId":"samuellleow"},"content":"     * Return task created message."},{"lineNumber":168,"author":{"gitId":"samuellleow"},"content":"     * @param taskName Name of added task."},{"lineNumber":169,"author":{"gitId":"samuellleow"},"content":"     * @return String of task created message."},{"lineNumber":170,"author":{"gitId":"samuellleow"},"content":"     */"},{"lineNumber":171,"author":{"gitId":"riazaham"},"content":"    public static String printTaskCreatedMessage(String taskName) {"},{"lineNumber":172,"author":{"gitId":"riazaham"},"content":"        return \"Task \\\"\" + taskName + \"\\\" created!\";"},{"lineNumber":173,"author":{"gitId":"samuellleow"},"content":"    }"},{"lineNumber":174,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":175,"author":{"gitId":"samuellleow"},"content":"    /**"},{"lineNumber":176,"author":{"gitId":"samuellleow"},"content":"     * Return estimated time added to task message."},{"lineNumber":177,"author":{"gitId":"samuellleow"},"content":"     * @param taskName Name of task with estimated time to be added."},{"lineNumber":178,"author":{"gitId":"samuellleow"},"content":"     * @param hours Hours part of estimated time."},{"lineNumber":179,"author":{"gitId":"samuellleow"},"content":"     * @param minutes Minutes part of estimated time."},{"lineNumber":180,"author":{"gitId":"samuellleow"},"content":"     * @return String of estimated time being added to task message."},{"lineNumber":181,"author":{"gitId":"samuellleow"},"content":"     */"},{"lineNumber":182,"author":{"gitId":"thatseant"},"content":"    public static String printEstimateAddedMessage(String taskName, int hours, int minutes) {"},{"lineNumber":183,"author":{"gitId":"thatseant"},"content":"        return \"Task \\\"\" + taskName + \"\\\" has estimated time of \" + hours + \" hours and \" + minutes + \" minutes\";"},{"lineNumber":184,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":185,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":186,"author":{"gitId":"samuellleow"},"content":"    /**"},{"lineNumber":187,"author":{"gitId":"samuellleow"},"content":"     * Return actual time added to task message."},{"lineNumber":188,"author":{"gitId":"samuellleow"},"content":"     * @param taskName Name of task with actual time to be added."},{"lineNumber":189,"author":{"gitId":"samuellleow"},"content":"     * @param hours Hours part of actual time."},{"lineNumber":190,"author":{"gitId":"samuellleow"},"content":"     * @param minutes Minutes part of actual time."},{"lineNumber":191,"author":{"gitId":"samuellleow"},"content":"     * @return String of actual time being added to task message."},{"lineNumber":192,"author":{"gitId":"samuellleow"},"content":"     */"},{"lineNumber":193,"author":{"gitId":"thatseant"},"content":"    public static String printActualDurationAddedMessage(String taskName, int hours, int minutes) {"},{"lineNumber":194,"author":{"gitId":"thatseant"},"content":"        return \"Task \\\"\" + taskName + \"\\\" took \" + hours + \" hours and \" + minutes + \" minutes to be completed.\";"},{"lineNumber":195,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":196,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":197,"author":{"gitId":"samuellleow"},"content":"    /**"},{"lineNumber":198,"author":{"gitId":"samuellleow"},"content":"     * Return task marked as done message."},{"lineNumber":199,"author":{"gitId":"samuellleow"},"content":"     * @param taskName Name of specified task that is marked as done."},{"lineNumber":200,"author":{"gitId":"samuellleow"},"content":"     * @return String of task being marked as done message."},{"lineNumber":201,"author":{"gitId":"samuellleow"},"content":"     */"},{"lineNumber":202,"author":{"gitId":"samuelchristopher"},"content":"    public static String printTaskDoneMessage(String taskName) {"},{"lineNumber":203,"author":{"gitId":"samuelchristopher"},"content":"        return \"Task \\\"\" + taskName + \"\\\" is done!\";"},{"lineNumber":204,"author":{"gitId":"samuelchristopher"},"content":"    }"},{"lineNumber":205,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":206,"author":{"gitId":"samuellleow"},"content":"    /**"},{"lineNumber":207,"author":{"gitId":"samuellleow"},"content":"     * Retunr task deleted message."},{"lineNumber":208,"author":{"gitId":"samuellleow"},"content":"     * @param taskName Name of removed task."},{"lineNumber":209,"author":{"gitId":"samuellleow"},"content":"     * @return String of task being deleted message."},{"lineNumber":210,"author":{"gitId":"samuellleow"},"content":"     */"},{"lineNumber":211,"author":{"gitId":"samuellleow"},"content":"    public static String printTaskDeletedMessage(String taskName) {"},{"lineNumber":212,"author":{"gitId":"riazaham"},"content":"        return \"Task \\\"\" + taskName + \"\\\" removed!\";"},{"lineNumber":213,"author":{"gitId":"riazaham"},"content":"    }"},{"lineNumber":214,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":215,"author":{"gitId":"samuellleow"},"content":"    private static String printProjectListHeadingInHomeView() {"},{"lineNumber":216,"author":{"gitId":"samuellleow"},"content":"        String output \u003d \"EZ Manager Home View\\n\";"},{"lineNumber":217,"author":{"gitId":"samuellleow"},"content":"        output +\u003d \"\\n ----------------------\";"},{"lineNumber":218,"author":{"gitId":"samuellleow"},"content":"        output +\u003d \"\\n| PROJECT LIST         |\";"},{"lineNumber":219,"author":{"gitId":"samuellleow"},"content":"        output +\u003d \"\\n ----------------------\\n\";"},{"lineNumber":220,"author":{"gitId":"samuellleow"},"content":"        output +\u003d \"\\nIndex   Status   Project Name             Project Description                \""},{"lineNumber":221,"author":{"gitId":"samuellleow"},"content":"                + \"Deadline     Tasks Completed     Remarks\";"},{"lineNumber":222,"author":{"gitId":"samuellleow"},"content":"        output +\u003d \"\\n---------------------------------------------------------------------------\""},{"lineNumber":223,"author":{"gitId":"samuellleow"},"content":"                + \"---------------------------------------------------------------------------\";"},{"lineNumber":224,"author":{"gitId":"samuellleow"},"content":"        return output;"},{"lineNumber":225,"author":{"gitId":"samuellleow"},"content":"    }"},{"lineNumber":226,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":227,"author":{"gitId":"samuellleow"},"content":"    private static String printProjectListInHomeView(ArrayList\u003cProject\u003e projects) {"},{"lineNumber":228,"author":{"gitId":"samuellleow"},"content":"        String output \u003d \"\";"},{"lineNumber":229,"author":{"gitId":"thatseant"},"content":"        int projectIndex \u003d 1;"},{"lineNumber":230,"author":{"gitId":"samuellleow"},"content":"        String paddedProjectIndex;"},{"lineNumber":231,"author":{"gitId":"samuellleow"},"content":"        String paddedProjectStatus;"},{"lineNumber":232,"author":{"gitId":"samuellleow"},"content":"        String paddedProjectName;"},{"lineNumber":233,"author":{"gitId":"samuellleow"},"content":"        String paddedProjectDescription;"},{"lineNumber":234,"author":{"gitId":"samuellleow"},"content":"        String paddedProjectDeadline;"},{"lineNumber":235,"author":{"gitId":"samuellleow"},"content":"        String paddedTaskCompleted;"},{"lineNumber":236,"author":{"gitId":"samuellleow"},"content":"        String remarks;"},{"lineNumber":237,"author":{"gitId":"samuellleow"},"content":"        for (Project project : projects) {"},{"lineNumber":238,"author":{"gitId":"samuellleow"},"content":"            paddedProjectIndex \u003d String.format(\"%-8s\", projectIndex + \".\");"},{"lineNumber":239,"author":{"gitId":"samuellleow"},"content":"            paddedProjectStatus \u003d printProjectStatusInHomeView(project);"},{"lineNumber":240,"author":{"gitId":"samuellleow"},"content":"            EzLogger.log(Level.INFO, \"Project status printed\");"},{"lineNumber":241,"author":{"gitId":"samuellleow"},"content":"            paddedProjectName \u003d printProjectNameInHomeView(project);"},{"lineNumber":242,"author":{"gitId":"samuellleow"},"content":"            EzLogger.log(Level.INFO, \"Project name printed\");"},{"lineNumber":243,"author":{"gitId":"samuellleow"},"content":"            paddedProjectDescription \u003d printProjectDescriptionInHomeView(project);"},{"lineNumber":244,"author":{"gitId":"samuellleow"},"content":"            EzLogger.log(Level.INFO, \"Project description printed\");"},{"lineNumber":245,"author":{"gitId":"samuellleow"},"content":"            paddedProjectDeadline \u003d printProjectDeadlineInHomeView(project);"},{"lineNumber":246,"author":{"gitId":"samuellleow"},"content":"            EzLogger.log(Level.INFO, \"Project deadline printed\");"},{"lineNumber":247,"author":{"gitId":"samuellleow"},"content":"            paddedTaskCompleted \u003d printTaskCompletedInProjectInHomeView(project);"},{"lineNumber":248,"author":{"gitId":"samuellleow"},"content":"            EzLogger.log(Level.INFO, \"Task completed in project printed\");"},{"lineNumber":249,"author":{"gitId":"samuellleow"},"content":"            remarks \u003d printRemarksInHomeView(project);"},{"lineNumber":250,"author":{"gitId":"samuellleow"},"content":"            EzLogger.log(Level.INFO, \"Remarks printed\");"},{"lineNumber":251,"author":{"gitId":"samuellleow"},"content":"            output +\u003d \"\\n\" + paddedProjectIndex + paddedProjectStatus + paddedProjectName + paddedProjectDescription"},{"lineNumber":252,"author":{"gitId":"samuellleow"},"content":"                    + paddedProjectDeadline + paddedTaskCompleted + remarks;"},{"lineNumber":253,"author":{"gitId":"samuellleow"},"content":"            EzLogger.log(Level.INFO, \"One cycle of project completed\");"},{"lineNumber":254,"author":{"gitId":"samuellleow"},"content":"            projectIndex++;"},{"lineNumber":255,"author":{"gitId":"samuellleow"},"content":"        }"},{"lineNumber":256,"author":{"gitId":"samuellleow"},"content":"        return output;"},{"lineNumber":257,"author":{"gitId":"samuellleow"},"content":"    }"},{"lineNumber":258,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":259,"author":{"gitId":"samuellleow"},"content":"    private static String printProjectStatusInHomeView(Project project) {"},{"lineNumber":260,"author":{"gitId":"samuellleow"},"content":"        String projectStatus;"},{"lineNumber":261,"author":{"gitId":"samuellleow"},"content":"        if (project.isProjectDone()) {"},{"lineNumber":262,"author":{"gitId":"samuellleow"},"content":"            projectStatus \u003d \"Y\";"},{"lineNumber":263,"author":{"gitId":"samuellleow"},"content":"        } else {"},{"lineNumber":264,"author":{"gitId":"samuellleow"},"content":"            projectStatus \u003d \"N\";"},{"lineNumber":265,"author":{"gitId":"samuellleow"},"content":"        }"},{"lineNumber":266,"author":{"gitId":"samuellleow"},"content":"        String paddedProjectStatus \u003d String.format(\"%-9s\", projectStatus);"},{"lineNumber":267,"author":{"gitId":"samuellleow"},"content":"        return paddedProjectStatus;"},{"lineNumber":268,"author":{"gitId":"samuellleow"},"content":"    }"},{"lineNumber":269,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":270,"author":{"gitId":"samuellleow"},"content":"    private static String printProjectNameInHomeView(Project project) {"},{"lineNumber":271,"author":{"gitId":"samuellleow"},"content":"        String projectName \u003d project.getProjectName();"},{"lineNumber":272,"author":{"gitId":"samuellleow"},"content":"        if (projectName.length() \u003e\u003d 25) {"},{"lineNumber":273,"author":{"gitId":"samuellleow"},"content":"            projectName \u003d projectName.substring(0, 21) + \"...\";"},{"lineNumber":274,"author":{"gitId":"samuellleow"},"content":"        }"},{"lineNumber":275,"author":{"gitId":"samuellleow"},"content":"        String paddedProjectName \u003d String.format(\"%-25s\", projectName);"},{"lineNumber":276,"author":{"gitId":"samuellleow"},"content":"        return paddedProjectName;"},{"lineNumber":277,"author":{"gitId":"samuellleow"},"content":"    }"},{"lineNumber":278,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":279,"author":{"gitId":"samuellleow"},"content":"    private static String printProjectDescriptionInHomeView(Project project) {"},{"lineNumber":280,"author":{"gitId":"samuellleow"},"content":"        String paddedProjectDescription;"},{"lineNumber":281,"author":{"gitId":"samuellleow"},"content":"        if (!project.getDescription().equals(\"\u003cproject description empty\u003e\")) {"},{"lineNumber":282,"author":{"gitId":"samuellleow"},"content":"            String projectDescription \u003d project.getDescription();"},{"lineNumber":283,"author":{"gitId":"samuellleow"},"content":"            if (projectDescription.length() \u003e\u003d 35) {"},{"lineNumber":284,"author":{"gitId":"samuellleow"},"content":"                projectDescription \u003d projectDescription.substring(0, 31) + \"...\";"},{"lineNumber":285,"author":{"gitId":"samuellleow"},"content":"            }"},{"lineNumber":286,"author":{"gitId":"samuellleow"},"content":"            paddedProjectDescription \u003d String.format(\"%-35s\", projectDescription);"},{"lineNumber":287,"author":{"gitId":"samuellleow"},"content":"        } else {"},{"lineNumber":288,"author":{"gitId":"samuellleow"},"content":"            paddedProjectDescription \u003d String.format(\"%-35s\", \"-\");"},{"lineNumber":289,"author":{"gitId":"samuellleow"},"content":"        }"},{"lineNumber":290,"author":{"gitId":"samuellleow"},"content":"        return paddedProjectDescription;"},{"lineNumber":291,"author":{"gitId":"samuellleow"},"content":"    }"},{"lineNumber":292,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":293,"author":{"gitId":"samuellleow"},"content":"    private static String printProjectDeadlineInHomeView(Project project) {"},{"lineNumber":294,"author":{"gitId":"samuellleow"},"content":"        String paddedProjectDeadline;"},{"lineNumber":295,"author":{"gitId":"samuellleow"},"content":"        if (project.getProjectDeadline() !\u003d null) {"},{"lineNumber":296,"author":{"gitId":"samuellleow"},"content":"            String projectDeadline \u003d project.getProjectDeadline().format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy\"));"},{"lineNumber":297,"author":{"gitId":"samuellleow"},"content":"            paddedProjectDeadline \u003d String.format(\"%-13s\", projectDeadline);"},{"lineNumber":298,"author":{"gitId":"samuellleow"},"content":"        } else {"},{"lineNumber":299,"author":{"gitId":"samuellleow"},"content":"            paddedProjectDeadline \u003d String.format(\"%-13s\", \"-\");"},{"lineNumber":300,"author":{"gitId":"samuellleow"},"content":"        }"},{"lineNumber":301,"author":{"gitId":"samuellleow"},"content":"        return paddedProjectDeadline;"},{"lineNumber":302,"author":{"gitId":"samuellleow"},"content":"    }"},{"lineNumber":303,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":304,"author":{"gitId":"samuellleow"},"content":"    private static String printTaskCompletedInProjectInHomeView(Project project) {"},{"lineNumber":305,"author":{"gitId":"samuellleow"},"content":"        String taskCompleted \u003d project.getNumberOfFinishedTask() + \"/\""},{"lineNumber":306,"author":{"gitId":"samuellleow"},"content":"                + project.getNumberOfTask();"},{"lineNumber":307,"author":{"gitId":"samuellleow"},"content":"        String paddedTaskCompleted \u003d String.format(\"%-20s\", taskCompleted);"},{"lineNumber":308,"author":{"gitId":"samuellleow"},"content":"        return paddedTaskCompleted;"},{"lineNumber":309,"author":{"gitId":"samuellleow"},"content":"    }"},{"lineNumber":310,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":311,"author":{"gitId":"samuellleow"},"content":"    private static String printRemarksInHomeView(Project project) {"},{"lineNumber":312,"author":{"gitId":"samuellleow"},"content":"        String remarks \u003d \"-\";"},{"lineNumber":313,"author":{"gitId":"samuellleow"},"content":"        LocalDate dateOfTaskWithNearestDeadline \u003d null;"},{"lineNumber":314,"author":{"gitId":"samuellleow"},"content":"        Task taskWithNearestDeadline \u003d null;"},{"lineNumber":315,"author":{"gitId":"samuellleow"},"content":"        if (!project.getTaskList().isEmpty()) {"},{"lineNumber":316,"author":{"gitId":"samuellleow"},"content":"            ArrayList\u003cTask\u003e tasks \u003d project.getTaskList();"},{"lineNumber":317,"author":{"gitId":"samuellleow"},"content":"            taskWithNearestDeadline \u003d checkForTaskWithNearestDeadline(tasks);"},{"lineNumber":318,"author":{"gitId":"samuellleow"},"content":"            if (taskWithNearestDeadline !\u003d null) {"},{"lineNumber":319,"author":{"gitId":"samuellleow"},"content":"                dateOfTaskWithNearestDeadline \u003d taskWithNearestDeadline.getDeadline();"},{"lineNumber":320,"author":{"gitId":"samuellleow"},"content":"            }"},{"lineNumber":321,"author":{"gitId":"samuellleow"},"content":"            LocalDate currentDate \u003d LocalDate.now();"},{"lineNumber":322,"author":{"gitId":"samuellleow"},"content":"            if (dateOfTaskWithNearestDeadline !\u003d null \u0026\u0026 !taskWithNearestDeadline.getStatus()) {"},{"lineNumber":323,"author":{"gitId":"samuellleow"},"content":"                //find the difference in the number of days from current days to deadline"},{"lineNumber":324,"author":{"gitId":"samuellleow"},"content":"                Period period \u003d Period.between(currentDate, dateOfTaskWithNearestDeadline);"},{"lineNumber":325,"author":{"gitId":"samuellleow"},"content":"                if (period.getDays() \u003c\u003d 5 \u0026\u0026 period.getMonths() \u003d\u003d 0 \u0026\u0026 period.getYears() \u003d\u003d 0) {"},{"lineNumber":326,"author":{"gitId":"samuellleow"},"content":"                    remarks \u003d \"!!!WARNING!!! Task \\\"\" + taskWithNearestDeadline.getDescription()"},{"lineNumber":327,"author":{"gitId":"samuellleow"},"content":"                            + \"\\\" has \" + period.getDays() + \" day(s) before deadline and still not done!!\";"},{"lineNumber":328,"author":{"gitId":"samuellleow"},"content":"                } else {"},{"lineNumber":329,"author":{"gitId":"samuellleow"},"content":"                    remarks \u003d \"Task \\\"\" + taskWithNearestDeadline.getDescription()"},{"lineNumber":330,"author":{"gitId":"samuellleow"},"content":"                            + \"\\\" has an upcoming deadline at \" + taskWithNearestDeadline.getDateString()"},{"lineNumber":331,"author":{"gitId":"samuellleow"},"content":"                            + \" and still not done!!\";"},{"lineNumber":332,"author":{"gitId":"samuellleow"},"content":"                }"},{"lineNumber":333,"author":{"gitId":"samuellleow"},"content":"            }"},{"lineNumber":334,"author":{"gitId":"samuellleow"},"content":"        }"},{"lineNumber":335,"author":{"gitId":"samuellleow"},"content":"        return remarks;"},{"lineNumber":336,"author":{"gitId":"samuellleow"},"content":"    }"},{"lineNumber":337,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":338,"author":{"gitId":"samuellleow"},"content":"    private static Task checkForTaskWithNearestDeadline(ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":339,"author":{"gitId":"samuellleow"},"content":"        LocalDate dateOfTaskWithNearestDeadline \u003d null;"},{"lineNumber":340,"author":{"gitId":"samuellleow"},"content":"        Task taskWithNearestDeadline \u003d null;"},{"lineNumber":341,"author":{"gitId":"samuellleow"},"content":"        for (Task task : tasks) {"},{"lineNumber":342,"author":{"gitId":"samuellleow"},"content":"            LocalDate deadlineOfTask \u003d task.getDeadline();"},{"lineNumber":343,"author":{"gitId":"samuellleow"},"content":"            if (deadlineOfTask \u003d\u003d null) {"},{"lineNumber":344,"author":{"gitId":"samuellleow"},"content":"                continue;"},{"lineNumber":345,"author":{"gitId":"samuellleow"},"content":"            } else if (dateOfTaskWithNearestDeadline \u003d\u003d null) {"},{"lineNumber":346,"author":{"gitId":"samuellleow"},"content":"                dateOfTaskWithNearestDeadline \u003d deadlineOfTask;"},{"lineNumber":347,"author":{"gitId":"samuellleow"},"content":"                taskWithNearestDeadline \u003d task;"},{"lineNumber":348,"author":{"gitId":"samuellleow"},"content":"            } else if (deadlineOfTask.compareTo(dateOfTaskWithNearestDeadline) \u003c 0) {"},{"lineNumber":349,"author":{"gitId":"samuellleow"},"content":"                dateOfTaskWithNearestDeadline \u003d deadlineOfTask;"},{"lineNumber":350,"author":{"gitId":"samuellleow"},"content":"                taskWithNearestDeadline \u003d task;"},{"lineNumber":351,"author":{"gitId":"samuellleow"},"content":"            }"},{"lineNumber":352,"author":{"gitId":"samuellleow"},"content":"        }"},{"lineNumber":353,"author":{"gitId":"samuellleow"},"content":"        return taskWithNearestDeadline;"},{"lineNumber":354,"author":{"gitId":"samuellleow"},"content":"    }"},{"lineNumber":355,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":356,"author":{"gitId":"samuellleow"},"content":"    private static String printMemberListHeadingInHomeView() {"},{"lineNumber":357,"author":{"gitId":"samuellleow"},"content":"        String output \u003d \"\\n\\n ----------------------\";"},{"lineNumber":358,"author":{"gitId":"samuellleow"},"content":"        output +\u003d \"\\n| MEMBERS LIST         |\";"},{"lineNumber":359,"author":{"gitId":"samuellleow"},"content":"        output +\u003d \"\\n ----------------------\\n\";"},{"lineNumber":360,"author":{"gitId":"samuellleow"},"content":"        output +\u003d \"\\nIndex   Member Name                   Projects Involved        Hours spent across tasks\";"},{"lineNumber":361,"author":{"gitId":"samuellleow"},"content":"        output +\u003d \"\\n---------------------------------------------------------------------------------------\";"},{"lineNumber":362,"author":{"gitId":"samuellleow"},"content":"        return output;"},{"lineNumber":363,"author":{"gitId":"samuellleow"},"content":"    }"},{"lineNumber":364,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":365,"author":{"gitId":"samuellleow"},"content":"    private static String printMemberListInHomeView(ArrayList\u003cTeamMember\u003e teamMembers) {"},{"lineNumber":366,"author":{"gitId":"samuellleow"},"content":"        String output \u003d \"\";"},{"lineNumber":367,"author":{"gitId":"thatseant"},"content":"        int memberIndex \u003d 1;"},{"lineNumber":368,"author":{"gitId":"samuellleow"},"content":"        for (TeamMember member : teamMembers) {"},{"lineNumber":369,"author":{"gitId":"samuellleow"},"content":"            String paddedMemberIndex \u003d String.format(\"%-8s\", memberIndex + \".\");"},{"lineNumber":370,"author":{"gitId":"samuellleow"},"content":"            String paddedMemberName \u003d printMemberNameInHomeView(member);"},{"lineNumber":371,"author":{"gitId":"samuellleow"},"content":"            output +\u003d \"\\n\" + paddedMemberIndex + paddedMemberName"},{"lineNumber":372,"author":{"gitId":"samuellleow"},"content":"                    + printMemberAssignedProjectsInHomeView(member);"},{"lineNumber":373,"author":{"gitId":"samuellleow"},"content":"            output +\u003d System.lineSeparator();"},{"lineNumber":374,"author":{"gitId":"samuellleow"},"content":"            memberIndex++;"},{"lineNumber":375,"author":{"gitId":"samuellleow"},"content":"        }"},{"lineNumber":376,"author":{"gitId":"samuellleow"},"content":"        return output;"},{"lineNumber":377,"author":{"gitId":"samuellleow"},"content":"    }"},{"lineNumber":378,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":379,"author":{"gitId":"samuellleow"},"content":"    private static String printMemberNameInHomeView(TeamMember member) {"},{"lineNumber":380,"author":{"gitId":"samuellleow"},"content":"        String memberName \u003d member.getName();"},{"lineNumber":381,"author":{"gitId":"samuellleow"},"content":"        if (member.getName().length() \u003e\u003d 30) {"},{"lineNumber":382,"author":{"gitId":"samuellleow"},"content":"            memberName \u003d member.getName().substring(0, 26) + \"...\";"},{"lineNumber":383,"author":{"gitId":"samuellleow"},"content":"        }"},{"lineNumber":384,"author":{"gitId":"samuellleow"},"content":"        String paddedMemberName \u003d String.format(\"%-30s\", memberName);"},{"lineNumber":385,"author":{"gitId":"samuellleow"},"content":"        return paddedMemberName;"},{"lineNumber":386,"author":{"gitId":"samuellleow"},"content":"    }"},{"lineNumber":387,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":388,"author":{"gitId":"samuellleow"},"content":"    private static String printMemberAssignedProjectsInHomeView(TeamMember member) {"},{"lineNumber":389,"author":{"gitId":"samuellleow"},"content":"        String output \u003d \"\";"},{"lineNumber":390,"author":{"gitId":"samuellleow"},"content":"        double hoursWorked \u003d 0;"},{"lineNumber":391,"author":{"gitId":"samuellleow"},"content":"        String paddedProjectName;"},{"lineNumber":392,"author":{"gitId":"samuellleow"},"content":"        hoursWorked \u003d hoursWorkedByMembers(member);"},{"lineNumber":393,"author":{"gitId":"samuellleow"},"content":"        if (!member.getAssignedProjects().isEmpty()) {"},{"lineNumber":394,"author":{"gitId":"samuellleow"},"content":"            for (int i \u003d 0; i \u003c member.getAssignedProjects().size(); i++) {"},{"lineNumber":395,"author":{"gitId":"samuellleow"},"content":"                String assignedProjectName \u003d member.getAssignedProjects().get(i).getProjectName();"},{"lineNumber":396,"author":{"gitId":"samuellleow"},"content":"                if (assignedProjectName.length() \u003e\u003d 25) {"},{"lineNumber":397,"author":{"gitId":"samuellleow"},"content":"                    assignedProjectName \u003d assignedProjectName.substring(0, 18) + \"...\";"},{"lineNumber":398,"author":{"gitId":"samuellleow"},"content":"                }"},{"lineNumber":399,"author":{"gitId":"samuellleow"},"content":"                paddedProjectName \u003d String.format(\"%-22s\", assignedProjectName);"},{"lineNumber":400,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":401,"author":{"gitId":"samuellleow"},"content":"                if (i \u003d\u003d 0) {"},{"lineNumber":402,"author":{"gitId":"samuellleow"},"content":"                    output +\u003d \"1. \" + paddedProjectName + hoursWorked;"},{"lineNumber":403,"author":{"gitId":"samuellleow"},"content":"                } else {"},{"lineNumber":404,"author":{"gitId":"samuellleow"},"content":"                    output +\u003d \"\\n                                      \""},{"lineNumber":405,"author":{"gitId":"samuellleow"},"content":"                            + (i + 1) + \". \" + paddedProjectName;"},{"lineNumber":406,"author":{"gitId":"samuellleow"},"content":"                }"},{"lineNumber":407,"author":{"gitId":"samuellleow"},"content":"            }"},{"lineNumber":408,"author":{"gitId":"samuellleow"},"content":"        } else {"},{"lineNumber":409,"author":{"gitId":"samuellleow"},"content":"            output +\u003d String.format(\"%-25s\", \"-\") + hoursWorked;"},{"lineNumber":410,"author":{"gitId":"samuellleow"},"content":"        }"},{"lineNumber":411,"author":{"gitId":"samuellleow"},"content":"        return output;"},{"lineNumber":412,"author":{"gitId":"samuellleow"},"content":"    }"},{"lineNumber":413,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":414,"author":{"gitId":"samuellleow"},"content":"    private static double hoursWorkedByMembers(TeamMember member) {"},{"lineNumber":415,"author":{"gitId":"samuellleow"},"content":"        double hoursWorked \u003d 0;"},{"lineNumber":416,"author":{"gitId":"samuellleow"},"content":"        for (int i \u003d 0; i \u003c member.getTasks().size(); i++) {"},{"lineNumber":417,"author":{"gitId":"samuellleow"},"content":"            Task task \u003d member.getTasks().get(i);"},{"lineNumber":418,"author":{"gitId":"samuellleow"},"content":"            hoursWorked +\u003d task.getActual() / MINUTES_IN_HOUR_DOUBLE;"},{"lineNumber":419,"author":{"gitId":"samuellleow"},"content":"        }"},{"lineNumber":420,"author":{"gitId":"samuellleow"},"content":"        return hoursWorked;"},{"lineNumber":421,"author":{"gitId":"samuellleow"},"content":"    }"},{"lineNumber":422,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":423,"author":{"gitId":"samuellleow"},"content":"    /**"},{"lineNumber":424,"author":{"gitId":"samuellleow"},"content":"     * Returns the home view display which consists of a project list and a member list."},{"lineNumber":425,"author":{"gitId":"samuellleow"},"content":"     * Additional information such as project description, project deadline, remarks"},{"lineNumber":426,"author":{"gitId":"samuellleow"},"content":"     * and member\u0027s assigned project will also be displayed."},{"lineNumber":427,"author":{"gitId":"samuellleow"},"content":"     * @param projects ArrayList of Projects."},{"lineNumber":428,"author":{"gitId":"samuellleow"},"content":"     * @param teamMembers ArrayList of TeamMembers in the program."},{"lineNumber":429,"author":{"gitId":"samuellleow"},"content":"     * @return Home view display"},{"lineNumber":430,"author":{"gitId":"samuellleow"},"content":"     */"},{"lineNumber":431,"author":{"gitId":"samuellleow"},"content":"    public static String printHomeView(ArrayList\u003cProject\u003e projects, ArrayList\u003cTeamMember\u003e teamMembers) {"},{"lineNumber":432,"author":{"gitId":"samuellleow"},"content":"        String output \u003d printProjectListHeadingInHomeView();"},{"lineNumber":433,"author":{"gitId":"samuellleow"},"content":"        EzLogger.log(Level.INFO, \"Project list heading printed\");"},{"lineNumber":434,"author":{"gitId":"samuellleow"},"content":"        output +\u003d printProjectListInHomeView(projects);"},{"lineNumber":435,"author":{"gitId":"samuellleow"},"content":"        EzLogger.log(Level.INFO, \"Full project list printed\");"},{"lineNumber":436,"author":{"gitId":"samuellleow"},"content":"        output +\u003d printMemberListHeadingInHomeView();"},{"lineNumber":437,"author":{"gitId":"samuellleow"},"content":"        EzLogger.log(Level.INFO, \"Member list heading printed\");"},{"lineNumber":438,"author":{"gitId":"samuellleow"},"content":"        output +\u003d printMemberListInHomeView(teamMembers);"},{"lineNumber":439,"author":{"gitId":"samuellleow"},"content":"        EzLogger.log(Level.INFO, \"Full member list printed\");"},{"lineNumber":440,"author":{"gitId":"samuellleow"},"content":"        EzLogger.log(Level.INFO, \"Home View printed\");"},{"lineNumber":441,"author":{"gitId":"samuellleow"},"content":"        return output;"},{"lineNumber":442,"author":{"gitId":"samuellleow"},"content":"    }"},{"lineNumber":443,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":444,"author":{"gitId":"samuellleow"},"content":"    /**"},{"lineNumber":445,"author":{"gitId":"samuellleow"},"content":"     * Return task deadline added message."},{"lineNumber":446,"author":{"gitId":"samuellleow"},"content":"     * @param date deadline of specified project to be added."},{"lineNumber":447,"author":{"gitId":"samuellleow"},"content":"     * @param taskName Name of specified task with deadline to be added."},{"lineNumber":448,"author":{"gitId":"samuellleow"},"content":"     * @return String of task deadline being added message."},{"lineNumber":449,"author":{"gitId":"samuellleow"},"content":"     */"},{"lineNumber":450,"author":{"gitId":"thatseant"},"content":"    public static String printTaskDeadlineMessage(LocalDate date, String taskName) {"},{"lineNumber":451,"author":{"gitId":"thatseant"},"content":"        return \"Deadline \" + date.format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy\"))"},{"lineNumber":452,"author":{"gitId":"thatseant"},"content":"                + \" added to Task \" + taskName;"},{"lineNumber":453,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":454,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":455,"author":{"gitId":"samuellleow"},"content":"    /**"},{"lineNumber":456,"author":{"gitId":"samuellleow"},"content":"     * Return task name updated message."},{"lineNumber":457,"author":{"gitId":"samuellleow"},"content":"     * @param oldTaskName previous task name."},{"lineNumber":458,"author":{"gitId":"samuellleow"},"content":"     * @param newTaskName new task name to be updated."},{"lineNumber":459,"author":{"gitId":"samuellleow"},"content":"     * @return String of task name being updated message."},{"lineNumber":460,"author":{"gitId":"samuellleow"},"content":"     */"},{"lineNumber":461,"author":{"gitId":"riazaham"},"content":"    public static String printTaskNameUpdatedMessage(String oldTaskName, String newTaskName) {"},{"lineNumber":462,"author":{"gitId":"riazaham"},"content":"        return \"Task \" + \"\\\"\" + oldTaskName + \"\\\" has been updated to \\\"\" + newTaskName + \"\\\"\";"},{"lineNumber":463,"author":{"gitId":"riazaham"},"content":"    }"},{"lineNumber":464,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":465,"author":{"gitId":"samuellleow"},"content":"    /**"},{"lineNumber":466,"author":{"gitId":"samuellleow"},"content":"     * Returns the project view display."},{"lineNumber":467,"author":{"gitId":"samuellleow"},"content":"     * @param project Specified Project object that we are currently in."},{"lineNumber":468,"author":{"gitId":"samuellleow"},"content":"     * @return Project View Display"},{"lineNumber":469,"author":{"gitId":"samuellleow"},"content":"     */"},{"lineNumber":470,"author":{"gitId":"samuelchristopher"},"content":"    public static String projectViewMessage(Project project) {"},{"lineNumber":471,"author":{"gitId":"samuelchristopher"},"content":"        try {"},{"lineNumber":472,"author":{"gitId":"samuelchristopher"},"content":"            String projectTitle \u003d \"Project \\\"\" + project.getProjectName() + \"\\\"\";"},{"lineNumber":473,"author":{"gitId":"thatseant"},"content":"            String projectDescription \u003d \"\\n\" + \"Description:\" + \"\\n\" + project.getDescription();"},{"lineNumber":474,"author":{"gitId":"samuelchristopher"},"content":"            String taskListTitle \u003d \"\\n ---------------------\\n| TASK LIST           |\\n ---------------------\";"},{"lineNumber":475,"author":{"gitId":"samuelchristopher"},"content":"            String membersListTitle \u003d \"\\n ---------------------\\n| MEMBERS LIST        |\\n ---------------------\";"},{"lineNumber":476,"author":{"gitId":"thatseant"},"content":"            String indexSpaces \u003d \"      \"; // 6"},{"lineNumber":477,"author":{"gitId":"samuelchristopher"},"content":"            String statusSpaces \u003d \"      \"; // 6"},{"lineNumber":478,"author":{"gitId":"samuelchristopher"},"content":"            String descriptionSpaces \u003d \"                   \"; // 19"},{"lineNumber":479,"author":{"gitId":"samuelchristopher"},"content":"            String deadlineSpaces \u003d \"                \"; // 16"},{"lineNumber":480,"author":{"gitId":"samuelchristopher"},"content":"            String prioritySpaces \u003d \"              \"; // 14"},{"lineNumber":481,"author":{"gitId":"samuelchristopher"},"content":"            String estimatedSpaces \u003d \"                  \"; // 18"},{"lineNumber":482,"author":{"gitId":"samuelchristopher"},"content":"            String actualSpaces \u003d \"             \"; // 13"},{"lineNumber":483,"author":{"gitId":"samuelchristopher"},"content":"            String membersSpaces \u003d \"                \"; // 16"},{"lineNumber":484,"author":{"gitId":"thatseant"},"content":"            String tableLabel \u003d \"Index  Status   Description        \""},{"lineNumber":485,"author":{"gitId":"samuelchristopher"},"content":"                                + \"Deadline        Priority      Estimated Hrs     Actual Hrs   | Members Involved\\n\""},{"lineNumber":486,"author":{"gitId":"samuelchristopher"},"content":"                                + \"------------------------------------------------\""},{"lineNumber":487,"author":{"gitId":"samuelchristopher"},"content":"                                + \"------------------------------------------------|------------------\";"},{"lineNumber":488,"author":{"gitId":"samuelchristopher"},"content":"            String taskLines \u003d generateTaskEntries(project, indexSpaces, statusSpaces, descriptionSpaces,"},{"lineNumber":489,"author":{"gitId":"samuelchristopher"},"content":"                    deadlineSpaces, prioritySpaces, estimatedSpaces, actualSpaces);"},{"lineNumber":490,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":491,"author":{"gitId":"samuelchristopher"},"content":"            ArrayList\u003cTeamMember\u003e members \u003d project.getTeamMembers();"},{"lineNumber":492,"author":{"gitId":"samuelchristopher"},"content":"            String membersListLines \u003d getMembersList(members);"},{"lineNumber":493,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":494,"author":{"gitId":"samuelchristopher"},"content":"            return projectTitle + \"\\n\" + projectDescription + \"\\n\" + taskListTitle + \"\\n\""},{"lineNumber":495,"author":{"gitId":"samuelchristopher"},"content":"                    + (project.getTaskList().size() \u003e 0 ? tableLabel : \"\") + taskLines"},{"lineNumber":496,"author":{"gitId":"samuelchristopher"},"content":"                    + \"\\n \\n\" + membersListTitle + \"\\n\" + membersListLines;"},{"lineNumber":497,"author":{"gitId":"samuelchristopher"},"content":"        } catch (Error e) {"},{"lineNumber":498,"author":{"gitId":"samuelchristopher"},"content":"            System.out.println(e.getMessage());"},{"lineNumber":499,"author":{"gitId":"samuelchristopher"},"content":"        }"},{"lineNumber":500,"author":{"gitId":"samuelchristopher"},"content":"        return \"hi\";"},{"lineNumber":501,"author":{"gitId":"samuelchristopher"},"content":"    }"},{"lineNumber":502,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":503,"author":{"gitId":"samuelchristopher"},"content":"    private static String getMembersList(ArrayList\u003cTeamMember\u003e members) {"},{"lineNumber":504,"author":{"gitId":"samuelchristopher"},"content":"        String membersListLines \u003d \"\";"},{"lineNumber":505,"author":{"gitId":"samuelchristopher"},"content":"        if (members.size() \u003e 0) {"},{"lineNumber":506,"author":{"gitId":"samuelchristopher"},"content":"            for (int j \u003d 0; j \u003c members.size(); j++) {"},{"lineNumber":507,"author":{"gitId":"samuelchristopher"},"content":"                membersListLines +\u003d (j + 1) + \". \" + members.get(j).getName() + \"\\n\";"},{"lineNumber":508,"author":{"gitId":"samuelchristopher"},"content":"            }"},{"lineNumber":509,"author":{"gitId":"samuelchristopher"},"content":"        } else {"},{"lineNumber":510,"author":{"gitId":"samuelchristopher"},"content":"            membersListLines +\u003d \"No team members have been assigned to this project.\";"},{"lineNumber":511,"author":{"gitId":"samuelchristopher"},"content":"        }"},{"lineNumber":512,"author":{"gitId":"samuelchristopher"},"content":"        return membersListLines;"},{"lineNumber":513,"author":{"gitId":"samuelchristopher"},"content":"    }"},{"lineNumber":514,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":515,"author":{"gitId":"samuelchristopher"},"content":"    private static String generateTaskEntries(Project project, String indexSpaces, String statusSpaces,"},{"lineNumber":516,"author":{"gitId":"samuelchristopher"},"content":"                                              String descriptionSpaces, String deadlineSpaces, String prioritySpaces,"},{"lineNumber":517,"author":{"gitId":"samuelchristopher"},"content":"                                              String estimatedSpaces, String actualSpaces) {"},{"lineNumber":518,"author":{"gitId":"samuelchristopher"},"content":"        Integer i \u003d 0;"},{"lineNumber":519,"author":{"gitId":"thatseant"},"content":"        int index;"},{"lineNumber":520,"author":{"gitId":"samuelchristopher"},"content":"        String currentTaskLine \u003d \"\";"},{"lineNumber":521,"author":{"gitId":"samuelchristopher"},"content":"        String taskLines \u003d \"\\n\";"},{"lineNumber":522,"author":{"gitId":"samuelchristopher"},"content":"        if (project.getTaskList().size() \u003e 0) {"},{"lineNumber":523,"author":{"gitId":"samuelchristopher"},"content":"            for (; i \u003c project.getTaskList().size(); i++) {"},{"lineNumber":524,"author":{"gitId":"thatseant"},"content":"                index \u003d i + 1;"},{"lineNumber":525,"author":{"gitId":"samuelchristopher"},"content":"                Task currentTask \u003d project.getTaskList().get(i);"},{"lineNumber":526,"author":{"gitId":"samuelchristopher"},"content":"                String status \u003d currentTask.isDone() ? \"(Y)\" : \"(N)\";"},{"lineNumber":527,"author":{"gitId":"samuelchristopher"},"content":"                String description \u003d currentTask.getTaskDescription();"},{"lineNumber":528,"author":{"gitId":"samuelchristopher"},"content":"                int cutoffIndexForDescription \u003d 15;"},{"lineNumber":529,"author":{"gitId":"samuelchristopher"},"content":"                description \u003d truncateDescription(description, cutoffIndexForDescription);"},{"lineNumber":530,"author":{"gitId":"thatseant"},"content":"                currentTaskLine \u003d index + indexSpaces + status + statusSpaces + description"},{"lineNumber":531,"author":{"gitId":"samuelchristopher"},"content":"                        + (descriptionSpaces.substring(0, descriptionSpaces.length() - description.length()));"},{"lineNumber":532,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":533,"author":{"gitId":"samuelchristopher"},"content":"                currentTaskLine \u003d deadlineForTask(deadlineSpaces, currentTaskLine, currentTask);"},{"lineNumber":534,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":535,"author":{"gitId":"samuelchristopher"},"content":"                currentTaskLine \u003d priorityForTask(prioritySpaces, currentTaskLine, currentTask);"},{"lineNumber":536,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":537,"author":{"gitId":"samuelchristopher"},"content":"                currentTaskLine \u003d estimatedTimeForTask(estimatedSpaces, currentTaskLine, currentTask);"},{"lineNumber":538,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":539,"author":{"gitId":"samuelchristopher"},"content":"                currentTaskLine \u003d actualTimeForTask(actualSpaces, currentTaskLine, currentTask);"},{"lineNumber":540,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":541,"author":{"gitId":"samuelchristopher"},"content":"                currentTaskLine \u003d membersInvolvedInTasks(currentTaskLine, currentTask);"},{"lineNumber":542,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":543,"author":{"gitId":"samuelchristopher"},"content":"                taskLines +\u003d (currentTaskLine + \"\\n\");"},{"lineNumber":544,"author":{"gitId":"samuelchristopher"},"content":"            }"},{"lineNumber":545,"author":{"gitId":"samuelchristopher"},"content":"        } else {"},{"lineNumber":546,"author":{"gitId":"samuelchristopher"},"content":"            taskLines +\u003d \"No tasks have been added to this project.\";"},{"lineNumber":547,"author":{"gitId":"samuelchristopher"},"content":"        }"},{"lineNumber":548,"author":{"gitId":"samuelchristopher"},"content":"        return taskLines;"},{"lineNumber":549,"author":{"gitId":"samuelchristopher"},"content":"    }"},{"lineNumber":550,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":551,"author":{"gitId":"samuelchristopher"},"content":"    private static String actualTimeForTask(String actualSpaces, String currentTaskLine, Task currentTask) {"},{"lineNumber":552,"author":{"gitId":"samuelchristopher"},"content":"        Integer actual \u003d currentTask.getActual();"},{"lineNumber":553,"author":{"gitId":"samuelchristopher"},"content":"        String actualString \u003d \"\";"},{"lineNumber":554,"author":{"gitId":"samuelchristopher"},"content":"        if (actual \u003e 1) {"},{"lineNumber":555,"author":{"gitId":"samuelchristopher"},"content":"            int hours \u003d (actual / 60);"},{"lineNumber":556,"author":{"gitId":"samuelchristopher"},"content":"            int minutes \u003d actual - hours * 60;"},{"lineNumber":557,"author":{"gitId":"samuelchristopher"},"content":"            double ratio \u003d minutes / 60.0;"},{"lineNumber":558,"author":{"gitId":"samuelchristopher"},"content":"            actualString \u003d String.format(\"%.1f\", hours + ratio);"},{"lineNumber":559,"author":{"gitId":"samuelchristopher"},"content":"            currentTaskLine +\u003d actualString;"},{"lineNumber":560,"author":{"gitId":"samuelchristopher"},"content":"        } else {"},{"lineNumber":561,"author":{"gitId":"samuelchristopher"},"content":"            actualString \u003d \"-\";"},{"lineNumber":562,"author":{"gitId":"samuelchristopher"},"content":"            currentTaskLine +\u003d actualString;"},{"lineNumber":563,"author":{"gitId":"samuelchristopher"},"content":"        }"},{"lineNumber":564,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":565,"author":{"gitId":"samuelchristopher"},"content":"        currentTaskLine +\u003d (actualSpaces.substring(0, actualSpaces.length()"},{"lineNumber":566,"author":{"gitId":"samuelchristopher"},"content":"                - actualString.length()));"},{"lineNumber":567,"author":{"gitId":"samuelchristopher"},"content":"        return currentTaskLine;"},{"lineNumber":568,"author":{"gitId":"samuelchristopher"},"content":"    }"},{"lineNumber":569,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":570,"author":{"gitId":"samuelchristopher"},"content":"    private static String estimatedTimeForTask(String estimatedSpaces, String currentTaskLine, Task currentTask) {"},{"lineNumber":571,"author":{"gitId":"samuelchristopher"},"content":"        Integer estimate \u003d currentTask.getEstimate();"},{"lineNumber":572,"author":{"gitId":"samuelchristopher"},"content":"        String estimateString \u003d \"\";"},{"lineNumber":573,"author":{"gitId":"samuelchristopher"},"content":"        if (estimate \u003e 1) {"},{"lineNumber":574,"author":{"gitId":"samuelchristopher"},"content":"            int hours \u003d (estimate / 60);"},{"lineNumber":575,"author":{"gitId":"samuelchristopher"},"content":"            int minutes \u003d estimate - hours * 60;"},{"lineNumber":576,"author":{"gitId":"samuelchristopher"},"content":"            double ratio \u003d minutes / 60.0;"},{"lineNumber":577,"author":{"gitId":"samuelchristopher"},"content":"            estimateString \u003d String.format(\"%.1f\", hours + ratio);"},{"lineNumber":578,"author":{"gitId":"samuelchristopher"},"content":"            currentTaskLine +\u003d estimateString;"},{"lineNumber":579,"author":{"gitId":"samuelchristopher"},"content":"        } else {"},{"lineNumber":580,"author":{"gitId":"samuelchristopher"},"content":"            estimateString \u003d \"-\";"},{"lineNumber":581,"author":{"gitId":"samuelchristopher"},"content":"            currentTaskLine +\u003d estimateString;"},{"lineNumber":582,"author":{"gitId":"samuelchristopher"},"content":"        }"},{"lineNumber":583,"author":{"gitId":"samuelchristopher"},"content":"        currentTaskLine +\u003d (estimatedSpaces.substring(0, estimatedSpaces.length()"},{"lineNumber":584,"author":{"gitId":"samuelchristopher"},"content":"                - estimateString.length()));"},{"lineNumber":585,"author":{"gitId":"samuelchristopher"},"content":"        return currentTaskLine;"},{"lineNumber":586,"author":{"gitId":"samuelchristopher"},"content":"    }"},{"lineNumber":587,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":588,"author":{"gitId":"samuelchristopher"},"content":"    private static String priorityForTask(String prioritySpaces, String currentTaskLine, Task currentTask) {"},{"lineNumber":589,"author":{"gitId":"samuelchristopher"},"content":"        String priority \u003d String.valueOf(currentTask.getPriority());"},{"lineNumber":590,"author":{"gitId":"samuelchristopher"},"content":"        if (!priority.equals(\"0\")) {"},{"lineNumber":591,"author":{"gitId":"samuelchristopher"},"content":"            currentTaskLine +\u003d (priority);"},{"lineNumber":592,"author":{"gitId":"samuelchristopher"},"content":"        } else {"},{"lineNumber":593,"author":{"gitId":"samuelchristopher"},"content":"            priority \u003d \"-\";"},{"lineNumber":594,"author":{"gitId":"thatseant"},"content":"            currentTaskLine +\u003d \"-\";"},{"lineNumber":595,"author":{"gitId":"samuelchristopher"},"content":"        }"},{"lineNumber":596,"author":{"gitId":"samuelchristopher"},"content":"        currentTaskLine +\u003d (prioritySpaces.substring(0, prioritySpaces.length() - priority.length()));"},{"lineNumber":597,"author":{"gitId":"samuelchristopher"},"content":"        return currentTaskLine;"},{"lineNumber":598,"author":{"gitId":"samuelchristopher"},"content":"    }"},{"lineNumber":599,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":600,"author":{"gitId":"samuelchristopher"},"content":"    private static String deadlineForTask(String deadlineSpaces, String currentTaskLine, Task currentTask) {"},{"lineNumber":601,"author":{"gitId":"samuelchristopher"},"content":"        String deadline \u003d currentTask.getDateString();"},{"lineNumber":602,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":603,"author":{"gitId":"samuelchristopher"},"content":"        if (deadline.length() \u003e 0) {"},{"lineNumber":604,"author":{"gitId":"samuelchristopher"},"content":"            currentTaskLine +\u003d (deadline);"},{"lineNumber":605,"author":{"gitId":"samuelchristopher"},"content":"        } else {"},{"lineNumber":606,"author":{"gitId":"samuelchristopher"},"content":"            deadline \u003d \"-\";"},{"lineNumber":607,"author":{"gitId":"thatseant"},"content":"            currentTaskLine +\u003d \"-\";"},{"lineNumber":608,"author":{"gitId":"samuelchristopher"},"content":"        }"},{"lineNumber":609,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":610,"author":{"gitId":"samuelchristopher"},"content":"        currentTaskLine +\u003d (deadlineSpaces.substring(0, deadlineSpaces.length() - deadline.length()));"},{"lineNumber":611,"author":{"gitId":"samuelchristopher"},"content":"        return currentTaskLine;"},{"lineNumber":612,"author":{"gitId":"samuelchristopher"},"content":"    }"},{"lineNumber":613,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":614,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":615,"author":{"gitId":"samuelchristopher"},"content":"    private static String membersInvolvedInTasks(String currentTaskLine, Task currentTask) {"},{"lineNumber":616,"author":{"gitId":"thatseant"},"content":"        ArrayList\u003cTeamMember\u003e members \u003d currentTask.getMembers();"},{"lineNumber":617,"author":{"gitId":"thatseant"},"content":"        currentTaskLine +\u003d \"|\";"},{"lineNumber":618,"author":{"gitId":"samuelchristopher"},"content":"        int j;"},{"lineNumber":619,"author":{"gitId":"samuelchristopher"},"content":"        if (members.size() \u003d\u003d 0) {"},{"lineNumber":620,"author":{"gitId":"samuelchristopher"},"content":"            currentTaskLine +\u003d \" -\";"},{"lineNumber":621,"author":{"gitId":"samuelchristopher"},"content":"        } else {"},{"lineNumber":622,"author":{"gitId":"samuelchristopher"},"content":"            for (j \u003d 0; j \u003c members.size(); j++) {"},{"lineNumber":623,"author":{"gitId":"samuelchristopher"},"content":"                boolean isOnlyOneMember \u003d members.size() \u003c\u003d 1 ? true : false;"},{"lineNumber":624,"author":{"gitId":"samuelchristopher"},"content":"                boolean isLastMember \u003d j \u003d\u003d (members.size() - 1) ? true : false;"},{"lineNumber":625,"author":{"gitId":"samuelchristopher"},"content":"                TeamMember member \u003d members.get(j);"},{"lineNumber":626,"author":{"gitId":"samuelchristopher"},"content":"                if (member !\u003d null) {"},{"lineNumber":627,"author":{"gitId":"samuelchristopher"},"content":"                    if (!isOnlyOneMember \u0026\u0026 !isLastMember) {"},{"lineNumber":628,"author":{"gitId":"samuelchristopher"},"content":"                        currentTaskLine +\u003d \" \" + member.getName() + \",\";"},{"lineNumber":629,"author":{"gitId":"samuelchristopher"},"content":"                    } else if (isOnlyOneMember | isLastMember) {"},{"lineNumber":630,"author":{"gitId":"samuelchristopher"},"content":"                        currentTaskLine +\u003d \" \" + member.getName();"},{"lineNumber":631,"author":{"gitId":"samuelchristopher"},"content":"                    }"},{"lineNumber":632,"author":{"gitId":"samuelchristopher"},"content":"                }"},{"lineNumber":633,"author":{"gitId":"samuelchristopher"},"content":"            }"},{"lineNumber":634,"author":{"gitId":"samuelchristopher"},"content":"        }"},{"lineNumber":635,"author":{"gitId":"samuelchristopher"},"content":"        return currentTaskLine;"},{"lineNumber":636,"author":{"gitId":"samuelchristopher"},"content":"    }"},{"lineNumber":637,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":638,"author":{"gitId":"samuelchristopher"},"content":"    private static String truncateDescription(String description, int cutoffIndexForDescription) {"},{"lineNumber":639,"author":{"gitId":"samuelchristopher"},"content":"        // truncate description if it is too long"},{"lineNumber":640,"author":{"gitId":"samuelchristopher"},"content":"        if (description.length() \u003e cutoffIndexForDescription) {"},{"lineNumber":641,"author":{"gitId":"samuelchristopher"},"content":"            description \u003d description.substring(0, cutoffIndexForDescription) + \"...\";"},{"lineNumber":642,"author":{"gitId":"samuelchristopher"},"content":"        }"},{"lineNumber":643,"author":{"gitId":"samuelchristopher"},"content":"        return description;"},{"lineNumber":644,"author":{"gitId":"samuelchristopher"},"content":"    }"},{"lineNumber":645,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":646,"author":{"gitId":"samuellleow"},"content":"    /**"},{"lineNumber":647,"author":{"gitId":"samuellleow"},"content":"     * Return member assigned to task message."},{"lineNumber":648,"author":{"gitId":"samuellleow"},"content":"     * @param memberName Name of member to be assigned."},{"lineNumber":649,"author":{"gitId":"samuellleow"},"content":"     * @param taskName Name of task assigned to member."},{"lineNumber":650,"author":{"gitId":"samuellleow"},"content":"     * @return String of member being assigned to task message."},{"lineNumber":651,"author":{"gitId":"samuellleow"},"content":"     */"},{"lineNumber":652,"author":{"gitId":"riazaham"},"content":"    public static String printMemberAssignedToTaskMessage(String memberName, String taskName) {"},{"lineNumber":653,"author":{"gitId":"riazaham"},"content":"        return \"Member \\\"\" + memberName + \"\\\" has been assigned to \\\"\" + taskName + \"\\\"\";"},{"lineNumber":654,"author":{"gitId":"riazaham"},"content":"    }"},{"lineNumber":655,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":656,"author":{"gitId":"samuellleow"},"content":"    /**"},{"lineNumber":657,"author":{"gitId":"samuellleow"},"content":"     * Return member assigned to project message."},{"lineNumber":658,"author":{"gitId":"samuellleow"},"content":"     * @param memberName Name of member to be assigned."},{"lineNumber":659,"author":{"gitId":"samuellleow"},"content":"     * @param projectName Name of project assigned to member."},{"lineNumber":660,"author":{"gitId":"samuellleow"},"content":"     * @return String of member being assigned to project message."},{"lineNumber":661,"author":{"gitId":"samuellleow"},"content":"     */"},{"lineNumber":662,"author":{"gitId":"thatseant"},"content":"    public static String printMemberAssignedToProjectMessage(String memberName, String projectName) {"},{"lineNumber":663,"author":{"gitId":"thatseant"},"content":"        return memberName + \" assigned to Project \\\"\" + projectName + \"\\\"\";"},{"lineNumber":664,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":665,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":666,"author":{"gitId":"samuellleow"},"content":"    /**"},{"lineNumber":667,"author":{"gitId":"samuellleow"},"content":"     * Return priority assigned to task message."},{"lineNumber":668,"author":{"gitId":"samuellleow"},"content":"     * @param priority Priority to be added."},{"lineNumber":669,"author":{"gitId":"samuellleow"},"content":"     * @param taskName Name of task with priority to be added."},{"lineNumber":670,"author":{"gitId":"samuellleow"},"content":"     * @return String of priority being assigned to task message."},{"lineNumber":671,"author":{"gitId":"samuellleow"},"content":"     */"},{"lineNumber":672,"author":{"gitId":"thatseant"},"content":"    public static String printPriorityAssignedToTaskMessage(int priority, String taskName) {"},{"lineNumber":673,"author":{"gitId":"riazaham"},"content":"        return \"Priority \\\"\" + priority + \"\\\" has been assigned to \\\"\" + taskName + \"\\\"\";"},{"lineNumber":674,"author":{"gitId":"riazaham"},"content":"    }"},{"lineNumber":675,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":676,"author":{"gitId":"samuellleow"},"content":"    /**"},{"lineNumber":677,"author":{"gitId":"samuellleow"},"content":"     * Return total hours worked by specified member in each tasks of every project."},{"lineNumber":678,"author":{"gitId":"samuellleow"},"content":"     * @param memberName Name of specified member."},{"lineNumber":679,"author":{"gitId":"samuellleow"},"content":"     * @param hoursWorked total hours worked by member."},{"lineNumber":680,"author":{"gitId":"samuellleow"},"content":"     * @return String of total hours worked by specified member."},{"lineNumber":681,"author":{"gitId":"samuellleow"},"content":"     */"},{"lineNumber":682,"author":{"gitId":"thatseant"},"content":"    public static String printHoursWorkedMessage(String memberName, double hoursWorked) {"},{"lineNumber":683,"author":{"gitId":"thatseant"},"content":"        return memberName + \" worked for \" + String.format(\"%.1f\", hoursWorked) + \" hours.\";"},{"lineNumber":684,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":685,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":686,"author":{"gitId":"thatseant"},"content":"}"}],"authorContributionMap":{"thatseant":50,"samuelchristopher":176,"samuellleow":430,"shreytheshreyas":10,"riazaham":20}},{"path":"src/test/java/seedu/ezmanager/EzManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"thatseant"},"content":"package seedu.ezmanager;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"thatseant"},"content":"class EzManagerTest {"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public void sampleTest() {"},{"lineNumber":10,"author":{"gitId":"-"},"content":"        assertTrue(true);"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"thatseant":2,"-":10}},{"path":"src/test/java/seedu/ezmanager/ParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"thatseant"},"content":"package seedu.ezmanager;"},{"lineNumber":2,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":3,"author":{"gitId":"thatseant"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.commands.Command;"},{"lineNumber":5,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.commands.ExitCommand;"},{"lineNumber":6,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.commands.HomeCommand;"},{"lineNumber":7,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.commands.PrintHomeViewCommand;"},{"lineNumber":8,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.commands.member.AssignMemberToProjectCommand;"},{"lineNumber":9,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.commands.member.TeamMemberAddCommand;"},{"lineNumber":10,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.commands.member.TeamMemberAssignToTaskCommand;"},{"lineNumber":11,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.commands.member.TeamMemberDeleteCommand;"},{"lineNumber":12,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.commands.member.TeamMemberHoursCommand;"},{"lineNumber":13,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.commands.project.ProjectCommand;"},{"lineNumber":14,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.commands.project.ProjectDeadlineCommand;"},{"lineNumber":15,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.commands.project.ProjectDeleteCommand;"},{"lineNumber":16,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.commands.project.ProjectDescriptionCommand;"},{"lineNumber":17,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.commands.project.ProjectDoneCommand;"},{"lineNumber":18,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.commands.project.ProjectSelectCommand;"},{"lineNumber":19,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.commands.task.ActualTimeCommand;"},{"lineNumber":20,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.commands.task.EstimatedTimeCommand;"},{"lineNumber":21,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.commands.task.TaskAssignDeadlineCommand;"},{"lineNumber":22,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.commands.task.TaskAssignPriorityCommand;"},{"lineNumber":23,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.commands.task.TaskCommand;"},{"lineNumber":24,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.commands.task.TaskDeleteCommand;"},{"lineNumber":25,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.commands.task.TaskDoneCommand;"},{"lineNumber":26,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.commands.task.TaskEditCommand;"},{"lineNumber":27,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.commands.task.TaskListCommand;"},{"lineNumber":28,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.commands.task.TaskSortCommand;"},{"lineNumber":29,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":30,"author":{"gitId":"thatseant"},"content":"import java.util.HashMap;"},{"lineNumber":31,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":32,"author":{"gitId":"thatseant"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":33,"author":{"gitId":"thatseant"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":34,"author":{"gitId":"thatseant"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":35,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":36,"author":{"gitId":"thatseant"},"content":"class ParserTest {"},{"lineNumber":37,"author":{"gitId":"thatseant"},"content":"    @Test"},{"lineNumber":38,"author":{"gitId":"thatseant"},"content":"    void getParams_correctTaskParams_correctHashmap() throws EzExceptions {"},{"lineNumber":39,"author":{"gitId":"thatseant"},"content":"        String paramString \u003d \"n/new Named Task d/2020-08-04 t/109 p/121 h/12 m/56\";"},{"lineNumber":40,"author":{"gitId":"thatseant"},"content":"        HashMap\u003cString, String\u003e expectedHashmap \u003d new HashMap\u003c\u003e();"},{"lineNumber":41,"author":{"gitId":"thatseant"},"content":"        expectedHashmap.put(\"n\", \"new Named Task\");"},{"lineNumber":42,"author":{"gitId":"thatseant"},"content":"        expectedHashmap.put(\"p\", \"121\");"},{"lineNumber":43,"author":{"gitId":"thatseant"},"content":"        expectedHashmap.put(\"d\", \"2020-08-04\");"},{"lineNumber":44,"author":{"gitId":"thatseant"},"content":"        expectedHashmap.put(\"t\", \"109\");"},{"lineNumber":45,"author":{"gitId":"thatseant"},"content":"        expectedHashmap.put(\"h\", \"12\");"},{"lineNumber":46,"author":{"gitId":"thatseant"},"content":"        expectedHashmap.put(\"m\", \"56\");"},{"lineNumber":47,"author":{"gitId":"thatseant"},"content":"        HashMap\u003cString, String\u003e actualHashmap \u003d Parser.getParams(paramString);"},{"lineNumber":48,"author":{"gitId":"thatseant"},"content":"        assertEquals(expectedHashmap, actualHashmap);"},{"lineNumber":49,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":51,"author":{"gitId":"thatseant"},"content":"    @Test"},{"lineNumber":52,"author":{"gitId":"thatseant"},"content":"    void getParams_slashInParameters_slashException() {"},{"lineNumber":53,"author":{"gitId":"thatseant"},"content":"        String paramString \u003d \"n//// d//\";"},{"lineNumber":54,"author":{"gitId":"thatseant"},"content":"        EzExceptions exception \u003d assertThrows(EzExceptions.class, () -\u003e"},{"lineNumber":55,"author":{"gitId":"thatseant"},"content":"                Parser.getParams(paramString));"},{"lineNumber":56,"author":{"gitId":"thatseant"},"content":"        String expectedOutput \u003d \"Parameters should not contain slashes!\";"},{"lineNumber":57,"author":{"gitId":"thatseant"},"content":"        assertEquals(expectedOutput, exception.toString());"},{"lineNumber":58,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":60,"author":{"gitId":"thatseant"},"content":"    @Test"},{"lineNumber":61,"author":{"gitId":"thatseant"},"content":"    void getParams_excessSlashInParameters_slashException() {"},{"lineNumber":62,"author":{"gitId":"thatseant"},"content":"        String paramString \u003d \"t/1/2\";"},{"lineNumber":63,"author":{"gitId":"thatseant"},"content":"        EzExceptions exception \u003d assertThrows(EzExceptions.class, () -\u003e"},{"lineNumber":64,"author":{"gitId":"thatseant"},"content":"                Parser.getParams(paramString));"},{"lineNumber":65,"author":{"gitId":"thatseant"},"content":"        String expectedOutput \u003d \"Parameters should not contain slashes!\";"},{"lineNumber":66,"author":{"gitId":"thatseant"},"content":"        assertEquals(expectedOutput, exception.toString());"},{"lineNumber":67,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":69,"author":{"gitId":"thatseant"},"content":"    @Test"},{"lineNumber":70,"author":{"gitId":"thatseant"},"content":"    void getParams_duplicateParams_duplicateParamsException() {"},{"lineNumber":71,"author":{"gitId":"thatseant"},"content":"        String paramString \u003d \"n/3 n/5\";"},{"lineNumber":72,"author":{"gitId":"thatseant"},"content":"        EzExceptions exception \u003d assertThrows(EzExceptions.class, () -\u003e"},{"lineNumber":73,"author":{"gitId":"thatseant"},"content":"                Parser.getParams(paramString));"},{"lineNumber":74,"author":{"gitId":"thatseant"},"content":"        String expectedOutput \u003d \"Duplicate Parameters detected!\";"},{"lineNumber":75,"author":{"gitId":"thatseant"},"content":"        assertEquals(expectedOutput, exception.toString());"},{"lineNumber":76,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":78,"author":{"gitId":"thatseant"},"content":"    @Test"},{"lineNumber":79,"author":{"gitId":"thatseant"},"content":"    void getHashValue_missingParam_missingParamsException() {"},{"lineNumber":80,"author":{"gitId":"thatseant"},"content":"        HashMap\u003cString, String\u003e params \u003d new HashMap\u003c\u003e();"},{"lineNumber":81,"author":{"gitId":"thatseant"},"content":"        params.put(\"t\", \"3\");"},{"lineNumber":82,"author":{"gitId":"thatseant"},"content":"        EzExceptions exception \u003d assertThrows(EzExceptions.class, () -\u003e"},{"lineNumber":83,"author":{"gitId":"thatseant"},"content":"                Parser.getHashValue(params, \"d\")); //Missing description"},{"lineNumber":84,"author":{"gitId":"thatseant"},"content":"        String expectedOutput \u003d \"Certain Parameters are missing!\";"},{"lineNumber":85,"author":{"gitId":"thatseant"},"content":"        assertEquals(expectedOutput, exception.toString());"},{"lineNumber":86,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":88,"author":{"gitId":"thatseant"},"content":"    @Test"},{"lineNumber":89,"author":{"gitId":"thatseant"},"content":"    void parse_listCommandHomeView_correctCommand() throws EzExceptions {"},{"lineNumber":90,"author":{"gitId":"thatseant"},"content":"        String inputCommand \u003d \"list\";"},{"lineNumber":91,"author":{"gitId":"thatseant"},"content":"        Parser.setProjectIndex(-1);"},{"lineNumber":92,"author":{"gitId":"thatseant"},"content":"        Command actualCommand \u003d Parser.parse(inputCommand);"},{"lineNumber":93,"author":{"gitId":"thatseant"},"content":"        assertTrue(actualCommand instanceof PrintHomeViewCommand);"},{"lineNumber":94,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":96,"author":{"gitId":"thatseant"},"content":"    @Test"},{"lineNumber":97,"author":{"gitId":"thatseant"},"content":"    void parse_listCommandProjectView_correctCommand() throws EzExceptions {"},{"lineNumber":98,"author":{"gitId":"thatseant"},"content":"        String inputCommand \u003d \"list\";"},{"lineNumber":99,"author":{"gitId":"thatseant"},"content":"        Parser.setProjectIndex(1);"},{"lineNumber":100,"author":{"gitId":"thatseant"},"content":"        Command actualCommand \u003d Parser.parse(inputCommand);"},{"lineNumber":101,"author":{"gitId":"thatseant"},"content":"        assertTrue(actualCommand instanceof TaskListCommand);"},{"lineNumber":102,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":104,"author":{"gitId":"thatseant"},"content":"    @Test"},{"lineNumber":105,"author":{"gitId":"thatseant"},"content":"    void parse_selectCommandHomeView_correctCommand() throws EzExceptions {"},{"lineNumber":106,"author":{"gitId":"thatseant"},"content":"        String inputCommand \u003d \"select p/1\";"},{"lineNumber":107,"author":{"gitId":"thatseant"},"content":"        Parser.setProjectIndex(-1);"},{"lineNumber":108,"author":{"gitId":"thatseant"},"content":"        Command actualCommand \u003d Parser.parse(inputCommand);"},{"lineNumber":109,"author":{"gitId":"thatseant"},"content":"        assertTrue(actualCommand instanceof ProjectSelectCommand);"},{"lineNumber":110,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":112,"author":{"gitId":"thatseant"},"content":"    @Test"},{"lineNumber":113,"author":{"gitId":"thatseant"},"content":"    void parse_selectCommandProjectView_HomeViewException() {"},{"lineNumber":114,"author":{"gitId":"thatseant"},"content":"        String inputCommand \u003d \"select p/1\";"},{"lineNumber":115,"author":{"gitId":"thatseant"},"content":"        Parser.setProjectIndex(3);"},{"lineNumber":116,"author":{"gitId":"thatseant"},"content":"        EzExceptions exception \u003d assertThrows(EzExceptions.class, () -\u003e"},{"lineNumber":117,"author":{"gitId":"thatseant"},"content":"                Parser.parse(inputCommand));"},{"lineNumber":118,"author":{"gitId":"thatseant"},"content":"        String expectedOutput \u003d \"You must be in Home View to do that!\";"},{"lineNumber":119,"author":{"gitId":"thatseant"},"content":"        assertEquals(expectedOutput, exception.toString());"},{"lineNumber":120,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":122,"author":{"gitId":"thatseant"},"content":"    @Test"},{"lineNumber":123,"author":{"gitId":"thatseant"},"content":"    void parse_descriptionCommandHomeView_correctCommand() throws EzExceptions {"},{"lineNumber":124,"author":{"gitId":"thatseant"},"content":"        String inputCommand \u003d \"description p/1 d/This is a test.\";"},{"lineNumber":125,"author":{"gitId":"thatseant"},"content":"        Parser.setProjectIndex(-1);"},{"lineNumber":126,"author":{"gitId":"thatseant"},"content":"        Command actualCommand \u003d Parser.parse(inputCommand);"},{"lineNumber":127,"author":{"gitId":"thatseant"},"content":"        assertTrue(actualCommand instanceof ProjectDescriptionCommand);"},{"lineNumber":128,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":129,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":130,"author":{"gitId":"thatseant"},"content":"    @Test"},{"lineNumber":131,"author":{"gitId":"thatseant"},"content":"    void parse_descriptionCommandProjectView_HomeViewException() {"},{"lineNumber":132,"author":{"gitId":"thatseant"},"content":"        String inputCommand \u003d \"description p/1 d/Test\";"},{"lineNumber":133,"author":{"gitId":"thatseant"},"content":"        Parser.setProjectIndex(3);"},{"lineNumber":134,"author":{"gitId":"thatseant"},"content":"        EzExceptions exception \u003d assertThrows(EzExceptions.class, () -\u003e"},{"lineNumber":135,"author":{"gitId":"thatseant"},"content":"                Parser.parse(inputCommand));"},{"lineNumber":136,"author":{"gitId":"thatseant"},"content":"        String expectedOutput \u003d \"You must be in Home View to do that!\";"},{"lineNumber":137,"author":{"gitId":"thatseant"},"content":"        assertEquals(expectedOutput, exception.toString());"},{"lineNumber":138,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":139,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":140,"author":{"gitId":"thatseant"},"content":"    @Test"},{"lineNumber":141,"author":{"gitId":"thatseant"},"content":"    void parse_projectCommandHomeView_correctCommand() throws EzExceptions {"},{"lineNumber":142,"author":{"gitId":"thatseant"},"content":"        String inputCommand \u003d \"project n/New Project\";"},{"lineNumber":143,"author":{"gitId":"thatseant"},"content":"        Parser.setProjectIndex(-1);"},{"lineNumber":144,"author":{"gitId":"thatseant"},"content":"        Command actualCommand \u003d Parser.parse(inputCommand);"},{"lineNumber":145,"author":{"gitId":"thatseant"},"content":"        assertTrue(actualCommand instanceof ProjectCommand);"},{"lineNumber":146,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":147,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":148,"author":{"gitId":"thatseant"},"content":"    @Test"},{"lineNumber":149,"author":{"gitId":"thatseant"},"content":"    void parse_projectCommandProjectView_HomeViewException() {"},{"lineNumber":150,"author":{"gitId":"thatseant"},"content":"        String inputCommand \u003d \"project n/New Project\";"},{"lineNumber":151,"author":{"gitId":"thatseant"},"content":"        Parser.setProjectIndex(3);"},{"lineNumber":152,"author":{"gitId":"thatseant"},"content":"        EzExceptions exception \u003d assertThrows(EzExceptions.class, () -\u003e"},{"lineNumber":153,"author":{"gitId":"thatseant"},"content":"                Parser.parse(inputCommand));"},{"lineNumber":154,"author":{"gitId":"thatseant"},"content":"        String expectedOutput \u003d \"You must be in Home View to do that!\";"},{"lineNumber":155,"author":{"gitId":"thatseant"},"content":"        assertEquals(expectedOutput, exception.toString());"},{"lineNumber":156,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":157,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":158,"author":{"gitId":"thatseant"},"content":"    @Test"},{"lineNumber":159,"author":{"gitId":"thatseant"},"content":"    void parse_taskCommandHomeView_ProjectViewException() {"},{"lineNumber":160,"author":{"gitId":"thatseant"},"content":"        String inputCommand \u003d \"task n/New Task\";"},{"lineNumber":161,"author":{"gitId":"thatseant"},"content":"        Parser.setProjectIndex(-1);"},{"lineNumber":162,"author":{"gitId":"thatseant"},"content":"        EzExceptions exception \u003d assertThrows(EzExceptions.class, () -\u003e"},{"lineNumber":163,"author":{"gitId":"thatseant"},"content":"                Parser.parse(inputCommand));"},{"lineNumber":164,"author":{"gitId":"thatseant"},"content":"        String expectedOutput \u003d \"You must be in Project View to do that!\";"},{"lineNumber":165,"author":{"gitId":"thatseant"},"content":"        assertEquals(expectedOutput, exception.toString());"},{"lineNumber":166,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":167,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":168,"author":{"gitId":"thatseant"},"content":"    @Test"},{"lineNumber":169,"author":{"gitId":"thatseant"},"content":"    void parse_TaskCommandProjectView_correctCommand() throws EzExceptions {"},{"lineNumber":170,"author":{"gitId":"thatseant"},"content":"        String inputCommand \u003d \"task n/New Task\";"},{"lineNumber":171,"author":{"gitId":"thatseant"},"content":"        Parser.setProjectIndex(2);"},{"lineNumber":172,"author":{"gitId":"thatseant"},"content":"        Command actualCommand \u003d Parser.parse(inputCommand);"},{"lineNumber":173,"author":{"gitId":"thatseant"},"content":"        assertTrue(actualCommand instanceof TaskCommand);"},{"lineNumber":174,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":175,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":176,"author":{"gitId":"thatseant"},"content":"    @Test"},{"lineNumber":177,"author":{"gitId":"thatseant"},"content":"    void parse_EditCommandHomeView_ProjectViewException() {"},{"lineNumber":178,"author":{"gitId":"thatseant"},"content":"        String inputCommand \u003d \"edit t/3 n/New Project\";"},{"lineNumber":179,"author":{"gitId":"thatseant"},"content":"        Parser.setProjectIndex(-1);"},{"lineNumber":180,"author":{"gitId":"thatseant"},"content":"        EzExceptions exception \u003d assertThrows(EzExceptions.class, () -\u003e"},{"lineNumber":181,"author":{"gitId":"thatseant"},"content":"                Parser.parse(inputCommand));"},{"lineNumber":182,"author":{"gitId":"thatseant"},"content":"        String expectedOutput \u003d \"You must be in Project View to do that!\";"},{"lineNumber":183,"author":{"gitId":"thatseant"},"content":"        assertEquals(expectedOutput, exception.toString());"},{"lineNumber":184,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":185,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":186,"author":{"gitId":"thatseant"},"content":"    @Test"},{"lineNumber":187,"author":{"gitId":"thatseant"},"content":"    void parse_EditCommandProjectView_correctCommand() throws EzExceptions {"},{"lineNumber":188,"author":{"gitId":"thatseant"},"content":"        String inputCommand \u003d \"edit t/3 n/New Project\";"},{"lineNumber":189,"author":{"gitId":"thatseant"},"content":"        Parser.setProjectIndex(2);"},{"lineNumber":190,"author":{"gitId":"thatseant"},"content":"        Command actualCommand \u003d Parser.parse(inputCommand);"},{"lineNumber":191,"author":{"gitId":"thatseant"},"content":"        assertTrue(actualCommand instanceof TaskEditCommand);"},{"lineNumber":192,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":193,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":194,"author":{"gitId":"thatseant"},"content":"    @Test"},{"lineNumber":195,"author":{"gitId":"thatseant"},"content":"    void parse_DoneCommandHomeView_correctCommand() throws EzExceptions {"},{"lineNumber":196,"author":{"gitId":"thatseant"},"content":"        String inputCommand \u003d \"done p/3\";"},{"lineNumber":197,"author":{"gitId":"thatseant"},"content":"        Parser.setProjectIndex(-1);"},{"lineNumber":198,"author":{"gitId":"thatseant"},"content":"        Command actualCommand \u003d Parser.parse(inputCommand);"},{"lineNumber":199,"author":{"gitId":"thatseant"},"content":"        assertTrue(actualCommand instanceof ProjectDoneCommand);"},{"lineNumber":200,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":201,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":202,"author":{"gitId":"thatseant"},"content":"    @Test"},{"lineNumber":203,"author":{"gitId":"thatseant"},"content":"    void parse_DoneCommandProjectView_correctCommand() throws EzExceptions {"},{"lineNumber":204,"author":{"gitId":"thatseant"},"content":"        String inputCommand \u003d \"done t/3\";"},{"lineNumber":205,"author":{"gitId":"thatseant"},"content":"        Parser.setProjectIndex(3);"},{"lineNumber":206,"author":{"gitId":"thatseant"},"content":"        Command actualCommand \u003d Parser.parse(inputCommand);"},{"lineNumber":207,"author":{"gitId":"thatseant"},"content":"        assertTrue(actualCommand instanceof TaskDoneCommand);"},{"lineNumber":208,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":209,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":210,"author":{"gitId":"thatseant"},"content":"    @Test"},{"lineNumber":211,"author":{"gitId":"thatseant"},"content":"    void parse_DeadlineCommandHomeView_correctCommand() throws EzExceptions {"},{"lineNumber":212,"author":{"gitId":"thatseant"},"content":"        String inputCommand \u003d \"deadline p/2 d/2020-08-04\";"},{"lineNumber":213,"author":{"gitId":"thatseant"},"content":"        Parser.setProjectIndex(-1);"},{"lineNumber":214,"author":{"gitId":"thatseant"},"content":"        Command actualCommand \u003d Parser.parse(inputCommand);"},{"lineNumber":215,"author":{"gitId":"thatseant"},"content":"        assertTrue(actualCommand instanceof ProjectDeadlineCommand);"},{"lineNumber":216,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":217,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":218,"author":{"gitId":"thatseant"},"content":"    @Test"},{"lineNumber":219,"author":{"gitId":"thatseant"},"content":"    void parse_DeadlineCommandProjectView_correctCommand() throws EzExceptions {"},{"lineNumber":220,"author":{"gitId":"thatseant"},"content":"        String inputCommand \u003d \"deadline t/3 d/2020-08-04\";"},{"lineNumber":221,"author":{"gitId":"thatseant"},"content":"        Parser.setProjectIndex(3);"},{"lineNumber":222,"author":{"gitId":"thatseant"},"content":"        Command actualCommand \u003d Parser.parse(inputCommand);"},{"lineNumber":223,"author":{"gitId":"thatseant"},"content":"        assertTrue(actualCommand instanceof TaskAssignDeadlineCommand);"},{"lineNumber":224,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":225,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":226,"author":{"gitId":"thatseant"},"content":"    @Test"},{"lineNumber":227,"author":{"gitId":"thatseant"},"content":"    void parse_DeleteCommandHomeView_correctCommand() throws EzExceptions {"},{"lineNumber":228,"author":{"gitId":"thatseant"},"content":"        String inputCommand \u003d \"delete p/3\";"},{"lineNumber":229,"author":{"gitId":"thatseant"},"content":"        Parser.setProjectIndex(-1);"},{"lineNumber":230,"author":{"gitId":"thatseant"},"content":"        Command actualCommand \u003d Parser.parse(inputCommand);"},{"lineNumber":231,"author":{"gitId":"thatseant"},"content":"        assertTrue(actualCommand instanceof ProjectDeleteCommand);"},{"lineNumber":232,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":233,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":234,"author":{"gitId":"thatseant"},"content":"    @Test"},{"lineNumber":235,"author":{"gitId":"thatseant"},"content":"    void parse_DeleteCommandProjectView_correctCommand() throws EzExceptions {"},{"lineNumber":236,"author":{"gitId":"thatseant"},"content":"        String inputCommand \u003d \"delete t/3\";"},{"lineNumber":237,"author":{"gitId":"thatseant"},"content":"        Parser.setProjectIndex(3);"},{"lineNumber":238,"author":{"gitId":"thatseant"},"content":"        Command actualCommand \u003d Parser.parse(inputCommand);"},{"lineNumber":239,"author":{"gitId":"thatseant"},"content":"        assertTrue(actualCommand instanceof TaskDeleteCommand);"},{"lineNumber":240,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":241,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":242,"author":{"gitId":"thatseant"},"content":"    @Test"},{"lineNumber":243,"author":{"gitId":"thatseant"},"content":"    void parse_ActualCommandProjectView_correctCommand() throws EzExceptions {"},{"lineNumber":244,"author":{"gitId":"thatseant"},"content":"        String inputCommand \u003d \"actual t/3 h/7 m/32\";"},{"lineNumber":245,"author":{"gitId":"thatseant"},"content":"        Parser.setProjectIndex(3);"},{"lineNumber":246,"author":{"gitId":"thatseant"},"content":"        Command actualCommand \u003d Parser.parse(inputCommand);"},{"lineNumber":247,"author":{"gitId":"thatseant"},"content":"        assertTrue(actualCommand instanceof ActualTimeCommand);"},{"lineNumber":248,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":249,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":250,"author":{"gitId":"thatseant"},"content":"    @Test"},{"lineNumber":251,"author":{"gitId":"thatseant"},"content":"    void parse_EstimateCommandProjectView_correctCommand() throws EzExceptions {"},{"lineNumber":252,"author":{"gitId":"thatseant"},"content":"        String inputCommand \u003d \"estimate t/3 h/5 m/32\";"},{"lineNumber":253,"author":{"gitId":"thatseant"},"content":"        Parser.setProjectIndex(3);"},{"lineNumber":254,"author":{"gitId":"thatseant"},"content":"        Command actualCommand \u003d Parser.parse(inputCommand);"},{"lineNumber":255,"author":{"gitId":"thatseant"},"content":"        assertTrue(actualCommand instanceof EstimatedTimeCommand);"},{"lineNumber":256,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":257,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":258,"author":{"gitId":"thatseant"},"content":"    @Test"},{"lineNumber":259,"author":{"gitId":"thatseant"},"content":"    void parse_HomeCommandProjectView_correctCommand() throws EzExceptions {"},{"lineNumber":260,"author":{"gitId":"thatseant"},"content":"        String inputCommand \u003d \"home\";"},{"lineNumber":261,"author":{"gitId":"thatseant"},"content":"        Parser.setProjectIndex(3);"},{"lineNumber":262,"author":{"gitId":"thatseant"},"content":"        Command actualCommand \u003d Parser.parse(inputCommand);"},{"lineNumber":263,"author":{"gitId":"thatseant"},"content":"        assertTrue(actualCommand instanceof HomeCommand);"},{"lineNumber":264,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":265,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":266,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":267,"author":{"gitId":"thatseant"},"content":"    @Test"},{"lineNumber":268,"author":{"gitId":"thatseant"},"content":"    void parse_MemberCommandHomeView_correctCommand() throws EzExceptions {"},{"lineNumber":269,"author":{"gitId":"thatseant"},"content":"        String inputCommand \u003d \"member n/New Member\";"},{"lineNumber":270,"author":{"gitId":"thatseant"},"content":"        Parser.setProjectIndex(-1);"},{"lineNumber":271,"author":{"gitId":"thatseant"},"content":"        Command actualCommand \u003d Parser.parse(inputCommand);"},{"lineNumber":272,"author":{"gitId":"thatseant"},"content":"        assertTrue(actualCommand instanceof TeamMemberAddCommand);"},{"lineNumber":273,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":274,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":275,"author":{"gitId":"thatseant"},"content":"    @Test"},{"lineNumber":276,"author":{"gitId":"thatseant"},"content":"    void parse_memberCommandProjectView_HomeViewException() {"},{"lineNumber":277,"author":{"gitId":"thatseant"},"content":"        String inputCommand \u003d \"member n/New Member\";"},{"lineNumber":278,"author":{"gitId":"thatseant"},"content":"        Parser.setProjectIndex(3);"},{"lineNumber":279,"author":{"gitId":"thatseant"},"content":"        EzExceptions exception \u003d assertThrows(EzExceptions.class, () -\u003e"},{"lineNumber":280,"author":{"gitId":"thatseant"},"content":"                Parser.parse(inputCommand));"},{"lineNumber":281,"author":{"gitId":"thatseant"},"content":"        String expectedOutput \u003d \"You must be in Home View to do that!\";"},{"lineNumber":282,"author":{"gitId":"thatseant"},"content":"        assertEquals(expectedOutput, exception.toString());"},{"lineNumber":283,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":284,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":285,"author":{"gitId":"thatseant"},"content":"    @Test"},{"lineNumber":286,"author":{"gitId":"thatseant"},"content":"    void parse_removeCommandHomeView_correctCommand() throws EzExceptions {"},{"lineNumber":287,"author":{"gitId":"thatseant"},"content":"        String inputCommand \u003d \"remove m/3\";"},{"lineNumber":288,"author":{"gitId":"thatseant"},"content":"        Parser.setProjectIndex(-1);"},{"lineNumber":289,"author":{"gitId":"thatseant"},"content":"        Command actualCommand \u003d Parser.parse(inputCommand);"},{"lineNumber":290,"author":{"gitId":"thatseant"},"content":"        assertTrue(actualCommand instanceof TeamMemberDeleteCommand);"},{"lineNumber":291,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":292,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":293,"author":{"gitId":"thatseant"},"content":"    @Test"},{"lineNumber":294,"author":{"gitId":"thatseant"},"content":"    void parse_assignCommandHomeView_correctCommand() throws EzExceptions {"},{"lineNumber":295,"author":{"gitId":"thatseant"},"content":"        String inputCommand \u003d \"assign p/1 m/3\";"},{"lineNumber":296,"author":{"gitId":"thatseant"},"content":"        Parser.setProjectIndex(-1);"},{"lineNumber":297,"author":{"gitId":"thatseant"},"content":"        Command actualCommand \u003d Parser.parse(inputCommand);"},{"lineNumber":298,"author":{"gitId":"thatseant"},"content":"        assertTrue(actualCommand instanceof AssignMemberToProjectCommand);"},{"lineNumber":299,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":300,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":301,"author":{"gitId":"thatseant"},"content":"    @Test"},{"lineNumber":302,"author":{"gitId":"thatseant"},"content":"    void parse_assignCommandProjectView_correctCommand() throws EzExceptions {"},{"lineNumber":303,"author":{"gitId":"thatseant"},"content":"        String inputCommand \u003d \"assign t/3 m/3\";"},{"lineNumber":304,"author":{"gitId":"thatseant"},"content":"        Parser.setProjectIndex(3);"},{"lineNumber":305,"author":{"gitId":"thatseant"},"content":"        Command actualCommand \u003d Parser.parse(inputCommand);"},{"lineNumber":306,"author":{"gitId":"thatseant"},"content":"        assertTrue(actualCommand instanceof TeamMemberAssignToTaskCommand);"},{"lineNumber":307,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":308,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":309,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":310,"author":{"gitId":"thatseant"},"content":"    @Test"},{"lineNumber":311,"author":{"gitId":"thatseant"},"content":"    void parse_priorityCommandProjectView_correctCommand() throws EzExceptions {"},{"lineNumber":312,"author":{"gitId":"thatseant"},"content":"        String inputCommand \u003d \"priority t/3 p/2\";"},{"lineNumber":313,"author":{"gitId":"thatseant"},"content":"        Parser.setProjectIndex(3);"},{"lineNumber":314,"author":{"gitId":"thatseant"},"content":"        Command actualCommand \u003d Parser.parse(inputCommand);"},{"lineNumber":315,"author":{"gitId":"thatseant"},"content":"        assertTrue(actualCommand instanceof TaskAssignPriorityCommand);"},{"lineNumber":316,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":317,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":318,"author":{"gitId":"thatseant"},"content":"    @Test"},{"lineNumber":319,"author":{"gitId":"thatseant"},"content":"    void parse_priorityCommandHomeView_ProjectViewException() {"},{"lineNumber":320,"author":{"gitId":"thatseant"},"content":"        String inputCommand \u003d \"priority t/3 p/2\";"},{"lineNumber":321,"author":{"gitId":"thatseant"},"content":"        Parser.setProjectIndex(-1);"},{"lineNumber":322,"author":{"gitId":"thatseant"},"content":"        EzExceptions exception \u003d assertThrows(EzExceptions.class, () -\u003e"},{"lineNumber":323,"author":{"gitId":"thatseant"},"content":"                Parser.parse(inputCommand));"},{"lineNumber":324,"author":{"gitId":"thatseant"},"content":"        String expectedOutput \u003d \"You must be in Project View to do that!\";"},{"lineNumber":325,"author":{"gitId":"thatseant"},"content":"        assertEquals(expectedOutput, exception.toString());"},{"lineNumber":326,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":327,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":328,"author":{"gitId":"thatseant"},"content":"    @Test"},{"lineNumber":329,"author":{"gitId":"thatseant"},"content":"    void parse_byeCommand_correctCommand() throws EzExceptions {"},{"lineNumber":330,"author":{"gitId":"thatseant"},"content":"        String inputCommand \u003d \"bye\";"},{"lineNumber":331,"author":{"gitId":"thatseant"},"content":"        Parser.setProjectIndex(3);"},{"lineNumber":332,"author":{"gitId":"thatseant"},"content":"        Command actualCommand \u003d Parser.parse(inputCommand);"},{"lineNumber":333,"author":{"gitId":"thatseant"},"content":"        assertTrue(actualCommand instanceof ExitCommand);"},{"lineNumber":334,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":335,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":336,"author":{"gitId":"thatseant"},"content":"    @Test"},{"lineNumber":337,"author":{"gitId":"thatseant"},"content":"    void parse_sortCommandHomeView_ProjectViewException() {"},{"lineNumber":338,"author":{"gitId":"thatseant"},"content":"        String inputCommand \u003d \"sort s/p\";"},{"lineNumber":339,"author":{"gitId":"thatseant"},"content":"        Parser.setProjectIndex(-1);"},{"lineNumber":340,"author":{"gitId":"thatseant"},"content":"        EzExceptions exception \u003d assertThrows(EzExceptions.class, () -\u003e"},{"lineNumber":341,"author":{"gitId":"thatseant"},"content":"                Parser.parse(inputCommand));"},{"lineNumber":342,"author":{"gitId":"thatseant"},"content":"        String expectedOutput \u003d \"You must be in Project View to do that!\";"},{"lineNumber":343,"author":{"gitId":"thatseant"},"content":"        assertEquals(expectedOutput, exception.toString());"},{"lineNumber":344,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":345,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":346,"author":{"gitId":"thatseant"},"content":"    @Test"},{"lineNumber":347,"author":{"gitId":"thatseant"},"content":"    void parse_sortCommandProjectView_correctCommand() throws EzExceptions {"},{"lineNumber":348,"author":{"gitId":"thatseant"},"content":"        String inputCommand \u003d \"sort s/p\";"},{"lineNumber":349,"author":{"gitId":"thatseant"},"content":"        Parser.setProjectIndex(3);"},{"lineNumber":350,"author":{"gitId":"thatseant"},"content":"        Command actualCommand \u003d Parser.parse(inputCommand);"},{"lineNumber":351,"author":{"gitId":"thatseant"},"content":"        assertTrue(actualCommand instanceof TaskSortCommand);"},{"lineNumber":352,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":353,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":354,"author":{"gitId":"thatseant"},"content":"    @Test"},{"lineNumber":355,"author":{"gitId":"thatseant"},"content":"    void parse_hoursCommandProjectView_correctCommand() throws EzExceptions {"},{"lineNumber":356,"author":{"gitId":"thatseant"},"content":"        String inputCommand \u003d \"hours m/2\";"},{"lineNumber":357,"author":{"gitId":"thatseant"},"content":"        Parser.setProjectIndex(-1);"},{"lineNumber":358,"author":{"gitId":"thatseant"},"content":"        Command actualCommand \u003d Parser.parse(inputCommand);"},{"lineNumber":359,"author":{"gitId":"thatseant"},"content":"        assertTrue(actualCommand instanceof TeamMemberHoursCommand);"},{"lineNumber":360,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":361,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":362,"author":{"gitId":"thatseant"},"content":"    @Test"},{"lineNumber":363,"author":{"gitId":"thatseant"},"content":"    void parse_unrecognisedCommand_unrecognisedException() {"},{"lineNumber":364,"author":{"gitId":"thatseant"},"content":"        String inputCommand \u003d \"blah p/3\";"},{"lineNumber":365,"author":{"gitId":"thatseant"},"content":"        Parser.setProjectIndex(-1);"},{"lineNumber":366,"author":{"gitId":"thatseant"},"content":"        EzExceptions exception \u003d assertThrows(EzExceptions.class, () -\u003e"},{"lineNumber":367,"author":{"gitId":"thatseant"},"content":"                Parser.parse(inputCommand));"},{"lineNumber":368,"author":{"gitId":"thatseant"},"content":"        String expectedOutput \u003d \"OOPS!!! I\u0027m sorry, but I don\u0027t know what that command means :-(\";"},{"lineNumber":369,"author":{"gitId":"thatseant"},"content":"        assertEquals(expectedOutput, exception.toString());"},{"lineNumber":370,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":371,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":372,"author":{"gitId":"thatseant"},"content":"    @Test"},{"lineNumber":373,"author":{"gitId":"thatseant"},"content":"    void parse_missingParametersPriority_missingParamsException() {"},{"lineNumber":374,"author":{"gitId":"thatseant"},"content":"        String inputCommand \u003d \"priority t/1\";"},{"lineNumber":375,"author":{"gitId":"thatseant"},"content":"        Parser.setProjectIndex(3);"},{"lineNumber":376,"author":{"gitId":"thatseant"},"content":"        EzExceptions exception \u003d assertThrows(EzExceptions.class, () -\u003e"},{"lineNumber":377,"author":{"gitId":"thatseant"},"content":"                Parser.parse(inputCommand));"},{"lineNumber":378,"author":{"gitId":"thatseant"},"content":"        String expectedOutput \u003d \"Certain Parameters are missing!\";"},{"lineNumber":379,"author":{"gitId":"thatseant"},"content":"        assertEquals(expectedOutput, exception.toString());"},{"lineNumber":380,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":381,"author":{"gitId":"thatseant"},"content":"}"}],"authorContributionMap":{"thatseant":381}},{"path":"src/test/java/seedu/ezmanager/StorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"samuelchristopher"},"content":"package seedu.ezmanager;"},{"lineNumber":2,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":3,"author":{"gitId":"samuelchristopher"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"samuelchristopher"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":6,"author":{"gitId":"samuelchristopher"},"content":"import java.io.File;"},{"lineNumber":7,"author":{"gitId":"samuelchristopher"},"content":"import java.nio.file.Path;"},{"lineNumber":8,"author":{"gitId":"samuelchristopher"},"content":"import java.time.LocalDate;"},{"lineNumber":9,"author":{"gitId":"samuelchristopher"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":11,"author":{"gitId":"samuelchristopher"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":12,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":13,"author":{"gitId":"samuelchristopher"},"content":"import seedu.ezmanager.member.TeamMember;"},{"lineNumber":14,"author":{"gitId":"samuelchristopher"},"content":"import seedu.ezmanager.project.Project;"},{"lineNumber":15,"author":{"gitId":"samuelchristopher"},"content":"import seedu.ezmanager.storage.Storage;"},{"lineNumber":16,"author":{"gitId":"samuelchristopher"},"content":"import seedu.ezmanager.task.Task;"},{"lineNumber":17,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":18,"author":{"gitId":"samuelchristopher"},"content":"public class StorageTest {"},{"lineNumber":19,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":20,"author":{"gitId":"samuelchristopher"},"content":"    public Path testFolder;"},{"lineNumber":21,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":22,"author":{"gitId":"samuelchristopher"},"content":"    private String filePath \u003d \"test_ezmanager.txt\";"},{"lineNumber":23,"author":{"gitId":"samuelchristopher"},"content":"    private Storage storage \u003d new Storage(filePath);"},{"lineNumber":24,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":25,"author":{"gitId":"samuelchristopher"},"content":"    @Test"},{"lineNumber":26,"author":{"gitId":"samuelchristopher"},"content":"    void loadData() throws EzExceptions {"},{"lineNumber":27,"author":{"gitId":"samuelchristopher"},"content":"        ArrayList\u003cTeamMember\u003e actualLoadedMembers \u003d storage.loadTeamMembers();"},{"lineNumber":28,"author":{"gitId":"samuelchristopher"},"content":"        ArrayList\u003cTeamMember\u003e expectedMembers \u003d new ArrayList\u003c\u003e();"},{"lineNumber":29,"author":{"gitId":"samuelchristopher"},"content":"        TeamMember onePerson \u003d new TeamMember(\"one person\");"},{"lineNumber":30,"author":{"gitId":"samuelchristopher"},"content":"        TeamMember anotherPerson \u003d new TeamMember(\"another person\");"},{"lineNumber":31,"author":{"gitId":"samuelchristopher"},"content":"        expectedMembers.add(onePerson);"},{"lineNumber":32,"author":{"gitId":"samuelchristopher"},"content":"        expectedMembers.add(anotherPerson);"},{"lineNumber":33,"author":{"gitId":"samuelchristopher"},"content":"        assertTrue(expectedMembers.size() \u003d\u003d actualLoadedMembers.size());"},{"lineNumber":34,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":35,"author":{"gitId":"samuelchristopher"},"content":"        Project oneProject \u003d new Project(\"one\");"},{"lineNumber":36,"author":{"gitId":"samuelchristopher"},"content":"        oneProject.addProjectDeadline(LocalDate.parse(\"2020-10-20\"));"},{"lineNumber":37,"author":{"gitId":"samuelchristopher"},"content":"        oneProject.addTeamMemberToProject(onePerson);"},{"lineNumber":38,"author":{"gitId":"samuelchristopher"},"content":"        oneProject.addTeamMemberToProject(anotherPerson);"},{"lineNumber":39,"author":{"gitId":"samuelchristopher"},"content":"        Task oneTask \u003d new Task(\"one task\");"},{"lineNumber":40,"author":{"gitId":"samuelchristopher"},"content":"        oneTask.setMember(onePerson);"},{"lineNumber":41,"author":{"gitId":"samuelchristopher"},"content":"        Task anotherTask \u003d new Task(\"another task\");"},{"lineNumber":42,"author":{"gitId":"samuelchristopher"},"content":"        oneProject.addTask(oneTask);"},{"lineNumber":43,"author":{"gitId":"samuelchristopher"},"content":"        oneProject.addTask(anotherTask);"},{"lineNumber":44,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":45,"author":{"gitId":"samuelchristopher"},"content":"        ArrayList\u003cProject\u003e actualProjects \u003d storage.loadProjects(actualLoadedMembers);"},{"lineNumber":46,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":47,"author":{"gitId":"samuelchristopher"},"content":"        for (Project actualProject : actualProjects) {"},{"lineNumber":48,"author":{"gitId":"samuelchristopher"},"content":"            ArrayList\u003cTask\u003e actualTasks \u003d actualProject.getTaskList();"},{"lineNumber":49,"author":{"gitId":"samuelchristopher"},"content":"            for (Task actualTask : actualTasks) {"},{"lineNumber":50,"author":{"gitId":"samuelchristopher"},"content":"                boolean inListOne \u003d containsTask(actualTask.getDescription(), oneProject.getTaskList());"},{"lineNumber":51,"author":{"gitId":"samuelchristopher"},"content":"                assertTrue(inListOne);"},{"lineNumber":52,"author":{"gitId":"samuelchristopher"},"content":"            }"},{"lineNumber":53,"author":{"gitId":"samuelchristopher"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":55,"author":{"gitId":"samuelchristopher"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":57,"author":{"gitId":"samuelchristopher"},"content":"    boolean containsTask(String taskName, ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":58,"author":{"gitId":"samuelchristopher"},"content":"        for (Task task : tasks) {"},{"lineNumber":59,"author":{"gitId":"samuelchristopher"},"content":"            if (taskName.equals(task.getDescription())) {"},{"lineNumber":60,"author":{"gitId":"samuelchristopher"},"content":"                return true;"},{"lineNumber":61,"author":{"gitId":"samuelchristopher"},"content":"            }"},{"lineNumber":62,"author":{"gitId":"samuelchristopher"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"samuelchristopher"},"content":"        return false;"},{"lineNumber":64,"author":{"gitId":"samuelchristopher"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":66,"author":{"gitId":"samuelchristopher"},"content":"}"}],"authorContributionMap":{"samuelchristopher":66}},{"path":"src/test/java/seedu/ezmanager/UiTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"samuelchristopher"},"content":"package seedu.ezmanager;"},{"lineNumber":2,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":3,"author":{"gitId":"samuelchristopher"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":5,"author":{"gitId":"samuelchristopher"},"content":"import seedu.ezmanager.member.TeamMember;"},{"lineNumber":6,"author":{"gitId":"samuelchristopher"},"content":"import seedu.ezmanager.project.Project;"},{"lineNumber":7,"author":{"gitId":"samuelchristopher"},"content":"import seedu.ezmanager.task.Task;"},{"lineNumber":8,"author":{"gitId":"samuelchristopher"},"content":"import seedu.ezmanager.ui.Ui;"},{"lineNumber":9,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":10,"author":{"gitId":"samuelchristopher"},"content":"import java.time.LocalDate;"},{"lineNumber":11,"author":{"gitId":"samuelchristopher"},"content":"import java.util.ArrayList;"},{"lineNumber":12,"author":{"gitId":"samuelchristopher"},"content":"import java.util.HashMap;"},{"lineNumber":13,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":14,"author":{"gitId":"samuelchristopher"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":15,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":16,"author":{"gitId":"samuelchristopher"},"content":"class UiTest {"},{"lineNumber":17,"author":{"gitId":"samuelchristopher"},"content":"    static Ui ui \u003d new Ui();"},{"lineNumber":18,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":19,"author":{"gitId":"samuelchristopher"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"samuelchristopher"},"content":"     * Display friendly message when there are no members assigned"},{"lineNumber":21,"author":{"gitId":"samuelchristopher"},"content":"     * or no tasks in the project."},{"lineNumber":22,"author":{"gitId":"samuelchristopher"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"samuelchristopher"},"content":"    @Test"},{"lineNumber":24,"author":{"gitId":"samuelchristopher"},"content":"    void emptyProjectView() throws EzExceptions {"},{"lineNumber":25,"author":{"gitId":"samuelchristopher"},"content":"        Project projectOne \u003d new Project(\"Project One\");"},{"lineNumber":26,"author":{"gitId":"samuelchristopher"},"content":"        String actualOutput \u003d Ui.projectViewMessage(projectOne);"},{"lineNumber":27,"author":{"gitId":"samuelchristopher"},"content":"        String expectedOutput \u003d \"Project \\\"Project One\\\"\\n\""},{"lineNumber":28,"author":{"gitId":"samuelchristopher"},"content":"                + \"\\n\""},{"lineNumber":29,"author":{"gitId":"samuelchristopher"},"content":"                + \"Description:\\n\""},{"lineNumber":30,"author":{"gitId":"samuelchristopher"},"content":"                + \"\u003cproject description empty\u003e\\n\""},{"lineNumber":31,"author":{"gitId":"samuelchristopher"},"content":"                + \"\\n\""},{"lineNumber":32,"author":{"gitId":"samuelchristopher"},"content":"                + \" ---------------------\\n\""},{"lineNumber":33,"author":{"gitId":"samuelchristopher"},"content":"                + \"| TASK LIST           |\\n\""},{"lineNumber":34,"author":{"gitId":"samuelchristopher"},"content":"                + \" ---------------------\\n\""},{"lineNumber":35,"author":{"gitId":"samuelchristopher"},"content":"                + \"\\n\""},{"lineNumber":36,"author":{"gitId":"samuelchristopher"},"content":"                + \"No tasks have been added to this project.\\n\""},{"lineNumber":37,"author":{"gitId":"samuelchristopher"},"content":"                + \" \\n\""},{"lineNumber":38,"author":{"gitId":"samuelchristopher"},"content":"                + \"\\n\""},{"lineNumber":39,"author":{"gitId":"samuelchristopher"},"content":"                + \" ---------------------\\n\""},{"lineNumber":40,"author":{"gitId":"samuelchristopher"},"content":"                + \"| MEMBERS LIST        |\\n\""},{"lineNumber":41,"author":{"gitId":"samuelchristopher"},"content":"                + \" ---------------------\\n\""},{"lineNumber":42,"author":{"gitId":"samuelchristopher"},"content":"                + \"No team members have been assigned to this project.\";"},{"lineNumber":43,"author":{"gitId":"samuelchristopher"},"content":"        assertEquals(expectedOutput, actualOutput);"},{"lineNumber":44,"author":{"gitId":"samuelchristopher"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":46,"author":{"gitId":"samuelchristopher"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"samuelchristopher"},"content":"     * Check output when a new task has been added."},{"lineNumber":48,"author":{"gitId":"samuelchristopher"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"samuelchristopher"},"content":"    @Test"},{"lineNumber":50,"author":{"gitId":"samuelchristopher"},"content":"    void newTaskAdded() throws EzExceptions {"},{"lineNumber":51,"author":{"gitId":"samuelchristopher"},"content":"        Project projectOne \u003d new Project(\"Project One\");"},{"lineNumber":52,"author":{"gitId":"samuelchristopher"},"content":"        Task newTask \u003d new Task(\"First Task\");"},{"lineNumber":53,"author":{"gitId":"samuelchristopher"},"content":"        projectOne.addTask(newTask);"},{"lineNumber":54,"author":{"gitId":"samuelchristopher"},"content":"        String actualOutput \u003d Ui.projectViewMessage(projectOne);"},{"lineNumber":55,"author":{"gitId":"samuelchristopher"},"content":"        String expectedOutput \u003d \"Project \\\"Project One\\\"\\n\""},{"lineNumber":56,"author":{"gitId":"samuelchristopher"},"content":"                + \"\\n\""},{"lineNumber":57,"author":{"gitId":"samuelchristopher"},"content":"                + \"Description:\\n\""},{"lineNumber":58,"author":{"gitId":"samuelchristopher"},"content":"                + \"\u003cproject description empty\u003e\\n\""},{"lineNumber":59,"author":{"gitId":"samuelchristopher"},"content":"                + \"\\n\""},{"lineNumber":60,"author":{"gitId":"samuelchristopher"},"content":"                + \" ---------------------\\n\""},{"lineNumber":61,"author":{"gitId":"samuelchristopher"},"content":"                + \"| TASK LIST           |\\n\""},{"lineNumber":62,"author":{"gitId":"samuelchristopher"},"content":"                + \" ---------------------\\n\""},{"lineNumber":63,"author":{"gitId":"samuelchristopher"},"content":"                + \"Index  Status   Description        Deadline        Priority      Estimated Hrs     Actual Hrs   | \""},{"lineNumber":64,"author":{"gitId":"samuelchristopher"},"content":"                + \"Members Involved\\n\""},{"lineNumber":65,"author":{"gitId":"samuelchristopher"},"content":"                + \"------------------------------------------------------------------------------------------------|-\""},{"lineNumber":66,"author":{"gitId":"samuelchristopher"},"content":"                + \"-----------------\\n\""},{"lineNumber":67,"author":{"gitId":"samuelchristopher"},"content":"                + \"1      (N)      First Task         -               -             -                 -            \""},{"lineNumber":68,"author":{"gitId":"samuelchristopher"},"content":"                + \"| -\\n\""},{"lineNumber":69,"author":{"gitId":"samuelchristopher"},"content":"                + \"\\n\""},{"lineNumber":70,"author":{"gitId":"samuelchristopher"},"content":"                + \" \\n\""},{"lineNumber":71,"author":{"gitId":"samuelchristopher"},"content":"                + \"\\n\""},{"lineNumber":72,"author":{"gitId":"samuelchristopher"},"content":"                + \" ---------------------\\n\""},{"lineNumber":73,"author":{"gitId":"samuelchristopher"},"content":"                + \"| MEMBERS LIST        |\\n\""},{"lineNumber":74,"author":{"gitId":"samuelchristopher"},"content":"                + \" ---------------------\\n\""},{"lineNumber":75,"author":{"gitId":"samuelchristopher"},"content":"                + \"No team members have been assigned to this project.\";"},{"lineNumber":76,"author":{"gitId":"samuelchristopher"},"content":"        assertEquals(expectedOutput, actualOutput);"},{"lineNumber":77,"author":{"gitId":"samuelchristopher"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":79,"author":{"gitId":"samuelchristopher"},"content":"    /**"},{"lineNumber":80,"author":{"gitId":"samuelchristopher"},"content":"     * Check alignment when all fields are filled."},{"lineNumber":81,"author":{"gitId":"samuelchristopher"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"samuelchristopher"},"content":"    @Test"},{"lineNumber":83,"author":{"gitId":"samuelchristopher"},"content":"    void checkAlignmentWhenPopulated() throws EzExceptions {"},{"lineNumber":84,"author":{"gitId":"samuelchristopher"},"content":"        Project projectOne \u003d new Project(\"Project One\");"},{"lineNumber":85,"author":{"gitId":"samuelchristopher"},"content":"        Task newTask \u003d new Task(\"First Task\");"},{"lineNumber":86,"author":{"gitId":"samuelchristopher"},"content":"        projectOne.addTask(newTask);"},{"lineNumber":87,"author":{"gitId":"samuelchristopher"},"content":"        newTask.addDeadline(LocalDate.parse(\"2020-10-20\"));"},{"lineNumber":88,"author":{"gitId":"samuelchristopher"},"content":"        String actualOutput \u003d Ui.projectViewMessage(projectOne);"},{"lineNumber":89,"author":{"gitId":"samuelchristopher"},"content":"        String expectedOutput \u003d \"Project \\\"Project One\\\"\\n\""},{"lineNumber":90,"author":{"gitId":"samuelchristopher"},"content":"                + \"\\n\""},{"lineNumber":91,"author":{"gitId":"samuelchristopher"},"content":"                + \"Description:\\n\""},{"lineNumber":92,"author":{"gitId":"samuelchristopher"},"content":"                + \"\u003cproject description empty\u003e\\n\""},{"lineNumber":93,"author":{"gitId":"samuelchristopher"},"content":"                + \"\\n\""},{"lineNumber":94,"author":{"gitId":"samuelchristopher"},"content":"                + \" ---------------------\\n\""},{"lineNumber":95,"author":{"gitId":"samuelchristopher"},"content":"                + \"| TASK LIST           |\\n\""},{"lineNumber":96,"author":{"gitId":"samuelchristopher"},"content":"                + \" ---------------------\\n\""},{"lineNumber":97,"author":{"gitId":"samuelchristopher"},"content":"                + \"Index  Status   Description        Deadline        Priority      Estimated Hrs     Actual Hrs   \""},{"lineNumber":98,"author":{"gitId":"samuelchristopher"},"content":"                + \"| Members Involved\\n\""},{"lineNumber":99,"author":{"gitId":"samuelchristopher"},"content":"                + \"------------------------------------------------------------------------------------------------\""},{"lineNumber":100,"author":{"gitId":"samuelchristopher"},"content":"                + \"|------------------\\n\""},{"lineNumber":101,"author":{"gitId":"samuelchristopher"},"content":"                + \"1      (N)      First Task         20/10/2020      -             -                 -            \""},{"lineNumber":102,"author":{"gitId":"samuelchristopher"},"content":"                + \"| -\\n\""},{"lineNumber":103,"author":{"gitId":"samuelchristopher"},"content":"                + \"\\n\""},{"lineNumber":104,"author":{"gitId":"samuelchristopher"},"content":"                + \" \\n\""},{"lineNumber":105,"author":{"gitId":"samuelchristopher"},"content":"                + \"\\n\""},{"lineNumber":106,"author":{"gitId":"samuelchristopher"},"content":"                + \" ---------------------\\n\""},{"lineNumber":107,"author":{"gitId":"samuelchristopher"},"content":"                + \"| MEMBERS LIST        |\\n\""},{"lineNumber":108,"author":{"gitId":"samuelchristopher"},"content":"                + \" ---------------------\\n\""},{"lineNumber":109,"author":{"gitId":"samuelchristopher"},"content":"                + \"No team members have been assigned to this project.\";"},{"lineNumber":110,"author":{"gitId":"samuelchristopher"},"content":"        assertEquals(expectedOutput, actualOutput);"},{"lineNumber":111,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":112,"author":{"gitId":"samuelchristopher"},"content":"        newTask.setPriority(3);"},{"lineNumber":113,"author":{"gitId":"samuelchristopher"},"content":"        actualOutput \u003d Ui.projectViewMessage(projectOne);"},{"lineNumber":114,"author":{"gitId":"samuelchristopher"},"content":"        expectedOutput \u003d \"Project \\\"Project One\\\"\\n\""},{"lineNumber":115,"author":{"gitId":"samuelchristopher"},"content":"                + \"\\n\""},{"lineNumber":116,"author":{"gitId":"samuelchristopher"},"content":"                + \"Description:\\n\""},{"lineNumber":117,"author":{"gitId":"samuelchristopher"},"content":"                + \"\u003cproject description empty\u003e\\n\""},{"lineNumber":118,"author":{"gitId":"samuelchristopher"},"content":"                + \"\\n\""},{"lineNumber":119,"author":{"gitId":"samuelchristopher"},"content":"                + \" ---------------------\\n\""},{"lineNumber":120,"author":{"gitId":"samuelchristopher"},"content":"                + \"| TASK LIST           |\\n\""},{"lineNumber":121,"author":{"gitId":"samuelchristopher"},"content":"                + \" ---------------------\\n\""},{"lineNumber":122,"author":{"gitId":"samuelchristopher"},"content":"                + \"Index  Status   Description        Deadline        Priority      Estimated Hrs     Actual Hrs   \""},{"lineNumber":123,"author":{"gitId":"samuelchristopher"},"content":"                + \"| Members Involved\\n\""},{"lineNumber":124,"author":{"gitId":"samuelchristopher"},"content":"                + \"------------------------------------------------------------------------------------------------\""},{"lineNumber":125,"author":{"gitId":"samuelchristopher"},"content":"                + \"|------------------\\n\""},{"lineNumber":126,"author":{"gitId":"samuelchristopher"},"content":"                + \"1      (N)      First Task         20/10/2020      3             -                 -            \""},{"lineNumber":127,"author":{"gitId":"samuelchristopher"},"content":"                + \"| -\\n\""},{"lineNumber":128,"author":{"gitId":"samuelchristopher"},"content":"                + \"\\n\""},{"lineNumber":129,"author":{"gitId":"samuelchristopher"},"content":"                + \" \\n\""},{"lineNumber":130,"author":{"gitId":"samuelchristopher"},"content":"                + \"\\n\""},{"lineNumber":131,"author":{"gitId":"samuelchristopher"},"content":"                + \" ---------------------\\n\""},{"lineNumber":132,"author":{"gitId":"samuelchristopher"},"content":"                + \"| MEMBERS LIST        |\\n\""},{"lineNumber":133,"author":{"gitId":"samuelchristopher"},"content":"                + \" ---------------------\\n\""},{"lineNumber":134,"author":{"gitId":"samuelchristopher"},"content":"                + \"No team members have been assigned to this project.\";"},{"lineNumber":135,"author":{"gitId":"samuelchristopher"},"content":"        assertEquals(expectedOutput, actualOutput);"},{"lineNumber":136,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":137,"author":{"gitId":"samuelchristopher"},"content":"        newTask.addEstimate(80);"},{"lineNumber":138,"author":{"gitId":"samuelchristopher"},"content":"        actualOutput \u003d Ui.projectViewMessage(projectOne);"},{"lineNumber":139,"author":{"gitId":"samuelchristopher"},"content":"        expectedOutput \u003d \"Project \\\"Project One\\\"\\n\""},{"lineNumber":140,"author":{"gitId":"samuelchristopher"},"content":"                + \"\\n\""},{"lineNumber":141,"author":{"gitId":"samuelchristopher"},"content":"                + \"Description:\\n\""},{"lineNumber":142,"author":{"gitId":"samuelchristopher"},"content":"                + \"\u003cproject description empty\u003e\\n\""},{"lineNumber":143,"author":{"gitId":"samuelchristopher"},"content":"                + \"\\n\""},{"lineNumber":144,"author":{"gitId":"samuelchristopher"},"content":"                + \" ---------------------\\n\""},{"lineNumber":145,"author":{"gitId":"samuelchristopher"},"content":"                + \"| TASK LIST           |\\n\""},{"lineNumber":146,"author":{"gitId":"samuelchristopher"},"content":"                + \" ---------------------\\n\""},{"lineNumber":147,"author":{"gitId":"samuelchristopher"},"content":"                + \"Index  Status   Description        Deadline        Priority      Estimated Hrs     Actual Hrs   \""},{"lineNumber":148,"author":{"gitId":"samuelchristopher"},"content":"                + \"| Members Involved\\n\""},{"lineNumber":149,"author":{"gitId":"samuelchristopher"},"content":"                + \"------------------------------------------------------------------------------------------------\""},{"lineNumber":150,"author":{"gitId":"samuelchristopher"},"content":"                + \"|------------------\\n\""},{"lineNumber":151,"author":{"gitId":"samuelchristopher"},"content":"                + \"1      (N)      First Task         20/10/2020      3             1.3               -            \""},{"lineNumber":152,"author":{"gitId":"samuelchristopher"},"content":"                + \"| -\\n\""},{"lineNumber":153,"author":{"gitId":"samuelchristopher"},"content":"                + \"\\n\""},{"lineNumber":154,"author":{"gitId":"samuelchristopher"},"content":"                + \" \\n\""},{"lineNumber":155,"author":{"gitId":"samuelchristopher"},"content":"                + \"\\n\""},{"lineNumber":156,"author":{"gitId":"samuelchristopher"},"content":"                + \" ---------------------\\n\""},{"lineNumber":157,"author":{"gitId":"samuelchristopher"},"content":"                + \"| MEMBERS LIST        |\\n\""},{"lineNumber":158,"author":{"gitId":"samuelchristopher"},"content":"                + \" ---------------------\\n\""},{"lineNumber":159,"author":{"gitId":"samuelchristopher"},"content":"                + \"No team members have been assigned to this project.\";"},{"lineNumber":160,"author":{"gitId":"samuelchristopher"},"content":"        assertEquals(expectedOutput, actualOutput);"},{"lineNumber":161,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":162,"author":{"gitId":"samuelchristopher"},"content":"        TeamMember memberOne \u003d new TeamMember(\"Sam\");"},{"lineNumber":163,"author":{"gitId":"samuelchristopher"},"content":"        projectOne.addTeamMemberToProject(memberOne);"},{"lineNumber":164,"author":{"gitId":"samuelchristopher"},"content":"        newTask.setMember(memberOne);"},{"lineNumber":165,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":166,"author":{"gitId":"samuelchristopher"},"content":"        actualOutput \u003d Ui.projectViewMessage(projectOne);"},{"lineNumber":167,"author":{"gitId":"samuelchristopher"},"content":"        expectedOutput \u003d \"Project \\\"Project One\\\"\\n\""},{"lineNumber":168,"author":{"gitId":"samuelchristopher"},"content":"                + \"\\n\""},{"lineNumber":169,"author":{"gitId":"samuelchristopher"},"content":"                + \"Description:\\n\""},{"lineNumber":170,"author":{"gitId":"samuelchristopher"},"content":"                + \"\u003cproject description empty\u003e\\n\""},{"lineNumber":171,"author":{"gitId":"samuelchristopher"},"content":"                + \"\\n\""},{"lineNumber":172,"author":{"gitId":"samuelchristopher"},"content":"                + \" ---------------------\\n\""},{"lineNumber":173,"author":{"gitId":"samuelchristopher"},"content":"                + \"| TASK LIST           |\\n\""},{"lineNumber":174,"author":{"gitId":"samuelchristopher"},"content":"                + \" ---------------------\\n\""},{"lineNumber":175,"author":{"gitId":"samuelchristopher"},"content":"                + \"Index  Status   Description        Deadline        Priority      Estimated Hrs     Actual Hrs   \""},{"lineNumber":176,"author":{"gitId":"samuelchristopher"},"content":"                + \"| Members Involved\\n\""},{"lineNumber":177,"author":{"gitId":"samuelchristopher"},"content":"                + \"------------------------------------------------------------------------------------------------\""},{"lineNumber":178,"author":{"gitId":"samuelchristopher"},"content":"                + \"|------------------\\n\""},{"lineNumber":179,"author":{"gitId":"samuelchristopher"},"content":"                + \"1      (N)      First Task         20/10/2020      3             1.3               -            \""},{"lineNumber":180,"author":{"gitId":"samuelchristopher"},"content":"                + \"| Sam\\n\""},{"lineNumber":181,"author":{"gitId":"samuelchristopher"},"content":"                + \"\\n\""},{"lineNumber":182,"author":{"gitId":"samuelchristopher"},"content":"                + \" \\n\""},{"lineNumber":183,"author":{"gitId":"samuelchristopher"},"content":"                + \"\\n\""},{"lineNumber":184,"author":{"gitId":"samuelchristopher"},"content":"                + \" ---------------------\\n\""},{"lineNumber":185,"author":{"gitId":"samuelchristopher"},"content":"                + \"| MEMBERS LIST        |\\n\""},{"lineNumber":186,"author":{"gitId":"samuelchristopher"},"content":"                + \" ---------------------\\n\""},{"lineNumber":187,"author":{"gitId":"samuelchristopher"},"content":"                + \"1. Sam\\n\";"},{"lineNumber":188,"author":{"gitId":"samuelchristopher"},"content":"        assertEquals(expectedOutput, actualOutput);"},{"lineNumber":189,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":190,"author":{"gitId":"samuelchristopher"},"content":"        TeamMember memberTwo \u003d new TeamMember(\"Chris\");"},{"lineNumber":191,"author":{"gitId":"samuelchristopher"},"content":"        projectOne.addTeamMemberToProject(memberTwo);"},{"lineNumber":192,"author":{"gitId":"samuelchristopher"},"content":"        newTask.setMember(memberTwo);"},{"lineNumber":193,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":194,"author":{"gitId":"samuelchristopher"},"content":"        actualOutput \u003d Ui.projectViewMessage(projectOne);"},{"lineNumber":195,"author":{"gitId":"samuelchristopher"},"content":"        expectedOutput \u003d \"Project \\\"Project One\\\"\\n\""},{"lineNumber":196,"author":{"gitId":"samuelchristopher"},"content":"                + \"\\n\""},{"lineNumber":197,"author":{"gitId":"samuelchristopher"},"content":"                + \"Description:\\n\""},{"lineNumber":198,"author":{"gitId":"samuelchristopher"},"content":"                + \"\u003cproject description empty\u003e\\n\""},{"lineNumber":199,"author":{"gitId":"samuelchristopher"},"content":"                + \"\\n\""},{"lineNumber":200,"author":{"gitId":"samuelchristopher"},"content":"                + \" ---------------------\\n\""},{"lineNumber":201,"author":{"gitId":"samuelchristopher"},"content":"                + \"| TASK LIST           |\\n\""},{"lineNumber":202,"author":{"gitId":"samuelchristopher"},"content":"                + \" ---------------------\\n\""},{"lineNumber":203,"author":{"gitId":"samuelchristopher"},"content":"                + \"Index  Status   Description        Deadline        Priority      Estimated Hrs     Actual Hrs   \""},{"lineNumber":204,"author":{"gitId":"samuelchristopher"},"content":"                + \"| Members Involved\\n\""},{"lineNumber":205,"author":{"gitId":"samuelchristopher"},"content":"                + \"------------------------------------------------------------------------------------------------\""},{"lineNumber":206,"author":{"gitId":"samuelchristopher"},"content":"                + \"|------------------\\n\""},{"lineNumber":207,"author":{"gitId":"samuelchristopher"},"content":"                + \"1      (N)      First Task         20/10/2020      3             1.3               -            \""},{"lineNumber":208,"author":{"gitId":"samuelchristopher"},"content":"                + \"| Sam, Chris\\n\""},{"lineNumber":209,"author":{"gitId":"samuelchristopher"},"content":"                + \"\\n\""},{"lineNumber":210,"author":{"gitId":"samuelchristopher"},"content":"                + \" \\n\""},{"lineNumber":211,"author":{"gitId":"samuelchristopher"},"content":"                + \"\\n\""},{"lineNumber":212,"author":{"gitId":"samuelchristopher"},"content":"                + \" ---------------------\\n\""},{"lineNumber":213,"author":{"gitId":"samuelchristopher"},"content":"                + \"| MEMBERS LIST        |\\n\""},{"lineNumber":214,"author":{"gitId":"samuelchristopher"},"content":"                + \" ---------------------\\n\""},{"lineNumber":215,"author":{"gitId":"samuelchristopher"},"content":"                + \"1. Sam\\n\""},{"lineNumber":216,"author":{"gitId":"samuelchristopher"},"content":"                + \"2. Chris\\n\";"},{"lineNumber":217,"author":{"gitId":"samuelchristopher"},"content":"        assertEquals(expectedOutput, actualOutput);"},{"lineNumber":218,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":219,"author":{"gitId":"samuelchristopher"},"content":"        newTask.markAsDone();"},{"lineNumber":220,"author":{"gitId":"samuelchristopher"},"content":"        actualOutput \u003d Ui.projectViewMessage(projectOne);"},{"lineNumber":221,"author":{"gitId":"samuelchristopher"},"content":"        expectedOutput \u003d \"Project \\\"Project One\\\"\\n\""},{"lineNumber":222,"author":{"gitId":"samuelchristopher"},"content":"                + \"\\n\""},{"lineNumber":223,"author":{"gitId":"samuelchristopher"},"content":"                + \"Description:\\n\""},{"lineNumber":224,"author":{"gitId":"samuelchristopher"},"content":"                + \"\u003cproject description empty\u003e\\n\""},{"lineNumber":225,"author":{"gitId":"samuelchristopher"},"content":"                + \"\\n\""},{"lineNumber":226,"author":{"gitId":"samuelchristopher"},"content":"                + \" ---------------------\\n\""},{"lineNumber":227,"author":{"gitId":"samuelchristopher"},"content":"                + \"| TASK LIST           |\\n\""},{"lineNumber":228,"author":{"gitId":"samuelchristopher"},"content":"                + \" ---------------------\\n\""},{"lineNumber":229,"author":{"gitId":"samuelchristopher"},"content":"                + \"Index  Status   Description        Deadline        Priority      Estimated Hrs     Actual Hrs   \""},{"lineNumber":230,"author":{"gitId":"samuelchristopher"},"content":"                + \"| Members Involved\\n\""},{"lineNumber":231,"author":{"gitId":"samuelchristopher"},"content":"                + \"------------------------------------------------------------------------------------------------\""},{"lineNumber":232,"author":{"gitId":"samuelchristopher"},"content":"                + \"|------------------\\n\""},{"lineNumber":233,"author":{"gitId":"samuelchristopher"},"content":"                + \"1      (Y)      First Task         20/10/2020      3             1.3               -            \""},{"lineNumber":234,"author":{"gitId":"samuelchristopher"},"content":"                + \"| Sam, Chris\\n\""},{"lineNumber":235,"author":{"gitId":"samuelchristopher"},"content":"                + \"\\n\""},{"lineNumber":236,"author":{"gitId":"samuelchristopher"},"content":"                + \" \\n\""},{"lineNumber":237,"author":{"gitId":"samuelchristopher"},"content":"                + \"\\n\""},{"lineNumber":238,"author":{"gitId":"samuelchristopher"},"content":"                + \" ---------------------\\n\""},{"lineNumber":239,"author":{"gitId":"samuelchristopher"},"content":"                + \"| MEMBERS LIST        |\\n\""},{"lineNumber":240,"author":{"gitId":"samuelchristopher"},"content":"                + \" ---------------------\\n\""},{"lineNumber":241,"author":{"gitId":"samuelchristopher"},"content":"                + \"1. Sam\\n\""},{"lineNumber":242,"author":{"gitId":"samuelchristopher"},"content":"                + \"2. Chris\\n\";"},{"lineNumber":243,"author":{"gitId":"samuelchristopher"},"content":"        assertEquals(expectedOutput, actualOutput);"},{"lineNumber":244,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":245,"author":{"gitId":"samuelchristopher"},"content":"        newTask.addActual(120 + 40);"},{"lineNumber":246,"author":{"gitId":"samuelchristopher"},"content":"        actualOutput \u003d Ui.projectViewMessage(projectOne);"},{"lineNumber":247,"author":{"gitId":"samuelchristopher"},"content":"        expectedOutput \u003d \"Project \\\"Project One\\\"\\n\""},{"lineNumber":248,"author":{"gitId":"samuelchristopher"},"content":"                + \"\\n\""},{"lineNumber":249,"author":{"gitId":"samuelchristopher"},"content":"                + \"Description:\\n\""},{"lineNumber":250,"author":{"gitId":"samuelchristopher"},"content":"                + \"\u003cproject description empty\u003e\\n\""},{"lineNumber":251,"author":{"gitId":"samuelchristopher"},"content":"                + \"\\n\""},{"lineNumber":252,"author":{"gitId":"samuelchristopher"},"content":"                + \" ---------------------\\n\""},{"lineNumber":253,"author":{"gitId":"samuelchristopher"},"content":"                + \"| TASK LIST           |\\n\""},{"lineNumber":254,"author":{"gitId":"samuelchristopher"},"content":"                + \" ---------------------\\n\""},{"lineNumber":255,"author":{"gitId":"samuelchristopher"},"content":"                + \"Index  Status   Description        Deadline        Priority      Estimated Hrs     Actual Hrs   \""},{"lineNumber":256,"author":{"gitId":"samuelchristopher"},"content":"                + \"| Members Involved\\n\""},{"lineNumber":257,"author":{"gitId":"samuelchristopher"},"content":"                + \"------------------------------------------------------------------------------------------------\""},{"lineNumber":258,"author":{"gitId":"samuelchristopher"},"content":"                + \"|------------------\\n\""},{"lineNumber":259,"author":{"gitId":"samuelchristopher"},"content":"                + \"1      (Y)      First Task         20/10/2020      3             1.3               2.7          \""},{"lineNumber":260,"author":{"gitId":"samuelchristopher"},"content":"                + \"| Sam, Chris\\n\""},{"lineNumber":261,"author":{"gitId":"samuelchristopher"},"content":"                + \"\\n\""},{"lineNumber":262,"author":{"gitId":"samuelchristopher"},"content":"                + \" \\n\""},{"lineNumber":263,"author":{"gitId":"samuelchristopher"},"content":"                + \"\\n\""},{"lineNumber":264,"author":{"gitId":"samuelchristopher"},"content":"                + \" ---------------------\\n\""},{"lineNumber":265,"author":{"gitId":"samuelchristopher"},"content":"                + \"| MEMBERS LIST        |\\n\""},{"lineNumber":266,"author":{"gitId":"samuelchristopher"},"content":"                + \" ---------------------\\n\""},{"lineNumber":267,"author":{"gitId":"samuelchristopher"},"content":"                + \"1. Sam\\n\""},{"lineNumber":268,"author":{"gitId":"samuelchristopher"},"content":"                + \"2. Chris\\n\";"},{"lineNumber":269,"author":{"gitId":"samuelchristopher"},"content":"        assertEquals(expectedOutput, actualOutput);"},{"lineNumber":270,"author":{"gitId":"samuelchristopher"},"content":"    }"},{"lineNumber":271,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":272,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":273,"author":{"gitId":"samuelchristopher"},"content":"}"}],"authorContributionMap":{"samuelchristopher":273}},{"path":"src/test/java/seedu/ezmanager/commands/member/AssignMemberToProjectCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"thatseant"},"content":"package seedu.ezmanager.commands.member;"},{"lineNumber":2,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":3,"author":{"gitId":"shreytheshreyas"},"content":"import org.junit.jupiter.api.BeforeAll;"},{"lineNumber":4,"author":{"gitId":"shreytheshreyas"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.EzExceptions;"},{"lineNumber":6,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.member.TeamMember;"},{"lineNumber":7,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.project.Project;"},{"lineNumber":8,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.ui.Ui;"},{"lineNumber":9,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":10,"author":{"gitId":"shreytheshreyas"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitId":"shreytheshreyas"},"content":"import java.util.HashMap;"},{"lineNumber":12,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":13,"author":{"gitId":"shreytheshreyas"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":14,"author":{"gitId":"shreytheshreyas"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":15,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":16,"author":{"gitId":"shreytheshreyas"},"content":"public class AssignMemberToProjectCommandTest {"},{"lineNumber":17,"author":{"gitId":"shreytheshreyas"},"content":"    static ArrayList\u003cProject\u003e projects;"},{"lineNumber":18,"author":{"gitId":"shreytheshreyas"},"content":"    static ArrayList\u003cTeamMember\u003e teamMembers;"},{"lineNumber":19,"author":{"gitId":"shreytheshreyas"},"content":"    static Ui ui \u003d new Ui();"},{"lineNumber":20,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":21,"author":{"gitId":"shreytheshreyas"},"content":"    @BeforeAll"},{"lineNumber":22,"author":{"gitId":"shreytheshreyas"},"content":"    static void createProjectList() {"},{"lineNumber":23,"author":{"gitId":"shreytheshreyas"},"content":"        projects \u003d new ArrayList\u003c\u003e();"},{"lineNumber":24,"author":{"gitId":"shreytheshreyas"},"content":"        teamMembers \u003d new ArrayList\u003c\u003e();"},{"lineNumber":25,"author":{"gitId":"shreytheshreyas"},"content":"        Project project1 \u003d new Project(\"Project 1\");"},{"lineNumber":26,"author":{"gitId":"shreytheshreyas"},"content":"        Project project2 \u003d new Project(\"Project 2\");"},{"lineNumber":27,"author":{"gitId":"shreytheshreyas"},"content":"        Project project3 \u003d new Project(\"Project 3\");"},{"lineNumber":28,"author":{"gitId":"shreytheshreyas"},"content":"        projects.add(project1);"},{"lineNumber":29,"author":{"gitId":"shreytheshreyas"},"content":"        projects.add(project2);"},{"lineNumber":30,"author":{"gitId":"shreytheshreyas"},"content":"        projects.add(project3);"},{"lineNumber":31,"author":{"gitId":"shreytheshreyas"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":33,"author":{"gitId":"shreytheshreyas"},"content":"    @BeforeAll"},{"lineNumber":34,"author":{"gitId":"shreytheshreyas"},"content":"    static void createMemberList() {"},{"lineNumber":35,"author":{"gitId":"shreytheshreyas"},"content":"        teamMembers \u003d new ArrayList\u003c\u003e();"},{"lineNumber":36,"author":{"gitId":"shreytheshreyas"},"content":"        TeamMember member1 \u003d new TeamMember(\"Member 1\");"},{"lineNumber":37,"author":{"gitId":"shreytheshreyas"},"content":"        TeamMember member2 \u003d new TeamMember(\"Member 2\");"},{"lineNumber":38,"author":{"gitId":"shreytheshreyas"},"content":"        TeamMember member3 \u003d new TeamMember(\"Member 3\");"},{"lineNumber":39,"author":{"gitId":"shreytheshreyas"},"content":"        teamMembers.add(member1);"},{"lineNumber":40,"author":{"gitId":"shreytheshreyas"},"content":"        teamMembers.add(member2);"},{"lineNumber":41,"author":{"gitId":"shreytheshreyas"},"content":"        teamMembers.add(member3);"},{"lineNumber":42,"author":{"gitId":"shreytheshreyas"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":44,"author":{"gitId":"shreytheshreyas"},"content":"    @Test"},{"lineNumber":45,"author":{"gitId":"thatseant"},"content":"    public void executeCommand_validMemberId_validProjectId_assignMemberToProject() throws EzExceptions {"},{"lineNumber":46,"author":{"gitId":"shreytheshreyas"},"content":"        HashMap\u003cString, String\u003e params \u003d new HashMap\u003c\u003e();"},{"lineNumber":47,"author":{"gitId":"shreytheshreyas"},"content":"        params.put(\"m\",\"2\");"},{"lineNumber":48,"author":{"gitId":"shreytheshreyas"},"content":"        params.put(\"p\",\"1\");"},{"lineNumber":49,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":50,"author":{"gitId":"thatseant"},"content":"        AssignMemberToProjectCommand assignProject \u003d new AssignMemberToProjectCommand(params,-1);"},{"lineNumber":51,"author":{"gitId":"samuellleow"},"content":"        String expectedOutput \u003d \"Member 2 assigned to Project \\\"Project 1\\\"\";"},{"lineNumber":52,"author":{"gitId":"shreytheshreyas"},"content":"        String actualOutput \u003d assignProject.executeCommand(projects,teamMembers);"},{"lineNumber":53,"author":{"gitId":"shreytheshreyas"},"content":"        assertEquals(expectedOutput,actualOutput);"},{"lineNumber":54,"author":{"gitId":"shreytheshreyas"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":56,"author":{"gitId":"shreytheshreyas"},"content":"    @Test"},{"lineNumber":57,"author":{"gitId":"thatseant"},"content":"    public void executeCommand_invalidMemberId_assignMemberToProject() throws EzExceptions {"},{"lineNumber":58,"author":{"gitId":"shreytheshreyas"},"content":"        HashMap\u003cString,String\u003e params \u003d new HashMap\u003c\u003e();"},{"lineNumber":59,"author":{"gitId":"shreytheshreyas"},"content":"        params.put(\"m\",\"7\");"},{"lineNumber":60,"author":{"gitId":"shreytheshreyas"},"content":"        params.put(\"p\",\"2\");"},{"lineNumber":61,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":62,"author":{"gitId":"thatseant"},"content":"        AssignMemberToProjectCommand command \u003d new AssignMemberToProjectCommand(params,-1);"},{"lineNumber":63,"author":{"gitId":"riazaham"},"content":"        String expectedOutput \u003d \"Team Member ID does not exist!\";"},{"lineNumber":64,"author":{"gitId":"thatseant"},"content":"        EzExceptions actualOutputException \u003d assertThrows(EzExceptions.class, () -\u003e"},{"lineNumber":65,"author":{"gitId":"riazaham"},"content":"            command.executeCommand(projects, teamMembers));"},{"lineNumber":66,"author":{"gitId":"shreytheshreyas"},"content":"        assertEquals(expectedOutput, actualOutputException.toString());"},{"lineNumber":67,"author":{"gitId":"shreytheshreyas"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":69,"author":{"gitId":"shreytheshreyas"},"content":"    @Test"},{"lineNumber":70,"author":{"gitId":"thatseant"},"content":"    public void executeCommand_invalidProjectId_assignMemberToProject() throws EzExceptions {"},{"lineNumber":71,"author":{"gitId":"shreytheshreyas"},"content":"        HashMap\u003cString,String\u003e params \u003d new HashMap\u003c\u003e();"},{"lineNumber":72,"author":{"gitId":"shreytheshreyas"},"content":"        params.put(\"m\",\"1\");"},{"lineNumber":73,"author":{"gitId":"shreytheshreyas"},"content":"        params.put(\"p\",\"5\");"},{"lineNumber":74,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":75,"author":{"gitId":"thatseant"},"content":"        AssignMemberToProjectCommand assignProject \u003d new AssignMemberToProjectCommand(params,-1);"},{"lineNumber":76,"author":{"gitId":"shreytheshreyas"},"content":"        String expectedOutput \u003d \"Project ID does not exist!\";"},{"lineNumber":77,"author":{"gitId":"thatseant"},"content":"        Throwable actualOutputException \u003d assertThrows(EzExceptions.class, () -\u003e {"},{"lineNumber":78,"author":{"gitId":"shreytheshreyas"},"content":"            assignProject.executeCommand(projects,teamMembers);"},{"lineNumber":79,"author":{"gitId":"shreytheshreyas"},"content":"        });"},{"lineNumber":80,"author":{"gitId":"shreytheshreyas"},"content":"        assertEquals(expectedOutput,actualOutputException.toString());"},{"lineNumber":81,"author":{"gitId":"shreytheshreyas"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"shreytheshreyas"},"content":"}"}],"authorContributionMap":{"thatseant":13,"samuellleow":1,"shreytheshreyas":66,"riazaham":2}},{"path":"src/test/java/seedu/ezmanager/commands/member/TeamMemberAddCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"thatseant"},"content":"package seedu.ezmanager.commands.member;"},{"lineNumber":2,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":3,"author":{"gitId":"riazaham"},"content":"import org.junit.jupiter.api.BeforeAll;"},{"lineNumber":4,"author":{"gitId":"riazaham"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.EzExceptions;"},{"lineNumber":6,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.member.TeamMember;"},{"lineNumber":7,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.project.Project;"},{"lineNumber":8,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.ui.Ui;"},{"lineNumber":9,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":10,"author":{"gitId":"riazaham"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitId":"riazaham"},"content":"import java.util.HashMap;"},{"lineNumber":12,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":13,"author":{"gitId":"riazaham"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":14,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":15,"author":{"gitId":"riazaham"},"content":"class TeamMemberAddCommandTest {"},{"lineNumber":16,"author":{"gitId":"riazaham"},"content":"    static ArrayList\u003cProject\u003e projects;"},{"lineNumber":17,"author":{"gitId":"riazaham"},"content":"    static ArrayList\u003cTeamMember\u003e teamMembers;"},{"lineNumber":18,"author":{"gitId":"riazaham"},"content":"    static Ui ui \u003d new Ui();"},{"lineNumber":19,"author":{"gitId":"riazaham"},"content":"    static HashMap\u003cString, String\u003e params;"},{"lineNumber":20,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":21,"author":{"gitId":"riazaham"},"content":"    @BeforeAll"},{"lineNumber":22,"author":{"gitId":"riazaham"},"content":"    static void createProjectList() {"},{"lineNumber":23,"author":{"gitId":"riazaham"},"content":"        projects \u003d new ArrayList\u003c\u003e();"},{"lineNumber":24,"author":{"gitId":"riazaham"},"content":"        teamMembers \u003d new ArrayList\u003c\u003e();"},{"lineNumber":25,"author":{"gitId":"riazaham"},"content":"        params \u003d new HashMap\u003c\u003e();"},{"lineNumber":26,"author":{"gitId":"riazaham"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":28,"author":{"gitId":"riazaham"},"content":"    @Test"},{"lineNumber":29,"author":{"gitId":"thatseant"},"content":"    public void executeCommand_validMemberName_memberAddedMessage() throws EzExceptions {"},{"lineNumber":30,"author":{"gitId":"thatseant"},"content":"        params.put(\"n\", \"John Doe\");"},{"lineNumber":31,"author":{"gitId":"riazaham"},"content":"        TeamMemberAddCommand command \u003d new TeamMemberAddCommand(params);"},{"lineNumber":32,"author":{"gitId":"riazaham"},"content":"        String expectedOutput \u003d Ui.printMemberAddedMessage(\"John Doe\");"},{"lineNumber":33,"author":{"gitId":"riazaham"},"content":"        String actualOuput \u003d command.executeCommand(projects, teamMembers);"},{"lineNumber":34,"author":{"gitId":"riazaham"},"content":"        assertEquals(expectedOutput, actualOuput);"},{"lineNumber":35,"author":{"gitId":"riazaham"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":37,"author":{"gitId":"riazaham"},"content":"}"}],"authorContributionMap":{"thatseant":7,"riazaham":30}},{"path":"src/test/java/seedu/ezmanager/commands/member/TeamMemberAssignToTaskCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"thatseant"},"content":"package seedu.ezmanager.commands.member;"},{"lineNumber":2,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":3,"author":{"gitId":"riazaham"},"content":"import org.junit.jupiter.api.BeforeAll;"},{"lineNumber":4,"author":{"gitId":"riazaham"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.EzExceptions;"},{"lineNumber":6,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.member.TeamMember;"},{"lineNumber":7,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.project.Project;"},{"lineNumber":8,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.task.Task;"},{"lineNumber":9,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.ui.Ui;"},{"lineNumber":10,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":11,"author":{"gitId":"riazaham"},"content":"import java.util.ArrayList;"},{"lineNumber":12,"author":{"gitId":"riazaham"},"content":"import java.util.HashMap;"},{"lineNumber":13,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":14,"author":{"gitId":"riazaham"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":15,"author":{"gitId":"riazaham"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":16,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":17,"author":{"gitId":"riazaham"},"content":"class TeamMemberAssignToTaskCommandTest {"},{"lineNumber":18,"author":{"gitId":"riazaham"},"content":"    static ArrayList\u003cProject\u003e projects;"},{"lineNumber":19,"author":{"gitId":"riazaham"},"content":"    static ArrayList\u003cTeamMember\u003e teamMembers;"},{"lineNumber":20,"author":{"gitId":"riazaham"},"content":"    static HashMap\u003cString, String\u003e params;"},{"lineNumber":21,"author":{"gitId":"riazaham"},"content":"    static Ui ui \u003d new Ui();"},{"lineNumber":22,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":23,"author":{"gitId":"riazaham"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"riazaham"},"content":"     * Create 1 projects list"},{"lineNumber":25,"author":{"gitId":"riazaham"},"content":"     * Create 1 project."},{"lineNumber":26,"author":{"gitId":"riazaham"},"content":"     * Create 3 tasks."},{"lineNumber":27,"author":{"gitId":"riazaham"},"content":"     * Add the 3 tasks to that project."},{"lineNumber":28,"author":{"gitId":"riazaham"},"content":"     * Add that project to projects list."},{"lineNumber":29,"author":{"gitId":"riazaham"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"riazaham"},"content":"    @BeforeAll"},{"lineNumber":31,"author":{"gitId":"riazaham"},"content":"    static void testSetup() {"},{"lineNumber":32,"author":{"gitId":"riazaham"},"content":"        params \u003d new HashMap\u003c\u003e();"},{"lineNumber":33,"author":{"gitId":"riazaham"},"content":"        teamMembers \u003d new ArrayList\u003c\u003e();"},{"lineNumber":34,"author":{"gitId":"riazaham"},"content":"        projects \u003d new ArrayList\u003c\u003e();"},{"lineNumber":35,"author":{"gitId":"riazaham"},"content":"        Project projectOne \u003d new Project(\"Project One\");"},{"lineNumber":36,"author":{"gitId":"riazaham"},"content":"        Task taskOne \u003d new Task(\"Task One\");"},{"lineNumber":37,"author":{"gitId":"riazaham"},"content":"        Task taskTwo \u003d new Task(\"Task Two\");"},{"lineNumber":38,"author":{"gitId":"riazaham"},"content":"        Task taskThree \u003d new Task(\"Task Three\");"},{"lineNumber":39,"author":{"gitId":"riazaham"},"content":"        projectOne.addTask(taskOne);"},{"lineNumber":40,"author":{"gitId":"riazaham"},"content":"        projectOne.addTask(taskTwo);"},{"lineNumber":41,"author":{"gitId":"riazaham"},"content":"        projectOne.addTask(taskThree);"},{"lineNumber":42,"author":{"gitId":"riazaham"},"content":"        projects.add(projectOne);"},{"lineNumber":43,"author":{"gitId":"samuellleow"},"content":"        TeamMember memberOne \u003d new TeamMember(\"Arnold\");"},{"lineNumber":44,"author":{"gitId":"samuellleow"},"content":"        TeamMember memberTwo \u003d new TeamMember(\"Julian\");"},{"lineNumber":45,"author":{"gitId":"samuellleow"},"content":"        TeamMember memberThree \u003d new TeamMember(\"Victor\");"},{"lineNumber":46,"author":{"gitId":"samuellleow"},"content":"        teamMembers.add(memberOne);"},{"lineNumber":47,"author":{"gitId":"samuellleow"},"content":"        teamMembers.add(memberTwo);"},{"lineNumber":48,"author":{"gitId":"samuellleow"},"content":"        teamMembers.add(memberThree);"},{"lineNumber":49,"author":{"gitId":"samuellleow"},"content":"        projectOne.addTeamMemberToProject(memberOne);"},{"lineNumber":50,"author":{"gitId":"samuellleow"},"content":"        projectOne.addTeamMemberToProject(memberTwo);"},{"lineNumber":51,"author":{"gitId":"samuellleow"},"content":"        projectOne.addTeamMemberToProject(memberThree);"},{"lineNumber":52,"author":{"gitId":"riazaham"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":54,"author":{"gitId":"riazaham"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"riazaham"},"content":"     * Assign member 1 (Arnold) to task 1 (Task One)."},{"lineNumber":56,"author":{"gitId":"thatseant"},"content":"     * @throws EzExceptions exception message"},{"lineNumber":57,"author":{"gitId":"riazaham"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"riazaham"},"content":"    @Test"},{"lineNumber":59,"author":{"gitId":"thatseant"},"content":"    void executeCommand_validTaskIdMemberId_memberAssignedMessage() throws EzExceptions {"},{"lineNumber":60,"author":{"gitId":"riazaham"},"content":"        params.put(\"t\", \"1\");"},{"lineNumber":61,"author":{"gitId":"riazaham"},"content":"        params.put(\"m\", \"1\");"},{"lineNumber":62,"author":{"gitId":"riazaham"},"content":"        TeamMemberAssignToTaskCommand command \u003d new TeamMemberAssignToTaskCommand(params,0);"},{"lineNumber":63,"author":{"gitId":"riazaham"},"content":"        String expectedOutput \u003d Ui.printMemberAssignedToTaskMessage(\"Arnold\", \"Task One\");"},{"lineNumber":64,"author":{"gitId":"riazaham"},"content":"        String actualOutput \u003d command.executeCommand(projects, teamMembers);"},{"lineNumber":65,"author":{"gitId":"riazaham"},"content":"        assertEquals(expectedOutput, actualOutput);"},{"lineNumber":66,"author":{"gitId":"riazaham"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":68,"author":{"gitId":"riazaham"},"content":"    @Test"},{"lineNumber":69,"author":{"gitId":"thatseant"},"content":"    void executeCommand_nonExistentMemberId_memberAssignedMessage() throws EzExceptions {"},{"lineNumber":70,"author":{"gitId":"riazaham"},"content":"        params.put(\"t\", \"1\");"},{"lineNumber":71,"author":{"gitId":"samuellleow"},"content":"        params.put(\"m\", \"50\");"},{"lineNumber":72,"author":{"gitId":"riazaham"},"content":"        TeamMemberAssignToTaskCommand command \u003d new TeamMemberAssignToTaskCommand(params,0);"},{"lineNumber":73,"author":{"gitId":"samuellleow"},"content":"        String expectedOutput \u003d \"Team Member ID does not exist!\";"},{"lineNumber":74,"author":{"gitId":"thatseant"},"content":"        EzExceptions exception \u003d assertThrows(EzExceptions.class, () -\u003e"},{"lineNumber":75,"author":{"gitId":"samuellleow"},"content":"                command.executeCommand(projects, teamMembers));"},{"lineNumber":76,"author":{"gitId":"riazaham"},"content":"        assertEquals(expectedOutput, exception.toString());"},{"lineNumber":77,"author":{"gitId":"riazaham"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":79,"author":{"gitId":"riazaham"},"content":"    @Test"},{"lineNumber":80,"author":{"gitId":"thatseant"},"content":"    void executeCommand_nonExistentTaskId_memberAssignedMessage() throws EzExceptions {"},{"lineNumber":81,"author":{"gitId":"riazaham"},"content":"        params.put(\"t\", \"5\");"},{"lineNumber":82,"author":{"gitId":"riazaham"},"content":"        params.put(\"m\", \"1\");"},{"lineNumber":83,"author":{"gitId":"riazaham"},"content":"        TeamMemberAssignToTaskCommand command \u003d new TeamMemberAssignToTaskCommand(params,0);"},{"lineNumber":84,"author":{"gitId":"riazaham"},"content":"        String expectedOutput \u003d \"Task ID does not exist!\";"},{"lineNumber":85,"author":{"gitId":"thatseant"},"content":"        EzExceptions exception \u003d assertThrows(EzExceptions.class, () -\u003e"},{"lineNumber":86,"author":{"gitId":"riazaham"},"content":"                command.executeCommand(projects, teamMembers));"},{"lineNumber":87,"author":{"gitId":"riazaham"},"content":"        assertEquals(expectedOutput, exception.toString());"},{"lineNumber":88,"author":{"gitId":"riazaham"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":90,"author":{"gitId":"riazaham"},"content":"}"}],"authorContributionMap":{"thatseant":12,"samuellleow":12,"riazaham":66}},{"path":"src/test/java/seedu/ezmanager/commands/member/TeamMemberDeleteCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"thatseant"},"content":"package seedu.ezmanager.commands.member;"},{"lineNumber":2,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":3,"author":{"gitId":"samuellleow"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":4,"author":{"gitId":"riazaham"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.EzExceptions;"},{"lineNumber":6,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.commands.PrintHomeViewCommand;"},{"lineNumber":7,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.commands.task.TaskListCommand;"},{"lineNumber":8,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.member.TeamMember;"},{"lineNumber":9,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.project.Project;"},{"lineNumber":10,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.task.Task;"},{"lineNumber":11,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.ui.Ui;"},{"lineNumber":12,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":13,"author":{"gitId":"riazaham"},"content":"import java.util.ArrayList;"},{"lineNumber":14,"author":{"gitId":"riazaham"},"content":"import java.util.HashMap;"},{"lineNumber":15,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":16,"author":{"gitId":"riazaham"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":17,"author":{"gitId":"riazaham"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":18,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":19,"author":{"gitId":"riazaham"},"content":"class TeamMemberDeleteCommandTest {"},{"lineNumber":20,"author":{"gitId":"samuellleow"},"content":"    private ArrayList\u003cProject\u003e projects;"},{"lineNumber":21,"author":{"gitId":"samuellleow"},"content":"    private ArrayList\u003cTeamMember\u003e teamMembers;"},{"lineNumber":22,"author":{"gitId":"samuellleow"},"content":"    private Ui ui \u003d new Ui();"},{"lineNumber":23,"author":{"gitId":"samuellleow"},"content":"    private HashMap\u003cString, String\u003e params;"},{"lineNumber":24,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":25,"author":{"gitId":"samuellleow"},"content":"    @BeforeEach"},{"lineNumber":26,"author":{"gitId":"thatseant"},"content":"    void createTeamMembersList() throws EzExceptions {"},{"lineNumber":27,"author":{"gitId":"riazaham"},"content":"        projects \u003d new ArrayList\u003c\u003e();"},{"lineNumber":28,"author":{"gitId":"riazaham"},"content":"        teamMembers \u003d new ArrayList\u003c\u003e();"},{"lineNumber":29,"author":{"gitId":"samuellleow"},"content":"        Project project1 \u003d new Project(\"Project One\");"},{"lineNumber":30,"author":{"gitId":"riazaham"},"content":"        TeamMember member1 \u003d new TeamMember(\"John Doe\");"},{"lineNumber":31,"author":{"gitId":"riazaham"},"content":"        TeamMember member2 \u003d new TeamMember(\"Sarah Hopkins\");"},{"lineNumber":32,"author":{"gitId":"samuellleow"},"content":"        projects.add(project1);"},{"lineNumber":33,"author":{"gitId":"riazaham"},"content":"        teamMembers.add(member1);"},{"lineNumber":34,"author":{"gitId":"riazaham"},"content":"        teamMembers.add(member2);"},{"lineNumber":35,"author":{"gitId":"samuellleow"},"content":"        project1.addTeamMemberToProject(member1);"},{"lineNumber":36,"author":{"gitId":"samuellleow"},"content":"        project1.addTeamMemberToProject(member2);"},{"lineNumber":37,"author":{"gitId":"samuellleow"},"content":"        member1.assignProject(project1);"},{"lineNumber":38,"author":{"gitId":"samuellleow"},"content":"        member2.assignProject(project1);"},{"lineNumber":39,"author":{"gitId":"samuellleow"},"content":"        Task task1 \u003d new Task(\"Task One\");"},{"lineNumber":40,"author":{"gitId":"samuellleow"},"content":"        project1.addTask(task1);"},{"lineNumber":41,"author":{"gitId":"samuellleow"},"content":"        task1.setMember(member1);"},{"lineNumber":42,"author":{"gitId":"samuellleow"},"content":"        task1.setMember(member2);"},{"lineNumber":43,"author":{"gitId":"samuellleow"},"content":"        member1.setTask(task1);"},{"lineNumber":44,"author":{"gitId":"samuellleow"},"content":"        member2.setTask(task1);"},{"lineNumber":45,"author":{"gitId":"riazaham"},"content":"        params \u003d new HashMap\u003c\u003e();"},{"lineNumber":46,"author":{"gitId":"riazaham"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":48,"author":{"gitId":"riazaham"},"content":"    @Test"},{"lineNumber":49,"author":{"gitId":"thatseant"},"content":"    void executeCommand_validMemberIdInProjectView_memberRemovedMessage() throws EzExceptions {"},{"lineNumber":50,"author":{"gitId":"samuellleow"},"content":"        int projectIndex \u003d 0;"},{"lineNumber":51,"author":{"gitId":"samuellleow"},"content":"        params.put(\"m\", \"2\");"},{"lineNumber":52,"author":{"gitId":"samuellleow"},"content":"        TeamMemberDeleteCommand command \u003d new TeamMemberDeleteCommand(params, projectIndex);"},{"lineNumber":53,"author":{"gitId":"samuellleow"},"content":"        String expectedOutput \u003d \"Team member \\\"Sarah Hopkins\\\" has been removed from Project \\\"Project One\\\"\";"},{"lineNumber":54,"author":{"gitId":"samuellleow"},"content":"        String actualOutput \u003d command.executeCommand(projects, teamMembers);"},{"lineNumber":55,"author":{"gitId":"samuellleow"},"content":"        assertEquals(expectedOutput, actualOutput);"},{"lineNumber":56,"author":{"gitId":"samuellleow"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":58,"author":{"gitId":"samuellleow"},"content":"    @Test"},{"lineNumber":59,"author":{"gitId":"samuellleow"},"content":"    void executeCommand_nonExistentMemberIdInProjectView_invalidMemberIdException()"},{"lineNumber":60,"author":{"gitId":"thatseant"},"content":"            throws EzExceptions {"},{"lineNumber":61,"author":{"gitId":"samuellleow"},"content":"        int projectIndex \u003d 0;"},{"lineNumber":62,"author":{"gitId":"samuellleow"},"content":"        params.put(\"m\", \"10\");"},{"lineNumber":63,"author":{"gitId":"samuellleow"},"content":"        TeamMemberDeleteCommand command \u003d new TeamMemberDeleteCommand(params, projectIndex);"},{"lineNumber":64,"author":{"gitId":"samuellleow"},"content":"        String expectedOutput \u003d \"Team Member ID does not exist!\";"},{"lineNumber":65,"author":{"gitId":"thatseant"},"content":"        EzExceptions exception \u003d assertThrows(EzExceptions.class, () -\u003e"},{"lineNumber":66,"author":{"gitId":"samuellleow"},"content":"                command.executeCommand(projects, teamMembers));"},{"lineNumber":67,"author":{"gitId":"samuellleow"},"content":"        assertEquals(expectedOutput, exception.toString());"},{"lineNumber":68,"author":{"gitId":"samuellleow"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":70,"author":{"gitId":"samuellleow"},"content":"    @Test"},{"lineNumber":71,"author":{"gitId":"samuellleow"},"content":"    void executeCommand_validMemberIdInProjectView_projectViewMember1RemovedFromListAndTaskAssignment()"},{"lineNumber":72,"author":{"gitId":"thatseant"},"content":"            throws EzExceptions {"},{"lineNumber":73,"author":{"gitId":"samuellleow"},"content":"        int projectIndex \u003d 0;"},{"lineNumber":74,"author":{"gitId":"riazaham"},"content":"        params.put(\"m\", \"1\");"},{"lineNumber":75,"author":{"gitId":"samuellleow"},"content":"        TeamMemberDeleteCommand command \u003d new TeamMemberDeleteCommand(params, projectIndex);"},{"lineNumber":76,"author":{"gitId":"samuellleow"},"content":"        command.executeCommand(projects, teamMembers);"},{"lineNumber":77,"author":{"gitId":"samuellleow"},"content":"        String expectedOutput \u003d \"Project \\\"Project One\\\"\\n\""},{"lineNumber":78,"author":{"gitId":"samuellleow"},"content":"                + \"\\n\""},{"lineNumber":79,"author":{"gitId":"samuellleow"},"content":"                + \"Description:\\n\""},{"lineNumber":80,"author":{"gitId":"samuellleow"},"content":"                + \"\u003cproject description empty\u003e\\n\""},{"lineNumber":81,"author":{"gitId":"samuellleow"},"content":"                + \"\\n\""},{"lineNumber":82,"author":{"gitId":"samuellleow"},"content":"                + \" ---------------------\\n\""},{"lineNumber":83,"author":{"gitId":"samuellleow"},"content":"                + \"| TASK LIST           |\\n\""},{"lineNumber":84,"author":{"gitId":"samuellleow"},"content":"                + \" ---------------------\\n\""},{"lineNumber":85,"author":{"gitId":"samuelchristopher"},"content":"                + \"Index  Status   Description        Deadline        Priority      Estimated Hrs     \""},{"lineNumber":86,"author":{"gitId":"samuelchristopher"},"content":"                + \"Actual Hrs   | Members Involved\\n\""},{"lineNumber":87,"author":{"gitId":"samuelchristopher"},"content":"                + \"-----------------------------------------------------------------------------------\""},{"lineNumber":88,"author":{"gitId":"samuelchristopher"},"content":"                + \"-------------|------------------\\n\""},{"lineNumber":89,"author":{"gitId":"samuelchristopher"},"content":"                + \"1      (N)      Task One           -               -             -                 \""},{"lineNumber":90,"author":{"gitId":"samuelchristopher"},"content":"                + \"-            | Sarah Hopkins\\n\""},{"lineNumber":91,"author":{"gitId":"samuellleow"},"content":"                + \"\\n\""},{"lineNumber":92,"author":{"gitId":"samuellleow"},"content":"                + \" \\n\""},{"lineNumber":93,"author":{"gitId":"samuellleow"},"content":"                + \"\\n\""},{"lineNumber":94,"author":{"gitId":"samuellleow"},"content":"                + \" ---------------------\\n\""},{"lineNumber":95,"author":{"gitId":"samuellleow"},"content":"                + \"| MEMBERS LIST        |\\n\""},{"lineNumber":96,"author":{"gitId":"samuellleow"},"content":"                + \" ---------------------\\n\""},{"lineNumber":97,"author":{"gitId":"samuellleow"},"content":"                + \"1. Sarah Hopkins\\n\";"},{"lineNumber":98,"author":{"gitId":"samuellleow"},"content":"        TaskListCommand listCommand \u003d new TaskListCommand(projectIndex);"},{"lineNumber":99,"author":{"gitId":"samuellleow"},"content":"        String actualOutput \u003d listCommand.executeCommand(projects, teamMembers);"},{"lineNumber":100,"author":{"gitId":"samuellleow"},"content":"        assertEquals(expectedOutput, actualOutput);"},{"lineNumber":101,"author":{"gitId":"samuellleow"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":103,"author":{"gitId":"samuellleow"},"content":"    @Test"},{"lineNumber":104,"author":{"gitId":"thatseant"},"content":"    void executeCommand_validMemberIdInHomeView_memberRemovedMessage() throws EzExceptions {"},{"lineNumber":105,"author":{"gitId":"samuellleow"},"content":"        int projectIndex \u003d -1;"},{"lineNumber":106,"author":{"gitId":"samuellleow"},"content":"        params.put(\"m\", \"2\");"},{"lineNumber":107,"author":{"gitId":"samuellleow"},"content":"        TeamMemberDeleteCommand command \u003d new TeamMemberDeleteCommand(params, projectIndex);"},{"lineNumber":108,"author":{"gitId":"samuellleow"},"content":"        String expectedOutput \u003d \"Team member \\\"Sarah Hopkins\\\" has been removed from program entirely\";"},{"lineNumber":109,"author":{"gitId":"riazaham"},"content":"        String actualOutput \u003d command.executeCommand(projects, teamMembers);"},{"lineNumber":110,"author":{"gitId":"riazaham"},"content":"        assertEquals(expectedOutput, actualOutput);"},{"lineNumber":111,"author":{"gitId":"riazaham"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":113,"author":{"gitId":"riazaham"},"content":"    @Test"},{"lineNumber":114,"author":{"gitId":"samuellleow"},"content":"    void executeCommand_nonExistentMemberIdInHomeView_invalidMemberIdException()"},{"lineNumber":115,"author":{"gitId":"thatseant"},"content":"            throws EzExceptions {"},{"lineNumber":116,"author":{"gitId":"samuellleow"},"content":"        int projectIndex \u003d -1;"},{"lineNumber":117,"author":{"gitId":"riazaham"},"content":"        params.put(\"m\", \"10\");"},{"lineNumber":118,"author":{"gitId":"samuellleow"},"content":"        TeamMemberDeleteCommand command \u003d new TeamMemberDeleteCommand(params, projectIndex);"},{"lineNumber":119,"author":{"gitId":"riazaham"},"content":"        String expectedOutput \u003d \"Team Member ID does not exist!\";"},{"lineNumber":120,"author":{"gitId":"thatseant"},"content":"        EzExceptions exception \u003d assertThrows(EzExceptions.class, () -\u003e"},{"lineNumber":121,"author":{"gitId":"riazaham"},"content":"                command.executeCommand(projects, teamMembers));"},{"lineNumber":122,"author":{"gitId":"riazaham"},"content":"        assertEquals(expectedOutput, exception.toString());"},{"lineNumber":123,"author":{"gitId":"riazaham"},"content":"    }"},{"lineNumber":124,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":125,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":126,"author":{"gitId":"samuellleow"},"content":"    @Test"},{"lineNumber":127,"author":{"gitId":"samuellleow"},"content":"    void executeCommand_validMemberIdInHomeView_homeViewMember2RemovedFromList()"},{"lineNumber":128,"author":{"gitId":"thatseant"},"content":"            throws EzExceptions {"},{"lineNumber":129,"author":{"gitId":"samuellleow"},"content":"        int projectIndex \u003d -1;"},{"lineNumber":130,"author":{"gitId":"samuellleow"},"content":"        params.put(\"m\", \"2\");"},{"lineNumber":131,"author":{"gitId":"samuellleow"},"content":"        TeamMemberDeleteCommand command \u003d new TeamMemberDeleteCommand(params, projectIndex);"},{"lineNumber":132,"author":{"gitId":"samuellleow"},"content":"        command.executeCommand(projects, teamMembers);"},{"lineNumber":133,"author":{"gitId":"samuellleow"},"content":"        String expectedOutput \u003d \"EZ Manager Home View\\n\""},{"lineNumber":134,"author":{"gitId":"samuellleow"},"content":"                + \"\\n\""},{"lineNumber":135,"author":{"gitId":"samuellleow"},"content":"                + \" ----------------------\\n\""},{"lineNumber":136,"author":{"gitId":"samuellleow"},"content":"                + \"| PROJECT LIST         |\\n\""},{"lineNumber":137,"author":{"gitId":"samuellleow"},"content":"                + \" ----------------------\\n\""},{"lineNumber":138,"author":{"gitId":"samuellleow"},"content":"                + \"\\n\""},{"lineNumber":139,"author":{"gitId":"samuellleow"},"content":"                + \"Index   Status   Project Name             Project Description                \""},{"lineNumber":140,"author":{"gitId":"samuellleow"},"content":"                + \"Deadline     Tasks Completed     Remarks\\n\""},{"lineNumber":141,"author":{"gitId":"samuellleow"},"content":"                + \"-----------------------------------------------------------------------------\""},{"lineNumber":142,"author":{"gitId":"samuellleow"},"content":"                + \"-------------------------------------------------------------------------\\n\""},{"lineNumber":143,"author":{"gitId":"samuellleow"},"content":"                + \"1.      N        Project One              -                                  \""},{"lineNumber":144,"author":{"gitId":"samuellleow"},"content":"                + \"-            0/1                 -\\n\""},{"lineNumber":145,"author":{"gitId":"samuellleow"},"content":"                + \"\\n\""},{"lineNumber":146,"author":{"gitId":"samuellleow"},"content":"                + \" ----------------------\\n\""},{"lineNumber":147,"author":{"gitId":"samuellleow"},"content":"                + \"| MEMBERS LIST         |\\n\""},{"lineNumber":148,"author":{"gitId":"samuellleow"},"content":"                + \" ----------------------\\n\""},{"lineNumber":149,"author":{"gitId":"samuellleow"},"content":"                + \"\\n\""},{"lineNumber":150,"author":{"gitId":"samuellleow"},"content":"                + \"Index   Member Name                   Projects Involved        Hours spent across tasks\\n\""},{"lineNumber":151,"author":{"gitId":"samuellleow"},"content":"                + \"---------------------------------------------------------------------------------------\\n\""},{"lineNumber":152,"author":{"gitId":"samuellleow"},"content":"                + \"1.      John Doe                      1. Project One           0.0\";"},{"lineNumber":153,"author":{"gitId":"samuellleow"},"content":"        PrintHomeViewCommand homeViewCommand \u003d new PrintHomeViewCommand();"},{"lineNumber":154,"author":{"gitId":"samuellleow"},"content":"        String actualOutput \u003d homeViewCommand.executeCommand(projects, teamMembers);"},{"lineNumber":155,"author":{"gitId":"samuellleow"},"content":"        assertEquals(expectedOutput.trim(), actualOutput.trim());"},{"lineNumber":156,"author":{"gitId":"samuellleow"},"content":"    }"},{"lineNumber":157,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":158,"author":{"gitId":"samuellleow"},"content":"    @Test"},{"lineNumber":159,"author":{"gitId":"samuellleow"},"content":"    void executeCommand_validMemberIdInHomeView_projectViewMember2RemovedFromList()"},{"lineNumber":160,"author":{"gitId":"thatseant"},"content":"            throws EzExceptions {"},{"lineNumber":161,"author":{"gitId":"samuellleow"},"content":"        int homeView \u003d -1;"},{"lineNumber":162,"author":{"gitId":"samuellleow"},"content":"        int projectIndex \u003d 0;"},{"lineNumber":163,"author":{"gitId":"samuellleow"},"content":"        params.put(\"m\", \"2\");"},{"lineNumber":164,"author":{"gitId":"samuellleow"},"content":"        TeamMemberDeleteCommand command \u003d new TeamMemberDeleteCommand(params, homeView);"},{"lineNumber":165,"author":{"gitId":"samuellleow"},"content":"        command.executeCommand(projects, teamMembers);"},{"lineNumber":166,"author":{"gitId":"samuellleow"},"content":"        String expectedOutput \u003d \"Project \\\"Project One\\\"\\n\""},{"lineNumber":167,"author":{"gitId":"samuellleow"},"content":"                + \"\\n\""},{"lineNumber":168,"author":{"gitId":"samuellleow"},"content":"                + \"Description:\\n\""},{"lineNumber":169,"author":{"gitId":"samuellleow"},"content":"                + \"\u003cproject description empty\u003e\\n\""},{"lineNumber":170,"author":{"gitId":"samuellleow"},"content":"                + \"\\n\""},{"lineNumber":171,"author":{"gitId":"samuellleow"},"content":"                + \" ---------------------\\n\""},{"lineNumber":172,"author":{"gitId":"samuellleow"},"content":"                + \"| TASK LIST           |\\n\""},{"lineNumber":173,"author":{"gitId":"samuellleow"},"content":"                + \" ---------------------\\n\""},{"lineNumber":174,"author":{"gitId":"samuelchristopher"},"content":"                + \"Index  Status   Description        Deadline        Priority      Estimated Hrs     \""},{"lineNumber":175,"author":{"gitId":"samuelchristopher"},"content":"                + \"Actual Hrs   | Members Involved\\n\""},{"lineNumber":176,"author":{"gitId":"samuelchristopher"},"content":"                + \"-----------------------------------------------------------------------------------\""},{"lineNumber":177,"author":{"gitId":"samuelchristopher"},"content":"                + \"-------------|------------------\\n\""},{"lineNumber":178,"author":{"gitId":"samuelchristopher"},"content":"                + \"1      (N)      Task One           -               -             -                 \""},{"lineNumber":179,"author":{"gitId":"samuelchristopher"},"content":"                + \"-            | John Doe\\n\""},{"lineNumber":180,"author":{"gitId":"samuellleow"},"content":"                + \"\\n\""},{"lineNumber":181,"author":{"gitId":"samuellleow"},"content":"                + \" \\n\""},{"lineNumber":182,"author":{"gitId":"samuellleow"},"content":"                + \"\\n\""},{"lineNumber":183,"author":{"gitId":"samuellleow"},"content":"                + \" ---------------------\\n\""},{"lineNumber":184,"author":{"gitId":"samuellleow"},"content":"                + \"| MEMBERS LIST        |\\n\""},{"lineNumber":185,"author":{"gitId":"samuellleow"},"content":"                + \" ---------------------\\n\""},{"lineNumber":186,"author":{"gitId":"samuellleow"},"content":"                + \"1. John Doe\\n\";"},{"lineNumber":187,"author":{"gitId":"samuellleow"},"content":"        TaskListCommand listCommand \u003d new TaskListCommand(projectIndex);"},{"lineNumber":188,"author":{"gitId":"samuellleow"},"content":"        String actualOutput \u003d listCommand.executeCommand(projects, teamMembers);"},{"lineNumber":189,"author":{"gitId":"samuellleow"},"content":"        assertEquals(expectedOutput, actualOutput);"},{"lineNumber":190,"author":{"gitId":"samuellleow"},"content":"    }"},{"lineNumber":191,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":192,"author":{"gitId":"riazaham"},"content":"}"}],"authorContributionMap":{"thatseant":18,"samuelchristopher":12,"samuellleow":129,"riazaham":33}},{"path":"src/test/java/seedu/ezmanager/commands/member/TeamMemberHoursCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"thatseant"},"content":"//@@author thatseant"},{"lineNumber":2,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":3,"author":{"gitId":"thatseant"},"content":"package seedu.ezmanager.commands.member;"},{"lineNumber":4,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":5,"author":{"gitId":"thatseant"},"content":"import org.junit.jupiter.api.BeforeAll;"},{"lineNumber":6,"author":{"gitId":"thatseant"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.EzExceptions;"},{"lineNumber":8,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.member.TeamMember;"},{"lineNumber":9,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.project.Project;"},{"lineNumber":10,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.task.Task;"},{"lineNumber":11,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.ui.Ui;"},{"lineNumber":12,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":13,"author":{"gitId":"thatseant"},"content":"import java.util.ArrayList;"},{"lineNumber":14,"author":{"gitId":"thatseant"},"content":"import java.util.HashMap;"},{"lineNumber":15,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":16,"author":{"gitId":"thatseant"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":17,"author":{"gitId":"thatseant"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":18,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":19,"author":{"gitId":"thatseant"},"content":"class TeamMemberHoursCommandTest {"},{"lineNumber":20,"author":{"gitId":"thatseant"},"content":"    static ArrayList\u003cProject\u003e projects;"},{"lineNumber":21,"author":{"gitId":"thatseant"},"content":"    static ArrayList\u003cTeamMember\u003e teamMembers \u003d new ArrayList\u003c\u003e();"},{"lineNumber":22,"author":{"gitId":"thatseant"},"content":"    static Ui ui \u003d new Ui();"},{"lineNumber":23,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":24,"author":{"gitId":"thatseant"},"content":"    @BeforeAll"},{"lineNumber":25,"author":{"gitId":"thatseant"},"content":"    static void createMemberList() {"},{"lineNumber":26,"author":{"gitId":"thatseant"},"content":"        TeamMember member1 \u003d new TeamMember(\"Member 1\");"},{"lineNumber":27,"author":{"gitId":"thatseant"},"content":"        TeamMember member2 \u003d new TeamMember(\"Member 2\");"},{"lineNumber":28,"author":{"gitId":"thatseant"},"content":"        TeamMember member3 \u003d new TeamMember(\"Member 3\");"},{"lineNumber":29,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":30,"author":{"gitId":"thatseant"},"content":"        teamMembers.add(member1);"},{"lineNumber":31,"author":{"gitId":"thatseant"},"content":"        teamMembers.add(member2);"},{"lineNumber":32,"author":{"gitId":"thatseant"},"content":"        teamMembers.add(member3);"},{"lineNumber":33,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":35,"author":{"gitId":"thatseant"},"content":"    @Test"},{"lineNumber":36,"author":{"gitId":"thatseant"},"content":"    public void executeCommand_validMemberId_correctHours() throws EzExceptions {"},{"lineNumber":37,"author":{"gitId":"thatseant"},"content":"        Task task1 \u003d new Task(\"task1\");"},{"lineNumber":38,"author":{"gitId":"thatseant"},"content":"        task1.addActual(274);"},{"lineNumber":39,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":40,"author":{"gitId":"thatseant"},"content":"        Task task2 \u003d new Task(\"task2\");"},{"lineNumber":41,"author":{"gitId":"thatseant"},"content":"        task2.addActual(128);"},{"lineNumber":42,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":43,"author":{"gitId":"thatseant"},"content":"        Task task3 \u003d new Task(\"task3\");"},{"lineNumber":44,"author":{"gitId":"thatseant"},"content":"        task3.addActual(45);"},{"lineNumber":45,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":46,"author":{"gitId":"thatseant"},"content":"        Task task4 \u003d new Task(\"task4\");"},{"lineNumber":47,"author":{"gitId":"thatseant"},"content":"        task4.addActual(290);"},{"lineNumber":48,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":49,"author":{"gitId":"thatseant"},"content":"        TeamMember member3 \u003d teamMembers.get(2);"},{"lineNumber":50,"author":{"gitId":"thatseant"},"content":"        member3.setTask(task1);"},{"lineNumber":51,"author":{"gitId":"thatseant"},"content":"        member3.setTask(task2);"},{"lineNumber":52,"author":{"gitId":"thatseant"},"content":"        member3.setTask(task3);"},{"lineNumber":53,"author":{"gitId":"thatseant"},"content":"        member3.setTask(task4);"},{"lineNumber":54,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":55,"author":{"gitId":"thatseant"},"content":"        HashMap\u003cString, String\u003e params \u003d new HashMap\u003c\u003e();"},{"lineNumber":56,"author":{"gitId":"thatseant"},"content":"        params.put(\"m\",\"3\");"},{"lineNumber":57,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":58,"author":{"gitId":"thatseant"},"content":"        TeamMemberHoursCommand assignProject \u003d new TeamMemberHoursCommand(params,-1);"},{"lineNumber":59,"author":{"gitId":"thatseant"},"content":"        String expectedOutput \u003d \"Member 3 worked for 12.3 hours.\";"},{"lineNumber":60,"author":{"gitId":"thatseant"},"content":"        String actualOutput \u003d assignProject.executeCommand(projects,teamMembers);"},{"lineNumber":61,"author":{"gitId":"thatseant"},"content":"        assertEquals(expectedOutput, actualOutput);"},{"lineNumber":62,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":64,"author":{"gitId":"thatseant"},"content":"    @Test"},{"lineNumber":65,"author":{"gitId":"thatseant"},"content":"    public void executeCommand_invalidMemberId_assignMemberToProject() throws EzExceptions {"},{"lineNumber":66,"author":{"gitId":"thatseant"},"content":"        HashMap\u003cString,String\u003e params \u003d new HashMap\u003c\u003e();"},{"lineNumber":67,"author":{"gitId":"thatseant"},"content":"        params.put(\"m\",\"7\");"},{"lineNumber":68,"author":{"gitId":"thatseant"},"content":"        TeamMemberHoursCommand assignProject \u003d new TeamMemberHoursCommand(params,-1);"},{"lineNumber":69,"author":{"gitId":"thatseant"},"content":"        String expectedOutput \u003d \"The member ID entered does not exist\";"},{"lineNumber":70,"author":{"gitId":"thatseant"},"content":"        Throwable actualOutputException \u003d assertThrows(EzExceptions.class, () -\u003e {"},{"lineNumber":71,"author":{"gitId":"thatseant"},"content":"            assignProject.executeCommand(projects,teamMembers);"},{"lineNumber":72,"author":{"gitId":"thatseant"},"content":"        });"},{"lineNumber":73,"author":{"gitId":"thatseant"},"content":"        assertEquals(expectedOutput,actualOutputException.toString());"},{"lineNumber":74,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"thatseant"},"content":"}"}],"authorContributionMap":{"thatseant":75}},{"path":"src/test/java/seedu/ezmanager/commands/member/TeamMembersListCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"thatseant"},"content":"package seedu.ezmanager.commands.member;"},{"lineNumber":2,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":3,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.member.TeamMember;"},{"lineNumber":4,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.project.Project;"},{"lineNumber":5,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":6,"author":{"gitId":"riazaham"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":8,"author":{"gitId":"riazaham"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":9,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":10,"author":{"gitId":"riazaham"},"content":"class TeamMembersListCommandTest {"},{"lineNumber":11,"author":{"gitId":"riazaham"},"content":"    static ArrayList\u003cProject\u003e projects;"},{"lineNumber":12,"author":{"gitId":"riazaham"},"content":"    static ArrayList\u003cTeamMember\u003e teamMembers;"},{"lineNumber":13,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":14,"author":{"gitId":"riazaham"},"content":"    /*"},{"lineNumber":15,"author":{"gitId":"riazaham"},"content":"    @BeforeAll"},{"lineNumber":16,"author":{"gitId":"riazaham"},"content":"    static void createTeamMembersList() {"},{"lineNumber":17,"author":{"gitId":"riazaham"},"content":"        projects \u003d new ArrayList\u003c\u003e();"},{"lineNumber":18,"author":{"gitId":"riazaham"},"content":"        Project projectOne \u003d new Project(\"Project One\");"},{"lineNumber":19,"author":{"gitId":"riazaham"},"content":"        projects.add(projectOne);"},{"lineNumber":20,"author":{"gitId":"riazaham"},"content":"        teamMembers \u003d new ArrayList\u003c\u003e();"},{"lineNumber":21,"author":{"gitId":"riazaham"},"content":"        TeamMember member1 \u003d new TeamMember(\"John Doe\");"},{"lineNumber":22,"author":{"gitId":"riazaham"},"content":"        TeamMember member2 \u003d new TeamMember(\"Sarah Hopkins\");"},{"lineNumber":23,"author":{"gitId":"riazaham"},"content":"        TeamMember member3 \u003d new TeamMember(\"Brandon Ginger\");"},{"lineNumber":24,"author":{"gitId":"riazaham"},"content":"        TeamMember member4 \u003d new TeamMember(\"Jonathan Joseph\");"},{"lineNumber":25,"author":{"gitId":"riazaham"},"content":"        teamMembers.add(member1);"},{"lineNumber":26,"author":{"gitId":"riazaham"},"content":"        teamMembers.add(member2);"},{"lineNumber":27,"author":{"gitId":"riazaham"},"content":"        teamMembers.add(member3);"},{"lineNumber":28,"author":{"gitId":"riazaham"},"content":"        teamMembers.add(member4);"},{"lineNumber":29,"author":{"gitId":"riazaham"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":31,"author":{"gitId":"riazaham"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"riazaham"},"content":"    void executeCommand_listWithoutAssignedProject_listMessage() throws DukeExceptions {"},{"lineNumber":33,"author":{"gitId":"riazaham"},"content":"        TeamMembersListCommand command \u003d new TeamMembersListCommand(true, 0);"},{"lineNumber":34,"author":{"gitId":"riazaham"},"content":"        String expectedOutput \u003d \"List of members:\\n\""},{"lineNumber":35,"author":{"gitId":"riazaham"},"content":"                + \"1. John Doe: \\tNot assigned to a project\\n\""},{"lineNumber":36,"author":{"gitId":"riazaham"},"content":"                + \"2. Sarah Hopkins: \\tNot assigned to a project\\n\""},{"lineNumber":37,"author":{"gitId":"riazaham"},"content":"                + \"3. Brandon Ginger: \\tNot assigned to a project\\n\""},{"lineNumber":38,"author":{"gitId":"riazaham"},"content":"                + \"4. Jonathan Joseph: \\tNot assigned to a project\";"},{"lineNumber":39,"author":{"gitId":"riazaham"},"content":"        String actualOutput \u003d command.executeCommand(projects, teamMembers);"},{"lineNumber":40,"author":{"gitId":"riazaham"},"content":"        assertEquals(expectedOutput, actualOutput);"},{"lineNumber":41,"author":{"gitId":"riazaham"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":43,"author":{"gitId":"riazaham"},"content":"    @Test"},{"lineNumber":44,"author":{"gitId":"riazaham"},"content":"    void executeCommand_listWithAssignedProject_listMessage() throws DukeExceptions {"},{"lineNumber":45,"author":{"gitId":"riazaham"},"content":"        teamMembers.get(0).setAssignedProjectId(1);"},{"lineNumber":46,"author":{"gitId":"riazaham"},"content":"        teamMembers.get(2).setAssignedProjectId(1);"},{"lineNumber":47,"author":{"gitId":"riazaham"},"content":"        TeamMembersListCommand command \u003d new TeamMembersListCommand(true, 0);"},{"lineNumber":48,"author":{"gitId":"riazaham"},"content":"        String expectedOutput \u003d \"List of members:\\n\""},{"lineNumber":49,"author":{"gitId":"riazaham"},"content":"                + \"1. John Doe: \\tAssigned to project 1\\n\""},{"lineNumber":50,"author":{"gitId":"riazaham"},"content":"                + \"2. Sarah Hopkins: \\tNot assigned to a project\\n\""},{"lineNumber":51,"author":{"gitId":"riazaham"},"content":"                + \"3. Brandon Ginger: \\tAssigned to project 1\\n\""},{"lineNumber":52,"author":{"gitId":"riazaham"},"content":"                + \"4. Jonathan Joseph: \\tNot assigned to a project\";"},{"lineNumber":53,"author":{"gitId":"riazaham"},"content":"        String actualOutput \u003d command.executeCommand(projects, teamMembers);"},{"lineNumber":54,"author":{"gitId":"riazaham"},"content":"        assertEquals(expectedOutput, actualOutput);"},{"lineNumber":55,"author":{"gitId":"riazaham"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"riazaham"},"content":"    */"},{"lineNumber":57,"author":{"gitId":"riazaham"},"content":"}"}],"authorContributionMap":{"thatseant":3,"riazaham":54}},{"path":"src/test/java/seedu/ezmanager/commands/project/ProjectDeadlineCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"thatseant"},"content":"package seedu.ezmanager.commands.project;"},{"lineNumber":2,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":3,"author":{"gitId":"samuellleow"},"content":"import org.junit.jupiter.api.BeforeAll;"},{"lineNumber":4,"author":{"gitId":"samuellleow"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.EzExceptions;"},{"lineNumber":6,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.member.TeamMember;"},{"lineNumber":7,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.project.Project;"},{"lineNumber":8,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.ui.Ui;"},{"lineNumber":9,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":10,"author":{"gitId":"samuellleow"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitId":"riazaham"},"content":"import java.util.HashMap;"},{"lineNumber":12,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":13,"author":{"gitId":"samuellleow"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":14,"author":{"gitId":"samuellleow"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":15,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":16,"author":{"gitId":"samuellleow"},"content":"public class ProjectDeadlineCommandTest {"},{"lineNumber":17,"author":{"gitId":"samuellleow"},"content":"    static ArrayList\u003cProject\u003e projects;"},{"lineNumber":18,"author":{"gitId":"riazaham"},"content":"    static ArrayList\u003cTeamMember\u003e teamMembers;"},{"lineNumber":19,"author":{"gitId":"samuellleow"},"content":"    static Ui ui \u003d new Ui();"},{"lineNumber":20,"author":{"gitId":"riazaham"},"content":"    static HashMap\u003cString, String\u003e params;"},{"lineNumber":21,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":22,"author":{"gitId":"samuellleow"},"content":"    @BeforeAll"},{"lineNumber":23,"author":{"gitId":"samuellleow"},"content":"    static void createProjectList() {"},{"lineNumber":24,"author":{"gitId":"samuellleow"},"content":"        projects \u003d new ArrayList\u003c\u003e();"},{"lineNumber":25,"author":{"gitId":"samuellleow"},"content":"        Project projectOne \u003d new Project(\"Drink Water\");"},{"lineNumber":26,"author":{"gitId":"samuellleow"},"content":"        Project projectTwo \u003d new Project(\"Fire\");"},{"lineNumber":27,"author":{"gitId":"samuellleow"},"content":"        Project projectThree \u003d new Project(\"CS2113 Tutorial\");"},{"lineNumber":28,"author":{"gitId":"samuellleow"},"content":"        projects.add(projectOne);"},{"lineNumber":29,"author":{"gitId":"samuellleow"},"content":"        projects.add(projectTwo);"},{"lineNumber":30,"author":{"gitId":"samuellleow"},"content":"        projects.add(projectThree);"},{"lineNumber":31,"author":{"gitId":"samuellleow"},"content":"        teamMembers \u003d new ArrayList\u003c\u003e();"},{"lineNumber":32,"author":{"gitId":"riazaham"},"content":"        params \u003d new HashMap\u003c\u003e();"},{"lineNumber":33,"author":{"gitId":"samuellleow"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":35,"author":{"gitId":"samuellleow"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"samuellleow"},"content":"     * Test: Add deadline to the second project with valid project ID and deadline format."},{"lineNumber":37,"author":{"gitId":"samuellleow"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"samuellleow"},"content":"    @Test"},{"lineNumber":39,"author":{"gitId":"thatseant"},"content":"    void executeCommand_validProjectId_addDeadlineToProject() throws EzExceptions {"},{"lineNumber":40,"author":{"gitId":"samuellleow"},"content":"        params.put(\"p\", \"1\");"},{"lineNumber":41,"author":{"gitId":"samuellleow"},"content":"        params.put(\"d\", \"2030-12-31\");"},{"lineNumber":42,"author":{"gitId":"riazaham"},"content":"        ProjectDeadlineCommand command \u003d new ProjectDeadlineCommand(params);"},{"lineNumber":43,"author":{"gitId":"samuellleow"},"content":"        String expectedOutput \u003d \"Deadline 31/12/2030 added to Project Drink Water\\n\""},{"lineNumber":44,"author":{"gitId":"samuellleow"},"content":"                + \"\\n\""},{"lineNumber":45,"author":{"gitId":"samuellleow"},"content":"                + \"EZ Manager Home View\\n\""},{"lineNumber":46,"author":{"gitId":"samuellleow"},"content":"                + \"\\n\""},{"lineNumber":47,"author":{"gitId":"samuellleow"},"content":"                + \" ----------------------\\n\""},{"lineNumber":48,"author":{"gitId":"samuellleow"},"content":"                + \"| PROJECT LIST         |\\n\""},{"lineNumber":49,"author":{"gitId":"samuellleow"},"content":"                + \" ----------------------\\n\""},{"lineNumber":50,"author":{"gitId":"samuellleow"},"content":"                + \"\\n\""},{"lineNumber":51,"author":{"gitId":"samuellleow"},"content":"                + \"Index   Status   Project Name             Project Description                \""},{"lineNumber":52,"author":{"gitId":"samuellleow"},"content":"                + \"Deadline     Tasks Completed     Remarks\\n\""},{"lineNumber":53,"author":{"gitId":"samuellleow"},"content":"                + \"-----------------------------------------------------------------------------\""},{"lineNumber":54,"author":{"gitId":"samuellleow"},"content":"                + \"-------------------------------------------------------------------------\\n\""},{"lineNumber":55,"author":{"gitId":"samuellleow"},"content":"                + \"1.      N        Drink Water              -                                  \""},{"lineNumber":56,"author":{"gitId":"samuellleow"},"content":"                + \"31/12/2030   0/0                 -\\n\""},{"lineNumber":57,"author":{"gitId":"samuellleow"},"content":"                + \"2.      N        Fire                     -                                  \""},{"lineNumber":58,"author":{"gitId":"samuellleow"},"content":"                + \"-            0/0                 -\\n\""},{"lineNumber":59,"author":{"gitId":"samuellleow"},"content":"                + \"3.      N        CS2113 Tutorial          -                                  \""},{"lineNumber":60,"author":{"gitId":"samuellleow"},"content":"                + \"-            0/0                 -\\n\""},{"lineNumber":61,"author":{"gitId":"samuellleow"},"content":"                + \"\\n\""},{"lineNumber":62,"author":{"gitId":"samuellleow"},"content":"                + \" ----------------------\\n\""},{"lineNumber":63,"author":{"gitId":"samuellleow"},"content":"                + \"| MEMBERS LIST         |\\n\""},{"lineNumber":64,"author":{"gitId":"samuellleow"},"content":"                + \" ----------------------\\n\""},{"lineNumber":65,"author":{"gitId":"samuellleow"},"content":"                + \"\\n\""},{"lineNumber":66,"author":{"gitId":"samuellleow"},"content":"                + \"Index   Member Name                   Projects Involved        Hours spent across tasks\\n\""},{"lineNumber":67,"author":{"gitId":"samuellleow"},"content":"                + \"---------------------------------------------------------------------------------------\";"},{"lineNumber":68,"author":{"gitId":"riazaham"},"content":"        String actualOutput \u003d command.executeCommand(projects, teamMembers);"},{"lineNumber":69,"author":{"gitId":"samuellleow"},"content":"        assertEquals(expectedOutput, actualOutput);"},{"lineNumber":70,"author":{"gitId":"samuellleow"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":72,"author":{"gitId":"samuellleow"},"content":"    @Test"},{"lineNumber":73,"author":{"gitId":"thatseant"},"content":"    void executeCommand_invalidProjectId_exceptionThrown() throws EzExceptions {"},{"lineNumber":74,"author":{"gitId":"riazaham"},"content":"        params.put(\"p\", \"-5\");"},{"lineNumber":75,"author":{"gitId":"riazaham"},"content":"        params.put(\"d\", \"2020-12-31\");"},{"lineNumber":76,"author":{"gitId":"riazaham"},"content":"        ProjectDeadlineCommand command \u003d new ProjectDeadlineCommand(params);"},{"lineNumber":77,"author":{"gitId":"samuellleow"},"content":"        String expectedOutput \u003d \"Project ID does not exist!\";"},{"lineNumber":78,"author":{"gitId":"thatseant"},"content":"        Throwable actualOutputException \u003d assertThrows(EzExceptions.class, () -\u003e {"},{"lineNumber":79,"author":{"gitId":"riazaham"},"content":"            command.executeCommand(projects, teamMembers);"},{"lineNumber":80,"author":{"gitId":"samuellleow"},"content":"        });"},{"lineNumber":81,"author":{"gitId":"samuellleow"},"content":"        assertEquals(expectedOutput, actualOutputException.toString());"},{"lineNumber":82,"author":{"gitId":"samuellleow"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":84,"author":{"gitId":"samuellleow"},"content":"    @Test"},{"lineNumber":85,"author":{"gitId":"thatseant"},"content":"    void executeCommand_invalidDeadlineFormat_addDeadlineToProject() throws EzExceptions {"},{"lineNumber":86,"author":{"gitId":"samuellleow"},"content":"        params.put(\"p\", \"2\");"},{"lineNumber":87,"author":{"gitId":"samuellleow"},"content":"        params.put(\"d\", \"2020-31-31\");"},{"lineNumber":88,"author":{"gitId":"samuellleow"},"content":"        String expectedOutput \u003d \"Date must be specified in format YYYY-MM-DD\";"},{"lineNumber":89,"author":{"gitId":"thatseant"},"content":"        Throwable actualOutputException \u003d assertThrows(EzExceptions.class, () -\u003e {"},{"lineNumber":90,"author":{"gitId":"samuellleow"},"content":"            ProjectDeadlineCommand command \u003d new ProjectDeadlineCommand(params);"},{"lineNumber":91,"author":{"gitId":"samuellleow"},"content":"        });"},{"lineNumber":92,"author":{"gitId":"samuellleow"},"content":"        assertEquals(expectedOutput, actualOutputException.toString());"},{"lineNumber":93,"author":{"gitId":"samuellleow"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":95,"author":{"gitId":"samuellleow"},"content":"}"}],"authorContributionMap":{"thatseant":10,"samuellleow":74,"riazaham":11}},{"path":"src/test/java/seedu/ezmanager/commands/project/ProjectDescriptionCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"thatseant"},"content":"package seedu.ezmanager.commands.project;"},{"lineNumber":2,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":3,"author":{"gitId":"samuellleow"},"content":"import org.junit.jupiter.api.BeforeAll;"},{"lineNumber":4,"author":{"gitId":"samuellleow"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.EzExceptions;"},{"lineNumber":6,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.member.TeamMember;"},{"lineNumber":7,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.project.Project;"},{"lineNumber":8,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.ui.Ui;"},{"lineNumber":9,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":10,"author":{"gitId":"samuelchristopher"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitId":"riazaham"},"content":"import java.util.HashMap;"},{"lineNumber":12,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":13,"author":{"gitId":"samuellleow"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":14,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":15,"author":{"gitId":"samuellleow"},"content":"public class ProjectDescriptionCommandTest {"},{"lineNumber":16,"author":{"gitId":"samuelchristopher"},"content":"    static ArrayList\u003cProject\u003e projects;"},{"lineNumber":17,"author":{"gitId":"riazaham"},"content":"    static ArrayList\u003cTeamMember\u003e teamMembers;"},{"lineNumber":18,"author":{"gitId":"samuelchristopher"},"content":"    static Ui ui \u003d new Ui();"},{"lineNumber":19,"author":{"gitId":"riazaham"},"content":"    static HashMap\u003cString, String\u003e params;"},{"lineNumber":20,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":21,"author":{"gitId":"samuellleow"},"content":"    @BeforeAll"},{"lineNumber":22,"author":{"gitId":"samuellleow"},"content":"    static void createProjectList() {"},{"lineNumber":23,"author":{"gitId":"samuelchristopher"},"content":"        projects \u003d new ArrayList\u003c\u003e();"},{"lineNumber":24,"author":{"gitId":"samuellleow"},"content":"        Project projectOne \u003d new Project(\"Project One\");"},{"lineNumber":25,"author":{"gitId":"samuellleow"},"content":"        Project projectTwo \u003d new Project(\"Project Two\");"},{"lineNumber":26,"author":{"gitId":"samuellleow"},"content":"        Project projectThree \u003d new Project(\"Project Three\");"},{"lineNumber":27,"author":{"gitId":"samuellleow"},"content":"        projects.add(projectOne);"},{"lineNumber":28,"author":{"gitId":"samuellleow"},"content":"        projects.add(projectTwo);"},{"lineNumber":29,"author":{"gitId":"samuellleow"},"content":"        projects.add(projectThree);"},{"lineNumber":30,"author":{"gitId":"samuellleow"},"content":"        projectTwo.addDescription(\"Do CS2113 Tutorial by today\");"},{"lineNumber":31,"author":{"gitId":"riazaham"},"content":"        params \u003d new HashMap\u003c\u003e();"},{"lineNumber":32,"author":{"gitId":"samuellleow"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":34,"author":{"gitId":"samuellleow"},"content":"    @Test"},{"lineNumber":35,"author":{"gitId":"thatseant"},"content":"    void executeCommand_projectList_projectDescriptionAdded() throws EzExceptions {"},{"lineNumber":36,"author":{"gitId":"riazaham"},"content":"        params.put(\"d\", \"Do CS2113 Tutorial by today\");"},{"lineNumber":37,"author":{"gitId":"samuellleow"},"content":"        params.put(\"p\", \"2\");"},{"lineNumber":38,"author":{"gitId":"samuellleow"},"content":"        ProjectDescriptionCommand addDescription \u003d new ProjectDescriptionCommand(params);"},{"lineNumber":39,"author":{"gitId":"riazaham"},"content":"        String actualOutput \u003d addDescription.executeCommand(projects, teamMembers);"},{"lineNumber":40,"author":{"gitId":"samuellleow"},"content":"        String expectedOutput \u003d \"Project description added \\\"Do CS2113 Tutorial by today\\\".\";"},{"lineNumber":41,"author":{"gitId":"samuellleow"},"content":"        assertEquals(expectedOutput, actualOutput);"},{"lineNumber":42,"author":{"gitId":"samuellleow"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":44,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":45,"author":{"gitId":"samuellleow"},"content":"}"}],"authorContributionMap":{"thatseant":6,"samuelchristopher":5,"samuellleow":28,"riazaham":6}},{"path":"src/test/java/seedu/ezmanager/commands/project/ProjectDoneCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"samuelchristopher"},"content":"package seedu.ezmanager.commands.project;"},{"lineNumber":2,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":3,"author":{"gitId":"samuelchristopher"},"content":"import org.junit.jupiter.api.BeforeAll;"},{"lineNumber":4,"author":{"gitId":"samuelchristopher"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"samuelchristopher"},"content":"import seedu.ezmanager.EzExceptions;"},{"lineNumber":6,"author":{"gitId":"samuelchristopher"},"content":"import seedu.ezmanager.commands.project.ProjectDoneCommand;"},{"lineNumber":7,"author":{"gitId":"samuelchristopher"},"content":"import seedu.ezmanager.member.TeamMember;"},{"lineNumber":8,"author":{"gitId":"samuelchristopher"},"content":"import seedu.ezmanager.project.Project;"},{"lineNumber":9,"author":{"gitId":"samuelchristopher"},"content":"import seedu.ezmanager.ui.Ui;"},{"lineNumber":10,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":11,"author":{"gitId":"samuelchristopher"},"content":"import java.util.ArrayList;"},{"lineNumber":12,"author":{"gitId":"samuelchristopher"},"content":"import java.util.HashMap;"},{"lineNumber":13,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":14,"author":{"gitId":"samuelchristopher"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":15,"author":{"gitId":"samuelchristopher"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":16,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":17,"author":{"gitId":"samuelchristopher"},"content":"public class ProjectDoneCommandTest {"},{"lineNumber":18,"author":{"gitId":"samuelchristopher"},"content":"    static ArrayList\u003cProject\u003e projects;"},{"lineNumber":19,"author":{"gitId":"samuelchristopher"},"content":"    static ArrayList\u003cTeamMember\u003e teamMembers;"},{"lineNumber":20,"author":{"gitId":"samuelchristopher"},"content":"    static Ui ui \u003d new Ui();"},{"lineNumber":21,"author":{"gitId":"samuelchristopher"},"content":"    static HashMap\u003cString, String\u003e params;"},{"lineNumber":22,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":23,"author":{"gitId":"samuelchristopher"},"content":"    @BeforeAll"},{"lineNumber":24,"author":{"gitId":"samuelchristopher"},"content":"    static void createProjectList() {"},{"lineNumber":25,"author":{"gitId":"samuelchristopher"},"content":"        projects \u003d new ArrayList\u003c\u003e();"},{"lineNumber":26,"author":{"gitId":"samuelchristopher"},"content":"        Project projectOne \u003d new Project(\"Project A\");"},{"lineNumber":27,"author":{"gitId":"samuelchristopher"},"content":"        Project projectTwo \u003d new Project(\"Project B\");"},{"lineNumber":28,"author":{"gitId":"samuelchristopher"},"content":"        Project projectThree \u003d new Project(\"Project C\");"},{"lineNumber":29,"author":{"gitId":"samuelchristopher"},"content":"        projects.add(projectOne);"},{"lineNumber":30,"author":{"gitId":"samuelchristopher"},"content":"        projects.add(projectTwo);"},{"lineNumber":31,"author":{"gitId":"samuelchristopher"},"content":"        projects.add(projectThree);"},{"lineNumber":32,"author":{"gitId":"samuelchristopher"},"content":"        teamMembers \u003d new ArrayList\u003c\u003e();"},{"lineNumber":33,"author":{"gitId":"samuelchristopher"},"content":"        params \u003d new HashMap\u003c\u003e();"},{"lineNumber":34,"author":{"gitId":"samuelchristopher"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":36,"author":{"gitId":"samuelchristopher"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"samuelchristopher"},"content":"     * Test: Add deadline to the second project with valid project ID and deadline format."},{"lineNumber":38,"author":{"gitId":"samuelchristopher"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"samuelchristopher"},"content":"    @Test"},{"lineNumber":40,"author":{"gitId":"samuelchristopher"},"content":"    void executeCommand_doneProject() throws EzExceptions {"},{"lineNumber":41,"author":{"gitId":"samuelchristopher"},"content":"        params.put(\"p\", \"1\");"},{"lineNumber":42,"author":{"gitId":"samuelchristopher"},"content":"        ProjectDoneCommand command \u003d new ProjectDoneCommand(params, 0);"},{"lineNumber":43,"author":{"gitId":"samuelchristopher"},"content":"        String expectedOutput \u003d \"Project \\\"Project A\\\" is done!\";"},{"lineNumber":44,"author":{"gitId":"samuelchristopher"},"content":"        String actualOutput \u003d command.executeCommand(projects, teamMembers);"},{"lineNumber":45,"author":{"gitId":"samuelchristopher"},"content":"        assertEquals(expectedOutput, actualOutput);"},{"lineNumber":46,"author":{"gitId":"samuelchristopher"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":48,"author":{"gitId":"samuelchristopher"},"content":"}"}],"authorContributionMap":{"samuelchristopher":48}},{"path":"src/test/java/seedu/ezmanager/commands/project/ProjectSelectCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"thatseant"},"content":"package seedu.ezmanager.commands.project;"},{"lineNumber":2,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":3,"author":{"gitId":"samuellleow"},"content":"import org.junit.jupiter.api.BeforeAll;"},{"lineNumber":4,"author":{"gitId":"samuellleow"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.EzExceptions;"},{"lineNumber":6,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.member.TeamMember;"},{"lineNumber":7,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.project.Project;"},{"lineNumber":8,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.ui.Ui;"},{"lineNumber":9,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":10,"author":{"gitId":"samuellleow"},"content":"import java.time.LocalDate;"},{"lineNumber":11,"author":{"gitId":"samuellleow"},"content":"import java.util.ArrayList;"},{"lineNumber":12,"author":{"gitId":"samuellleow"},"content":"import java.util.HashMap;"},{"lineNumber":13,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":14,"author":{"gitId":"samuellleow"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":15,"author":{"gitId":"samuellleow"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":16,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":17,"author":{"gitId":"samuellleow"},"content":"public class ProjectSelectCommandTest {"},{"lineNumber":18,"author":{"gitId":"riazaham"},"content":"    static ArrayList\u003cTeamMember\u003e teamMembers;"},{"lineNumber":19,"author":{"gitId":"samuellleow"},"content":"    static ArrayList\u003cProject\u003e projects;"},{"lineNumber":20,"author":{"gitId":"samuellleow"},"content":"    static Ui ui \u003d new Ui();"},{"lineNumber":21,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":22,"author":{"gitId":"samuellleow"},"content":"    @BeforeAll"},{"lineNumber":23,"author":{"gitId":"samuellleow"},"content":"    static void testSetup() {"},{"lineNumber":24,"author":{"gitId":"samuellleow"},"content":"        projects \u003d new ArrayList\u003c\u003e();"},{"lineNumber":25,"author":{"gitId":"samuellleow"},"content":"        Project projectOne \u003d new Project(\"Project One\");"},{"lineNumber":26,"author":{"gitId":"samuellleow"},"content":"        Project projectTwo \u003d new Project(\"Project Two\");"},{"lineNumber":27,"author":{"gitId":"samuellleow"},"content":"        Project projectThree \u003d new Project(\"Project Three\");"},{"lineNumber":28,"author":{"gitId":"samuellleow"},"content":"        projects.add(projectOne);"},{"lineNumber":29,"author":{"gitId":"samuellleow"},"content":"        projects.add(projectTwo);"},{"lineNumber":30,"author":{"gitId":"samuellleow"},"content":"        projects.add(projectThree);"},{"lineNumber":31,"author":{"gitId":"samuellleow"},"content":"        projectTwo.addProjectDeadline(LocalDate.parse(\"2020-12-31\"));"},{"lineNumber":32,"author":{"gitId":"samuellleow"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":34,"author":{"gitId":"samuellleow"},"content":"    @Test"},{"lineNumber":35,"author":{"gitId":"thatseant"},"content":"    void executeCommand_validProjectIdWithDescription_additionalInformation() throws EzExceptions {"},{"lineNumber":36,"author":{"gitId":"samuellleow"},"content":"        HashMap\u003cString, String\u003e params \u003d new HashMap\u003c\u003e();"},{"lineNumber":37,"author":{"gitId":"samuellleow"},"content":"        params.put(\"p\",\"2\");"},{"lineNumber":38,"author":{"gitId":"samuellleow"},"content":"        ProjectSelectCommand selectProject \u003d new ProjectSelectCommand(params);"},{"lineNumber":39,"author":{"gitId":"samuelchristopher"},"content":"        String expectedOutput \u003d  \"Project \\\"Project Two\\\"\\n\""},{"lineNumber":40,"author":{"gitId":"thatseant"},"content":"                + \"\\n\""},{"lineNumber":41,"author":{"gitId":"thatseant"},"content":"                + \"Description:\""},{"lineNumber":42,"author":{"gitId":"thatseant"},"content":"                + \"\\n\""},{"lineNumber":43,"author":{"gitId":"thatseant"},"content":"                + \"\u003cproject description empty\u003e\""},{"lineNumber":44,"author":{"gitId":"thatseant"},"content":"                + \"\\n\""},{"lineNumber":45,"author":{"gitId":"samuelchristopher"},"content":"                + \"\\n\""},{"lineNumber":46,"author":{"gitId":"samuelchristopher"},"content":"                + \" ---------------------\\n\""},{"lineNumber":47,"author":{"gitId":"samuelchristopher"},"content":"                + \"| TASK LIST           |\\n\""},{"lineNumber":48,"author":{"gitId":"samuelchristopher"},"content":"                + \" ---------------------\\n\""},{"lineNumber":49,"author":{"gitId":"samuelchristopher"},"content":"                + \"\\n\""},{"lineNumber":50,"author":{"gitId":"samuelchristopher"},"content":"                + \"No tasks have been added to this project.\\n\""},{"lineNumber":51,"author":{"gitId":"samuelchristopher"},"content":"                + \" \\n\""},{"lineNumber":52,"author":{"gitId":"samuelchristopher"},"content":"                + \"\\n\""},{"lineNumber":53,"author":{"gitId":"samuelchristopher"},"content":"                + \" ---------------------\\n\""},{"lineNumber":54,"author":{"gitId":"samuelchristopher"},"content":"                + \"| MEMBERS LIST        |\\n\""},{"lineNumber":55,"author":{"gitId":"samuelchristopher"},"content":"                + \" ---------------------\\n\""},{"lineNumber":56,"author":{"gitId":"samuelchristopher"},"content":"                + \"No team members have been assigned to this project.\";"},{"lineNumber":57,"author":{"gitId":"riazaham"},"content":"        String actualOutput \u003d selectProject.executeCommand(projects, teamMembers);"},{"lineNumber":58,"author":{"gitId":"samuellleow"},"content":"        assertEquals(expectedOutput, actualOutput);"},{"lineNumber":59,"author":{"gitId":"samuellleow"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"samuellleow"},"content":""},{"lineNumber":61,"author":{"gitId":"samuellleow"},"content":"    @Test"},{"lineNumber":62,"author":{"gitId":"thatseant"},"content":"    void executeCommand_invalidProjectIdWithDescription_additionalInformation() throws EzExceptions {"},{"lineNumber":63,"author":{"gitId":"samuellleow"},"content":"        HashMap\u003cString, String\u003e params \u003d new HashMap\u003c\u003e();"},{"lineNumber":64,"author":{"gitId":"samuellleow"},"content":"        params.put(\"p\",\"-5\");"},{"lineNumber":65,"author":{"gitId":"samuellleow"},"content":"        ProjectSelectCommand selectProject \u003d new ProjectSelectCommand(params);"},{"lineNumber":66,"author":{"gitId":"samuellleow"},"content":"        String expectedOutput \u003d \"Project ID does not exist!\";"},{"lineNumber":67,"author":{"gitId":"thatseant"},"content":"        Throwable actualOutputException \u003d assertThrows(EzExceptions.class, () -\u003e {"},{"lineNumber":68,"author":{"gitId":"riazaham"},"content":"            selectProject.executeCommand(projects, teamMembers);"},{"lineNumber":69,"author":{"gitId":"samuellleow"},"content":"        });"},{"lineNumber":70,"author":{"gitId":"samuellleow"},"content":"        assertEquals(expectedOutput, actualOutputException.toString());"},{"lineNumber":71,"author":{"gitId":"samuellleow"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"samuellleow"},"content":"}"}],"authorContributionMap":{"thatseant":13,"samuelchristopher":13,"samuellleow":43,"riazaham":3}},{"path":"src/test/java/seedu/ezmanager/commands/task/ActualTimeCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"thatseant"},"content":"package seedu.ezmanager.commands.task;"},{"lineNumber":2,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":3,"author":{"gitId":"thatseant"},"content":"import org.junit.jupiter.api.BeforeAll;"},{"lineNumber":4,"author":{"gitId":"thatseant"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.EzExceptions;"},{"lineNumber":6,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.project.Project;"},{"lineNumber":7,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.task.Task;"},{"lineNumber":8,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":9,"author":{"gitId":"thatseant"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitId":"thatseant"},"content":"import java.util.HashMap;"},{"lineNumber":11,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":12,"author":{"gitId":"thatseant"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":13,"author":{"gitId":"thatseant"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":14,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":15,"author":{"gitId":"thatseant"},"content":"class ActualTimeCommandTest {"},{"lineNumber":16,"author":{"gitId":"thatseant"},"content":"    static ArrayList\u003cProject\u003e projects;"},{"lineNumber":17,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":18,"author":{"gitId":"thatseant"},"content":"    @BeforeAll"},{"lineNumber":19,"author":{"gitId":"thatseant"},"content":"    static void createProjectsTasks() {"},{"lineNumber":20,"author":{"gitId":"thatseant"},"content":"        projects \u003d new ArrayList\u003c\u003e();"},{"lineNumber":21,"author":{"gitId":"thatseant"},"content":"        Project projectOne \u003d new Project(\"Drink Water\");"},{"lineNumber":22,"author":{"gitId":"thatseant"},"content":"        projects.add(projectOne);"},{"lineNumber":23,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":24,"author":{"gitId":"thatseant"},"content":"        Project projectTwo \u003d new Project(\"Fire\");"},{"lineNumber":25,"author":{"gitId":"thatseant"},"content":"        Task taskOne \u003d new Task(\"test1\");"},{"lineNumber":26,"author":{"gitId":"thatseant"},"content":"        Task taskTwo \u003d new Task(\"test2\");"},{"lineNumber":27,"author":{"gitId":"thatseant"},"content":"        taskTwo.markAsDone();"},{"lineNumber":28,"author":{"gitId":"thatseant"},"content":"        projectTwo.addTask(taskOne);"},{"lineNumber":29,"author":{"gitId":"thatseant"},"content":"        projectTwo.addTask(taskTwo);"},{"lineNumber":30,"author":{"gitId":"thatseant"},"content":"        projects.add(projectTwo);"},{"lineNumber":31,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":32,"author":{"gitId":"thatseant"},"content":"        Project projectThree \u003d new Project(\"CS2113 Tutorial\");"},{"lineNumber":33,"author":{"gitId":"thatseant"},"content":"        projects.add(projectThree);"},{"lineNumber":34,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":36,"author":{"gitId":"thatseant"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"thatseant"},"content":"    void executeCommand_validIndexAndDone_addActualTime() throws EzExceptions {"},{"lineNumber":38,"author":{"gitId":"thatseant"},"content":"        HashMap\u003cString, String\u003e params \u003d new HashMap\u003c\u003e();"},{"lineNumber":39,"author":{"gitId":"thatseant"},"content":"        params.put(\"t\", \"2\");"},{"lineNumber":40,"author":{"gitId":"thatseant"},"content":"        params.put(\"h\", \"4\");"},{"lineNumber":41,"author":{"gitId":"thatseant"},"content":"        params.put(\"m\", \"3\");"},{"lineNumber":42,"author":{"gitId":"thatseant"},"content":"        ActualTimeCommand newCommand \u003d new ActualTimeCommand(params, 1);"},{"lineNumber":43,"author":{"gitId":"thatseant"},"content":"        String actualOutput \u003d newCommand.executeCommand(projects, new ArrayList\u003c\u003e());"},{"lineNumber":44,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":45,"author":{"gitId":"thatseant"},"content":"        String expectedOutput \u003d \"Task \\\"test2\\\" took 4 hours and 3 minutes to be completed.\";"},{"lineNumber":46,"author":{"gitId":"thatseant"},"content":"        assertEquals(expectedOutput, actualOutput);"},{"lineNumber":47,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":49,"author":{"gitId":"thatseant"},"content":"    @Test"},{"lineNumber":50,"author":{"gitId":"thatseant"},"content":"    void executeCommand_invalidTaskIndex_invalidIdException() throws EzExceptions {"},{"lineNumber":51,"author":{"gitId":"thatseant"},"content":"        HashMap\u003cString, String\u003e params \u003d new HashMap\u003c\u003e();"},{"lineNumber":52,"author":{"gitId":"thatseant"},"content":"        params.put(\"t\", \"5\");"},{"lineNumber":53,"author":{"gitId":"thatseant"},"content":"        params.put(\"h\", \"4\");"},{"lineNumber":54,"author":{"gitId":"thatseant"},"content":"        params.put(\"m\", \"3\");"},{"lineNumber":55,"author":{"gitId":"thatseant"},"content":"        ActualTimeCommand newCommand \u003d new ActualTimeCommand(params, 1);"},{"lineNumber":56,"author":{"gitId":"thatseant"},"content":"        Throwable actualOutputException \u003d assertThrows(EzExceptions.class,"},{"lineNumber":57,"author":{"gitId":"thatseant"},"content":"            () -\u003e newCommand.executeCommand(projects, new ArrayList\u003c\u003e()));"},{"lineNumber":58,"author":{"gitId":"thatseant"},"content":"        String expectedOutput \u003d \"Task ID does not exist!\";"},{"lineNumber":59,"author":{"gitId":"thatseant"},"content":"        assertEquals(expectedOutput, actualOutputException.toString());"},{"lineNumber":60,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":62,"author":{"gitId":"thatseant"},"content":"    @Test"},{"lineNumber":63,"author":{"gitId":"thatseant"},"content":"    void executeCommand_taskNotDone_notDoneException() throws EzExceptions {"},{"lineNumber":64,"author":{"gitId":"thatseant"},"content":"        HashMap\u003cString, String\u003e params \u003d new HashMap\u003c\u003e();"},{"lineNumber":65,"author":{"gitId":"thatseant"},"content":"        params.put(\"t\", \"1\");"},{"lineNumber":66,"author":{"gitId":"thatseant"},"content":"        params.put(\"h\", \"4\");"},{"lineNumber":67,"author":{"gitId":"thatseant"},"content":"        params.put(\"m\", \"3\");"},{"lineNumber":68,"author":{"gitId":"thatseant"},"content":"        ActualTimeCommand newCommand \u003d new ActualTimeCommand(params, 1);"},{"lineNumber":69,"author":{"gitId":"thatseant"},"content":"        Throwable actualOutputException \u003d assertThrows(EzExceptions.class,"},{"lineNumber":70,"author":{"gitId":"thatseant"},"content":"            () -\u003e newCommand.executeCommand(projects, new ArrayList\u003c\u003e()));"},{"lineNumber":71,"author":{"gitId":"thatseant"},"content":"        String expectedOutput \u003d \"Task must be marked as done before adding actual duration taken to complete!\";"},{"lineNumber":72,"author":{"gitId":"thatseant"},"content":"        assertEquals(expectedOutput, actualOutputException.toString());"},{"lineNumber":73,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":75,"author":{"gitId":"thatseant"},"content":"}"}],"authorContributionMap":{"thatseant":75}},{"path":"src/test/java/seedu/ezmanager/commands/task/EstimatedTimeCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"thatseant"},"content":"package seedu.ezmanager.commands.task;"},{"lineNumber":2,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":3,"author":{"gitId":"thatseant"},"content":"import org.junit.jupiter.api.BeforeAll;"},{"lineNumber":4,"author":{"gitId":"thatseant"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.EzExceptions;"},{"lineNumber":6,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.project.Project;"},{"lineNumber":7,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.task.Task;"},{"lineNumber":8,"author":{"gitId":"thatseant"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"thatseant"},"content":"import java.util.HashMap;"},{"lineNumber":10,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":11,"author":{"gitId":"thatseant"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":12,"author":{"gitId":"thatseant"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":13,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":14,"author":{"gitId":"thatseant"},"content":"class EstimatedTimeCommandTest {"},{"lineNumber":15,"author":{"gitId":"thatseant"},"content":"    static ArrayList\u003cProject\u003e projects;"},{"lineNumber":16,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":17,"author":{"gitId":"thatseant"},"content":"    @BeforeAll"},{"lineNumber":18,"author":{"gitId":"thatseant"},"content":"    static void createProjectsTasks() {"},{"lineNumber":19,"author":{"gitId":"thatseant"},"content":"        projects \u003d new ArrayList\u003c\u003e();"},{"lineNumber":20,"author":{"gitId":"thatseant"},"content":"        Project projectOne \u003d new Project(\"Drink Water\");"},{"lineNumber":21,"author":{"gitId":"thatseant"},"content":"        Project projectTwo \u003d new Project(\"Fire\");"},{"lineNumber":22,"author":{"gitId":"thatseant"},"content":"        Task taskOne \u003d new Task(\"test1\");"},{"lineNumber":23,"author":{"gitId":"thatseant"},"content":"        Task taskTwo \u003d new Task(\"test2\");"},{"lineNumber":24,"author":{"gitId":"thatseant"},"content":"        projectTwo.addTask(taskOne);"},{"lineNumber":25,"author":{"gitId":"thatseant"},"content":"        projectTwo.addTask(taskTwo);"},{"lineNumber":26,"author":{"gitId":"thatseant"},"content":"        Project projectThree \u003d new Project(\"CS2113 Tutorial\");"},{"lineNumber":27,"author":{"gitId":"thatseant"},"content":"        projects.add(projectOne);"},{"lineNumber":28,"author":{"gitId":"thatseant"},"content":"        projects.add(projectTwo);"},{"lineNumber":29,"author":{"gitId":"thatseant"},"content":"        projects.add(projectThree);"},{"lineNumber":30,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":32,"author":{"gitId":"thatseant"},"content":"    @Test"},{"lineNumber":33,"author":{"gitId":"thatseant"},"content":"    void executeCommand_validTaskIndex_addEstimatedTime() throws EzExceptions {"},{"lineNumber":34,"author":{"gitId":"thatseant"},"content":"        HashMap\u003cString, String\u003e params \u003d new HashMap\u003c\u003e();"},{"lineNumber":35,"author":{"gitId":"thatseant"},"content":"        params.put(\"t\", \"2\");"},{"lineNumber":36,"author":{"gitId":"thatseant"},"content":"        params.put(\"h\", \"4\");"},{"lineNumber":37,"author":{"gitId":"thatseant"},"content":"        params.put(\"m\", \"3\");"},{"lineNumber":38,"author":{"gitId":"thatseant"},"content":"        EstimatedTimeCommand newCommand \u003d new EstimatedTimeCommand(params, 1);"},{"lineNumber":39,"author":{"gitId":"thatseant"},"content":"        String actualOutput \u003d newCommand.executeCommand(projects, new ArrayList\u003c\u003e());"},{"lineNumber":40,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":41,"author":{"gitId":"thatseant"},"content":"        String expectedOutput \u003d \"Task \\\"test2\\\" has estimated time of 4 hours and 3 minutes\";"},{"lineNumber":42,"author":{"gitId":"thatseant"},"content":"        assertEquals(expectedOutput, actualOutput);"},{"lineNumber":43,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":45,"author":{"gitId":"thatseant"},"content":"    @Test"},{"lineNumber":46,"author":{"gitId":"thatseant"},"content":"    void executeCommand_invalidTaskIndex_invalidIdException() throws EzExceptions {"},{"lineNumber":47,"author":{"gitId":"thatseant"},"content":"        HashMap\u003cString, String\u003e params \u003d new HashMap\u003c\u003e();"},{"lineNumber":48,"author":{"gitId":"thatseant"},"content":"        params.put(\"t\", \"5\");"},{"lineNumber":49,"author":{"gitId":"thatseant"},"content":"        params.put(\"h\", \"4\");"},{"lineNumber":50,"author":{"gitId":"thatseant"},"content":"        params.put(\"m\", \"3\");"},{"lineNumber":51,"author":{"gitId":"thatseant"},"content":"        EstimatedTimeCommand newCommand \u003d new EstimatedTimeCommand(params, 1);"},{"lineNumber":52,"author":{"gitId":"thatseant"},"content":"        Throwable actualOutputException \u003d assertThrows(EzExceptions.class,"},{"lineNumber":53,"author":{"gitId":"thatseant"},"content":"            () -\u003e newCommand.executeCommand(projects, new ArrayList\u003c\u003e()));"},{"lineNumber":54,"author":{"gitId":"thatseant"},"content":"        String expectedOutput \u003d \"Task ID does not exist!\";"},{"lineNumber":55,"author":{"gitId":"thatseant"},"content":"        assertEquals(expectedOutput, actualOutputException.toString());"},{"lineNumber":56,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":58,"author":{"gitId":"thatseant"},"content":"}"}],"authorContributionMap":{"thatseant":58}},{"path":"src/test/java/seedu/ezmanager/commands/task/TaskAssignDeadlineCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"thatseant"},"content":"package seedu.ezmanager.commands.task;"},{"lineNumber":2,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":3,"author":{"gitId":"thatseant"},"content":"import org.junit.jupiter.api.BeforeAll;"},{"lineNumber":4,"author":{"gitId":"thatseant"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.EzExceptions;"},{"lineNumber":6,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.project.Project;"},{"lineNumber":7,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.task.Task;"},{"lineNumber":8,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":9,"author":{"gitId":"thatseant"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitId":"thatseant"},"content":"import java.util.HashMap;"},{"lineNumber":11,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":12,"author":{"gitId":"thatseant"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":13,"author":{"gitId":"thatseant"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":14,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":15,"author":{"gitId":"thatseant"},"content":"class TaskAssignDeadlineCommandTest {"},{"lineNumber":16,"author":{"gitId":"thatseant"},"content":"    static ArrayList\u003cProject\u003e projects;"},{"lineNumber":17,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":18,"author":{"gitId":"thatseant"},"content":"    @BeforeAll"},{"lineNumber":19,"author":{"gitId":"thatseant"},"content":"    static void createProjectsTasks() {"},{"lineNumber":20,"author":{"gitId":"thatseant"},"content":"        projects \u003d new ArrayList\u003c\u003e();"},{"lineNumber":21,"author":{"gitId":"thatseant"},"content":"        Project projectOne \u003d new Project(\"Drink Water\");"},{"lineNumber":22,"author":{"gitId":"thatseant"},"content":"        projects.add(projectOne);"},{"lineNumber":23,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":24,"author":{"gitId":"thatseant"},"content":"        Project projectTwo \u003d new Project(\"Fire\");"},{"lineNumber":25,"author":{"gitId":"thatseant"},"content":"        Task taskOne \u003d new Task(\"test1\");"},{"lineNumber":26,"author":{"gitId":"thatseant"},"content":"        Task taskTwo \u003d new Task(\"test2\");"},{"lineNumber":27,"author":{"gitId":"thatseant"},"content":"        projectTwo.addTask(taskOne);"},{"lineNumber":28,"author":{"gitId":"thatseant"},"content":"        projectTwo.addTask(taskTwo);"},{"lineNumber":29,"author":{"gitId":"thatseant"},"content":"        projects.add(projectTwo);"},{"lineNumber":30,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":31,"author":{"gitId":"thatseant"},"content":"        Project projectThree \u003d new Project(\"CS2113 Tutorial\");"},{"lineNumber":32,"author":{"gitId":"thatseant"},"content":"        projects.add(projectThree);"},{"lineNumber":33,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":35,"author":{"gitId":"thatseant"},"content":"    @Test"},{"lineNumber":36,"author":{"gitId":"thatseant"},"content":"    void executeCommand_correctDateFormat_addDeadline() throws EzExceptions {"},{"lineNumber":37,"author":{"gitId":"thatseant"},"content":"        HashMap\u003cString, String\u003e params \u003d new HashMap\u003c\u003e();"},{"lineNumber":38,"author":{"gitId":"thatseant"},"content":"        params.put(\"d\", \"2020-09-12\");"},{"lineNumber":39,"author":{"gitId":"thatseant"},"content":"        params.put(\"t\", \"2\");"},{"lineNumber":40,"author":{"gitId":"thatseant"},"content":"        TaskAssignDeadlineCommand newCommand \u003d new TaskAssignDeadlineCommand(params, 1);"},{"lineNumber":41,"author":{"gitId":"thatseant"},"content":"        String actualOutput \u003d newCommand.executeCommand(projects, new ArrayList\u003c\u003e());"},{"lineNumber":42,"author":{"gitId":"thatseant"},"content":"        String expectedOutput \u003d \"Deadline 12/09/2020 added to Task test2\";"},{"lineNumber":43,"author":{"gitId":"thatseant"},"content":"        assertEquals(expectedOutput, actualOutput);"},{"lineNumber":44,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":46,"author":{"gitId":"thatseant"},"content":"    @Test"},{"lineNumber":47,"author":{"gitId":"thatseant"},"content":"    void executeCommand_wrongDateFormat_DateTimeException() throws EzExceptions {"},{"lineNumber":48,"author":{"gitId":"thatseant"},"content":"        HashMap\u003cString, String\u003e params \u003d new HashMap\u003c\u003e();"},{"lineNumber":49,"author":{"gitId":"thatseant"},"content":"        params.put(\"d\", \"2020-09-1\");"},{"lineNumber":50,"author":{"gitId":"thatseant"},"content":"        params.put(\"t\", \"2\");"},{"lineNumber":51,"author":{"gitId":"thatseant"},"content":"        Throwable actualOutputException \u003d assertThrows(EzExceptions.class,"},{"lineNumber":52,"author":{"gitId":"thatseant"},"content":"            () -\u003e new TaskAssignDeadlineCommand(params, 1));"},{"lineNumber":53,"author":{"gitId":"thatseant"},"content":"        String expectedOutput \u003d \"Date must be specified in format YYYY-MM-DD\";"},{"lineNumber":54,"author":{"gitId":"thatseant"},"content":"        assertEquals(expectedOutput, actualOutputException.toString());"},{"lineNumber":55,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"thatseant"},"content":"}"}],"authorContributionMap":{"thatseant":56}},{"path":"src/test/java/seedu/ezmanager/commands/task/TaskAssignPriorityCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"thatseant"},"content":"package seedu.ezmanager.commands.task;"},{"lineNumber":2,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":3,"author":{"gitId":"riazaham"},"content":"import org.junit.jupiter.api.BeforeAll;"},{"lineNumber":4,"author":{"gitId":"riazaham"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.EzExceptions;"},{"lineNumber":6,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.member.TeamMember;"},{"lineNumber":7,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.project.Project;"},{"lineNumber":8,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.task.Task;"},{"lineNumber":9,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.ui.Ui;"},{"lineNumber":10,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":11,"author":{"gitId":"riazaham"},"content":"import java.util.ArrayList;"},{"lineNumber":12,"author":{"gitId":"riazaham"},"content":"import java.util.HashMap;"},{"lineNumber":13,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":14,"author":{"gitId":"riazaham"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":15,"author":{"gitId":"riazaham"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":16,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":17,"author":{"gitId":"riazaham"},"content":"class TaskAssignPriorityCommandTest {"},{"lineNumber":18,"author":{"gitId":"riazaham"},"content":"    static ArrayList\u003cProject\u003e projects;"},{"lineNumber":19,"author":{"gitId":"riazaham"},"content":"    static ArrayList\u003cTeamMember\u003e teamMembers;"},{"lineNumber":20,"author":{"gitId":"riazaham"},"content":"    static HashMap\u003cString, String\u003e params;"},{"lineNumber":21,"author":{"gitId":"riazaham"},"content":"    static Ui ui \u003d new Ui();"},{"lineNumber":22,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":23,"author":{"gitId":"riazaham"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"riazaham"},"content":"     * Create 1 projects list"},{"lineNumber":25,"author":{"gitId":"riazaham"},"content":"     * Create 1 project."},{"lineNumber":26,"author":{"gitId":"riazaham"},"content":"     * Create 3 tasks."},{"lineNumber":27,"author":{"gitId":"riazaham"},"content":"     * Add the 3 tasks to that project."},{"lineNumber":28,"author":{"gitId":"riazaham"},"content":"     * Add that project to projects list."},{"lineNumber":29,"author":{"gitId":"riazaham"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"riazaham"},"content":"    @BeforeAll"},{"lineNumber":31,"author":{"gitId":"riazaham"},"content":"    static void testSetup() {"},{"lineNumber":32,"author":{"gitId":"riazaham"},"content":"        params \u003d new HashMap\u003c\u003e();"},{"lineNumber":33,"author":{"gitId":"riazaham"},"content":"        teamMembers \u003d new ArrayList\u003c\u003e();"},{"lineNumber":34,"author":{"gitId":"riazaham"},"content":"        projects \u003d new ArrayList\u003c\u003e();"},{"lineNumber":35,"author":{"gitId":"riazaham"},"content":"        Project projectOne \u003d new Project(\"Project One\");"},{"lineNumber":36,"author":{"gitId":"riazaham"},"content":"        Task taskOne \u003d new Task(\"Task One\");"},{"lineNumber":37,"author":{"gitId":"riazaham"},"content":"        Task taskTwo \u003d new Task(\"Task Two\");"},{"lineNumber":38,"author":{"gitId":"riazaham"},"content":"        Task taskThree \u003d new Task(\"Task Three\");"},{"lineNumber":39,"author":{"gitId":"riazaham"},"content":"        projectOne.addTask(taskOne);"},{"lineNumber":40,"author":{"gitId":"riazaham"},"content":"        projectOne.addTask(taskTwo);"},{"lineNumber":41,"author":{"gitId":"riazaham"},"content":"        projectOne.addTask(taskThree);"},{"lineNumber":42,"author":{"gitId":"riazaham"},"content":"        projects.add(projectOne);"},{"lineNumber":43,"author":{"gitId":"riazaham"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":45,"author":{"gitId":"riazaham"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"riazaham"},"content":"     * Test: Assign priority HIGH to first task."},{"lineNumber":47,"author":{"gitId":"riazaham"},"content":"     * Check for message."},{"lineNumber":48,"author":{"gitId":"riazaham"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"riazaham"},"content":"    @Test"},{"lineNumber":50,"author":{"gitId":"thatseant"},"content":"    void executeCommand_validPriorityAndTaskId_priorityAssignedToTask() throws EzExceptions {"},{"lineNumber":51,"author":{"gitId":"shreytheshreyas"},"content":"        params.put(\"p\", \"3\");"},{"lineNumber":52,"author":{"gitId":"riazaham"},"content":"        params.put(\"t\", \"1\");"},{"lineNumber":53,"author":{"gitId":"riazaham"},"content":"        TaskAssignPriorityCommand command \u003d new TaskAssignPriorityCommand(params, 0);"},{"lineNumber":54,"author":{"gitId":"shreytheshreyas"},"content":"        String expectedOutput \u003d Ui.printPriorityAssignedToTaskMessage(3, \"Task One\");"},{"lineNumber":55,"author":{"gitId":"riazaham"},"content":"        String actualOutput \u003d command.executeCommand(projects, teamMembers);"},{"lineNumber":56,"author":{"gitId":"riazaham"},"content":"        assertEquals(expectedOutput, actualOutput);"},{"lineNumber":57,"author":{"gitId":"riazaham"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":59,"author":{"gitId":"riazaham"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"riazaham"},"content":"     * Test: Assign priority HIGH to non existent task."},{"lineNumber":61,"author":{"gitId":"riazaham"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"riazaham"},"content":"    @Test"},{"lineNumber":63,"author":{"gitId":"thatseant"},"content":"    void executeCommand_nonExistentTaskId_invalidTaskId() throws EzExceptions {"},{"lineNumber":64,"author":{"gitId":"thatseant"},"content":"        params.put(\"p\", \"1\");"},{"lineNumber":65,"author":{"gitId":"riazaham"},"content":"        params.put(\"t\", \"5\");"},{"lineNumber":66,"author":{"gitId":"riazaham"},"content":"        TaskAssignPriorityCommand command \u003d new TaskAssignPriorityCommand(params, 0);"},{"lineNumber":67,"author":{"gitId":"riazaham"},"content":"        String expectedOutput \u003d \"Task ID does not exist!\";"},{"lineNumber":68,"author":{"gitId":"thatseant"},"content":"        EzExceptions exception \u003d assertThrows(EzExceptions.class, () -\u003e"},{"lineNumber":69,"author":{"gitId":"riazaham"},"content":"                command.executeCommand(projects, teamMembers));"},{"lineNumber":70,"author":{"gitId":"riazaham"},"content":"        assertEquals(expectedOutput, exception.toString());"},{"lineNumber":71,"author":{"gitId":"riazaham"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":73,"author":{"gitId":"riazaham"},"content":"}"}],"authorContributionMap":{"thatseant":10,"shreytheshreyas":2,"riazaham":61}},{"path":"src/test/java/seedu/ezmanager/commands/task/TaskCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"thatseant"},"content":"package seedu.ezmanager.commands.task;"},{"lineNumber":2,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":3,"author":{"gitId":"thatseant"},"content":"import org.junit.jupiter.api.BeforeAll;"},{"lineNumber":4,"author":{"gitId":"thatseant"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.EzExceptions;"},{"lineNumber":6,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.project.Project;"},{"lineNumber":7,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.task.Task;"},{"lineNumber":8,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":9,"author":{"gitId":"thatseant"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitId":"thatseant"},"content":"import java.util.HashMap;"},{"lineNumber":11,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":12,"author":{"gitId":"thatseant"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":13,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":14,"author":{"gitId":"thatseant"},"content":"class TaskCommandTest {"},{"lineNumber":15,"author":{"gitId":"thatseant"},"content":"    static ArrayList\u003cProject\u003e projects;"},{"lineNumber":16,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":17,"author":{"gitId":"thatseant"},"content":"    @BeforeAll"},{"lineNumber":18,"author":{"gitId":"thatseant"},"content":"    static void createProjectList() {"},{"lineNumber":19,"author":{"gitId":"thatseant"},"content":"        projects \u003d new ArrayList\u003c\u003e();"},{"lineNumber":20,"author":{"gitId":"thatseant"},"content":"        Project projectOne \u003d new Project(\"Drink Water\");"},{"lineNumber":21,"author":{"gitId":"thatseant"},"content":"        projects.add(projectOne);"},{"lineNumber":22,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":23,"author":{"gitId":"thatseant"},"content":"        Project projectTwo \u003d new Project(\"Fire\");"},{"lineNumber":24,"author":{"gitId":"thatseant"},"content":"        Task taskOne \u003d new Task(\"test1\");"},{"lineNumber":25,"author":{"gitId":"thatseant"},"content":"        Task taskTwo \u003d new Task(\"test2\");"},{"lineNumber":26,"author":{"gitId":"thatseant"},"content":"        projectTwo.addTask(taskOne);"},{"lineNumber":27,"author":{"gitId":"thatseant"},"content":"        projectTwo.addTask(taskTwo);"},{"lineNumber":28,"author":{"gitId":"thatseant"},"content":"        projects.add(projectTwo);"},{"lineNumber":29,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":30,"author":{"gitId":"thatseant"},"content":"        Project projectThree \u003d new Project(\"CS2113 Tutorial\");"},{"lineNumber":31,"author":{"gitId":"thatseant"},"content":"        projects.add(projectThree);"},{"lineNumber":32,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":34,"author":{"gitId":"thatseant"},"content":"    @Test"},{"lineNumber":35,"author":{"gitId":"thatseant"},"content":"    void executeCommand_existingTasks_taskCreated() throws EzExceptions {"},{"lineNumber":36,"author":{"gitId":"thatseant"},"content":"        HashMap\u003cString, String\u003e params \u003d new HashMap\u003c\u003e();"},{"lineNumber":37,"author":{"gitId":"thatseant"},"content":"        params.put(\"n\", \"Task 3\");"},{"lineNumber":38,"author":{"gitId":"thatseant"},"content":"        TaskCommand createTask \u003d new TaskCommand(params, 1);"},{"lineNumber":39,"author":{"gitId":"thatseant"},"content":"        String actualOutput \u003d createTask.executeCommand(projects, new ArrayList\u003c\u003e());"},{"lineNumber":40,"author":{"gitId":"thatseant"},"content":"        String expectedOutput \u003d \"Task \\\"Task 3\\\" created!\";"},{"lineNumber":41,"author":{"gitId":"thatseant"},"content":"        assertEquals(expectedOutput, actualOutput);"},{"lineNumber":42,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"thatseant"},"content":"}"}],"authorContributionMap":{"thatseant":43}},{"path":"src/test/java/seedu/ezmanager/commands/task/TaskDeleteCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"thatseant"},"content":"package seedu.ezmanager.commands.task;"},{"lineNumber":2,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":3,"author":{"gitId":"riazaham"},"content":"import org.junit.jupiter.api.BeforeAll;"},{"lineNumber":4,"author":{"gitId":"riazaham"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.EzExceptions;"},{"lineNumber":6,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.member.TeamMember;"},{"lineNumber":7,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.project.Project;"},{"lineNumber":8,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.task.Task;"},{"lineNumber":9,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":10,"author":{"gitId":"riazaham"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitId":"riazaham"},"content":"import java.util.HashMap;"},{"lineNumber":12,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":13,"author":{"gitId":"riazaham"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":14,"author":{"gitId":"riazaham"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":15,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":16,"author":{"gitId":"riazaham"},"content":"class TaskDeleteCommandTest {"},{"lineNumber":17,"author":{"gitId":"riazaham"},"content":"    static ArrayList\u003cProject\u003e projects;"},{"lineNumber":18,"author":{"gitId":"riazaham"},"content":"    static ArrayList\u003cTeamMember\u003e teamMembers;"},{"lineNumber":19,"author":{"gitId":"riazaham"},"content":"    static HashMap\u003cString, String\u003e params;"},{"lineNumber":20,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":21,"author":{"gitId":"riazaham"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"riazaham"},"content":"     * Create 1 projects list"},{"lineNumber":23,"author":{"gitId":"riazaham"},"content":"     * Create 1 project."},{"lineNumber":24,"author":{"gitId":"riazaham"},"content":"     * Create 3 tasks."},{"lineNumber":25,"author":{"gitId":"riazaham"},"content":"     * Add the 3 tasks to that project."},{"lineNumber":26,"author":{"gitId":"riazaham"},"content":"     * Add that project to projects list."},{"lineNumber":27,"author":{"gitId":"riazaham"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"riazaham"},"content":"    @BeforeAll"},{"lineNumber":29,"author":{"gitId":"riazaham"},"content":"    static void testSetup() {"},{"lineNumber":30,"author":{"gitId":"riazaham"},"content":"        params \u003d new HashMap\u003c\u003e();"},{"lineNumber":31,"author":{"gitId":"riazaham"},"content":"        teamMembers \u003d new ArrayList\u003c\u003e();"},{"lineNumber":32,"author":{"gitId":"riazaham"},"content":"        projects \u003d new ArrayList\u003c\u003e();"},{"lineNumber":33,"author":{"gitId":"riazaham"},"content":"        Project projectOne \u003d new Project(\"Project One\");"},{"lineNumber":34,"author":{"gitId":"riazaham"},"content":"        Task taskOne \u003d new Task(\"Task One\");"},{"lineNumber":35,"author":{"gitId":"riazaham"},"content":"        Task taskTwo \u003d new Task(\"Task Two\");"},{"lineNumber":36,"author":{"gitId":"riazaham"},"content":"        Task taskThree \u003d new Task(\"Task Three\");"},{"lineNumber":37,"author":{"gitId":"riazaham"},"content":"        projectOne.addTask(taskOne);"},{"lineNumber":38,"author":{"gitId":"riazaham"},"content":"        projectOne.addTask(taskTwo);"},{"lineNumber":39,"author":{"gitId":"riazaham"},"content":"        projectOne.addTask(taskThree);"},{"lineNumber":40,"author":{"gitId":"riazaham"},"content":"        projects.add(projectOne);"},{"lineNumber":41,"author":{"gitId":"riazaham"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":43,"author":{"gitId":"riazaham"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"riazaham"},"content":"     * Test: Delete the first task from the first project."},{"lineNumber":45,"author":{"gitId":"riazaham"},"content":"     * Check for message."},{"lineNumber":46,"author":{"gitId":"riazaham"},"content":"     * Check if task has been deleted from task list by checking task list length;"},{"lineNumber":47,"author":{"gitId":"riazaham"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"riazaham"},"content":"    @Test"},{"lineNumber":49,"author":{"gitId":"thatseant"},"content":"    void executeCommand_validTaskId_taskDescription() throws EzExceptions {"},{"lineNumber":50,"author":{"gitId":"riazaham"},"content":"        params.put(\"t\", \"1\");"},{"lineNumber":51,"author":{"gitId":"riazaham"},"content":"        TaskDeleteCommand command \u003d new TaskDeleteCommand(params,0);"},{"lineNumber":52,"author":{"gitId":"riazaham"},"content":"        String expectedOutput0 \u003d \"Task \\\"Task One\\\" removed!\";"},{"lineNumber":53,"author":{"gitId":"riazaham"},"content":"        String actualOutput0 \u003d command.executeCommand(projects, teamMembers);"},{"lineNumber":54,"author":{"gitId":"riazaham"},"content":"        assertEquals(expectedOutput0, actualOutput0);"},{"lineNumber":55,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":56,"author":{"gitId":"riazaham"},"content":"        int expectedOutput1 \u003d 2;"},{"lineNumber":57,"author":{"gitId":"riazaham"},"content":"        int actualOutput1 \u003d projects.get(0).getTaskList().size();"},{"lineNumber":58,"author":{"gitId":"riazaham"},"content":"        assertEquals(expectedOutput1, actualOutput1);"},{"lineNumber":59,"author":{"gitId":"riazaham"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":61,"author":{"gitId":"riazaham"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"riazaham"},"content":"     * Test: Input a non-existent task ID to test exception error message."},{"lineNumber":63,"author":{"gitId":"riazaham"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"riazaham"},"content":"    @Test"},{"lineNumber":65,"author":{"gitId":"thatseant"},"content":"    void executeCommand_nonExistentTaskId_taskDescription() throws EzExceptions {"},{"lineNumber":66,"author":{"gitId":"riazaham"},"content":"        params.put(\"t\", \"4\");"},{"lineNumber":67,"author":{"gitId":"riazaham"},"content":"        TaskDeleteCommand command \u003d new TaskDeleteCommand(params,0);"},{"lineNumber":68,"author":{"gitId":"riazaham"},"content":"        String expectedOutput \u003d \"Task ID does not exist!\";"},{"lineNumber":69,"author":{"gitId":"thatseant"},"content":"        EzExceptions exception \u003d assertThrows(EzExceptions.class, () -\u003e"},{"lineNumber":70,"author":{"gitId":"riazaham"},"content":"                command.executeCommand(projects, teamMembers));"},{"lineNumber":71,"author":{"gitId":"riazaham"},"content":"        assertEquals(expectedOutput, exception.toString());"},{"lineNumber":72,"author":{"gitId":"riazaham"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":74,"author":{"gitId":"riazaham"},"content":"    /**"},{"lineNumber":75,"author":{"gitId":"riazaham"},"content":"     * Test: Pass a non existent projects list to test exception error message."},{"lineNumber":76,"author":{"gitId":"riazaham"},"content":"     */"},{"lineNumber":77,"author":{"gitId":"riazaham"},"content":"    @Test"},{"lineNumber":78,"author":{"gitId":"thatseant"},"content":"    void executeCommand_nonExistentProjectsList_taskDescription() throws EzExceptions {"},{"lineNumber":79,"author":{"gitId":"riazaham"},"content":"        params.put(\"t\", \"1\");"},{"lineNumber":80,"author":{"gitId":"riazaham"},"content":"        TaskDeleteCommand command \u003d new TaskDeleteCommand(params,0);"},{"lineNumber":81,"author":{"gitId":"riazaham"},"content":"        String expectedOutput \u003d \"Project list is empty!\";"},{"lineNumber":82,"author":{"gitId":"thatseant"},"content":"        EzExceptions exception \u003d assertThrows(EzExceptions.class, () -\u003e"},{"lineNumber":83,"author":{"gitId":"riazaham"},"content":"                command.executeCommand(new ArrayList\u003cProject\u003e(), teamMembers));"},{"lineNumber":84,"author":{"gitId":"riazaham"},"content":"        assertEquals(expectedOutput, exception.toString());"},{"lineNumber":85,"author":{"gitId":"riazaham"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"riazaham"},"content":"}"}],"authorContributionMap":{"thatseant":10,"riazaham":76}},{"path":"src/test/java/seedu/ezmanager/commands/task/TaskDoneCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"thatseant"},"content":"package seedu.ezmanager.commands.task;"},{"lineNumber":2,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":3,"author":{"gitId":"thatseant"},"content":"import org.junit.jupiter.api.BeforeAll;"},{"lineNumber":4,"author":{"gitId":"thatseant"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.EzExceptions;"},{"lineNumber":6,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.project.Project;"},{"lineNumber":7,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.task.Task;"},{"lineNumber":8,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":9,"author":{"gitId":"thatseant"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitId":"thatseant"},"content":"import java.util.HashMap;"},{"lineNumber":11,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":12,"author":{"gitId":"thatseant"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":13,"author":{"gitId":"thatseant"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":14,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":15,"author":{"gitId":"thatseant"},"content":"class TaskDoneCommandTest {"},{"lineNumber":16,"author":{"gitId":"thatseant"},"content":"    static ArrayList\u003cProject\u003e projects;"},{"lineNumber":17,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":18,"author":{"gitId":"thatseant"},"content":"    @BeforeAll"},{"lineNumber":19,"author":{"gitId":"thatseant"},"content":"    static void createProjectsTasks() {"},{"lineNumber":20,"author":{"gitId":"thatseant"},"content":"        projects \u003d new ArrayList\u003c\u003e();"},{"lineNumber":21,"author":{"gitId":"thatseant"},"content":"        Project projectOne \u003d new Project(\"Drink Water\");"},{"lineNumber":22,"author":{"gitId":"thatseant"},"content":"        projects.add(projectOne);"},{"lineNumber":23,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":24,"author":{"gitId":"thatseant"},"content":"        Project projectTwo \u003d new Project(\"Fire\");"},{"lineNumber":25,"author":{"gitId":"thatseant"},"content":"        Task taskOne \u003d new Task(\"test1\");"},{"lineNumber":26,"author":{"gitId":"thatseant"},"content":"        Task taskTwo \u003d new Task(\"test2\");"},{"lineNumber":27,"author":{"gitId":"thatseant"},"content":"        projectTwo.addTask(taskOne);"},{"lineNumber":28,"author":{"gitId":"thatseant"},"content":"        projectTwo.addTask(taskTwo);"},{"lineNumber":29,"author":{"gitId":"thatseant"},"content":"        projects.add(projectTwo);"},{"lineNumber":30,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":31,"author":{"gitId":"thatseant"},"content":"        Project projectThree \u003d new Project(\"CS2113 Tutorial\");"},{"lineNumber":32,"author":{"gitId":"thatseant"},"content":"        projects.add(projectThree);"},{"lineNumber":33,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":35,"author":{"gitId":"thatseant"},"content":"    @Test"},{"lineNumber":36,"author":{"gitId":"thatseant"},"content":"    void executeCommand_validIndex_addActualTime() throws EzExceptions {"},{"lineNumber":37,"author":{"gitId":"thatseant"},"content":"        HashMap\u003cString, String\u003e params \u003d new HashMap\u003c\u003e();"},{"lineNumber":38,"author":{"gitId":"thatseant"},"content":"        params.put(\"t\", \"2\");"},{"lineNumber":39,"author":{"gitId":"thatseant"},"content":"        TaskDoneCommand newCommand \u003d new TaskDoneCommand(params, 1);"},{"lineNumber":40,"author":{"gitId":"thatseant"},"content":"        String actualOutput \u003d newCommand.executeCommand(projects, new ArrayList\u003c\u003e());"},{"lineNumber":41,"author":{"gitId":"thatseant"},"content":"        String expectedOutput \u003d \"Task \\\"test2\\\" is done!\";"},{"lineNumber":42,"author":{"gitId":"thatseant"},"content":"        assertEquals(expectedOutput, actualOutput);"},{"lineNumber":43,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":45,"author":{"gitId":"thatseant"},"content":"    @Test"},{"lineNumber":46,"author":{"gitId":"thatseant"},"content":"    void executeCommand_invalidTaskIndex_invalidIdException() throws EzExceptions {"},{"lineNumber":47,"author":{"gitId":"thatseant"},"content":"        HashMap\u003cString, String\u003e params \u003d new HashMap\u003c\u003e();"},{"lineNumber":48,"author":{"gitId":"thatseant"},"content":"        params.put(\"t\", \"5\");"},{"lineNumber":49,"author":{"gitId":"thatseant"},"content":"        TaskDoneCommand newCommand \u003d new TaskDoneCommand(params, 1);"},{"lineNumber":50,"author":{"gitId":"thatseant"},"content":"        Throwable actualOutputException \u003d assertThrows(EzExceptions.class,"},{"lineNumber":51,"author":{"gitId":"thatseant"},"content":"            () -\u003e newCommand.executeCommand(projects, new ArrayList\u003c\u003e()));"},{"lineNumber":52,"author":{"gitId":"thatseant"},"content":"        String expectedOutput \u003d \"Task ID does not exist!\";"},{"lineNumber":53,"author":{"gitId":"thatseant"},"content":"        assertEquals(expectedOutput, actualOutputException.toString());"},{"lineNumber":54,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":56,"author":{"gitId":"thatseant"},"content":"}"}],"authorContributionMap":{"thatseant":56}},{"path":"src/test/java/seedu/ezmanager/commands/task/TaskEditCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"thatseant"},"content":"package seedu.ezmanager.commands.task;"},{"lineNumber":2,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":3,"author":{"gitId":"riazaham"},"content":"import org.junit.jupiter.api.BeforeAll;"},{"lineNumber":4,"author":{"gitId":"riazaham"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.EzExceptions;"},{"lineNumber":6,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.member.TeamMember;"},{"lineNumber":7,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.project.Project;"},{"lineNumber":8,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.task.Task;"},{"lineNumber":9,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.ui.Ui;"},{"lineNumber":10,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":11,"author":{"gitId":"riazaham"},"content":"import java.util.ArrayList;"},{"lineNumber":12,"author":{"gitId":"riazaham"},"content":"import java.util.HashMap;"},{"lineNumber":13,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":14,"author":{"gitId":"riazaham"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":15,"author":{"gitId":"riazaham"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":16,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":17,"author":{"gitId":"riazaham"},"content":"class TaskEditCommandTest {"},{"lineNumber":18,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":19,"author":{"gitId":"riazaham"},"content":"    static ArrayList\u003cProject\u003e projects;"},{"lineNumber":20,"author":{"gitId":"riazaham"},"content":"    static ArrayList\u003cTeamMember\u003e teamMembers;"},{"lineNumber":21,"author":{"gitId":"riazaham"},"content":"    static HashMap\u003cString, String\u003e params;"},{"lineNumber":22,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":23,"author":{"gitId":"riazaham"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"riazaham"},"content":"     * Create 1 projects list"},{"lineNumber":25,"author":{"gitId":"riazaham"},"content":"     * Create 1 project."},{"lineNumber":26,"author":{"gitId":"riazaham"},"content":"     * Create 3 tasks."},{"lineNumber":27,"author":{"gitId":"riazaham"},"content":"     * Add the 3 tasks to that project."},{"lineNumber":28,"author":{"gitId":"riazaham"},"content":"     * Add that project to projects list."},{"lineNumber":29,"author":{"gitId":"riazaham"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"riazaham"},"content":"    @BeforeAll"},{"lineNumber":31,"author":{"gitId":"riazaham"},"content":"    static void testSetup() {"},{"lineNumber":32,"author":{"gitId":"riazaham"},"content":"        params \u003d new HashMap\u003c\u003e();"},{"lineNumber":33,"author":{"gitId":"riazaham"},"content":"        teamMembers \u003d new ArrayList\u003c\u003e();"},{"lineNumber":34,"author":{"gitId":"riazaham"},"content":"        projects \u003d new ArrayList\u003c\u003e();"},{"lineNumber":35,"author":{"gitId":"riazaham"},"content":"        Project projectOne \u003d new Project(\"Project One\");"},{"lineNumber":36,"author":{"gitId":"riazaham"},"content":"        Task taskOne \u003d new Task(\"Task One\");"},{"lineNumber":37,"author":{"gitId":"riazaham"},"content":"        Task taskTwo \u003d new Task(\"Task Two\");"},{"lineNumber":38,"author":{"gitId":"riazaham"},"content":"        Task taskThree \u003d new Task(\"Task Three\");"},{"lineNumber":39,"author":{"gitId":"riazaham"},"content":"        projectOne.addTask(taskOne);"},{"lineNumber":40,"author":{"gitId":"riazaham"},"content":"        projectOne.addTask(taskTwo);"},{"lineNumber":41,"author":{"gitId":"riazaham"},"content":"        projectOne.addTask(taskThree);"},{"lineNumber":42,"author":{"gitId":"riazaham"},"content":"        projects.add(projectOne);"},{"lineNumber":43,"author":{"gitId":"riazaham"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":45,"author":{"gitId":"riazaham"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"riazaham"},"content":"     * Test: Select the first task from the first project."},{"lineNumber":47,"author":{"gitId":"riazaham"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"riazaham"},"content":"    @Test"},{"lineNumber":49,"author":{"gitId":"thatseant"},"content":"    void executeCommand_validTaskId_taskDescription() throws EzExceptions {"},{"lineNumber":50,"author":{"gitId":"riazaham"},"content":"        params.put(\"t\", \"1\");"},{"lineNumber":51,"author":{"gitId":"riazaham"},"content":"        params.put(\"n\", \"Task One Upgraded\");"},{"lineNumber":52,"author":{"gitId":"riazaham"},"content":"        TaskEditCommand command \u003d new TaskEditCommand(params,0);"},{"lineNumber":53,"author":{"gitId":"riazaham"},"content":"        String expectedOutput \u003d Ui.printTaskNameUpdatedMessage(\"Task One\", \"Task One Upgraded\");"},{"lineNumber":54,"author":{"gitId":"riazaham"},"content":"        String actualOutput \u003d command.executeCommand(projects, teamMembers);"},{"lineNumber":55,"author":{"gitId":"riazaham"},"content":"        assertEquals(expectedOutput, actualOutput);"},{"lineNumber":56,"author":{"gitId":"riazaham"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":58,"author":{"gitId":"riazaham"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"riazaham"},"content":"     * Test: Input a non-existent task ID to test exception error message."},{"lineNumber":60,"author":{"gitId":"riazaham"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"riazaham"},"content":"    @Test"},{"lineNumber":62,"author":{"gitId":"thatseant"},"content":"    void executeCommand_nonExistentTaskId_taskDescription() throws EzExceptions {"},{"lineNumber":63,"author":{"gitId":"riazaham"},"content":"        params.put(\"t\", \"4\");"},{"lineNumber":64,"author":{"gitId":"riazaham"},"content":"        params.put(\"n\", \"Should Not Print This\");"},{"lineNumber":65,"author":{"gitId":"riazaham"},"content":"        TaskEditCommand command \u003d new TaskEditCommand(params,0);"},{"lineNumber":66,"author":{"gitId":"riazaham"},"content":"        String expectedOutput \u003d \"Task ID does not exist!\";"},{"lineNumber":67,"author":{"gitId":"thatseant"},"content":"        EzExceptions exception \u003d assertThrows(EzExceptions.class, () -\u003e"},{"lineNumber":68,"author":{"gitId":"riazaham"},"content":"                command.executeCommand(projects, teamMembers));"},{"lineNumber":69,"author":{"gitId":"riazaham"},"content":"        assertEquals(expectedOutput, exception.toString());"},{"lineNumber":70,"author":{"gitId":"riazaham"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"riazaham"},"content":""},{"lineNumber":72,"author":{"gitId":"riazaham"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"riazaham"},"content":"     * Test: Pass a non existent projects list to test exception error message."},{"lineNumber":74,"author":{"gitId":"riazaham"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"riazaham"},"content":"    @Test"},{"lineNumber":76,"author":{"gitId":"thatseant"},"content":"    void executeCommand_nonExistentProjectsList_taskDescription() throws EzExceptions {"},{"lineNumber":77,"author":{"gitId":"riazaham"},"content":"        params.put(\"t\", \"1\");"},{"lineNumber":78,"author":{"gitId":"riazaham"},"content":"        params.put(\"n\", \"Should Not Print This\");"},{"lineNumber":79,"author":{"gitId":"riazaham"},"content":"        TaskEditCommand command \u003d new TaskEditCommand(params,0);"},{"lineNumber":80,"author":{"gitId":"riazaham"},"content":"        String expectedOutput \u003d \"Project list is empty!\";"},{"lineNumber":81,"author":{"gitId":"thatseant"},"content":"        EzExceptions exception \u003d assertThrows(EzExceptions.class, () -\u003e"},{"lineNumber":82,"author":{"gitId":"riazaham"},"content":"                command.executeCommand(new ArrayList\u003cProject\u003e(), teamMembers));"},{"lineNumber":83,"author":{"gitId":"riazaham"},"content":"        assertEquals(expectedOutput, exception.toString());"},{"lineNumber":84,"author":{"gitId":"riazaham"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"riazaham"},"content":"}"}],"authorContributionMap":{"thatseant":11,"riazaham":74}},{"path":"src/test/java/seedu/ezmanager/commands/task/TaskSortCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"thatseant"},"content":"package seedu.ezmanager.commands.task;"},{"lineNumber":2,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":3,"author":{"gitId":"shreytheshreyas"},"content":"import org.junit.jupiter.api.BeforeAll;"},{"lineNumber":4,"author":{"gitId":"shreytheshreyas"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.EzExceptions;"},{"lineNumber":6,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.member.TeamMember;"},{"lineNumber":7,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.project.Project;"},{"lineNumber":8,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.task.Task;"},{"lineNumber":9,"author":{"gitId":"thatseant"},"content":"import seedu.ezmanager.ui.Ui;"},{"lineNumber":10,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":11,"author":{"gitId":"shreytheshreyas"},"content":"import java.time.LocalDate;"},{"lineNumber":12,"author":{"gitId":"shreytheshreyas"},"content":"import java.util.ArrayList;"},{"lineNumber":13,"author":{"gitId":"thatseant"},"content":"import java.util.HashMap;"},{"lineNumber":14,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":15,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":16,"author":{"gitId":"shreytheshreyas"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":17,"author":{"gitId":"shreytheshreyas"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":18,"author":{"gitId":"shreytheshreyas"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":19,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":20,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":21,"author":{"gitId":"shreytheshreyas"},"content":"public class TaskSortCommandTest {"},{"lineNumber":22,"author":{"gitId":"shreytheshreyas"},"content":"    static ArrayList\u003cProject\u003e projects;"},{"lineNumber":23,"author":{"gitId":"shreytheshreyas"},"content":"    static ArrayList\u003cTeamMember\u003e teamMembers;"},{"lineNumber":24,"author":{"gitId":"shreytheshreyas"},"content":"    static Ui ui \u003d new Ui();"},{"lineNumber":25,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":26,"author":{"gitId":"shreytheshreyas"},"content":"    @BeforeAll"},{"lineNumber":27,"author":{"gitId":"shreytheshreyas"},"content":"    static void createProjectL() {"},{"lineNumber":28,"author":{"gitId":"shreytheshreyas"},"content":"        projects \u003d new ArrayList\u003c\u003e();"},{"lineNumber":29,"author":{"gitId":"shreytheshreyas"},"content":"        Project projectOne \u003d new Project(\"Project One\");"},{"lineNumber":30,"author":{"gitId":"shreytheshreyas"},"content":"        Task taskOne \u003d new Task(\"Task One\");"},{"lineNumber":31,"author":{"gitId":"shreytheshreyas"},"content":"        Task taskTwo \u003d new Task(\"Task Two\");"},{"lineNumber":32,"author":{"gitId":"shreytheshreyas"},"content":"        Task taskThree \u003d new Task(\"Task Three\");"},{"lineNumber":33,"author":{"gitId":"shreytheshreyas"},"content":"        projectOne.addTask(taskOne);"},{"lineNumber":34,"author":{"gitId":"shreytheshreyas"},"content":"        projectOne.addTask(taskTwo);"},{"lineNumber":35,"author":{"gitId":"shreytheshreyas"},"content":"        projectOne.addTask(taskThree);"},{"lineNumber":36,"author":{"gitId":"shreytheshreyas"},"content":"        projects.add(projectOne);"},{"lineNumber":37,"author":{"gitId":"shreytheshreyas"},"content":"        projectOne.getTask(0).setPriority(3);"},{"lineNumber":38,"author":{"gitId":"shreytheshreyas"},"content":"        projectOne.getTask(1).setPriority(1);"},{"lineNumber":39,"author":{"gitId":"shreytheshreyas"},"content":"        projectOne.getTask(2).setPriority(2);"},{"lineNumber":40,"author":{"gitId":"shreytheshreyas"},"content":"        projectOne.getTask(0).addDeadline(LocalDate.parse(\"2020-12-13\"));"},{"lineNumber":41,"author":{"gitId":"shreytheshreyas"},"content":"        projectOne.getTask(1).addDeadline(LocalDate.parse(\"2020-12-23\"));"},{"lineNumber":42,"author":{"gitId":"shreytheshreyas"},"content":"        projectOne.getTask(2).addDeadline(LocalDate.parse(\"2020-11-14\"));"},{"lineNumber":43,"author":{"gitId":"shreytheshreyas"},"content":"        projectOne.getTask(0).addActual(90);"},{"lineNumber":44,"author":{"gitId":"shreytheshreyas"},"content":"        projectOne.getTask(1).addActual(130);"},{"lineNumber":45,"author":{"gitId":"shreytheshreyas"},"content":"        projectOne.getTask(2).addActual(210);"},{"lineNumber":46,"author":{"gitId":"shreytheshreyas"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":48,"author":{"gitId":"shreytheshreyas"},"content":"    @Test"},{"lineNumber":49,"author":{"gitId":"thatseant"},"content":"    public void execute_command_sortTaskList_Priority() throws EzExceptions {"},{"lineNumber":50,"author":{"gitId":"thatseant"},"content":"        HashMap\u003cString, String\u003e params \u003d new HashMap\u003c\u003e();"},{"lineNumber":51,"author":{"gitId":"thatseant"},"content":"        params.put(\"s\", \"p\");"},{"lineNumber":52,"author":{"gitId":"shreytheshreyas"},"content":"        String expectedOutput \u003d \"List of Tasks:\""},{"lineNumber":53,"author":{"gitId":"shreytheshreyas"},"content":"                + \"\\n     \" + \"1\" + \".\" + \"Task Two | 23/12/2020 | Actual: 2 hours 10 minutes|priority: 1\""},{"lineNumber":54,"author":{"gitId":"shreytheshreyas"},"content":"                + \"\\n     \" + \"2\" + \".\" + \"Task Three | 14/11/2020 | Actual: 3 hours 30 minutes|priority: 2\""},{"lineNumber":55,"author":{"gitId":"shreytheshreyas"},"content":"                + \"\\n     \" + \"3\" + \".\" + \"Task One | 13/12/2020 | Actual: 1 hours 30 minutes|priority: 3\";"},{"lineNumber":56,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":57,"author":{"gitId":"thatseant"},"content":"        TaskSortCommand tasksSorter \u003d new TaskSortCommand(params,0);"},{"lineNumber":58,"author":{"gitId":"shreytheshreyas"},"content":"        tasksSorter.executeCommand(projects,teamMembers);"},{"lineNumber":59,"author":{"gitId":"shreytheshreyas"},"content":"        String actualOutput \u003d Ui.printTaskListMessage(projects.get(0));"},{"lineNumber":60,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":61,"author":{"gitId":"shreytheshreyas"},"content":"        assertEquals(expectedOutput,actualOutput);"},{"lineNumber":62,"author":{"gitId":"shreytheshreyas"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":64,"author":{"gitId":"shreytheshreyas"},"content":"    @Test"},{"lineNumber":65,"author":{"gitId":"thatseant"},"content":"    public void execute_command_sortTaskList_Deadline() throws EzExceptions {"},{"lineNumber":66,"author":{"gitId":"thatseant"},"content":"        HashMap\u003cString, String\u003e params \u003d new HashMap\u003c\u003e();"},{"lineNumber":67,"author":{"gitId":"thatseant"},"content":"        params.put(\"s\", \"d\");"},{"lineNumber":68,"author":{"gitId":"shreytheshreyas"},"content":"        String expectedOutput \u003d \"List of Tasks:\""},{"lineNumber":69,"author":{"gitId":"shreytheshreyas"},"content":"                + \"\\n     \" + \"1\" + \".\" + \"Task Three | 14/11/2020 | Actual: 3 hours 30 minutes|priority: 2\""},{"lineNumber":70,"author":{"gitId":"shreytheshreyas"},"content":"                + \"\\n     \" + \"2\" + \".\" + \"Task One | 13/12/2020 | Actual: 1 hours 30 minutes|priority: 3\""},{"lineNumber":71,"author":{"gitId":"shreytheshreyas"},"content":"                + \"\\n     \" + \"3\" + \".\" + \"Task Two | 23/12/2020 | Actual: 2 hours 10 minutes|priority: 1\";"},{"lineNumber":72,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":73,"author":{"gitId":"thatseant"},"content":"        TaskSortCommand tasksSorter \u003d new TaskSortCommand(params,0);"},{"lineNumber":74,"author":{"gitId":"shreytheshreyas"},"content":"        tasksSorter.executeCommand(projects,teamMembers);"},{"lineNumber":75,"author":{"gitId":"shreytheshreyas"},"content":"        String actualOutput \u003d Ui.printTaskListMessage(projects.get(0));"},{"lineNumber":76,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":77,"author":{"gitId":"shreytheshreyas"},"content":"        assertEquals(expectedOutput,actualOutput);"},{"lineNumber":78,"author":{"gitId":"shreytheshreyas"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":80,"author":{"gitId":"shreytheshreyas"},"content":"    @Test"},{"lineNumber":81,"author":{"gitId":"thatseant"},"content":"    public void execute_command_sortTaskList_ActualTime() throws EzExceptions {"},{"lineNumber":82,"author":{"gitId":"thatseant"},"content":"        HashMap\u003cString, String\u003e params \u003d new HashMap\u003c\u003e();"},{"lineNumber":83,"author":{"gitId":"thatseant"},"content":"        params.put(\"s\", \"a\");"},{"lineNumber":84,"author":{"gitId":"shreytheshreyas"},"content":"        String expectedOutput \u003d \"List of Tasks:\""},{"lineNumber":85,"author":{"gitId":"shreytheshreyas"},"content":"                + \"\\n     \" + \"1\" + \".\" + \"Task One | 13/12/2020 | Actual: 1 hours 30 minutes|priority: 3\""},{"lineNumber":86,"author":{"gitId":"shreytheshreyas"},"content":"                + \"\\n     \" + \"2\" + \".\" + \"Task Two | 23/12/2020 | Actual: 2 hours 10 minutes|priority: 1\""},{"lineNumber":87,"author":{"gitId":"shreytheshreyas"},"content":"                + \"\\n     \" + \"3\" + \".\" + \"Task Three | 14/11/2020 | Actual: 3 hours 30 minutes|priority: 2\";"},{"lineNumber":88,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":89,"author":{"gitId":"thatseant"},"content":"        TaskSortCommand tasksSorter \u003d new TaskSortCommand(params,0);"},{"lineNumber":90,"author":{"gitId":"shreytheshreyas"},"content":"        tasksSorter.executeCommand(projects,teamMembers);"},{"lineNumber":91,"author":{"gitId":"shreytheshreyas"},"content":"        String actualOutput \u003d Ui.printTaskListMessage(projects.get(0));"},{"lineNumber":92,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":93,"author":{"gitId":"shreytheshreyas"},"content":"        assertEquals(expectedOutput,actualOutput);"},{"lineNumber":94,"author":{"gitId":"shreytheshreyas"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"shreytheshreyas"},"content":""},{"lineNumber":96,"author":{"gitId":"shreytheshreyas"},"content":"    @Test"},{"lineNumber":97,"author":{"gitId":"thatseant"},"content":"    public void executeCommand_invalidProjectId_exception() throws EzExceptions {"},{"lineNumber":98,"author":{"gitId":"thatseant"},"content":"        HashMap\u003cString, String\u003e params \u003d new HashMap\u003c\u003e();"},{"lineNumber":99,"author":{"gitId":"thatseant"},"content":"        String expectedOutput \u003d \"Certain Parameters are missing!\";"},{"lineNumber":100,"author":{"gitId":"thatseant"},"content":"        Throwable actualOutputException \u003d assertThrows(EzExceptions.class, () -\u003e {"},{"lineNumber":101,"author":{"gitId":"thatseant"},"content":"            new TaskSortCommand(params,0);"},{"lineNumber":102,"author":{"gitId":"shreytheshreyas"},"content":"        });"},{"lineNumber":103,"author":{"gitId":"shreytheshreyas"},"content":"        assertEquals(expectedOutput,actualOutputException.toString());"},{"lineNumber":104,"author":{"gitId":"shreytheshreyas"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"shreytheshreyas"},"content":"}"}],"authorContributionMap":{"thatseant":24,"shreytheshreyas":81}},{"path":"src/test/java/seedu/ezmanager/commands/task/TaskTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"thatseant"},"content":"package seedu.ezmanager.commands.task;"},{"lineNumber":2,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":3,"author":{"gitId":"thatseant"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":4,"author":{"gitId":"thatseant"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":5,"author":{"gitId":"thatseant"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":6,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":7,"author":{"gitId":"thatseant"},"content":"class TaskTest {"},{"lineNumber":8,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":9,"author":{"gitId":"thatseant"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"thatseant"},"content":"    static Task task;"},{"lineNumber":11,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":12,"author":{"gitId":"thatseant"},"content":"    @BeforeAll"},{"lineNumber":13,"author":{"gitId":"thatseant"},"content":"    static void createTask() {"},{"lineNumber":14,"author":{"gitId":"thatseant"},"content":"        task \u003d new Task(\"task1\", LocalDate.parse(\"2020-07-14\"));"},{"lineNumber":15,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":17,"author":{"gitId":"thatseant"},"content":"    @Test"},{"lineNumber":18,"author":{"gitId":"thatseant"},"content":"    void testToString() {"},{"lineNumber":19,"author":{"gitId":"thatseant"},"content":"        assertEquals(\"task1 | 14/07/2020\", task.toString());"},{"lineNumber":20,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":22,"author":{"gitId":"thatseant"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"thatseant"},"content":"    void equals_sameTask_true() {"},{"lineNumber":24,"author":{"gitId":"thatseant"},"content":"        Task sameTask \u003d new Task(\"task1\", LocalDate.parse(\"2020-07-14\"));"},{"lineNumber":25,"author":{"gitId":"thatseant"},"content":"        assertTrue(sameTask.equals(task));"},{"lineNumber":26,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":28,"author":{"gitId":"thatseant"},"content":"    @Test"},{"lineNumber":29,"author":{"gitId":"thatseant"},"content":"    void equals_diffDescription_false() {"},{"lineNumber":30,"author":{"gitId":"thatseant"},"content":"        Task diffTask \u003d new Task(\"task2\", LocalDate.parse(\"2020-07-14\"));"},{"lineNumber":31,"author":{"gitId":"thatseant"},"content":"        assertFalse(diffTask.equals(task));"},{"lineNumber":32,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":34,"author":{"gitId":"thatseant"},"content":"    @Test"},{"lineNumber":35,"author":{"gitId":"thatseant"},"content":"    void equals_diffDeadline_false() {"},{"lineNumber":36,"author":{"gitId":"thatseant"},"content":"        Task diffTask \u003d new Task(\"task1\", LocalDate.parse(\"2020-04-14\"));"},{"lineNumber":37,"author":{"gitId":"thatseant"},"content":"        assertFalse(diffTask.equals(task));"},{"lineNumber":38,"author":{"gitId":"thatseant"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"thatseant"},"content":"    **/"},{"lineNumber":40,"author":{"gitId":"thatseant"},"content":"}"}],"authorContributionMap":{"thatseant":40}},{"path":"src/test/java/util/TestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"thatseant"},"content":"package util;"},{"lineNumber":2,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":3,"author":{"gitId":"thatseant"},"content":"import java.util.Iterator;"},{"lineNumber":4,"author":{"gitId":"thatseant"},"content":""},{"lineNumber":5,"author":{"gitId":"thatseant"},"content":"public class TestUtil {"},{"lineNumber":6,"author":{"gitId":"thatseant"},"content":"    "},{"lineNumber":7,"author":{"gitId":"thatseant"},"content":"}"}],"authorContributionMap":{"thatseant":7}},{"path":"test_ezmanager.txt","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"samuelchristopher"},"content":"Members "},{"lineNumber":2,"author":{"gitId":"samuelchristopher"},"content":"one person"},{"lineNumber":3,"author":{"gitId":"samuelchristopher"},"content":"another person"},{"lineNumber":4,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":5,"author":{"gitId":"samuelchristopher"},"content":"Project one"},{"lineNumber":6,"author":{"gitId":"samuelchristopher"},"content":"status false"},{"lineNumber":7,"author":{"gitId":"samuelchristopher"},"content":"projectDescription \u003cproject description empty\u003e"},{"lineNumber":8,"author":{"gitId":"samuelchristopher"},"content":"projectDeadline 2020-10-20"},{"lineNumber":9,"author":{"gitId":"samuelchristopher"},"content":"startTasks"},{"lineNumber":10,"author":{"gitId":"samuelchristopher"},"content":"one task | tS 0 tE | pS 0 pE"},{"lineNumber":11,"author":{"gitId":"samuelchristopher"},"content":"another task | tS 0 tE | pS 0 pE"},{"lineNumber":12,"author":{"gitId":"samuelchristopher"},"content":"tMS"},{"lineNumber":13,"author":{"gitId":"samuelchristopher"},"content":"one person"},{"lineNumber":14,"author":{"gitId":"samuelchristopher"},"content":"tME"},{"lineNumber":15,"author":{"gitId":"samuelchristopher"},"content":"endTasks"},{"lineNumber":16,"author":{"gitId":"samuelchristopher"},"content":"pMS"},{"lineNumber":17,"author":{"gitId":"samuelchristopher"},"content":"one person"},{"lineNumber":18,"author":{"gitId":"samuelchristopher"},"content":"pME"},{"lineNumber":19,"author":{"gitId":"samuelchristopher"},"content":""},{"lineNumber":20,"author":{"gitId":"samuelchristopher"},"content":"Project two"},{"lineNumber":21,"author":{"gitId":"samuelchristopher"},"content":"status false"},{"lineNumber":22,"author":{"gitId":"samuelchristopher"},"content":"projectDescription \u003cproject description empty\u003e"},{"lineNumber":23,"author":{"gitId":"samuelchristopher"},"content":"projectDeadline null"},{"lineNumber":24,"author":{"gitId":"samuelchristopher"},"content":"startTasks "},{"lineNumber":25,"author":{"gitId":"samuelchristopher"},"content":"endTasks"},{"lineNumber":26,"author":{"gitId":"samuelchristopher"},"content":"pMS"},{"lineNumber":27,"author":{"gitId":"samuelchristopher"},"content":"pME"},{"lineNumber":28,"author":{"gitId":"samuelchristopher"},"content":""}],"authorContributionMap":{"samuelchristopher":28}},{"path":"text-ui-test/input.txt","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"samuellleow"},"content":"project n/Project One"},{"lineNumber":2,"author":{"gitId":"samuellleow"},"content":"list"},{"lineNumber":3,"author":{"gitId":"samuellleow"},"content":"bye"}],"authorContributionMap":{"samuellleow":3}}]
