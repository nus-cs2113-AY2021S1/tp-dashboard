[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    implementation \u0027junit:junit:4.12\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    mainClassName \u003d \"seedu.duke.Duke\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samuellleow": 1,
      "riazaham": 1,
      "-": 46
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "![](https://avatars3.githubusercontent.com/u/13195220?s\u003d460\u0026u\u003d7a16696cc4ed27621159c782afd285b7b37a4971\u0026v\u003d4) | Samuel Paul Christopher | [Github](https://github.com/samuelchristopher) | [Portfolio](http://bit.do/samchrisfeb2020)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "riazaham"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Riaz Ahamed | [Github](https://github.com/riazaham) | [Portfolio](team/riazaham.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Shreyas Kumar | [Github](https://github.com/shreytheshreyas) | [Portfolio]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Samuel Leow | [Github](https://github.com/samuellleow) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thatseant"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Sean Tan | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": " "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "\u003e\u003e\u003e\u003e\u003e\u003e\u003e 1f46d705525ec68d6781673e15701194dcb5580e"
      }
    ],
    "authorContributionMap": {
      "samuelchristopher": 1,
      "thatseant": 1,
      "samuellleow": 2,
      "shreytheshreyas": 2,
      "riazaham": 1,
      "-": 4
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## Welcome to EZ Manager"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "![EZ Manager Welcome](https://i.ibb.co/n7zphMR/ezmanagerterminal.png)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "## Changelog"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Identifier | Changes | Date"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---------- | ------------------- | ----"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "A | Incorporated feedback from CS2101 review \u003cul\u003e\u003cli\u003eInclude table of content\u003c/li\u003e\u003cli\u003eInclude preface for sections\u003c/li\u003e\u003cli\u003eAdd introductory sections\u003c/li\u003e\u003cli\u003e Address the reader directly – “You”\u003c/li\u003e\u003c/ul\u003e | 29 October 2020"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "B | "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "## Table of Contents"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "- [Introduction — Welcome to EZ Manager](#introduction)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "- [Setting Up](#setting-up)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "- Design "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "- Implementation"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "- Testing"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "- Dev Ops"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  - Making A Release"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "- Appendices"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "  - Appendix A: Product Scope"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "  - Appendix B: User Stories"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "  - Appendix C: Commands Summary"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "  - Appendix D: Instructions for Manual Testing"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "## Introduction "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "The EZ Manager command line application designed to help you get more done as a Software Engineering Project Manager. Organize your projects, keep track of team members and analyze the tasks pertaining to your projects."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "This guideis designed to help you understand the inner workings of EZ Manager from the first steps of setting up the project to the high-level application structures and even the sequence of operations when a command is triggered."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Let us hit the ground running with the next section about setting up!"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting Up "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "**Prerequisites**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "1. Java Development Kit (JDK) version 11 and above. [Here](https://docs.oracle.com/en/java/javase/11/install/overview-jdk-installation.html#GUID-8677A77F-231A-40F7-98B9-1FD0B48C346A) is an installation guide for JDK 11."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "2. The Intellij Intergrated Development Environment (IDE). [Here](https://www.jetbrains.com/help/idea/installation-guide.html) is an installation guidefor Intellij."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "**Setting up the project on your computer**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "1. Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "2. Open IntelliJ (if you are not in the welcome screen, click `File \u003e Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "3. Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "  a. Go to `File \u003e Project Structure`, then select Project and ensure that the Project SDK is Java 11."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "  b. Else, click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "4. Click `Import Project`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "5. Locate the `build.gradlefile` and select it. Click `OK`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "6. Click `Open as Project`"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "7. Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "8. After the importing is complete, verify that the project is working, locate the `src/main/java/seedu/duke/Duke.javafile`, right-click it, and choose `Run Duke.main()`. "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "If the setup is correct, you should see the welcome screen and greeting."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Thank you for taking the time to test out EZ Manager. [Here](https://www.loom.com/share/f64bb5fd4b7a4089b31a96ddc8e1ea79) is a quick video to introduce you to some of the commands you can use on EZ Manager v2.0."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "PDF developer guide available [here](https://we.tl/t-UkcnzA4i8P)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thatseant"
        },
        "content": "## Design"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thatseant"
        },
        "content": "Developers are welcome to contribute by submitting issues or pull requests on our repository. The design section is a good place to start learning about EZ Manager’s architecture and various components. Most developers will contribute to the app mainly through addition of new user commands. The section “Addition of new commands” will provide a step-by-step walkthrough to ensure new commands follow the overall architecture. Figure 2 below shows the overall class diagram for EZ Manager.  "
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thatseant"
        },
        "content": "### Consideration"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thatseant"
        },
        "content": "Eazy was developed via a breadth first iterative approach with new commands progressively added. An n-tier architecture ensured separation of concern between various layers of the architecture but much of the program’s logic remained in the Command classes. This design architecture ensured minimal changes to the codebase when new commands were added. Often, new commands or feature addition required changes to only a single data class and addition of a new independent command class. "
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thatseant"
        },
        "content": "### Overall Architecture"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thatseant"
        },
        "content": "EZ Manager consists of 4 main layers:  "
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thatseant"
        },
        "content": "* Ui: Handles the output of the app "
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thatseant"
        },
        "content": "* Logic: Command parser and executor "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thatseant"
        },
        "content": "* Model: Data classes "
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thatseant"
        },
        "content": "* Storage: Handles the saving and loading of data to the hard disk "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thatseant"
        },
        "content": "The Ui and Storage layer contains a single class. The model layer contained a member, a task and a project class and the logic layer contained a single parser class and various command classes. Functionality was exposed directly through these command classes, eliminating the need for redundant classes with few methods. In a small app like EZ Manager, this enhanced code maintainability and readability. "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "thatseant"
        },
        "content": " "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "thatseant"
        },
        "content": "Now, we will delve into more detail about each component. "
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "thatseant"
        },
        "content": "### UI Component"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "thatseant"
        },
        "content": "API: Ui.java "
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "thatseant"
        },
        "content": "Introduction: "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "thatseant"
        },
        "content": "The Ui.java is a class made up of various acknowledgement messages to be displayed after the user inputs a command. "
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "thatseant"
        },
        "content": "Abstraction: "
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "thatseant"
        },
        "content": "Every message in the class is stored as a String and it is abstracted to a method. This method is called after the execution of a command.  "
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "thatseant"
        },
        "content": "Access: "
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "thatseant"
        },
        "content": "Every method in the Ui class is a static method. Hence, every command class calls the appropriate static methods directly from the Ui class. "
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "thatseant"
        },
        "content": "### Logic Component"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "thatseant"
        },
        "content": "As user commands follow a fixed format, a generic parser can extract command types and parameter for all commands. This is handled by the parser class. The parser then passes the extracted values to specific command classes. Below are the workings of the Parser and Commands. "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "thatseant"
        },
        "content": " "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "thatseant"
        },
        "content": "**Parser**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "thatseant"
        },
        "content": "User inputs are passed to the static parse method of the parser class. The parser then calls instances of command classes for command execution. The following are handled by the parser. "
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "thatseant"
        },
        "content": "* Command type is extracted and used to determine which command class is called for command execution.  "
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "thatseant"
        },
        "content": "* Command parameters are extracted using a regex and stored in a hashmap. This hashmap is passed to the command class.  "
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "thatseant"
        },
        "content": "* A projectIndex pointer keeps track of the view the user is currently in.  "
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    * If the user is in a project view, this allows the parser to know which project the task to be manipulated is in.  "
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    * If the user is in the home view, this allows the parser to know that projects are to be manipulated instead. "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    * This pointer is passed to the command class. "
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "thatseant"
        },
        "content": " "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "thatseant"
        },
        "content": "**Commands** "
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "thatseant"
        },
        "content": "Each command class represents a specific user command. The bulk of the program’s logic resides here. It manipulates data objects (model layer) and tasks the Ui to display output. The following is a more specific description of command classes. "
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "thatseant"
        },
        "content": "* The constructor extracts individual command parameters from the HashMap given to it from the parser. "
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "thatseant"
        },
        "content": "* From main(), executeCommand method is called which passes these parameters to methods in the model layer, which manipulates data objects. "
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "thatseant"
        },
        "content": "* ExecuteCommand also calls methods in the Ui to display output messages to the user. "
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "thatseant"
        },
        "content": "### Model Component"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "thatseant"
        },
        "content": "The model component is to provide you with a conceptual understanding of how the data is stored in EZ Manager. EZ Manager has three classes which store data, the Project class, the Task class and the Team Member class. This section will explain how each of these classes interact with one another. The diagram below shows the attributes associated with each of the objects. "
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "thatseant"
        },
        "content": "Each project can contain many tasks and have multiple team members assigned to the project. To facilitate this, the Project class contains an ArrayList of Task and an ArrayList of TeamMembers. Other attributes of the Project include its name, description, deadline and its status. All these fields are represented in the Home View of EZ Manager. "
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "thatseant"
        },
        "content": " "
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "thatseant"
        },
        "content": "Furthermore, for each task that you create, you can add a priority (to allow for sorting in later versions of EZ Manager), status, deadline, assign a member to work on the task and even include the estimates and actual time that a task takes to complete. "
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "thatseant"
        },
        "content": "### Storage Component"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "thatseant"
        },
        "content": "This is section will explain how EZ Manager ensures that the data in the application persists after each session has been terminated (with the bye command). Figure 3 outlines the responsibility of the Storage component for loading and storing the data during the lifecycle of the application. "
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "thatseant"
        },
        "content": "More specifically, Figure 4 shows us how the text file would look like when it is populated. In the load method of Storage that is called at the beginning of each application, the first thing that is recalled are the team members that are part of the overall organization that is being managed by EZ Manager.  "
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "thatseant"
        },
        "content": "Once the team members are in, the load method registers the projects. Each project is stored in a block that starts with “Project ProjectNameHere” so in Figure 4, the project is project “how are you”. Data pertaining to the project, which includes, the project’s status (whether it is done or not), the project description all the way to the tasks and members associated with the project can be extracted from here and loaded into the current instance of the application. That completes the loading process. "
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "thatseant"
        },
        "content": " "
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "thatseant"
        },
        "content": "Once the loading process is over, the application proceeds to its normal operation where it receives input from you and responds accordingly. The next important part is when you input the exit command “bye” once this is triggered, before the application terminates, we call the save method. "
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "thatseant"
        },
        "content": " "
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "thatseant"
        },
        "content": "The save method from the Storage component clears the ezmanager.txt file and then populates it with the current data using the saveFormat function (available in the Project, Task and TeamMember) to ensure that the formatting is consistent with EZ Manager’s saving convention. Once this step is done, you can be assured that your data has been saved.  "
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "thatseant"
        },
        "content": "## Implementation"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "thatseant"
        },
        "content": "### Adding a new project"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "thatseant"
        },
        "content": "This section will explain the creation of new projects and how the objects interact with each other. "
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "thatseant"
        },
        "content": "The user can create new projects to be added to the list of projects with the project command. "
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "thatseant"
        },
        "content": "This command is facilitated with the help of the ProjectCommand class. An instance of the ProjectCommand class will have the following properties: "
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "thatseant"
        },
        "content": "* tasks: An array list of tasks "
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "thatseant"
        },
        "content": "* members: An array list of members "
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "thatseant"
        },
        "content": "* projectName: The name of the project as a String object "
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "thatseant"
        },
        "content": "*projectDescription: The description of the project as a String object "
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "thatseant"
        },
        "content": "projectDeadline: The deadline of the project as a Local Date object "
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "thatseant"
        },
        "content": "Step 1: The user types the project command followed by the name of the project e.g. project n/Project One.  "
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "thatseant"
        },
        "content": "The main Duke class will call the Parser class. "
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "thatseant"
        },
        "content": "The Parser class will check which state the app is in and will then call the appropriate class constructor. In this case, the Parser will call the ProjectCommand constructor. The ProjectCommand constructor will also check for the validity of the user’s input. "
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "thatseant"
        },
        "content": "The Parser class will then initialize a new instance of the ProjectCommand constructor with the project name “Project One” and return it back to the main Duke class. "
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "thatseant"
        },
        "content": "The Duke class will call the executeCommand function from the returned instance which will execute the command. "
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "thatseant"
        },
        "content": "The executeCommand function will create a new Project instance "
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "thatseant"
        },
        "content": "It will then add that instance to the static projects list.  "
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "thatseant"
        },
        "content": "Lastly, it will call the printProjectCreated method from the Ui class and return it to the main Duke class. "
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "thatseant"
        },
        "content": "The Duke class will then receive the acknowledgement message and display it to the user in the terminal. "
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "thatseant"
        },
        "content": "The above is illustrated below in a sequence diagram. The sequence diagram will only encompass the sequence in the executeCommand function. "
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "thatseant"
        },
        "content": "### Deleting Tasks"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "thatseant"
        },
        "content": "This command allows project managers to delete tasks from projects. "
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "thatseant"
        },
        "content": "The logic for this command is primarily written in TaskDeleteCommand class. It extends from the abstract Command class. "
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "thatseant"
        },
        "content": "The steps below show how such a class is initialized and used to execute the command. "
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "thatseant"
        },
        "content": "**User enters Command**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "thatseant"
        },
        "content": "User enters command delete t/3 "
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "thatseant"
        },
        "content": " "
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "thatseant"
        },
        "content": "**Implementation**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "thatseant"
        },
        "content": "1. Parser initializes TaskDeleteCommand by passing a hashmap of input parameters together with projectIndex into its constructor. "
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "thatseant"
        },
        "content": "2. Parse() method of TaskDeleteCommand extracts the task index from the hashmap. "
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "thatseant"
        },
        "content": "3. ExecuteCommand() method of TaskDeleteCommand is called by Duke main class, which passes it the program’s arraylist of projects. "
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    "
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    3.1 Existing project is retrieved from the arraylist of projects using projectIndex. "
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    "
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    3.2 The method deleteTask of the project is called with taskIndex. "
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    "
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    3.3 This simply removes the task from the arraylist of tasks the project contains. "
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    "
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    3.4 The Ui class prints an acknowledgement that the task has been deleted. "
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    "
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "thatseant"
        },
        "content": "### Adding Deadline to Tasks"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "thatseant"
        },
        "content": "This command allows project managers to add deadline to tasks. "
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "thatseant"
        },
        "content": "The logic for this command is primarily written in DeadlineCommand class. It extends from the abstract Command class. "
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "thatseant"
        },
        "content": "The steps below show how such a class is initialized and used to execute the command. "
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "thatseant"
        },
        "content": "**User enters Command**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "thatseant"
        },
        "content": "User enters command deadline t/3 h/2 m/32 "
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "thatseant"
        },
        "content": "**Implementation**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "thatseant"
        },
        "content": "1. Parser initializes DeadlineCommand by passing a hashmap of input parameters together with projectIndex into its constructor. "
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "thatseant"
        },
        "content": "2. Parse() method of DeadlineCommand extracts the task index and deadline date from the hashmap. "
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "thatseant"
        },
        "content": "3. ExecuteCommand() method of DeadlineCommand is called by Duke main class, which passes it the program’s arraylist of projects. "
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "thatseant"
        },
        "content": "   "
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    3.1 Existing task is retrieved with taskIndex after retrieving the project it belongs to from the arraylist of project. "
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    "
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    3.2 The method addDeadline of the task is called that sets its date property. "
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    "
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    3.3 The Ui class then prints the deadline and the task description. "
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    "
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "thatseant"
        },
        "content": "### Assign Actual Duration to Tasks    "
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "thatseant"
        },
        "content": "This command allows project managers to record the actual duration that completed tasks take. "
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "thatseant"
        },
        "content": "The logic for this command is primarily written in ActualTimeCommand class. It extends from the abstract Command class. "
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "thatseant"
        },
        "content": "The steps below show how such a class is initialized and used to execute the command. "
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "thatseant"
        },
        "content": "**User enters Command**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "thatseant"
        },
        "content": "User enters command actual t/3 h/2 m/32 "
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "thatseant"
        },
        "content": "**Implementation**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "thatseant"
        },
        "content": "1. Parser initializes ActualTimeCommand by passing a hashmap of input parameters together with projectIndex into its constructor. "
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "thatseant"
        },
        "content": "2. Parse() method of ActualTimeCommand extracts the task index, hours and minutes from the hashmap. "
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "thatseant"
        },
        "content": "3. ExecuteCommand() method of ActualTimeCommand is run. "
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "thatseant"
        },
        "content": "  "
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    3.1 Existing task is retrieved using projectIndex and taskIndex. "
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    3.2 The task is checked to determine if it is completed. "
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    3.3 If the task is completed, the task instance will have its actualInMinutes property set based on the hours and minutes retrieved. "
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    3.4 Otherwise, an exception is thrown. "
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "thatseant"
        },
        "content": "  "
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    3.5 The Ui class then prints the task description and the duration the task took. "
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    "
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "thatseant"
        },
        "content": "### Assign Estimated Duration to Tasks    "
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "thatseant"
        },
        "content": "This command allows project managers to add an estimate for the duration tasks will take. "
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "thatseant"
        },
        "content": "The logic for this command is primarily written in EstimatedTimeCommand class. It extends from the abstract Command class. "
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "thatseant"
        },
        "content": "The steps below show how such a class is initialized and used to execute the command. "
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "thatseant"
        },
        "content": "**User enters Command**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "thatseant"
        },
        "content": "User enters command estimate t/3 h/2 m/32 "
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "thatseant"
        },
        "content": "**Implementation**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "thatseant"
        },
        "content": "1. Parser initializes EstimatedTimeCommand by passing a hashmap of input parameters together with projectIndex into its constructor. "
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "thatseant"
        },
        "content": "2. Parse() method of EstimatedTimeCommand extracts the task index, hours and minutes from the hashmap. "
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "thatseant"
        },
        "content": "3. ExecuteCommand() method of EstimateTimeCommand is run. "
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    "
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    3.1 Existing task is retrieved using projectIndex and taskIndex. "
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    "
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    3.2 addEstimate() method of task is called, and the task will have its estimateInMinutes property set based on the hours and minutes retrieved. "
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    3.3 The Ui class then prints the task description and the estimated duration added to the task. "
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "thatseant"
        },
        "content": " "
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "### Assign priority to task "
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "This section will explain the assigning of priorities to tasks and how the objects interact with each other. "
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "The user can assign a priority to any existing task with the `priority` command. "
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "This command is facilitated with the help of the TaskAssignPriorityCommand class. An instance of the TaskAssignPriorityCommand class has the following properties. "
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "- projectIndex: The index of the project as an Integer "
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "- taskIndex: The index of the task as an Integer "
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "- priority: The priority to be assigned as a String "
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1: The user types the priority command e.g. `priority t/1 p/1`"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "1. The main Duke class will call the Parser class. "
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "2. The Parser class will check which state the app is in and will then call the appropriate class constructor. In this case, the Parser will call the ProjectListCommand constructor. The ProjectListCommand constructor will also check for the validity of the user’s input. The constraints of the input are as follows:"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "  - Not a number for either task index or priority "
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "  - Not a positive number for either task index or priority"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "  - An index of a task that does not exist "
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "3. The Parser class will then initialize a new instance of the TaskAssignPriorityCommand constructor and return it back to the main Duke class. "
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "4. The Duke class will call the executeCommand function from the returned instance which will execute the command. "
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "  - The executeCommand will get the specified task using the taskIndex. "
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "  - It will then set the priority property of the task as the specified priority. "
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "  - Lastly, it will call the printPriorityAssignedToTaskMessage method from the Ui class and send the acknowledgement message to the main Duke class. "
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "5. The Duke class will then display the acknowledgement message to the user in the terminal "
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "The above is illustrated below in a sequence diagram. The sequence diagram will only encompass the sequence in the executeCommand function. "
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "### Marking a task as done "
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "This command allows you to mark a task in a selected project. "
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "The logic for this command is written in the TaskDoneCommand class which inherits its general properties from the abstract Command class. "
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "The following states how the functionality is used in the application and how it is implemented: "
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "User enters Command"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "User enters command `done t/1`"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "Implementation"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "1. The parser class uses the `TaskDoneCommand` constructor to initialize a new instance of that class type by passing a hash map which consists of the parameters of that command along with the respective project index of the project in which the task is present in. "
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "2. The `parse()` method in the `TaskDoneCommand` class extracts the task index of the task that is to be marked done. If the task index is not present in the task list of that project, an exception is thrown. "
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "3. The `executeCommand()` of the `TaskDoneCommand` class is called by the `main()` method of the `Duke` class and which passes the project and team members array list to the respective method."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "  - The current project is obtained using the project array list and the project index that was passed during the instantiation of the `TaskDoneCommand` object."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "  - Now, the method fetches the required task by using task index extracted from the  `parse()`."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "  - The task object obtained is used to call the member function `markAsDone()` which sets the Boolean field in a task from false to true which the indicates that the task is completed. "
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "  - The `Ui` class then prints an acknowledgement message to let the user know that a task has been marked as done. "
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "### Sorting Tasks in the TaskList"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "This command allows you to sort the tasks in a task list in a selected project. "
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "The logic for this command is written in the `TaskSortCommand` class which inherits its general properties from the abstract Command class. "
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "The following states how the functionality is used in the application and how it is implemented: "
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "User enters command: `sort p/`, `sort t/` or `sort d/`"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "1. The parser class uses the `TaskSortCommand` constructor to initialize a new instance of that class type by passing the input which consists of the parameter of that command. "
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "2. The `parse()` method in the `TaskSortCommand` class extracts the sorting type (deadline, priority, actual time). "
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "3. The `executeCommand()` of the `TaskDoneCommand` class is called by the `main()` method of the `Duke` class and which passes the project and team members array list to the respective method. "
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "  - The current project is obtained using the project array list and the project index that was passed during the instantiation of the TaskSortCommand object. "
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "  - Now, based on the sorting type the method will choose a case statement in a switch-case that reflects the type of sorting."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "  - The `Ui` class then prints an acknowledgement message to let the user know that the tasks have been sorted according to the respective sorting type. "
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "## Running Tests "
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "There are two ways to run tests for EZ manager. "
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e To check for test coverage, please ensure that you `Run with coverage` when right clicking on the tests to run. "
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "**Method 1: Using IntelliJ JUnit test runner**"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "- To run all tests available, right-click on the `src/test/java` folder and choose `Run  All Tests`"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "- To run a some of the tests, you can right-click on a test package, test class, or a test and choose `Run Particular Test Name Here` "
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "**Method 2: Using Gradle**"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "- On Windows, run the command `gradlew clean allTests` in a terminal "
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "- On Mac or Linux, run the command `./gradlew clean allTests` in a terminal "
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "## DevOps — Making a Release "
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release. "
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "1. Update the version number in Duke.java "
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "2. Generate a JAR file using Gradle"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "3. Tag the repo with the version number. e.g. v0.1 "
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "4. Create a new release using GitHub and upload the JAR file you created. "
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "## Appendix A: Product Scope "
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "Target user profile: "
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "- Project Manager of Software Engineering projects "
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "- Needs to manage teams for different projects "
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "Value proposition:"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "Manage projects in a smooth and seamless way to allow the team to get more done "
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "**User Stories**"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "Priority | As a ... | I want to ... | So that I can ..."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "---------- | -------------------- | ------------------------- | -------------------------"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "`* * *` | new user | see usage instructions | refer to the commands when I forget how to use the App"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "`* * *` | project manager | add a new project | track the progress of my new project "
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "`* * *` | project manager | add tasks under a project | track the project tasks needed to finish the project"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "`* * *` | project manager | add a new member | manage members in my team "
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "`* * *` | project manager | select a project | go into a particular project to make changes such as adding tasks and deadline specific to the project"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "`* * *` | project manager | navigate between home view and project view | switch from one project to the other project"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "`* * *` | project manager | delete an existing project | remove projects that are not required anymore"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "`* * *` | project manager | delete an existing task | remove tasks that are not required anymore"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "`* * *` | project manager | remove an existing member | remove members that have left the team"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "`* * *` | project manager | add a deadline to an existing project | keep the project on track and deliver the product on time"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "`* * *` | project manager | add a deadline to an existing task | keep the task on track and finish it on time"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "`* * *` | project manager | mark completed projects as done | see which projects are done and which still needs to be done"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "`* * *` | project manager | mark completed tasks as done | see which tasks are done and which still needs to be done"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "`* * *` | project manager | add a project description | have a better understanding of the concept and context of the project"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "`* * *` | project manager | add a task description | have a better understand of the task and know what needs to be done"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "`* * *` | project manager | assign a member to a project | allocate projects to team members "
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "`* * *` | project manager | assign a member to a task | allocate equal workload to every team member"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "`* * *` | project manager | assign priority to a task | organise the tasks in order of priority and focus on those that are more urgent"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "`* *` | project manager | assign estimated time needed to complete a task | give my team a rough estimate of how long is expected for them to finish the task"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "`* *` | project manager | assign actual time used to complete a task | find out the amount of time spent and understand which task is taking more time than expected"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "`* *` | project manager | display all the projects and members all in one view | have an overview of all the projects and members"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "`* *` | project manager | display all the tasks and members allocated to the project all in one view | have an overview of the unfinished tasks and members assigned to those tasks"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "`* *` | project manager | sort my list of projects in terms of deadline | prioritise projects that are urgent and focus on completing the project before the deadline"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "`* *` | project manager | sort my list of tasks in terms of deadline | focus on the tasks that have a closer deadline"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "`* *` | project manager | sort my list of tasks in terms of priority | focus on the tasks that are most important as some are base level tasks which are required for the project to be up and running"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "`* *` | project manager | sort my list of tasks in terms of actual time spent | have an overview of which tasks are taking up more time and required more manpower in the future"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "`*` | project manager | add the roles of my team members | allocate appropriate tasks to appropriate members"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "`*` | project manager | send out reminders to my team members | have them shift gears or change something in real time  "
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "## Appendix C: Instructions for Manual Testing (Shreyas)"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "### \u003cins\u003eProject-Specific Tests\u003c/ins\u003e"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "#### C.1 Creating a Project"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "1. Creating a Project when you are in the Home-View"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    * Prerequisites: Only Required to be in the Home-View "
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    * Test case: `project n/p1`: A new project named as p1 will be created and added to the project list. A message will be displayed on the screen to ensure the user that the project has been created."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    * Test case: `project p1`: Since the n/ parameter has not been provided, it is considered as an incorrect command in the application and hence the program throws an exception."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    "
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "2. Creating a Project when you are in the Project-View"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    * Prerequisites: Required to be in Project-View"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    * Test case: `project n/p1`: Since the state of the program is in project view, the user will not be allowed to create a project and hence the program throws an exception."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    "
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "#### C.2 Deleting a Project"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "1. Deleting a Project when you are in the Home-View"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    * Prerequisites: Only Required to be in the Home-View"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    * Test case: `delete p/1`: The project named as p1 will be deleted and from the project list. A message will be displayed on the screen to ensure the user that the project has been deleted."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    * Test case: `delete p1`: Since the p/ parameter has not been provided, it is considered as an incorrect command in the application and hence the program throws an exception."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "2. Deleting a Project whose project-id is greater that the total number of projects"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    * Prerequisites: Required to be in the Home-View and have three projects created."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    * Test case: `delete p/4`: Since there are only three projects in the project list, the project-id provided to the program is invalid and the program will throw an exception to tell the user to enter a valid project-id."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "3. Creating a Project when you are in the Project-View"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    * Prerequisites: Required to be in Project-View."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    * Test case: `delete p/1`: Since the state of the program is in project view, the user will not be allowed to delete a project and hence the program will not be able to recognize the p/ parameter and will hence throw an exception."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "#### C.3 Selecting a Project"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "1. Selecting a Project when you are in the Home-View"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    * Prerequisites: Only Required to be in the Home View (Initial state of the application) and, the project p1 has already been created."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    * Test case: `select p/1`: The project with the index of 1 will be will selected from the"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "      project list and, you will enter project view of that respective project."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    * Test case: `select p1`: Since the p/ parameter has not been provided, it is considered as an incorrect command in the application and hence the program throws an exception."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "2. Selecting a Project whose project-id is greater that the total number of projects"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    * Prerequisites: Required to be in the Home View and have three project created."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    * Test case: `select p/4`: Since there are only three projects in the project list, the project-id provided to the program is invalid and the program will throw an exception to tell the user to enter a valid project-id."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "3. Selecting a Project when you are in the Project-View"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    * Prerequisites: Required to be in Project-View"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    * Test case: `select p/1`: Since the state of the program is in project view, the user will not be allowed to delete a project and hence the program will not be able to recognize the p/ parameter and will hence throw an exception."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "      "
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "#### C.4 Providing a Description for a Project (need to update this)"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "1. Providing a description for the Project when you are in the Project-View"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    * Prerequisites: Required to be in the Project-View."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    * Test case: `description p/1 d/This is a description`: Since we are in Project-View, we would not be able to add a description to any of them and hence the program will throw an exception."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "   "
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "2. Providing a description for the Project when you are in the Home-View "
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    * Prerequisites: Required to be in Home-View."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    * Test case: `description p/1 d/This is a description`: Since the state of the program is in Home-View, the description \u0027This is a description\u0027 will be added to the project having an index of 1. An acknowledgement message is printed on the screen to ensure the user that the project has been provided with a description."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    "
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "### \u003cins\u003eTask-Specific Tests\u003c/ins\u003e"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "#### C.5 Creating a Task"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "1. Creating a Task when you are in the Project-View"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    * Prerequisites: Only Required to be in Project-View."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    * Test case: `task n/t1`: A new task named as t1 should be created and added to the task list of that project. A acknowledgement message will be displayed on the screen to ensure the user that the task has been created."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "2. Creating a Task when you are in the Home-View"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    * Prerequisites: Required to be in Home-View."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    * Test case: `task n/1`: Since the state of the program is in Home-View, the user will not be allowed to create a task and hence the program throws an exception."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    "
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "#### C.6 Deleting a Task"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "1. Deleting a Task when you are in the Project-View"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    * Prerequisites: Required to be in Project-View. "
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    * Test case: `delete t/1`: The first task in the task list of the project will be deleted and, an acknowledgement message will be displayed on the screen to ensure the user that the required task has been deleted."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "2. Deleting a Task whose task-id is greater than the total number of tasks"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    * Prerequisites: Required to be in the Project-View and have five tasks created."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    * Test case: `select t/7`: Since there are only five tasks in the task list, the task-id provided to the program is invalid and the program will throw an exception to tell the user to enter a valid task-id.    "
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "3. Deleting a Task when you are in the Home-View"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    * Prerequisites: Required to be in Home-View."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    * Test case: `delete t/1`: Since the state of the program is in Home view, the user will not be allowed to delete a task and hence the program throws an exception."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    "
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "#### C.7 Marking a Task as Completed"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "1. Marking a Task as done in Project-View"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    * Prerequisites: Required to be in Project-View of a created project and have tasks created in that respective project."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    * Test case: `done t/1`: The first task in the task list of that project will be marked as completed and an acknoweldegement message will be displayed on the screen to ensure the user that the task has been marked as completed."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "2. Marking a Task as done whose task-id is greater than the total number of tasks"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    * Prerequisites: Required to be in the Project-View and have five tasks created."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    * Test case: `done t/7`: Since there are only five tasks in the task list, the task-id provided to the program is invalid and the program will throw an exception to tell the user to enter a valid task-id. "
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "3. Marking a Task as done in Home-View "
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    * Prerequisites: Required to be in Home-View"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    * Test case: `done t/1`: Since the state of the program is in Home view, there will only be projects present so the user will not be able to mark a task as completed and the program throws an exception."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "#### C.8 Assigning a Deadline to a Task"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "1. Assigning a Deadline to a Task in Project-View"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    * Prerequisites: Required to be in Project-View of a created project and have tasks created in that respective project."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    * Test case: `deadline t/1 d/2020-11-09`: Since the state of the program is in Project-View and the deadline mentioned is in the format YYYY-MM-DD the program assigns the date 2020-11-09 as the deadline to task 1. An acknoweldegment message is also displayed to ensure the user that the required task has been assigned to the respective deadline. "
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    * Test case: `deadline t/1 d/09-10-2020`: Eventhough the state of the program is in Project-View the deadline is of the format DD-MM-YYYY which is the incorrect format while inputting the date. An exception mesaage is also thrown by the program to tell the user to enter the date in the YYYY-MM-DD format."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    * Test case: `deadline t/1 d/11-25-2020`: Eventhough the state of the program is in Project-View the deadline is of the format MM-DD-YYYY which is the incorrect format while inputting the date. An exception mesaage is also thrown by the program to tell the user to enter the date in the YYYY-MM-DD format."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "2. Assigning a Deadline to a Task in Home-View"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    * Prerequisites: Required to be in Home-View."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    * Test case: `deadline t/1 d/2020-11-09`: Since the state of the program is in Home-View, there will only be projects present, so the user will not be able to mark a task as completed and the program throws an exception."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "3. Assigning a Deadline to a Task whose task-id is greater than the total number of tasks"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    * Prerequisites: Required to be in the Project-View and have five tasks created."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    * Test case: `deadline t/7 d/2020-12-22`: Since there are only five tasks in the task list, the task-id provided to the program is invalid and the program will throw an exception to tell the user to enter a valid task-id."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "#### C.9 Assigning a Priority to a Task"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "1. Assigning a Priority to a Task in Project-View. "
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    * Prerequisites: Required to be in Project-View of a created project and have tasks created in that respective project."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    * Test case: `priority t/1 p/1`: Since the state of the program is in Project-View, the priority 1 will be assigned to task 1 and an acknoweldegment message is also displayed on the screen to ensure the user that the priority has been assigned."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "2. Assigning a Priority to a Task in Home-View"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    * Prerequisites: Required to be in Home-View."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    * Test case: `priority t/1 p/1`: Since the state of the program is in Home-View, there will only be projects present, so the user will not be able to assign a prirority to a task and the program throws an exception."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "3. Assigning a Priority to a Task whose task-id is greater than the total number of tasks"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    * Prerequisites: Required to be in the Project-View and have five tasks created."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    * Test case: `priority t/7 p/3`: Since there are only five tasks in the task list, the task-id provided to the program is invalid and the program will throw an exception to tell the user to enter a valid task-id."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "#### C.10 Assigning Estimated Completion Time to Task"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "1. Assigning an Estimated completion time to a Task in Project-View"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    * Prerequisites: Required to be in Project-View of a created project and have tasks created in that respective project."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    * Test case: `estimate t/1 h/3 m/10`:  Since the state of the program is in Project-View an estimated completion time of 1 hour and 10 minutes will be assigned to task 1 and an acknoweldegment message is also displayed on the screen to ensure the user that the estimated completion time has been assigned."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "2. Assigning an Estimated completion time to a Task in Home-View"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    * Prerequisites: Required to be in Home-View"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    * Test case: `estimate t/1 h/3 m/10`: Since the state of the program is in Home-View, there will only be projects present, so the user will not be able to assign an estimated completion time to a task and the program throws an exception."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "3. Assigning an Estimated completion time to a Task whose task-id is greater than the total number of tasks"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    * Prerequisites: Required to be in the Project-View and have five tasks created."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    * Test case: `estimate t/7 h/3 m/20`: Since there are only five tasks in the task list, the task-id provided to the program is invalid and the program will throw an exception to tell the user to enter a valid task-id."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "#### C.11 Assigning Actual Completion Time to Task"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "1. Assigning an Actual completion time to a completed Task in Project-View"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    * Prerequisites: Required to be in Project-View of a created project and have atleast one completed task in that respective project."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    * Test case: `actual t/1 h/3 m/10`:  Since the state of the program is in Project-View and the task in marked as completed, an actual completion time of 1 hour and 10 mimnutes will be assigned to task 1 and an acknoweldegment message is also displayed on the screen to ensure the user that the actual completion time has been assigned."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "2. Assigning an Actual completion time to a incompleted Task in Project-View"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    * Prerequisites: Required to be in Project-View of a created project and have tasks created in that respective project."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    * Test case: `actual t/1 h/3 m/10`:  Since the state of the program is in Project-View and task 1 has not been completed an actual completion time cannot be assigned to the task and the program will display an exception message that informs the user that the task should be marked as completed."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "3. Assigning an Actual completion time to a Task in Home-View"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    * Prerequisites: Required to be in Home-View."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    * Test case: `actual t/1 h/3 m/10`: Since the state of the program is in Home-View, there will only be projects present, so the user will not be able to assign an actual completion time to a task and the program throws an exception."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "4. Assigning an Actual completion time to a Task whose task-id is greater than the total number of tasks"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    * Prerequisites: Required to be in the Project-View and have five tasks created."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    * Test case: `actual t/7 h/3 m/25`: Since there are only five tasks in the task list, the task-id provided to the program is invalid and the program will throw an exception to tell the user to enter a valid task-id."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "#### C.12 Sorting Tasks in TaskList"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "1. Sorting Tasks by deadline in Project-View"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    *Prerequisites: Required to be in Project-View of a created project and have tasks in that respective project."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    *Test case: `sort s/d`: Since the state of the program is in project-view, all the tasks in the list that have a deadline will be sorted in ascending order and the tasks that do not have a deadline are placed towards the end."
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "2. Sorting Tasks by completion time in Project-View"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    *Prerequisites:  Required to be in Project-View of a created project and have tasks in that respective project."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    *Test case: `sort s/t`: Since the state of the program is in Project-View, all the tasks in the list that have an actual time will be sorted in ascending order and the tasks that do not have an actual time are placed towards the end of the list."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "3. Sorting Tasks by priority in Project-View"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    *Prerequisites:  Required to be in Project-View of a created project and have tasks in that respective project."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    *Test case: `sort s/p`: Since the state of the program is in Project-View, all the tasks in the list that have a priority will be sorted in ascending order of priority and the tasks that do not have a priority are placed towards the end of the list."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "4. Sorting Tasks in Home-View."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    * Prerequisites: Required to be in Home-View."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    * Test case: `sort s/t`: Since the state of the program is in Home-View, there will only be projects present, so the user will not be able to sort any sets of tasks and the program throws an exception."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "### \u003cins\u003eMember-Specific Tests\u003c/ins\u003e"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "#### C.13 Adding a Member"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "1. Adding a member in Home-View "
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    * Prerequisites: Required to be in Home-View."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    * Test case: `member n/John Doe`: Since the state of the program is in home view, the member will be created and added to the member arraylist. The program also displays an acknoweldegment message to ensure the user that a new member has been added."
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "2. Adding a member in Project-View "
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    * Prerequisites: Required to be in Project-View."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    * Test case: `member n/John Doe`: Since the state of the program is in Project-View, the program will throw an exception message to the user because a member can only be added in the Home-View."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "#### C.14 Removing a Member"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "1. Removing a member in Home-View "
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    * Prerequisites: Required to be in Home-View."
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    * Test case: `remove m/1`: Since the state of the program is in Home-View, the member will be removed from the member arraylist. The program also displays an acknoweldegment message to ensure the user that the member has has been removed."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "2. Removing a member in Project-View "
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    * Prerequisites: Required to be in Project-View"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    * Test case: `remove m/2`: Since the state of the program is in Project-View, the program will throw an exception message to the user because a member can only be removed in the Home-View."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "3. Removing a member from a Task whose task-id is greater than the total number of tasks"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    * Prerequisites: Required to be in Home-View with five members added to the members list."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    * Test case: `remove m/6`: Since there are only five members in the members list, the member-id provided to the program is invalid and the program will throw an exception to tell the user to enter a valid member-id."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "#### C.15 Assigning a Member to a Project"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "1. Assigning a member to a project in Home-View "
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    * Prerequisites: Required to be in Home-View."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    * Test case: `assign m/2 p/1`: Since the state of the program is in Home-View, the member will be assigned to the respective project. The program also displays an acknoweldegment message to ensure the user that a new member has been added."
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "2. Assigning a member to a project in Project-View "
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    * Prerequisites: Required to be in Project-View."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    * Test case: `assign m/1 p/1`: Since the state of the program is in Project-View, the program will throw an exception message to the user because a members can only be assigned to projects in the Home-View."
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "#### C.16 Assigning a Member to a Task"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "1. Assigning a member to a project in Home-View "
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    * Prerequisites: Required to be in Home-View."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    * Test case: `assign t/1 m/2`: Since the state of the program is in Project-View, the program will throw an exception message to the user because a member can only be assigned to tasks in the Project-View."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "2. Assigning a member to a project in Project-View "
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    * Prerequisites: Required to be in Project-View."
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    * Test case: `assign t/2 m/1`: Since the state of the program is in  Project-View, the member will be assigned to the respective project. The program also displays an acknoweldegment message to ensure the user that the new member has been assigned to the respective task."
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "4. Assigning a member to a Task whose task-id is greater than the total number of tasks"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    * Prerequisites: Required to be in the Project-View and have five tasks created."
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    * Test case: `assign m/1 t/8`: Since there are only five tasks in the task list, the task-id provided to the program is invalid and the program will throw an exception to tell the user to enter a valid task-id."
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "thatseant": 177,
      "samuellleow": 77,
      "shreytheshreyas": 172,
      "-": 148
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "riazaham"
        },
        "content": "# Ez Manager"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "riazaham"
        },
        "content": "Have you found yourself in loads of projects and tasks"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "riazaham"
        },
        "content": "but no way of managing them quickly and efficiently? "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "riazaham"
        },
        "content": "Welcome to EZ Manager where managing your projects and tasks"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "riazaham"
        },
        "content": "are just so \"ez\". Click on the following links to find out"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "riazaham"
        },
        "content": "more!"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Useful links:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "* [User Guide](UserGuide.md)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "* [Developer Guide](DeveloperGuide.md)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* [About Us](AboutUs.md)"
      }
    ],
    "authorContributionMap": {
      "riazaham": 6,
      "-": 6
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "riazaham"
        },
        "content": "This user guide will explain how to use the software tool,"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "riazaham"
        },
        "content": "EZ Manager. You can navigate to the different sections of"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "riazaham"
        },
        "content": "this guide using the Table of Content. Each content is linked"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "riazaham"
        },
        "content": "to its respective sections. "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "riazaham"
        },
        "content": "EZ Manager is a CLI (Command Line Interface) software tool "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "riazaham"
        },
        "content": "for Software Engineering Project Managers to manage their "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "riazaham"
        },
        "content": "projects, tasks and team members all in one app."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "riazaham"
        },
        "content": "## Table of Contents"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "riazaham"
        },
        "content": "1. [Quick Start](#quick-start)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "riazaham"
        },
        "content": "2. [Terminologies](#terminologies)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thatseant"
        },
        "content": "3. [Home View](#home-view)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    1. [Accessing Home View](#accessing-home-view)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    2. [Commands](#home-view-commands)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        1. [List: Viewing the updated Home View](#viewing-the-updated-home-view-list)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        2. [Project: Adding a project](#adding-a-project-project)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        3. [Select: Selecting a project](#selecting-a-project-select)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        4. [Done: Marking a project as done](#marking-a-project-as-done-done)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        5. [Deadline: Adding a deadline to a project](#adding-a-deadline-to-a-project-deadline)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        6. [Description: Adding a description to a project](#adding-a-description-to-a-project-description)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        7. [Delete: Deleting a project](#deleting-a-project-delete)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        8. [Member: Adding a member](#adding-a-member-member)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        9. [Assign: Assigning a member to a project](#assigning-a-member-to-a-project-assign)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        10. [Remove: Removing a member](#removing-a-member-remove)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        11. [Hours: Hours worked by member](#view-hours-worked-by-member-hours)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        12. [Bye: Exit Program](#exiting-ez-Manager-bye)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thatseant"
        },
        "content": "4. [Project View](#project-view)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    1. [Accessing Project View](#accessing-project-view)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    2. [Commands](#project-view-commands)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        1. [List: Viewing the updated Project View](#viewing-the-updated-project-view-list)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        2. [Task: Adding a task](#adding-a-task-task)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        4. [Done: Marking a task as done](#marking-a-task-as-done-done)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        5. [Deadline: Adding a deadline to a task](#adding-a-deadline-to-a-task-deadline)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        6. [Priority: Adding a priority to a task](#adding-a-priority-to-a-task-deadline)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        7. [Delete: Deleting a task](#deleting-a-task-delete)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        8. [Assign: Assigning a member to a task](#assigning-a-member-to-a-task-assign)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        9. [Estimate: Adding estimated time to a task](#add-estimated-time-estimate)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        10. [Actual: Adding actual time to a task](#add-actual-time-taken-actual)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        11. [Sort: Sort tasks](#sort-tasks-sort)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        11. [Bye: Exit Program](#exiting-ez-manager-bye)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "riazaham"
        },
        "content": "5. [Exiting EZ Manager](#exiting-ez-manager)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "riazaham"
        },
        "content": "6. [FAQ](#faq)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "riazaham"
        },
        "content": "7. [Command Summary](#command-summary)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "## Quick Start"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure that you have Java 11 or above installed."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "riazaham"
        },
        "content": "1. Download the latest version of `EZ Manager` from [here](https://github.com/AY2021S1-CS2113T-T09-1/tp/releases)."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "riazaham"
        },
        "content": "1. Copy the JAR  file into an empty new folder. Take note of the file path"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "riazaham"
        },
        "content": "1. Open Command Prompt (on Windows) or Terminal (on Mac) and type"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "riazaham"
        },
        "content": "java -jar {file path}/ezManager.jar"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "riazaham"
        },
        "content": "## Terminologies"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "riazaham"
        },
        "content": "- **Home View**: Refers to the state of the program in Home View."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "riazaham"
        },
        "content": "In this view, you can execute project and member commands but"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "riazaham"
        },
        "content": "you cannot execute task commands."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "riazaham"
        },
        "content": "- **Project View**: Refers to the state of the program in Project View."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "riazaham"
        },
        "content": "In this view, you can execute task and member commands but"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "riazaham"
        },
        "content": "you cannot execute project commands."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "riazaham"
        },
        "content": "- **Project list**: Refers to the list of projects currently"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "riazaham"
        },
        "content": "existing in the system"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "riazaham"
        },
        "content": "- **Task list**: Refers to the list of tasks currently"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "riazaham"
        },
        "content": "existing in the system"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "riazaham"
        },
        "content": "- **Member list**: Refers to the list of members currently"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "riazaham"
        },
        "content": "existing in the system"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "riazaham"
        },
        "content": "- **PROJECT_INDEX**: Every existing project would be assigned"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "riazaham"
        },
        "content": "a positive integer. Hence, the PROJECT_INDEX refers to this"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "riazaham"
        },
        "content": "positive integer. You can retrieve the PROJECT_INDEXes of "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "riazaham"
        },
        "content": "all projects by using the `list` command in HomeView"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "riazaham"
        },
        "content": "- **TASK_INDEX**: Every existing task would be assigned"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "riazaham"
        },
        "content": "a positive integer. Hence, the TASK_INDEX refers to this"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "riazaham"
        },
        "content": "positive integer. You can retrieve the TASK_INDEXes of "
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "riazaham"
        },
        "content": "all tasks by using the `list` command in Project View"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "thatseant"
        },
        "content": "- **MEMBER_INDEX**: Every existing member would be assigned"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "thatseant"
        },
        "content": "a positive integer. Hence, the MEMBER_INDEX refers to this"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "thatseant"
        },
        "content": "positive integer. You can retrieve the MEMBER_INDEXes of "
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "thatseant"
        },
        "content": "Members by using the `list` command in Home View or in Project View"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "thatseant"
        },
        "content": "\u003e  :warning: Project Index, Task Index and Member Index must be positive integers."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "thatseant"
        },
        "content": "## Home View"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "thatseant"
        },
        "content": "The Home View displays the full list of projects and members that are under a manager\u0027s purview. "
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "thatseant"
        },
        "content": "The manager can add and edit projects and members from this view."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "thatseant"
        },
        "content": "\u003e ### :bulb: Accessing Home View"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "thatseant"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "thatseant"
        },
        "content": "\u003e Format: `home`"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "thatseant"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "thatseant"
        },
        "content": "\u003e Displays the Home View. If the user is in Project View, this command changes the view to Home View and "
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "thatseant"
        },
        "content": "\u003e enables the Home View commands in this section."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "thatseant"
        },
        "content": "```"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "thatseant"
        },
        "content": "Hello! Welcome to EZ Manager!"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "thatseant"
        },
        "content": " ---------------------- "
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "thatseant"
        },
        "content": "| PROJECT LIST         |"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "thatseant"
        },
        "content": " ---------------------- "
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "thatseant"
        },
        "content": "Index      Project Name                       Deadline      Tasks Completed"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "thatseant"
        },
        "content": "---------------------------------------------------------------------------"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "thatseant"
        },
        "content": "1.         CS2113T                            04/11/2020    2/3            "
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "thatseant"
        },
        "content": "2.         Home Improvement                   04/09/2021    3/4            "
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "thatseant"
        },
        "content": "3.         Launch Rocket                      04/03/2022    0/1            "
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "thatseant"
        },
        "content": " ---------------------- "
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "thatseant"
        },
        "content": "| MEMBERS LIST         |"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "thatseant"
        },
        "content": " ---------------------- "
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "thatseant"
        },
        "content": "Index      Member Name                        Projects Involved              "
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "thatseant"
        },
        "content": "---------------------------------------------------------------------------"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "thatseant"
        },
        "content": "1.         Sean                               1. CS2113T                     "
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "thatseant"
        },
        "content": "2.         Tom                                1. Home Improvement            "
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "thatseant"
        },
        "content": "3.         Mike                               1. Launch Rocket               "
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "thatseant"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "thatseant"
        },
        "content": "```"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "thatseant"
        },
        "content": "## Home View Commands"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "thatseant"
        },
        "content": "\u003e ### Command Format"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "thatseant"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "thatseant"
        },
        "content": "\u003e Commands are specified in the following format:"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "thatseant"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "thatseant"
        },
        "content": "\u003e **:bulb: Parameters can be specified in any order!**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "thatseant"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "\u003e **:bulb: Commands and parameter types can be in either lowercase or uppercase** "
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "thatseant"
        },
        "content": "\u003e `COMMAND_TYPE`  `PARAMETER1` `PARAMETER2` ..."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "thatseant"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "\u003e Parameters are specified in the following format:"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "thatseant"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "thatseant"
        },
        "content": "\u003e `PARAMETER_TYPE/PARAMETER_VALUE`"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "thatseant"
        },
        "content": "### Viewing the updated Home View: `list`"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "thatseant"
        },
        "content": "Displays the updated Home View to user."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "thatseant"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "riazaham"
        },
        "content": "### Adding a project: `project`"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "riazaham"
        },
        "content": "Adds a new project to the project list."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "riazaham"
        },
        "content": "Format: `project n/PROJECT_NAME`"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "thatseant"
        },
        "content": "\u003e  :warning: Project names should not include slashes as it will be disregarded."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "thatseant"
        },
        "content": "Example usage and output: "
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "thatseant"
        },
        "content": "\u003e  Adds the project \u0027Web Development\u0027 to the project list."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "thatseant"
        },
        "content": "```"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "thatseant"
        },
        "content": "project n/new project"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "thatseant"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "thatseant"
        },
        "content": "Project \"new project\" created!"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "thatseant"
        },
        "content": "```"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "riazaham"
        },
        "content": "### Selecting a project: `select`"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "thatseant"
        },
        "content": "Select a new project from the project list and brings user to Project View of specified project."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "thatseant"
        },
        "content": "\u003e :exclamation: The project must exist before it can be selected."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "riazaham"
        },
        "content": "Format: `select p/PROJECT_INDEX`"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "riazaham"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "thatseant"
        },
        "content": "\u003e Selects the first project in the project list and displays Project View of first project."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "thatseant"
        },
        "content": "```"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "thatseant"
        },
        "content": "select p/1"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "thatseant"
        },
        "content": "```"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "riazaham"
        },
        "content": "### Marking a project as done: `done`"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "riazaham"
        },
        "content": "Marks an existing project as done."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "thatseant"
        },
        "content": "\u003e :exclamation: The project must exist before it can be marked as done."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "riazaham"
        },
        "content": "Format: `done p/PROJECT_INDEX`"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "thatseant"
        },
        "content": "\u003e Marks the first project in the project list as done."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "thatseant"
        },
        "content": "```"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "thatseant"
        },
        "content": "done t/1"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "thatseant"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "thatseant"
        },
        "content": "Task \"New Task\" is done!"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "thatseant"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "thatseant"
        },
        "content": "```"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "riazaham"
        },
        "content": "### Adding a deadline to a project: `deadline`"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "riazaham"
        },
        "content": "Adds a deadline to an existing project."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "thatseant"
        },
        "content": "\u003e :exclamation: The project must exist before a deadline can be added."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "riazaham"
        },
        "content": "Format: `deadline p/PROJECT_INDEX d/DATE`"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "thatseant"
        },
        "content": "\u003e :warning: The `DATE` must be of the form `YYYY-MM-DD`"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "riazaham"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "thatseant"
        },
        "content": "\u003e  Adds the deadline 25/10/2020 to the third project."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "thatseant"
        },
        "content": "```"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "thatseant"
        },
        "content": "deadline p/3 d/2022-03-04"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "thatseant"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "thatseant"
        },
        "content": "Deadline 04/03/2022 added to Project Launch Rocket"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "thatseant"
        },
        "content": "```"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "riazaham"
        },
        "content": "### Adding a description to a project: `description`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "riazaham"
        },
        "content": "Adds a description to an existing project."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "thatseant"
        },
        "content": "\u003e:exclamation: The project must exist before a description can be added."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "riazaham"
        },
        "content": "Format: `description p/PROJECT_INDEX d/DESCRIPTION`"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "thatseant"
        },
        "content": "\u003e :warning: Project descriptions should not include slashes or an error will be shown."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "riazaham"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "thatseant"
        },
        "content": "\u003e  Adds the description `Project for Company X` to the first project."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "thatseant"
        },
        "content": "```"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "thatseant"
        },
        "content": "description p/1 d/This is my Software Engineering Module."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "thatseant"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "thatseant"
        },
        "content": "Project description added \"This is my Software Engineering Module.\"."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "thatseant"
        },
        "content": "```"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "riazaham"
        },
        "content": "### Deleting a project: `delete`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "riazaham"
        },
        "content": "Delete a project from the project list."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "riazaham"
        },
        "content": "Format: `delete p/PROJECT_INDEX`"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "thatseant"
        },
        "content": "\u003e :exclamation:  The project must exist in the project list before it can be deleted."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "riazaham"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "thatseant"
        },
        "content": "* Deletes the first project in the project list."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "thatseant"
        },
        "content": "```"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "thatseant"
        },
        "content": "delete p/2"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "thatseant"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "thatseant"
        },
        "content": "Project \"Home Improvement\" deleted"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "thatseant"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "thatseant"
        },
        "content": "```"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "thatseant"
        },
        "content": "### Adding a member: `member`"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "thatseant"
        },
        "content": "Adds a new member to the member list."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "thatseant"
        },
        "content": "Format: `member n/MEMBER_NAME`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "thatseant"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "thatseant"
        },
        "content": "\u003e Adds the member \u0027John Doe\u0027 to the member list."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "thatseant"
        },
        "content": "```"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "thatseant"
        },
        "content": "member n/John Doe"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "thatseant"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "thatseant"
        },
        "content": "Team member \"John Doe\" has been added"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "thatseant"
        },
        "content": "```"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "thatseant"
        },
        "content": "### Assigning a member to a project: `assign`"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "thatseant"
        },
        "content": "Assigns an existing member to an existing project."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "thatseant"
        },
        "content": "\u003e :exclamation: The project must exist before it can be assigned a member."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "thatseant"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "thatseant"
        },
        "content": "\u003e :exclamation: The member must exist before they can be assigned a project."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "thatseant"
        },
        "content": "Format: `assign p/PROJECT_INDEX m/MEMBER_INDEX`"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "thatseant"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "thatseant"
        },
        "content": "\u003e Assigns the first member in the member list to the first project in the project list"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "thatseant"
        },
        "content": "```"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "thatseant"
        },
        "content": "assign p/1 m/1"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "thatseant"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "thatseant"
        },
        "content": "Tom assigned to Project \"CS2113T\""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "thatseant"
        },
        "content": "```"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "thatseant"
        },
        "content": "### Removing a member: `remove`"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "thatseant"
        },
        "content": "Removes an existing member from the member list."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "thatseant"
        },
        "content": "\u003e :exclamation: The member must exist before they can be removed."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "thatseant"
        },
        "content": "Format: `remove m/MEMBER_INDEX`"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "thatseant"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "thatseant"
        },
        "content": "\u003e  Removes the first member from the member list."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "thatseant"
        },
        "content": "```"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "thatseant"
        },
        "content": "remove m/1"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "thatseant"
        },
        "content": "___________________________________________________________"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "thatseant"
        },
        "content": "Team member \"Mike\" has been removed"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "thatseant"
        },
        "content": "```"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "thatseant"
        },
        "content": "### View hours worked by member: `hours`"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "thatseant"
        },
        "content": "View the total hours worked by a worker across all tasks assigned in all projects."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "thatseant"
        },
        "content": "\u003e :exclamation: ​The member must exist before hours worked can be viewed."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "thatseant"
        },
        "content": "Format: `hours m/MEMBER_INDEX`"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "thatseant"
        },
        "content": "Example usage and output:"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "thatseant"
        },
        "content": "```"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "thatseant"
        },
        "content": "hours m/1"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "thatseant"
        },
        "content": "-------------------------------"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "thatseant"
        },
        "content": "John worked for 2.5 hours."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "thatseant"
        },
        "content": "```"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "thatseant"
        },
        "content": "### Exiting EZ Manager: `bye`"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "thatseant"
        },
        "content": "You can exit the program with the `bye` command."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "thatseant"
        },
        "content": "Format: `bye`"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "thatseant"
        },
        "content": "## Project View"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "thatseant"
        },
        "content": "The Project View displays the full list of tasks and members in a particular project."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "thatseant"
        },
        "content": "The manager can add and edit tasks and assign members to tasks."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "thatseant"
        },
        "content": "\u003e ### :bulb: Accessing Project View"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "thatseant"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "thatseant"
        },
        "content": "\u003e This view is accessed by [selecting a project](#selecting-a-project-select) from the Home View."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "thatseant"
        },
        "content": "```"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "thatseant"
        },
        "content": "Project \"CS2113T\""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "thatseant"
        },
        "content": "Description:"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "thatseant"
        },
        "content": "This is my Software Engineering Module."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "thatseant"
        },
        "content": " ---------------------"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "thatseant"
        },
        "content": "| TASK LIST           |"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "thatseant"
        },
        "content": " ---------------------"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "thatseant"
        },
        "content": "Index  Status   Description        Deadline        Priority      Expected Hrs     Actual Hrs   | Members Involved"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "thatseant"
        },
        "content": "-----------------------------------------------------------------------------------------------|----------------"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "thatseant"
        },
        "content": "1      (Y)      Coding             04/11/2020      -             -                 -           |Sean|Tom|"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "thatseant"
        },
        "content": "2      (Y)      Testing            12/11/2021      -             -                 -             "
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "thatseant"
        },
        "content": "3      (N)      Code Review        -               -             -                 -           |Mike|"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "thatseant"
        },
        "content": " "
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "thatseant"
        },
        "content": " ---------------------"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "thatseant"
        },
        "content": "| MEMBERS LIST        |"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "thatseant"
        },
        "content": " ---------------------"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "thatseant"
        },
        "content": "1. Sean"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "thatseant"
        },
        "content": "2. Tom"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "thatseant"
        },
        "content": "3. Mike"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "thatseant"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "thatseant"
        },
        "content": "```"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "thatseant"
        },
        "content": "## Project View Commands"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "thatseant"
        },
        "content": "### Viewing the updated Project View: `list`"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "thatseant"
        },
        "content": "Displays the updated Project View to user."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "thatseant"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "riazaham"
        },
        "content": "### Adding a task: `task`"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "riazaham"
        },
        "content": "Adds a new task to the task list."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "riazaham"
        },
        "content": "Format: `task n/TASK_NAME`"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "thatseant"
        },
        "content": "\u003e :warning: Task names should not include slashes or it will be disregarded."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "riazaham"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "thatseant"
        },
        "content": "\u003e  Adds the task \u0027Deploy Version 2.0\u0027 to the task list."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "thatseant"
        },
        "content": "```"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "thatseant"
        },
        "content": "task n/Deploy Version 2.0"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "thatseant"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "thatseant"
        },
        "content": "Task \"Deploy Version 2.0\" created!"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "thatseant"
        },
        "content": "```"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "riazaham"
        },
        "content": "### Marking a task as done: `done`"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "riazaham"
        },
        "content": "Marks an existing task as done."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "thatseant"
        },
        "content": "\u003e :exclamation: The task must exist before it can be selected."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "thatseant"
        },
        "content": "Format: `done t/TASK_INDEX`"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "riazaham"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "thatseant"
        },
        "content": "\u003e Marks the first task in the task list as done."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "thatseant"
        },
        "content": "```"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "thatseant"
        },
        "content": "done t/1 "
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "thatseant"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "thatseant"
        },
        "content": "Task \"Coding\" is done!"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "thatseant"
        },
        "content": "```"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "riazaham"
        },
        "content": "### Adding a deadline to a task: `deadline`"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "riazaham"
        },
        "content": "Adds a deadline to an existing task."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "riazaham"
        },
        "content": "Format: `deadline t/TASK_INDEX d/DATE`"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "thatseant"
        },
        "content": "\u003e :warning: The `DATE` must be of the form `YYYY-MM-DD`"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "riazaham"
        },
        "content": "* The task must exist before a deadline can be added."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "riazaham"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "thatseant"
        },
        "content": "\u003e  Adds the deadline 25/10/2020 to the first task in the task list."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "thatseant"
        },
        "content": "```"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "thatseant"
        },
        "content": "deadline t/1 d/2020-10-25"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "thatseant"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "thatseant"
        },
        "content": "Deadline 25/10/2020 added to Task Coding"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "thatseant"
        },
        "content": "```"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "riazaham"
        },
        "content": "### Adding a priority to a task: `priority`"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "riazaham"
        },
        "content": "Adds a priority to an existing task."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "thatseant"
        },
        "content": "\u003e :bulb: 1 denotes the highest priority."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "thatseant"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "thatseant"
        },
        "content": "\u003e :exclamation: The task must exist before a deadline can be added."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "riazaham"
        },
        "content": "Format: `priority t/TASK_INDEX p/PRIORITY`"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "thatseant"
        },
        "content": ":warning: The `PRIORITY` must be a positive integer."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "thatseant"
        },
        "content": "\u003e Adds the highest priority, 1, to the first task in the task list."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "thatseant"
        },
        "content": "```"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "thatseant"
        },
        "content": "priority t/1 p/1"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "thatseant"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "thatseant"
        },
        "content": "Priority \"1\" has been assigned to \"Coding\""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "thatseant"
        },
        "content": "```"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "riazaham"
        },
        "content": "### Deleting a task: `delete`"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "riazaham"
        },
        "content": "Deletes a task from the task list."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "thatseant"
        },
        "content": "\u003e :exclamation: The task must exist in the task list before it can be deleted."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "thatseant"
        },
        "content": "Format: `delete t/TASK_INDEX`"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "riazaham"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "thatseant"
        },
        "content": "\u003e Deletes the first task in the task list."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "thatseant"
        },
        "content": "```"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "thatseant"
        },
        "content": "delete t/1"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "thatseant"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "thatseant"
        },
        "content": "Task \"Coding\" removed!"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "thatseant"
        },
        "content": "```"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "riazaham"
        },
        "content": "### Assigning a member to a task: `assign`"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "riazaham"
        },
        "content": "Assigns an existing member to an existing task."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "thatseant"
        },
        "content": "\u003e :exclamation: Members must belong to a project before they can be assigned tasks."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "riazaham"
        },
        "content": "Format: `assign t/TASK_INDEX m/MEMBER_INDEX`"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "riazaham"
        },
        "content": "* The `TASK_INDEX` must be a positive integer."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "riazaham"
        },
        "content": "* The `MEMBER_INDEX` must be a positive integer."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "thatseant"
        },
        "content": "* The task must exist before it can be assigned a member."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "riazaham"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "thatseant"
        },
        "content": "\u003e Assigns the first member in the member list to the first task in the task list"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "thatseant"
        },
        "content": "```"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "thatseant"
        },
        "content": "assign m/1 t/1"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "thatseant"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "thatseant"
        },
        "content": "Member \"Tom\" has been assigned to \"Code Review\""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "thatseant"
        },
        "content": "```"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "thatseant"
        },
        "content": "### Add estimated time: `estimate`"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "thatseant"
        },
        "content": "Add estimated time taken for task to complete."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "thatseant"
        },
        "content": "Format: `estimate t/TASK_INDEX h/HOURS m/MINUTES`"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "thatseant"
        },
        "content": "\u003e :warning:  `HOURS` and `MINUTES ` must both be positive numbers."
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "thatseant"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "thatseant"
        },
        "content": "Example usage and output:"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "thatseant"
        },
        "content": "```"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "thatseant"
        },
        "content": "estimate t/1 h/12 m/30"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "thatseant"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "thatseant"
        },
        "content": "Task \"New Task\" has estimated time of 12 hours and 30 minutes"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "thatseant"
        },
        "content": "```"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "thatseant"
        },
        "content": "### Add actual time taken: `actual`"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "thatseant"
        },
        "content": "Add actual time taken for task to complete."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "thatseant"
        },
        "content": "\u003e :exclamation: Task must be marked as done before actual time taken can be added."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "thatseant"
        },
        "content": "Format: `actual t/TASK_INDEX h/HOURS m/MINUTES`"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "thatseant"
        },
        "content": "\u003e :warning:  `HOURS` and `MINUTES   `  must both be positive numbers."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "thatseant"
        },
        "content": "Example usage and output:"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "thatseant"
        },
        "content": "```"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "thatseant"
        },
        "content": "done t/1"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "thatseant"
        },
        "content": "actual t/1 h/12 m/30"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "thatseant"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "thatseant"
        },
        "content": "Task \"New Task\" took 12 hours and 30 minutes to be completed."
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "thatseant"
        },
        "content": "```"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "thatseant"
        },
        "content": "### Sort tasks: `sort`"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "thatseant"
        },
        "content": "Sort tasks by priority, deadline or actual time taken."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "thatseant"
        },
        "content": ":bulb: Highest priority of 1 will be displayed at top."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "thatseant"
        },
        "content": ":bulb: Earliest deadline will be displayed at top."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "thatseant"
        },
        "content": ":bulb: Shortest actual time will be displayed at top."
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "thatseant"
        },
        "content": "Format: `sort s/SORTING_TYPE`"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "thatseant"
        },
        "content": "* Sorting type `t` refers to actual time, `p` refers to priority and `d` refers to deadline."
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "thatseant"
        },
        "content": "Example usage and output:"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "thatseant"
        },
        "content": "```"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "thatseant"
        },
        "content": "sort s/d"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "thatseant"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "thatseant"
        },
        "content": "Tasklist sorted based on deadline"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "thatseant"
        },
        "content": "```"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "thatseant"
        },
        "content": "### Exiting EZ Manager: `bye`"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "riazaham"
        },
        "content": "You can exit the program with the `bye` command."
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "riazaham"
        },
        "content": "Format: `bye`"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "**Q**: How do I transfer my data to another computer? "
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "**A**: {your answer here}"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "## Command Summary"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "thatseant"
        },
        "content": "Home View Commands"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "riazaham"
        },
        "content": "| Commands | Action | Examples |"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "riazaham"
        },
        "content": "| -------- | ------ | -------- |"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "riazaham"
        },
        "content": "| project | Creates a new project in the project list in Home View | `project n/Web Development Project` |"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "riazaham"
        },
        "content": "| member  | Creates a new member in the member list | `member n/John Doe` |"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "thatseant"
        },
        "content": "| list    | Displays the updated Home View | `list` |"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "thatseant"
        },
        "content": "| select  | Selects the specified project and program enters ProjectView | `select p/1` |"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "thatseant"
        },
        "content": "| done    | Marks the specified project as done | `done p/1` |"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "thatseant"
        },
        "content": "| delete  | Deletes the specified project | `delete p/1` |"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "thatseant"
        },
        "content": "| description | Assigns a description to the specified project | `description p/1 d/Project for Company X` |"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "thatseant"
        },
        "content": "| deadline | Assigns a deadline to the specified project | `deadline p/1 d/2020-10-25` |"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "thatseant"
        },
        "content": "| assign  | Assigns member to specified project | `assign p/1 m/1` |"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "riazaham"
        },
        "content": "| remove  | Removes specified member from the member list | `remove m/1` |"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "thatseant"
        },
        "content": "| hours  | View hours worked by a specific worker across all projects | `hours m/1` |"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "thatseant"
        },
        "content": "| bye  | Exit EZ Manager | `bye` |"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "thatseant"
        },
        "content": "Project View Commands"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "thatseant"
        },
        "content": "| Commands | Action | Examples |"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "thatseant"
        },
        "content": "| -------- | ------ | -------- |"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "thatseant"
        },
        "content": "| task    | Creates a new task in the task list in Project View| `task n/Deploy Version 2.0` |"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "thatseant"
        },
        "content": "| list    | Displays the updated Project View | `list` |"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "thatseant"
        },
        "content": "| select  | Selects the specified task | `select t/1` |"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "thatseant"
        },
        "content": "| done    | Marks the specified task as done | `done t/1` |"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "thatseant"
        },
        "content": "| delete  | Deletes the specified task | `delete t/1` |"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "thatseant"
        },
        "content": "| deadline | Assigns a deadline to the specified task | `deadline t/1 d/2020-10-25` |"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "thatseant"
        },
        "content": "| priority | Assigns a priority to the specified task | `priority t/1 p/1` |"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "thatseant"
        },
        "content": "| home    | Switches from ProjectView to HomeView | `home` |"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "thatseant"
        },
        "content": "| assign  | Assigns member to specified task | `assign t/1 m/1` |"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "thatseant"
        },
        "content": "| estimate  | Add estimated time taken for task to complete | `estimate t/1 h/3 m/20` |"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "thatseant"
        },
        "content": "| actual  | Add actual time taken for task to complete | `actual t/1 h/3 m/20` |"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "thatseant"
        },
        "content": "| sort  | Sort tasks based on sorting type | `sort s/p` |"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "thatseant"
        },
        "content": "| bye  | Exit EZ Manager | `bye` |"
      }
    ],
    "authorContributionMap": {
      "thatseant": 438,
      "samuellleow": 3,
      "riazaham": 144,
      "-": 34
    }
  },
  {
    "path": "docs/team/riazaham.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "riazaham"
        },
        "content": "# Riaz Ahamed\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "riazaham"
        },
        "content": "## Project: EZ Manager"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "riazaham"
        },
        "content": "EZ Manager is a simple and efficient project management tool for software project managers. "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "riazaham"
        },
        "content": "EZ Manager is a desktop application and the user interacts with the CLI "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "riazaham"
        },
        "content": "(Command Line Interface) to manage projects, tasks and team members."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "riazaham"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "riazaham"
        },
        "content": "#### Code contributed: [RepoSense Link](https://nus-cs2113-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003driazaham)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "riazaham"
        },
        "content": "### Features added"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "riazaham"
        },
        "content": "**Select Task**: Allows the user to select specific tasks."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "riazaham"
        },
        "content": "**Edit Task**: Allows the user to edit specific tasks."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "riazaham"
        },
        "content": "**Home**: Allows the user to switch from project view to home view. "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "riazaham"
        },
        "content": "**Delete Task**: Allows the user to delete specific tasks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "riazaham"
        },
        "content": "**Assign team member to task**: Allows the user to assign an existing member to a specific task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "riazaham"
        },
        "content": "**Assign priority to task**: Allows the user to assign priority to a specific task"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "riazaham"
        },
        "content": "### Enhancements to the codebase"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "riazaham"
        },
        "content": "The initial design of our codebase implemented the logic for the different commands in one Parser class."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "riazaham"
        },
        "content": "As a team, we decided to redesign the codebase such that the logic is implemented in the respective command classes."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "riazaham"
        },
        "content": "Hence, I contributed to the design by abstracting logic from most functions in the Parser class to the respective command classes."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "riazaham"
        },
        "content": "This enhancement was a tedious process as I had to redesign the entire codebase for every feature."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "riazaham"
        },
        "content": "#### Code testing"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "riazaham"
        },
        "content": "I contributed to the testing of the program by writing JUnit tests for the features"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "riazaham"
        },
        "content": "mentioned above."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "riazaham"
        },
        "content": "#### Contributions to the UG (User Guide)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "riazaham"
        },
        "content": "I contributed to the UG in the following ways:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "riazaham"
        },
        "content": "- Designed the application logo"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "riazaham"
        },
        "content": "- Wrote user guide for the features mentioned above"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "riazaham"
        },
        "content": "- Drafted the initial official full UG with hyperlinked table of contents"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "riazaham"
        },
        "content": "- Formatted the full UG with text colors, decorations and indentations"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "riazaham"
        },
        "content": "#### Contributions to the DG (Developer Guide)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "riazaham"
        },
        "content": "I contributed to the DG in the following ways:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "riazaham"
        },
        "content": "- Included the code explanations and the sequence diagrams for the features mentioned above"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "riazaham"
        },
        "content": "- Fixed most of the sequence diagram issues brought up by the tutor across the DG"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "riazaham"
        },
        "content": "#### Contributions to reviewing/mentoring"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "riazaham"
        },
        "content": "Our project has about 70 PRs (Pull requests) as of 6/11/2020. I reviewed, commented "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "riazaham"
        },
        "content": "and approved almost half, 34 of the PRs."
      }
    ],
    "authorContributionMap": {
      "riazaham": 44
    }
  },
  {
    "path": "docs/team/samuellleow.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "# Samuel Leow Wei Han - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "## Project: EzManager"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "EZ Manager is a simple and efficient project management tool for software project managers. "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "EZ Manager is a desktop application with the user interacting with the CLI "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "(Command Line Interface) to manage projects, tasks and team members."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "### Summary of Contributions"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "* **Code contributed**: [RepoSense Link](https://nus-cs2113-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dsamuellleow)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "* **Features Added**: "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    * **Home View**: Allows the user to have an overview of all the projects and members in the program."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    * **Remove member (In home view)**: Allows the user to remove a specified member from the program entirely."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    * **Remove member (In project view)**: Allows the user to remove a specified member from the current project. "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    * **Add a new Project**: Allows the user to add a new project to the program. "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    * **Add Project Description**: Allows the user to add a project description to a specified project."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    * **Add Project Deadline**: Allows the user to add a deadline to a specified project."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "* **Noteworthy Feature**: Added home view feature. (Pull Requests #97 and #175)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    * What it does: Allows the user to have an overview of all the projects and members in the program."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    including important information such as description, deadline, tasks completed per project and projects each member is involved in."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    * Justification: This feature improves the product significantly because the user do not have to type in multiple commands"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    to view a list of projects or a list of members separately. An overview could be seen with one command."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    * Highlights: This feature displays remarks of each project, which shows the user the next task with an upcoming deadline."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    If the deadline is within 5 days from today\u0027s date, and the task has not been done, \"!!!!!WARNING!!!!!\" will be displayed in the remarks to alert"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    the user."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "* **Enhancement to existing feature**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    * Extracted printing elements to Ui class. (Pull Request #50)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    * Show correct assigned members in each project. (Pull Request #90)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    * List of projects in home view sorted by their deadlines as default view. (Pull Request #76)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    * Assign command does not allow assignment of repeated projects and tasks (Pull Request #179)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    * User Guide:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        * Added documentation for the features `remove`, `project`, `description`, `deadline` and `list`."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    * Developer Guide:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        * Design section: Model Component"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        * Home view"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        * Add deadlines to projects"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        * Add description to projects"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        * Delete a specified project"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        * Mark project as done"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        * Remove members"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        * Appendix A Product Scope: User Stories"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "* **Contributions to reviewing/mentoring**:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    * Our project had about 70 closed pull requests as of 8/11/2020. I reviewed, commented and approved about 20 of those PRs."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    In those reviews, I provided extensive problem recognitions to those codes that were not suitable and provided explanations"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    to my teammates in parts of the codes that they did not understand. "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    "
      }
    ],
    "authorContributionMap": {
      "samuellleow": 54
    }
  },
  {
    "path": "docs/team/thatseant.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thatseant"
        },
        "content": "# Sean Tan\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thatseant"
        },
        "content": "## Project: EZ Manager"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thatseant"
        },
        "content": "EZ Manager is a CLI project management tool for software managers that allows them to manage the projects and members on their teams."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thatseant"
        },
        "content": "This documents highlights my contributions to EZ Manager."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thatseant"
        },
        "content": "### Code Contributed "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thatseant"
        },
        "content": "#### [Sean\u0027s RepoSense](https://nus-cs2113-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dthatseant)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thatseant"
        },
        "content": "## Features added"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thatseant"
        },
        "content": "### **Architecture**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thatseant"
        },
        "content": "**Implementation of App\u0027s Parser**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thatseant"
        },
        "content": "My main enhancement was concentrated around the app’s architecture. I advocated the team move most of the logic to the individual command classes for iterative and independent development. I implemented the app’s parser to support this. In getParams(), a generic regex allows for retrieving any parameters for any command. With the parameters stored in a hashmap, I then sent this hashmap to the command classes in getCommand(). Furthermore, this meant that the user can specify parameters in any order. This made development so much easier for my teammates as they can concentrate on writing the logic of command execution with parsing done."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thatseant"
        },
        "content": "**Refactoring of App**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thatseant"
        },
        "content": "I restructured the app to make it more user-friendly. Previously, there were team member list, tasks list and project list. Users were prone to confusion due to multiple lists that showed only limited information. I advocated for the team to implement Home View and Project View and replaced the List Command to display these views. Additionally, I designed mockups for the team so they understood what I meant. With this change, users immediately know which view they are in and which commands they could execute."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thatseant"
        },
        "content": "**Classes written**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thatseant"
        },
        "content": "* Parser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thatseant"
        },
        "content": "* TaskCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thatseant"
        },
        "content": "* ActualTimeCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thatseant"
        },
        "content": "* EstimatedTimeCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thatseant"
        },
        "content": "* TaskAssignDeadlineCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thatseant"
        },
        "content": "* TaskAssignPriorityCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thatseant"
        },
        "content": "* TeamMemberHoursCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thatseant"
        },
        "content": "## **Contributions to User Guide (UG)**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thatseant"
        },
        "content": "My contributions were the following:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thatseant"
        },
        "content": "- Restructured UG so commands were grouped by Home View and Project View"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thatseant"
        },
        "content": "- Added expected output to all UG commands."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thatseant"
        },
        "content": "- Added warnings and tips so users knew what to take note of when using the app."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thatseant"
        },
        "content": "## **Contributions to Developer Guide (UG)**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thatseant"
        },
        "content": "My contributions were the following:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thatseant"
        },
        "content": "- Design section, specifically the introduction, consideration and overall architecture, and logic components. "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thatseant"
        },
        "content": "- Delete Task"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thatseant"
        },
        "content": "- Assign Deadlines to Task"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thatseant"
        },
        "content": "- Assign actual duration for tasks"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thatseant"
        },
        "content": "- Assign estimated duration for tasks."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thatseant"
        },
        "content": "## **Contributions to Team-Based Tasks**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thatseant"
        },
        "content": "* Initiated the team’s practice of creating issues for our user stories by creating tags and opening issues during the first weeks. Advocated for my team to do these for issues they were assigned in the following weeks. "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thatseant"
        },
        "content": "* Categorise all of the issues from PE Dry-Run so my team has a better understanding of what had to be fixed and we can assign work to each other."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thatseant"
        },
        "content": "* Increased the number of approvals required for each pull request to 2 which resulted in better code quality and communication between members."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thatseant"
        },
        "content": "#### Contributions to reviewing/mentoring"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thatseant"
        },
        "content": "Of the 71 closed pull requests as of 7th November, I reviewed 34. In many of these pull requests, I looked through the code line-by-line and noted down issues or areas where the new code did not fit in well with the rest of the codebase."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thatseant"
        },
        "content": "https://docs.google.com/document/d/1bKq28FjPE9JTeszGBGBwi5R1I_JmIS6Zhv00lq6c6ik/edit"
      }
    ],
    "authorContributionMap": {
      "thatseant": 69
    }
  },
  {
    "path": "src/main/java/seedu/duke/Duke.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import seedu.duke.member.TeamMember;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import seedu.duke.project.Project;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Main entry-point for the java.duke.Duke application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    private static ArrayList\u003cTeamMember\u003e teamMembers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    private static ArrayList\u003cProject\u003e projects \u003d  new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public static void main(String[] args) throws DukeExceptions {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        ui.printWelcome();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                Command commandInput \u003d Parser.parse(in.nextLine());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thatseant"
        },
        "content": "                ui.printLine();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "riazaham"
        },
        "content": "                String output \u003d commandInput.executeCommand(projects, teamMembers);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thatseant"
        },
        "content": "                ui.printOutput(output);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                isExit \u003d commandInput.isExit();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            } catch (StringIndexOutOfBoundsException | ArrayIndexOutOfBoundsException | DukeExceptions e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "riazaham"
        },
        "content": "                System.out.println(e);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            ui.printLine();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samuelchristopher": 5,
      "thatseant": 5,
      "samuellleow": 9,
      "shreytheshreyas": 1,
      "riazaham": 7,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/duke/DukeExceptions.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "riazaham"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "riazaham"
        },
        "content": "public class DukeExceptions extends Exception {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    private HashMap\u003cString,String\u003e exceptionMessageList \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    private String messageType;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public DukeExceptions(String messageType) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        initializeMap();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        this.messageType \u003d messageType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    public void initializeMap() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        exceptionMessageList.put(\"Project\",\"Command incomplete!, You need to include a project description.\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        exceptionMessageList.put(\"Delete Project\",\"Command incomplete! You need to mention the project Id\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        exceptionMessageList.put(\"Task Description\",\"Command incomplete!, You need to include a task description.\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        exceptionMessageList.put(\"Member\",\"Command incorect! You need to mention Member\u0027s name\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        exceptionMessageList.put(\"Delete Task\",\"Command incomplete! You need to mention the project Id\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        exceptionMessageList.put(\"Switch\",\"You are already in project view\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        exceptionMessageList.put(\"Add Project\",\"You cannot add tasks in project view\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        exceptionMessageList.put(\"Add Task\",\"You cannot add projects in task view\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        exceptionMessageList.put(\"WrongDateFormat\", \"Date must be specified in format YYYY-MM-DD\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        exceptionMessageList.put(\"IndexNotFound\", \"Index not specified\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        //file handler exceptions"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        exceptionMessageList.put(\"Create File\",\"The file could not be created\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        exceptionMessageList.put(\"Open File\",\"The file could not be opened\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        exceptionMessageList.put(\"default\",\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        exceptionMessageList.put(\"unrecognisedCommand\",\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thatseant"
        },
        "content": "                + \"command means :-(\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        exceptionMessageList.put(\"mustBeInHomeView\",\"You must be in Home View to do that!\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        exceptionMessageList.put(\"mustBeInProjectView\",\"You must be in Project View to do that!\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        exceptionMessageList.put(\"emptyProjectList\",\"Project list is empty!\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        exceptionMessageList.put(\"invalidTaskID\",\"Task ID does not exist!\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        exceptionMessageList.put(\"invalidTeamMemberID\",\"Team Member ID does not exist!\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        exceptionMessageList.put(\"invalidProjectID\",\"Project ID does not exist!\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        exceptionMessageList.put(\"taskNotDone\",\"Task must be marked as done before adding \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thatseant"
        },
        "content": "                + \"actual duration taken to complete!\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        exceptionMessageList.put(\"emptyTeamMembersList\",\"Team Members list is empty!\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        exceptionMessageList.put(\"emptyTaskList\",\"Task list is empty!\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        exceptionMessageList.put(\"invalidMemberID\",\"The member ID entered does not exist\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        exceptionMessageList.put(\"priorityFormatError\",\"The priority should be a number\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        exceptionMessageList.put(\"InvalidSortingParameter\",\"You have entered the wrong sorting parameter\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        exceptionMessageList.put(\"indexNonInteger\",\"Index must be an integer!\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        exceptionMessageList.put(\"forwardSlashError\",\"Parameters should not contain slashes!\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        exceptionMessageList.put(\"duplicateParams\",\"Duplicate Parameters detected!\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        exceptionMessageList.put(\"missingParameters\",\"Certain Parameters are missing!\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        exceptionMessageList.put(\"projectAlreadyAssigned\",\"Project has already been assigned to member!\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        exceptionMessageList.put(\"TaskAlreadyAssigned\",\"Task has already been assigned to member!\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        exceptionMessageList.put(\"incorrectListCommand\",\"Please only enter \\\"list\\\" into the command \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                + \"to display the home view or project view!\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        return exceptionMessageList.get(messageType);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "riazaham"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thatseant": 10,
      "samuelchristopher": 1,
      "samuellleow": 4,
      "shreytheshreyas": 28,
      "riazaham": 16
    }
  },
  {
    "path": "src/main/java/seedu/duke/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thatseant"
        },
        "content": "//@@author thatseant"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thatseant"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.commands.ExitCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.commands.PrintHomeViewCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.commands.HomeCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.commands.member.AssignMemberToProjectCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.commands.member.TeamMemberAddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.commands.member.TeamMemberAssignToTaskCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.commands.member.TeamMemberDeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.commands.member.TeamMemberHoursCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.commands.project.ProjectDeadlineCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.commands.project.ProjectDescriptionCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.commands.project.ProjectDeleteCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.commands.project.ProjectCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.commands.project.ProjectSelectCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.commands.project.ProjectDoneCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.commands.task.TaskAssignPriorityCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.commands.task.TaskDeleteCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.commands.task.TaskListCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.commands.task.TaskCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.commands.task.TaskDoneCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.commands.task.TaskAssignDeadlineCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.commands.task.TaskEditCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.commands.task.ActualTimeCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.commands.task.EstimatedTimeCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.commands.task.TaskSortCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thatseant"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    private static int projectIndex \u003d -1;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public static void setProjectIndex(int newIndex) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        projectIndex \u003d newIndex;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public static int getProjectIndex() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        return projectIndex;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public static HashMap\u003cString, String\u003e getParams(String paramsString) throws DukeExceptions {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        HashMap\u003cString, String\u003e inputParams \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Pattern p \u003d Pattern.compile(\".\\\\/.+?(?\u003d\\\\s.\\\\/.+)|.\\\\/.+\"); //Regex to extract parameter terms"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Matcher m \u003d p.matcher(paramsString);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        while (m.find()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            String[] keyAndValue \u003d m.group().split(\"/\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            if (keyAndValue.length !\u003d 2) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thatseant"
        },
        "content": "                throw new DukeExceptions(\"forwardSlashError\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            String paramType \u003d keyAndValue[0].toLowerCase();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            String paramValue \u003d keyAndValue[1];"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            if (inputParams.containsKey(paramType)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thatseant"
        },
        "content": "                throw new DukeExceptions(\"duplicateParams\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            inputParams.put(paramType, paramValue);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        return inputParams;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public static String getHashValue(HashMap\u003cString, String\u003e hashmap, String key) throws DukeExceptions {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        if (!hashmap.containsKey(key)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            throw new DukeExceptions(\"missingParameters\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            return hashmap.get(key);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "thatseant"
        },
        "content": "     * Parses user input into project command for execution."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "thatseant"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "thatseant"
        },
        "content": "     * @param inputCommand Full user input command string"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "thatseant"
        },
        "content": "     * @return Command object corresponding to the input command of the user"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "thatseant"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public static Command parse(String inputCommand) throws DukeExceptions {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        String[] inputWords \u003d inputCommand.split(\"\\\\s+\", 2); //Splits command into type and parameters"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        String commandType \u003d inputWords[0].toLowerCase();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        HashMap\u003cString, String\u003e params \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        if (inputWords.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            params \u003d getParams(inputWords[1]);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        boolean isHomeView \u003d (projectIndex \u003d\u003d -1); //In main project list view"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Command command \u003d getCommand(isHomeView, commandType, params, projectIndex, inputWords);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public static Command getCommand(boolean isHomeView, String commandType, HashMap\u003cString, String\u003e params,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "thatseant"
        },
        "content": "                                     int projectIndex, String[] inputWords) throws DukeExceptions {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Command command;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        switch (commandType) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            if (inputWords.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "thatseant"
        },
        "content": "                throw new DukeExceptions(\"incorrectListCommand\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            command \u003d (isHomeView)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "thatseant"
        },
        "content": "                    ? new PrintHomeViewCommand() : new TaskListCommand(projectIndex);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        case \"select\":"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            if (!isHomeView) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "thatseant"
        },
        "content": "                throw new DukeExceptions(\"mustBeInHomeView\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            command \u003d new ProjectSelectCommand(params);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        case \"description\":"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            if (!isHomeView) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "thatseant"
        },
        "content": "                throw new DukeExceptions(\"mustBeInHomeView\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            command \u003d new ProjectDescriptionCommand(params);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        case \"project\":"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            if (!isHomeView) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "thatseant"
        },
        "content": "                throw new DukeExceptions(\"mustBeInHomeView\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            command \u003d new ProjectCommand(params);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        case \"task\":"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            if (isHomeView) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "thatseant"
        },
        "content": "                throw new DukeExceptions(\"mustBeInProjectView\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            command \u003d new TaskCommand(params, projectIndex);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        case \"edit\":"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            if (isHomeView) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "thatseant"
        },
        "content": "                throw new DukeExceptions(\"mustBeInProjectView\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            command \u003d new TaskEditCommand(params, projectIndex);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            command \u003d (isHomeView)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "thatseant"
        },
        "content": "                    ? new ProjectDoneCommand(params, projectIndex) : new TaskDoneCommand(params, projectIndex);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            command \u003d (isHomeView)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "thatseant"
        },
        "content": "                    ? new ProjectDeadlineCommand(params) : new TaskAssignDeadlineCommand(params, projectIndex);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            command \u003d (isHomeView)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "thatseant"
        },
        "content": "                    ? new ProjectDeleteCommand(params) : new TaskDeleteCommand(params, projectIndex);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        case \"actual\":"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            command \u003d new ActualTimeCommand(params, projectIndex);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        case \"estimate\":"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            command \u003d new EstimatedTimeCommand(params, projectIndex);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        case \"home\":"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            command \u003d new HomeCommand(projectIndex);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        case \"member\":"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            if (!isHomeView) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "thatseant"
        },
        "content": "                throw new DukeExceptions(\"mustBeInHomeView\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            command \u003d new TeamMemberAddCommand(params);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        case \"remove\":"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            command \u003d new TeamMemberDeleteCommand(params, projectIndex);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        case \"assign\":"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            command \u003d (isHomeView)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "thatseant"
        },
        "content": "                    ? new AssignMemberToProjectCommand(params, projectIndex)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "thatseant"
        },
        "content": "                    : new TeamMemberAssignToTaskCommand(params, projectIndex);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        case \"priority\":"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            if (isHomeView) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "thatseant"
        },
        "content": "                throw new DukeExceptions(\"mustBeInProjectView\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            command \u003d new TaskAssignPriorityCommand(params, projectIndex);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            command \u003d new ExitCommand();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        case \"sort\":"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            if (isHomeView) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "thatseant"
        },
        "content": "                throw new DukeExceptions(\"mustBeInProjectView\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            command \u003d new TaskSortCommand(params, projectIndex);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        case \"hours\":"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            if (!isHomeView) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "thatseant"
        },
        "content": "                throw new DukeExceptions(\"mustBeInHomeView\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            command \u003d new TeamMemberHoursCommand(params, projectIndex);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            throw new DukeExceptions(\"unrecognisedCommand\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "thatseant"
        },
        "content": "}"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "thatseant": 205
    }
  },
  {
    "path": "src/main/java/seedu/duke/Util.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thatseant"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thatseant"
        },
        "content": "public class Util {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public static final int USER_JAVA_INDEX_DIFF \u003d 1;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public static final String TASK_INDEX_KEY \u003d \"t\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public static final String TASK_NAME_KEY \u003d \"n\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public static final String DATE_KEY \u003d \"d\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public static final String PROJECT_INDEX_KEY \u003d \"p\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public static final int MINUTES_IN_HOUR_INT \u003d 60;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public static final double MINUTES_IN_HOUR_DOUBLE \u003d 60.0;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public static final String HOUR_INDEX_KEY \u003d \"h\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public static final String MINUTE_INDEX_KEY \u003d \"m\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public static final String MEMBER_INDEX_KEY \u003d \"m\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public static final String INDEX_NON_INTEGER \u003d \"indexNonInteger\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public static final String INVALID_TEAM_MEMBER_ID \u003d \"invalidTeamMemberID\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public static final String INVALID_PROJECT_ID \u003d \"invalidProjectID\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public static final String INVALID_MEMBER_ID \u003d \"invalidMemberID\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public static final String INVALID_TASK_ID \u003d \"invalidTaskID\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public static final String TASK_NOT_DONE \u003d \"taskNotDone\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public static final String WRONG_DATE_FORMAT \u003d \"WrongDateFormat\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public static final String EMPTY_PROJECT_LIST \u003d \"emptyProjectList\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thatseant"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thatseant": 22
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "riazaham"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.DukeExceptions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.member.TeamMember;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import seedu.duke.project.Project;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samuellleow"
        },
        "content": " * Represents an executable command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samuellleow"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public abstract String executeCommand(ArrayList\u003cProject\u003e projects,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "riazaham"
        },
        "content": "                                          ArrayList\u003cTeamMember\u003e teamMembers)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            throws DukeExceptions;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * Returns an exit flag that is determined by user\u0027s command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * @return Terminate the program if user\u0027s command equals \u0027bye\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public abstract Boolean isExit();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samuelchristopher": 3,
      "samuellleow": 13,
      "shreytheshreyas": 1,
      "riazaham": 7
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "riazaham"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.member.TeamMember;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.duke.project.Project;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samuellleow"
        },
        "content": " * Displays goodbye message when application is terminated by the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samuellleow"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public String executeCommand(ArrayList\u003cProject\u003e projects, ArrayList\u003cTeamMember\u003e teamMembers) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        return printGoodbyeMessage();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public Boolean isExit() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    private String printGoodbyeMessage() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        return Ui.printGoodbyeMessage();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samuelchristopher": 2,
      "thatseant": 2,
      "samuellleow": 15,
      "riazaham": 4,
      "-": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/HomeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "riazaham"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.member.TeamMember;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.project.Project;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "riazaham"
        },
        "content": "public class HomeCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    private int projectIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public HomeCommand(int projectIndex) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        this.projectIndex \u003d projectIndex;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public String executeCommand(ArrayList\u003cProject\u003e projects, ArrayList\u003cTeamMember\u003e teamMembers) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        if (projectIndex \u003d\u003d -1) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            return Ui.printHomeView(projects, teamMembers);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            Parser.setProjectIndex(-1);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            return Ui.printHomeView(projects, teamMembers);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public Boolean isExit() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "riazaham"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thatseant": 2,
      "riazaham": 30
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/PrintHomeViewCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import seedu.duke.DukeExceptions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import seedu.duke.member.TeamMember;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import seedu.duke.project.Project;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "public class PrintHomeViewCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public String executeCommand(ArrayList\u003cProject\u003e projects, ArrayList\u003cTeamMember\u003e teamMembers) throws DukeExceptions {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        return Ui.printHomeView(projects, teamMembers);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public Boolean isExit() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samuellleow": 21
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/member/AssignMemberToProjectCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thatseant"
        },
        "content": "//@@author thatseant"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thatseant"
        },
        "content": "package seedu.duke.commands.member;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.DukeExceptions;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.member.TeamMember;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.project.Project;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import static seedu.duke.Parser.getHashValue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import static seedu.duke.Util.INDEX_NON_INTEGER;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import static seedu.duke.Util.INVALID_PROJECT_ID;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import static seedu.duke.Util.INVALID_TEAM_MEMBER_ID;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import static seedu.duke.Util.MEMBER_INDEX_KEY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import static seedu.duke.Util.PROJECT_INDEX_KEY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import static seedu.duke.Util.USER_JAVA_INDEX_DIFF;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thatseant"
        },
        "content": "public class AssignMemberToProjectCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    private int memberIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    private int projectIndex;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    private HashMap\u003cString, String\u003e paramsList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public AssignMemberToProjectCommand(HashMap\u003cString,String\u003e paramsList, int projectIndex)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            throws DukeExceptions {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        this.paramsList \u003d paramsList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        assert projectIndex \u003d\u003d -1 : \"projectIndex must be -1\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        parse();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public void parse() throws DukeExceptions {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            projectIndex \u003d Integer.parseInt(getHashValue(paramsList, PROJECT_INDEX_KEY)) - USER_JAVA_INDEX_DIFF;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            memberIndex \u003d Integer.parseInt(getHashValue(paramsList, MEMBER_INDEX_KEY)) - USER_JAVA_INDEX_DIFF;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            throw new DukeExceptions(INDEX_NON_INTEGER);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public String executeCommand(ArrayList\u003cProject\u003e projects,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thatseant"
        },
        "content": "                                 ArrayList\u003cTeamMember\u003e teamMembers) throws DukeExceptions {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        if (memberIndex \u003e\u003d teamMembers.size() || memberIndex \u003c 0) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            throw new DukeExceptions(INVALID_TEAM_MEMBER_ID);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        if (projectIndex \u003e\u003d projects.size() || projectIndex \u003c 0) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            throw new DukeExceptions(INVALID_PROJECT_ID);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        TeamMember teamMember \u003d teamMembers.get(memberIndex);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Project projectToAdd \u003d projects.get(projectIndex);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        teamMember.assignProject(projectToAdd);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        projectToAdd.addTeamMemberToProject(teamMember);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        return Ui.printMemberAssignedToProjectMessage(teamMember.getName(), projectToAdd.getProjectName());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public Boolean isExit() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thatseant"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thatseant": 63
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/member/TeamMemberAddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "riazaham"
        },
        "content": "package seedu.duke.commands.member;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.DukeExceptions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import seedu.duke.member.TeamMember;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import seedu.duke.project.Project;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import static seedu.duke.Parser.getHashValue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "riazaham"
        },
        "content": "public class TeamMemberAddCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    HashMap\u003cString, String\u003e params;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public TeamMemberAddCommand(HashMap\u003cString, String\u003e params) throws DukeExceptions {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        this.params \u003d params;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        this.parse();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public void parse() throws DukeExceptions {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        name \u003d getHashValue(params, \"n\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public String executeCommand(ArrayList\u003cProject\u003e projects, ArrayList\u003cTeamMember\u003e teamMembers) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        TeamMember newMember \u003d new TeamMember(name);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        teamMembers.add(newMember);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        return Ui.printMemberAddedMessage(name);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public Boolean isExit() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samuelchristopher": 17,
      "thatseant": 1,
      "samuellleow": 2,
      "riazaham": 18
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/member/TeamMemberAssignToTaskCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "riazaham"
        },
        "content": "package seedu.duke.commands.member;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.DukeExceptions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.member.TeamMember;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.project.Project;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import static seedu.duke.Parser.getHashValue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "riazaham"
        },
        "content": "public class TeamMemberAssignToTaskCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    private int taskIndex;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    private int projectIndex;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    private int memberIndex;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    HashMap\u003cString, String\u003e params;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public TeamMemberAssignToTaskCommand(HashMap\u003cString, String\u003e params, int projectIndex)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            throws DukeExceptions {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        this.params \u003d params;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        this.projectIndex \u003d projectIndex;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        this.parse();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public void parse() throws DukeExceptions {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            taskIndex \u003d Integer.parseInt(getHashValue(params, \"t\")) - 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            throw new DukeExceptions(\"invalidTaskID\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            memberIndex \u003d Integer.parseInt(getHashValue(params, \"m\")) - 1;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            throw new DukeExceptions(\"invalidTeamMemberID\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public String executeCommand(ArrayList\u003cProject\u003e projects,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "riazaham"
        },
        "content": "                                 ArrayList\u003cTeamMember\u003e teamMembers) throws DukeExceptions {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        Task selectedTask;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        TeamMember teamMember;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        assert projectIndex \u003e\u003d 0 : \"projectIndex should be minus one \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                + \"of the current project it was selected\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        Project project \u003d projects.get(projectIndex);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            if (project.getTaskList().isEmpty()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                throw new DukeExceptions(\"emptyTaskList\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            selectedTask \u003d project.getTask(taskIndex);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        } catch (NumberFormatException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            throw new DukeExceptions(\"invalidTaskID\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            if (project.getTeamMembers().isEmpty()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                throw new DukeExceptions(\"emptyTeamMembersList\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            teamMember \u003d project.getTeamMembers().get(memberIndex);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        } catch (NumberFormatException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            throw new DukeExceptions(\"invalidTeamMemberID\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        selectedTask.setMember(teamMember);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        return Ui.printMemberAssignedToTaskMessage(teamMember.getName(), selectedTask.getTaskDescription());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public Boolean isExit() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "riazaham"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samuellleow": 21,
      "riazaham": 52
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/member/TeamMemberDeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "riazaham"
        },
        "content": "package seedu.duke.commands.member;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.DukeExceptions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.member.TeamMember;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.project.Project;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import seedu.duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import static seedu.duke.Parser.getHashValue;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "riazaham"
        },
        "content": "public class TeamMemberDeleteCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    private int memberIndex;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    HashMap\u003cString, String\u003e params;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    private int projectIndex;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public TeamMemberDeleteCommand(HashMap\u003cString, String\u003e params, int projectIndex) throws DukeExceptions {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        this.params \u003d params;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        this.parse();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        this.projectIndex \u003d projectIndex;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public void parse() throws DukeExceptions {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            memberIndex \u003d Integer.parseInt(getHashValue(params, \"m\")) - 1;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            throw new DukeExceptions(\"invalidTeamMemberID\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public String executeCommand(ArrayList\u003cProject\u003e projects,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "riazaham"
        },
        "content": "                                 ArrayList\u003cTeamMember\u003e teamMembers) throws DukeExceptions {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        if (teamMembers.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            throw new DukeExceptions(\"emptyTeamMembersList\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            // Removing of Members in HomeView"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            if (projectIndex \u003d\u003d -1) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "riazaham"
        },
        "content": "                TeamMember memberToBeRemoved \u003d teamMembers.get(memberIndex);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "riazaham"
        },
        "content": "                teamMembers.remove(memberIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                for (Project project : projects) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                    for (int i \u003d 0; i \u003c project.getTeamMembers().size(); i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                        TeamMember member \u003d project.getTeamMembers().get(i);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                        if (member \u003d\u003d memberToBeRemoved) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                            project.getTeamMembers().remove(i);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                            i--;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                    removingMemberFromTask(project, memberToBeRemoved);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                return Ui.printMemberRemovedInHomeViewMessage(memberToBeRemoved.getName());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            // Removing of members in ProjectView"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                Project project \u003d projects.get(projectIndex);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                TeamMember memberToBeRemoved \u003d project.getTeamMembers().get(memberIndex);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                project.getTeamMembers().remove(memberIndex);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                removingMemberFromTask(project, memberToBeRemoved);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                memberToBeRemoved.getAssignedProjects().remove(project);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                return Ui.printMemberRemovedInProjectViewMessage(memberToBeRemoved.getName(), project.getProjectName());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            throw new DukeExceptions(\"invalidTeamMemberID\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    private void removingMemberFromTask(Project project, TeamMember memberToBeRemoved) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        for (Task task : project.getTaskList()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            for (int j \u003d 0; j \u003c task.getMembers().size(); j++) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                TeamMember member \u003d task.getMembers().get(j);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                if (member \u003d\u003d memberToBeRemoved) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                    task.getMembers().remove(j);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                    j--;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public Boolean isExit() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "riazaham"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thatseant": 1,
      "samuellleow": 39,
      "riazaham": 47
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/member/TeamMemberHoursCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thatseant"
        },
        "content": "package seedu.duke.commands.member;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.DukeExceptions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.member.TeamMember;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.project.Project;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import static seedu.duke.Parser.getHashValue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import static seedu.duke.Util.INVALID_MEMBER_ID;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import static seedu.duke.Util.MEMBER_INDEX_KEY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import static seedu.duke.Util.MINUTES_IN_HOUR_DOUBLE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import static seedu.duke.Util.USER_JAVA_INDEX_DIFF;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thatseant"
        },
        "content": "public class TeamMemberHoursCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    private int memberIndex;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    HashMap\u003cString, String\u003e params;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public TeamMemberHoursCommand(HashMap\u003cString, String\u003e params, int projectIndex)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            throws DukeExceptions {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        assert projectIndex \u003d\u003d -1 : \"projectIndex must be -1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        this.params \u003d params;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        this.parse();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public void parse() throws DukeExceptions {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            memberIndex \u003d Integer.parseInt(getHashValue(params, MEMBER_INDEX_KEY)) - USER_JAVA_INDEX_DIFF;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            throw new DukeExceptions(INVALID_MEMBER_ID);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public String executeCommand(ArrayList\u003cProject\u003e projects, ArrayList\u003cTeamMember\u003e members) throws DukeExceptions {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            double hoursWorked \u003d 0;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            assert memberIndex \u003e\u003d 0 : memberIndex;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            TeamMember member \u003d members.get(memberIndex);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            for (int i \u003d 0; i \u003c member.getTasks().size(); i++) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thatseant"
        },
        "content": "                Task task \u003d member.getTasks().get(i);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thatseant"
        },
        "content": "                hoursWorked +\u003d task.getActual() / MINUTES_IN_HOUR_DOUBLE;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            return Ui.printHoursWorkedMessage(member.getName(), hoursWorked);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            throw new DukeExceptions(INVALID_MEMBER_ID);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public Boolean isExit() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thatseant"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thatseant": 58
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/member/TeamMembersListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "riazaham"
        },
        "content": "package seedu.duke.commands.member;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import seedu.duke.member.TeamMember;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import seedu.duke.project.Project;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "riazaham"
        },
        "content": "public class TeamMembersListCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    private boolean isHomeView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    private int projectIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public TeamMembersListCommand(boolean isHomeView, int projectIndex) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        this.isHomeView \u003d isHomeView;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        this.projectIndex \u003d projectIndex;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public String executeCommand(ArrayList\u003cProject\u003e projects, ArrayList\u003cTeamMember\u003e teamMembers) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        if (teamMembers.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            return \"No team members have been added.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        String listOfMembers \u003d \"List of members:              Project(s) Assigned:\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        int amountOfPadding \u003d 0;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        if (isHomeView) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            for (TeamMember member : teamMembers) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                if (member.getName().length() \u003e 26) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                    listOfMembers +\u003d \"\\n\" + (i + 1) + \". \" + member.getName().substring(0,26) + \" \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                    listOfMembers +\u003d \"\\n\" + String.format(\"%-30s\", (i + 1) + \". \" + member.getName());;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                if (!member.getAssignedProjects().isEmpty()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                    for (int j \u003d 0; j \u003c member.getAssignedProjects().size(); j++) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                        Project assignedProject \u003d member.getAssignedProjects().get(j);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                        if (j \u003d\u003d 0) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                            listOfMembers +\u003d (j + 1) + \") \" + assignedProject.getProjectName();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                            amountOfPadding \u003d 33 + assignedProject.getProjectName().length();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                            listOfMembers +\u003d \"\\n\" + String.format(\"%1$\" + amountOfPadding + \"s\", (j + 1) + \") \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                                    + assignedProject.getProjectName());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                    listOfMembers +\u003d \"Not assigned to a project\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                listOfMembers +\u003d System.lineSeparator();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                i++;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            ArrayList\u003cTeamMember\u003e teamMembersInSelectedProject \u003d projects.get(projectIndex).getTeamMembers();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            for (TeamMember member : teamMembersInSelectedProject) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                listOfMembers +\u003d \"\\n\" + (i + 1) + \". \" + member.getName();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                i++;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        return listOfMembers;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public Boolean isExit() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samuelchristopher": 22,
      "samuellleow": 35,
      "riazaham": 7
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/project/ProjectCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "riazaham"
        },
        "content": "package seedu.duke.commands.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.DukeExceptions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.member.TeamMember;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import seedu.duke.project.Project;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import static seedu.duke.Parser.getHashValue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "public class ProjectCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    HashMap\u003cString, String\u003e params;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public ProjectCommand(HashMap\u003cString, String\u003e params) throws DukeExceptions {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        this.params \u003d params;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        this.parse();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public void parse() throws DukeExceptions {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        this.description \u003d getHashValue(params, \"n\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public String executeCommand(ArrayList\u003cProject\u003e projects, ArrayList\u003cTeamMember\u003e teamMembers) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        Project newProject \u003d new Project(description);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        projects.add(newProject);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        return Ui.printProjectCreatedMessage(newProject.getProjectName());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public Boolean isExit() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samuelchristopher": 5,
      "samuellleow": 14,
      "riazaham": 18
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/project/ProjectDeadlineCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "package seedu.duke.commands.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import seedu.duke.DukeExceptions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import seedu.duke.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.member.TeamMember;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import seedu.duke.project.Project;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import seedu.duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import static seedu.duke.Parser.getHashValue;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "public class ProjectDeadlineCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    private int projectIndex;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    HashMap\u003cString, String\u003e params;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public ProjectDeadlineCommand(HashMap\u003cString, String\u003e params) throws DukeExceptions {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        this.params \u003d params;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        this.parse();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public void parse() throws DukeExceptions {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            projectIndex \u003d Integer.parseInt(getHashValue(params, \"p\")) - 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            date \u003d LocalDate.parse(getHashValue(params, \"d\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            throw new DukeExceptions(\"invalidProjectID\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        } catch (StringIndexOutOfBoundsException | DateTimeParseException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            throw new DukeExceptions(\"WrongDateFormat\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public String executeCommand(ArrayList\u003cProject\u003e projects,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "riazaham"
        },
        "content": "                                 ArrayList\u003cTeamMember\u003e teamMembers) throws DukeExceptions {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            Project project \u003d projects.get(projectIndex);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            project.addProjectDeadline(date);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            int projectCounter \u003d 0;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            int i \u003d 0;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            while (projectCounter \u003c projects.size()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                if (projects.get(i).getProjectDeadline() \u003d\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                    Project projectWithNullDeadline \u003d projects.get(i);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                    projects.remove(i);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                    projects.add(projectWithNullDeadline);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                    i++;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                projectCounter++;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            Collections.sort(projects);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            return Ui.printProjectDeadlineAddedMessage(projects, project, date, teamMembers);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            throw new DukeExceptions(\"invalidProjectID\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public Boolean isExit() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samuellleow": 46,
      "riazaham": 22
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/project/ProjectDeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "riazaham"
        },
        "content": "package seedu.duke.commands.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.DukeExceptions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.member.TeamMember;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.project.Project;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import java.lang.reflect.Array;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import static seedu.duke.Parser.getHashValue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "riazaham"
        },
        "content": "public class ProjectDeleteCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    private int projectIndex;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    HashMap\u003cString, String\u003e params;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public ProjectDeleteCommand(HashMap\u003cString, String\u003e params)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            throws DukeExceptions {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        this.params \u003d params;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        this.parse();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public void parse() throws DukeExceptions {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            projectIndex \u003d Integer.parseInt(getHashValue(params, \"p\")) - 1;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            throw new DukeExceptions(\"invalidProjectID\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public String executeCommand(ArrayList\u003cProject\u003e projects, ArrayList\u003cTeamMember\u003e teamMembers) throws DukeExceptions {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        if (projects.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            throw new DukeExceptions(\"emptyProjectList\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            Project projectToBeDeleted \u003d projects.get(projectIndex);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            projects.remove(projectIndex);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            ArrayList\u003cTeamMember\u003e membersInProjectToBeDeleted \u003d projectToBeDeleted.getTeamMembers();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            for (TeamMember member : membersInProjectToBeDeleted) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                member.getAssignedProjects().remove(projectToBeDeleted);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            return Ui.printProjectDeletedMessage(projectToBeDeleted);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            throw new DukeExceptions(\"invalidProjectID\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public Boolean isExit() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "riazaham"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thatseant": 1,
      "samuellleow": 8,
      "riazaham": 45
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/project/ProjectDescriptionCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "package seedu.duke.commands.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.DukeExceptions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import seedu.duke.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.member.TeamMember;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import seedu.duke.project.Project;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import static seedu.duke.Parser.getHashValue;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "public class ProjectDescriptionCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    private String projectDescription;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    private int projectIndex;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    HashMap\u003cString, String\u003e params;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public ProjectDescriptionCommand(HashMap\u003cString, String\u003e params) throws DukeExceptions {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        this.params \u003d params;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        this.parse();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public void parse() throws DukeExceptions {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        projectDescription \u003d getHashValue(params, \"d\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            projectIndex \u003d Integer.parseInt(getHashValue(params, \"p\")) - 1;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            throw new DukeExceptions(\"indexNonInteger\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public String executeCommand(ArrayList\u003cProject\u003e projects, ArrayList\u003cTeamMember\u003e teamMembers) throws DukeExceptions {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            Project project \u003d projects.get(projectIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            project.addDescription(projectDescription);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            return Ui.printProjectDescriptionAddedMessage(project);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            throw new DukeExceptions(\"invalidProjectID\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public Boolean isExit() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samuelchristopher": 3,
      "thatseant": 2,
      "samuellleow": 30,
      "riazaham": 14
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/project/ProjectDoneCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "package seedu.duke.commands.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import seedu.duke.DukeExceptions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import seedu.duke.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.member.TeamMember;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import seedu.duke.project.Project;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import seedu.duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import static seedu.duke.Parser.getHashValue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "public class ProjectDoneCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    private int projectIndex;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    HashMap\u003cString, String\u003e params;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public ProjectDoneCommand(HashMap\u003cString, String\u003e params, int projectIndex) throws DukeExceptions {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        this.params \u003d params;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        this.parse();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public void parse() throws DukeExceptions {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            projectIndex \u003d Integer.parseInt(getHashValue(params, \"p\")) - 1;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            throw new DukeExceptions(\"invalidProjectID\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public String executeCommand(ArrayList\u003cProject\u003e projects,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "riazaham"
        },
        "content": "                                 ArrayList\u003cTeamMember\u003e members) throws DukeExceptions {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            Project project \u003d projects.get(projectIndex);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            project.markAsDone();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            return Ui.printProjectDoneMessage(project.getProjectName());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        }  catch (NumberFormatException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            throw new DukeExceptions(\"invalidProjectID\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public Boolean isExit() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        if (obj instanceof ProjectDoneCommand) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            ProjectDoneCommand taskCommand \u003d (ProjectDoneCommand) obj;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            return (this.projectIndex \u003d\u003d taskCommand.projectIndex);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samuelchristopher": 55,
      "riazaham": 3
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/project/ProjectListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "riazaham"
        },
        "content": "package seedu.duke.commands.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import seedu.duke.DukeExceptions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import seedu.duke.member.TeamMember;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import seedu.duke.project.Project;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samuellleow"
        },
        "content": " * Prints a list of existing tasks."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samuellleow"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thatseant"
        },
        "content": "public class ProjectListCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public String executeCommand(ArrayList\u003cProject\u003e projects, ArrayList\u003cTeamMember\u003e teamMembers) throws DukeExceptions {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        if (projects.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            throw new DukeExceptions(\"emptyProjectList\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                int projectCounter \u003d 0;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                int i \u003d 0;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                while (projectCounter \u003c projects.size()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                    if (projects.get(i).getProjectDeadline() \u003d\u003d null) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                        Project projectWithNullDeadline \u003d projects.get(i);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                        projects.remove(i);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                        projects.add(projectWithNullDeadline);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                        i++;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                    projectCounter++;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                Collections.sort(projects);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                return Ui.printProjectListMessage(projects);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                throw new DukeExceptions(\"invalidProjectID\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public Boolean isExit() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "samuelchristopher": 4,
      "thatseant": 1,
      "samuellleow": 38,
      "riazaham": 3
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/project/ProjectSelectCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "riazaham"
        },
        "content": "package seedu.duke.commands.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.DukeExceptions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.member.TeamMember;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import seedu.duke.project.Project;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import static seedu.duke.Parser.getHashValue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thatseant"
        },
        "content": "public class ProjectSelectCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    private int projectIndex;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    HashMap\u003cString, String\u003e params;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public ProjectSelectCommand(HashMap\u003cString, String\u003e params) throws DukeExceptions {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        this.params \u003d params;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        this.parse();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public void parse() throws DukeExceptions {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            projectIndex \u003d Integer.parseInt(getHashValue(params, \"p\")) - 1;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            throw new DukeExceptions(\"invalidProjectID\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public String executeCommand(ArrayList\u003cProject\u003e projects, ArrayList\u003cTeamMember\u003e teamMembers) throws DukeExceptions {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        if (projects.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            throw new DukeExceptions(\"emptyProjectList\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            Project selectedProject \u003d projects.get(projectIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            Parser.setProjectIndex(projectIndex);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            String projectView \u003d Ui.projectViewMessage(selectedProject);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            return projectView;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            throw new DukeExceptions(\"invalidProjectID\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public Boolean isExit() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samuelchristopher": 8,
      "thatseant": 2,
      "samuellleow": 21,
      "riazaham": 20
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/task/ActualTimeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thatseant"
        },
        "content": "//@@author thatseant"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thatseant"
        },
        "content": "package seedu.duke.commands.task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.Util;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.DukeExceptions;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.member.TeamMember;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.project.Project;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import static seedu.duke.Util.HOUR_INDEX_KEY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import static seedu.duke.Util.MINUTES_IN_HOUR_INT;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import static seedu.duke.Util.TASK_INDEX_KEY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import static seedu.duke.Util.USER_JAVA_INDEX_DIFF;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import static seedu.duke.Parser.getHashValue;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thatseant"
        },
        "content": "public class ActualTimeCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    private int taskIndex;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    private int durationInMinutes;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    private int projectIndex;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    HashMap\u003cString, String\u003e params;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public ActualTimeCommand(HashMap\u003cString, String\u003e params, int projectIndex)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            throws DukeExceptions {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        assert projectIndex \u003e\u003d 0 : \"projectIndex must be positive integer!\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        this.params \u003d params;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        this.projectIndex \u003d projectIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        this.parse();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public void parse() throws DukeExceptions {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            taskIndex \u003d Integer.parseInt(getHashValue(params, TASK_INDEX_KEY)) - USER_JAVA_INDEX_DIFF;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            int hours \u003d Integer.parseInt(getHashValue(params, HOUR_INDEX_KEY));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            int minutes \u003d Integer.parseInt(getHashValue(params, Util.MINUTE_INDEX_KEY));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            durationInMinutes \u003d hours * MINUTES_IN_HOUR_INT + minutes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            throw new DukeExceptions(Util.INVALID_TASK_ID);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public String executeCommand(ArrayList\u003cProject\u003e projects, ArrayList\u003cTeamMember\u003e members) throws DukeExceptions {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            Project project \u003d projects.get(projectIndex);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            Task task \u003d project.getTask(taskIndex);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            if (!task.isDone()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thatseant"
        },
        "content": "                throw new DukeExceptions(Util.TASK_NOT_DONE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            task.addActual(durationInMinutes);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            int hours \u003d task.getActual() / MINUTES_IN_HOUR_INT;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            int minutes \u003d task.getActual() % MINUTES_IN_HOUR_INT;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            return Ui.printActualDurationAddedMessage(task.getDescription(), hours, minutes);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            throw new DukeExceptions(Util.INVALID_TASK_ID);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public Boolean isExit() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "thatseant"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thatseant": 68
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/task/EstimatedTimeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thatseant"
        },
        "content": "//@@author thatseant"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thatseant"
        },
        "content": "package seedu.duke.commands.task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.DukeExceptions;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.member.TeamMember;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.project.Project;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import static seedu.duke.Parser.getHashValue;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import static seedu.duke.Util.HOUR_INDEX_KEY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import static seedu.duke.Util.INVALID_TASK_ID;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import static seedu.duke.Util.MINUTES_IN_HOUR_INT;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import static seedu.duke.Util.MINUTE_INDEX_KEY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import static seedu.duke.Util.TASK_INDEX_KEY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import static seedu.duke.Util.USER_JAVA_INDEX_DIFF;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thatseant"
        },
        "content": "public class EstimatedTimeCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    private int taskIndex;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    private int durationInMinutes;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    private int projectIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    HashMap\u003cString, String\u003e params;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public EstimatedTimeCommand(HashMap\u003cString, String\u003e params, int projectIndex)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            throws DukeExceptions {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        assert projectIndex \u003e\u003d 0 : \"projectIndex must be positive integer!\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        this.params \u003d params;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        this.projectIndex \u003d projectIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        this.parse();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public void parse() throws DukeExceptions {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            taskIndex \u003d Integer.parseInt(getHashValue(params, TASK_INDEX_KEY)) - USER_JAVA_INDEX_DIFF;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            int hours \u003d Integer.parseInt(getHashValue(params, HOUR_INDEX_KEY));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            int minutes \u003d Integer.parseInt(getHashValue(params, MINUTE_INDEX_KEY));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            durationInMinutes \u003d hours * MINUTES_IN_HOUR_INT + minutes;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            throw new DukeExceptions(INVALID_TASK_ID);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public String executeCommand(ArrayList\u003cProject\u003e projects, ArrayList\u003cTeamMember\u003e members) throws DukeExceptions {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            Project project \u003d projects.get(projectIndex);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            Task task \u003d project.getTask(taskIndex);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            task.addEstimate(durationInMinutes);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            int hours \u003d task.getEstimate() / MINUTES_IN_HOUR_INT;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            int minutes \u003d task.getEstimate() % MINUTES_IN_HOUR_INT;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            return Ui.printEstimateAddedMessage(task.getDescription(), hours, minutes);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            throw new DukeExceptions(INVALID_TASK_ID);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public Boolean isExit() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thatseant"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thatseant": 66
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/task/TaskAssignDeadlineCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thatseant"
        },
        "content": "//@@author thatseant"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thatseant"
        },
        "content": "package seedu.duke.commands.task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.DukeExceptions;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.member.TeamMember;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.project.Project;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import static seedu.duke.Parser.getHashValue;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import static seedu.duke.Util.DATE_KEY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import static seedu.duke.Util.EMPTY_PROJECT_LIST;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import static seedu.duke.Util.INVALID_TASK_ID;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import static seedu.duke.Util.TASK_INDEX_KEY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import static seedu.duke.Util.USER_JAVA_INDEX_DIFF;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import static seedu.duke.Util.WRONG_DATE_FORMAT;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thatseant"
        },
        "content": "public class TaskAssignDeadlineCommand extends Command {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    private int projectIndex;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    private int taskIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    HashMap\u003cString, String\u003e params;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public TaskAssignDeadlineCommand(HashMap\u003cString, String\u003e params, int projectIndex) throws DukeExceptions {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        this.params \u003d params;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        this.projectIndex \u003d projectIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        this.parse();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public void parse() throws DukeExceptions {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            taskIndex \u003d Integer.parseInt(getHashValue(params, TASK_INDEX_KEY)) - USER_JAVA_INDEX_DIFF;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            date \u003d LocalDate.parse(getHashValue(params, DATE_KEY));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            throw new DukeExceptions(INVALID_TASK_ID);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        } catch (StringIndexOutOfBoundsException | DateTimeParseException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            throw new DukeExceptions(WRONG_DATE_FORMAT);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public String executeCommand(ArrayList\u003cProject\u003e projects,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thatseant"
        },
        "content": "                                 ArrayList\u003cTeamMember\u003e teamMembers) throws DukeExceptions {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        if (projects.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            throw new DukeExceptions(EMPTY_PROJECT_LIST);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            Project project \u003d projects.get(projectIndex);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            Task task \u003d project.getTaskList().get(taskIndex);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            task.addDeadline(date);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            return Ui.printTaskDeadlineMessage(date, task.getDescription());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            throw new DukeExceptions(INVALID_TASK_ID);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public Boolean isExit() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thatseant"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thatseant": 66
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/task/TaskAssignPriorityCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "riazaham"
        },
        "content": "package seedu.duke.commands.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.DukeExceptions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.member.TeamMember;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.project.Project;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import java.lang.reflect.Array;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import static seedu.duke.Parser.getHashValue;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "riazaham"
        },
        "content": "public class TaskAssignPriorityCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    private int taskIndex;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    private int projectIndex;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    private int priority;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    HashMap\u003cString, String\u003e params;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public TaskAssignPriorityCommand(HashMap\u003cString, String\u003e params, int projectIndex)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            throws DukeExceptions {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        assert projectIndex \u003e\u003d 0 : \"projectIndex must be positive integer!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        this.params \u003d params;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        this.projectIndex \u003d projectIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        this.parse();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public void parse() throws DukeExceptions {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            taskIndex \u003d Integer.parseInt(getHashValue(params, \"t\")) - 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            priority \u003d Integer.parseInt(getHashValue(params, \"p\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            throw new DukeExceptions(\"indexNonInteger\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public String executeCommand(ArrayList\u003cProject\u003e projects,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "riazaham"
        },
        "content": "                                 ArrayList\u003cTeamMember\u003e teamMembers) throws DukeExceptions {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        if (projects.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            throw new DukeExceptions(\"emptyProjectList\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            Task selectedTask \u003d projects.get(projectIndex).getTask(taskIndex);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            selectedTask.setPriority(priority);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            return Ui.printPriorityAssignedToTaskMessage(priority, selectedTask.getTaskDescription());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        } catch (NumberFormatException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            throw new DukeExceptions(\"invalidTaskID\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public Boolean isExit() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "riazaham"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thatseant": 7,
      "riazaham": 51
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/task/TaskCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thatseant"
        },
        "content": "//@@author thatseant"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thatseant"
        },
        "content": "package seedu.duke.commands.task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.DukeExceptions;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.member.TeamMember;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.project.Project;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import static seedu.duke.Util.TASK_NAME_KEY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import static seedu.duke.Parser.getHashValue;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thatseant"
        },
        "content": "public class TaskCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    private int projectIndex;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    HashMap\u003cString, String\u003e params;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public TaskCommand(HashMap\u003cString, String\u003e params, int projectIndex) throws DukeExceptions {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        assert projectIndex \u003e\u003d 0 : \"projectIndex must be positive integer!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        this.params \u003d params;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        this.projectIndex \u003d projectIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        this.parse();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public void parse() throws DukeExceptions {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        this.description \u003d getHashValue(params, TASK_NAME_KEY);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public String executeCommand(ArrayList\u003cProject\u003e projects, ArrayList\u003cTeamMember\u003e teamMembers) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Project project \u003d projects.get(projectIndex);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Task newTask \u003d new Task(description);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        project.addTask(newTask);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        return Ui.printTaskCreatedMessage(newTask.toString());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public Boolean isExit() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thatseant"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thatseant": 45
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/task/TaskDeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "riazaham"
        },
        "content": "package seedu.duke.commands.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.DukeExceptions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.member.TeamMember;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import seedu.duke.project.Project;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import static seedu.duke.Parser.getHashValue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "riazaham"
        },
        "content": "public class TaskDeleteCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    private int taskIndex;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    private int projectIndex;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    HashMap\u003cString, String\u003e params;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public TaskDeleteCommand(HashMap\u003cString, String\u003e params, int projectIndex)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            throws DukeExceptions {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        assert projectIndex \u003e\u003d 0 : \"projectIndex must be positive integer!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        this.params \u003d params;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        this.projectIndex \u003d projectIndex;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        this.parse();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public void parse() throws DukeExceptions {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            taskIndex \u003d Integer.parseInt(getHashValue(params, \"t\")) - 1;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            throw new DukeExceptions(\"invalidTaskID\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public String executeCommand(ArrayList\u003cProject\u003e projects,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "riazaham"
        },
        "content": "                                 ArrayList\u003cTeamMember\u003e teamMembers) throws DukeExceptions {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        if (projects.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            throw new DukeExceptions(\"emptyProjectList\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            Project selectedProject \u003d projects.get(projectIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            //Get task before deletion"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            String taskToBeDeleted \u003d selectedProject.getTask(taskIndex).getTaskDescription();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            selectedProject.deleteTask(taskIndex);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            return Ui.printTaskDeletedMessage(taskToBeDeleted);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            throw new DukeExceptions(\"invalidTaskID\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public Boolean isExit() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "riazaham"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samuelchristopher": 3,
      "thatseant": 1,
      "samuellleow": 3,
      "riazaham": 52
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/task/TaskDoneCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "package seedu.duke.commands.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import seedu.duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import seedu.duke.DukeExceptions;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import seedu.duke.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.member.TeamMember;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import seedu.duke.project.Project;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import seedu.duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import static seedu.duke.Parser.getHashValue;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "public class TaskDoneCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    private int projectIndex;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    private int taskIndex;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    HashMap\u003cString, String\u003e params;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public TaskDoneCommand(HashMap\u003cString, String\u003e params, int projectIndex) throws DukeExceptions {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        assert projectIndex \u003e\u003d 0 : \"projectIndex must be positive integer!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        this.params \u003d params;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        this.projectIndex \u003d projectIndex;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        this.parse();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public void parse() throws DukeExceptions {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            taskIndex \u003d Integer.parseInt(getHashValue(params, \"t\")) - 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            throw new DukeExceptions(\"invalidTaskID\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public String executeCommand(ArrayList\u003cProject\u003e projects,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "riazaham"
        },
        "content": "                                 ArrayList\u003cTeamMember\u003e teamMembers) throws DukeExceptions {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        Project project \u003d projects.get(projectIndex);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            Task selectedTask \u003d project.getTask(taskIndex);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            selectedTask.markAsDone();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            return Ui.printTaskDoneMessage(selectedTask.toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        }  catch (NumberFormatException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            throw new DukeExceptions(\"invalidTaskID\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public Boolean isExit() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samuelchristopher": 50,
      "thatseant": 1,
      "riazaham": 3
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/task/TaskEditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "riazaham"
        },
        "content": "package seedu.duke.commands.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.DukeExceptions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.member.TeamMember;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.project.Project;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import static seedu.duke.Parser.getHashValue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "riazaham"
        },
        "content": "public class TaskEditCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    private int taskIndex;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    private String taskName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    private int projectIndex;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    HashMap\u003cString, String\u003e params;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public TaskEditCommand(HashMap\u003cString, String\u003e params, int projectIndex)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            throws DukeExceptions {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        this.params \u003d params;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        this.projectIndex \u003d projectIndex;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        this.parse();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public void parse() throws DukeExceptions {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            taskIndex \u003d Integer.parseInt(getHashValue(params, \"t\")) - 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            taskName \u003d getHashValue(params, \"n\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            throw new DukeExceptions(\"invalidTaskID\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public String executeCommand(ArrayList\u003cProject\u003e projects, ArrayList\u003cTeamMember\u003e teamMembers) throws DukeExceptions {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        if (projects.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            throw new DukeExceptions(\"emptyProjectList\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            Task selectedTask \u003d projects.get(projectIndex).getTask(taskIndex);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            String oldTaskName \u003d selectedTask.getTaskDescription();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            selectedTask.setTaskDescription(taskName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            return Ui.printTaskNameUpdatedMessage(oldTaskName, taskName);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            throw new DukeExceptions(\"invalidTaskID\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public Boolean isExit() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "riazaham"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "riazaham": 55
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/task/TaskListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "riazaham"
        },
        "content": "package seedu.duke.commands.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.DukeExceptions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.member.TeamMember;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.project.Project;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thatseant"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thatseant"
        },
        "content": " * Prints a list of existing tasks."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thatseant"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thatseant"
        },
        "content": "public class TaskListCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    private int projectIndex;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public TaskListCommand(int projectIndex) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        this.projectIndex \u003d projectIndex;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public String executeCommand(ArrayList\u003cProject\u003e projects,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "riazaham"
        },
        "content": "                                 ArrayList\u003cTeamMember\u003e teamMembers) throws DukeExceptions {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Project selectedProject \u003d projects.get(projectIndex);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        String projectView \u003d Ui.projectViewMessage(selectedProject);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        return projectView;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public Boolean isExit() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thatseant"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samuelchristopher": 1,
      "thatseant": 20,
      "samuellleow": 1,
      "shreytheshreyas": 1,
      "riazaham": 8
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/task/TaskSortCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "package seedu.duke.commands.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "import seedu.duke.DukeExceptions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "import seedu.duke.member.TeamMember;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "import seedu.duke.project.Project;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "import seedu.duke.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "import seedu.duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "import static seedu.duke.Parser.getHashValue;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "public class TaskSortCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    private int projectIndex;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    HashMap\u003cString, String\u003e params;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    private String sortingType;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public TaskSortCommand(HashMap\u003cString, String\u003e params, int projectIndex)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "            throws DukeExceptions {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        this.params \u003d params;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        this.projectIndex \u003d projectIndex;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        this.parse();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    public void parse() throws DukeExceptions {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            sortingType \u003d getHashValue(params, \"s\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "            throw new DukeExceptions(\"invalidTaskID\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    public String executeCommand(ArrayList\u003cProject\u003e projects, ArrayList\u003cTeamMember\u003e teamMembers) throws DukeExceptions {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        Project project \u003d projects.get(projectIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        switch (sortingType) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        case \"p\":"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "            Collections.sort(project.getTaskList(), new Comparator\u003cTask\u003e() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "                @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "                public int compare(Task o1, Task o2) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "                    if (o1.getPriority() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "                        return 1;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "                    if (o2.getPriority() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "                        return -1;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "                    return o1.getPriority() - o2.getPriority(); //sort based on priority"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "                }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "            });"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "            System.out.println(\"TaskList sorted based on priority\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        case \"d\":"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "            Collections.sort(project.getTaskList(), new Comparator\u003cTask\u003e() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "                    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "                    public int compare(Task o1, Task o2) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "                        if (o1.getDeadline() \u003d\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "                            return 1;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "                        if (o2.getDeadline() \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "                            return -1;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "                        return o1.getDeadline().compareTo(o2.getDeadline());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "                });"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "            System.out.println(\"TaskList sorted based on deadline\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        case \"t\":"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "            Collections.sort(project.getTaskList(), new Comparator\u003cTask\u003e() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "                @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "                public int compare(Task o1, Task o2) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "                    if (o1.getActual() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "                        return 1;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "                    if (o2.getActual() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "                        return -1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "                    return o1.getActual() - o2.getActual(); //sort based on actual time"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "                }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "            });"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "            System.out.println(\"TaskList sorted based on completion time\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        default: throw new DukeExceptions(\"InvalidSortingParameter\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    public Boolean isExit() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thatseant": 5,
      "shreytheshreyas": 97
    }
  },
  {
    "path": "src/main/java/seedu/duke/member/TeamMember.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "riazaham"
        },
        "content": "package seedu.duke.member;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import seedu.duke.DukeExceptions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import seedu.duke.project.Project;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "public class TeamMember {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    private ArrayList\u003cProject\u003e assignedProjects;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public TeamMember(String name) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        this.assignedProjects \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public void assignProject(Project project) throws DukeExceptions {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        for (Project assignedProject : assignedProjects) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            if (assignedProject \u003d\u003d project) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                throw new DukeExceptions(\"projectAlreadyAssigned\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        assignedProjects.add(project);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public void setTask(Task selectedTask) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        tasks.add(selectedTask);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public ArrayList\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public ArrayList\u003cProject\u003e getAssignedProjects() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        return assignedProjects;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samuelchristopher": 13,
      "thatseant": 11,
      "samuellleow": 20,
      "riazaham": 5
    }
  },
  {
    "path": "src/main/java/seedu/duke/project/Project.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "riazaham"
        },
        "content": "package seedu.duke.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import seedu.duke.member.TeamMember;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "public class Project implements Comparable\u003cProject\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    protected String projectName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    private String projectDescription;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    private LocalDate projectDeadline;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    private ArrayList\u003cTeamMember\u003e teamMembers;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public Project(String projectName) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        this.projectName \u003d projectName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        this.tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        this.teamMembers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        this.projectDescription \u003d \"\u003cproject description empty\u003e\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        this.projectDeadline \u003d null;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    public void sortTasksList() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        //Collections.sort(tasks);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public int compareTo(Project project) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        if (getProjectDeadline() \u003d\u003d null || project.getProjectDeadline() \u003d\u003d null) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        return getProjectDeadline().compareTo(project.getProjectDeadline());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public Task getTask(int taskIndex) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        return tasks.get(taskIndex);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public void deleteTask(int taskIndex) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        tasks.remove(taskIndex);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public int getNumberOfTask() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public int getNumberOfFinishedTask() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        int finishedTaskCounter \u003d 0;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            if (task.isDone()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                finishedTaskCounter++;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        return finishedTaskCounter;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public void addDescription(String projectDescription) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        this.projectDescription \u003d projectDescription;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        return projectDescription;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public String getProjectName() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        return projectName;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public void addProjectDeadline(LocalDate date) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        this.projectDeadline \u003d date;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public LocalDate getProjectDeadline() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        return this.projectDeadline;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public ArrayList\u003cTeamMember\u003e getTeamMembers() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        return this.teamMembers;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public void addTeamMemberToProject(TeamMember addedMember) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        teamMembers.add(addedMember);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * Returns details of the specified task."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * @return Details of Project"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        if (!projectDescription.equals(\"\") \u0026 projectDeadline !\u003d null) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            return \"Description: \" + projectDescription + \" | Deadline: \" + projectDeadline;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        } else if (!projectDescription.equals(\"\") \u0026 projectDeadline \u003d\u003d null) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            return \"Description: \" + projectDescription + \" | \u003cproject deadline empty\u003e\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        } else if (projectDeadline !\u003d null) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            return \"\u003cproject description empty\u003e | Deadline: \" + projectDeadline;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            return \"\u003cproject description empty\u003e | \u003cproject deadline empty\u003e\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public ArrayList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public String selectTask(int taskId) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        return tasks.get(taskId).toString();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public boolean getStatus() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            return isDone;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            if (!(task.getStatus())) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public boolean isProjectDone() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samuelchristopher": 26,
      "thatseant": 12,
      "samuellleow": 84,
      "shreytheshreyas": 9,
      "riazaham": 12
    }
  },
  {
    "path": "src/main/java/seedu/duke/task/Task.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "riazaham"
        },
        "content": "package seedu.duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import seedu.duke.DukeExceptions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.member.TeamMember;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thatseant"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    protected ArrayList\u003cTeamMember\u003e members \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    protected int estimateInMinutes \u003d 0;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    protected int actualInMinutes;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    protected int priority;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    public int getPriority() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        return priority;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    public void setPriority(int priority) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        this.date \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        this.priority \u003d 0;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        actualInMinutes \u003d 0;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public void addDeadline(LocalDate date) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public void addEstimate(int durationInMinutes) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        this.estimateInMinutes \u003d durationInMinutes;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public int getEstimate() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        return estimateInMinutes;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public int getActual() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        return actualInMinutes;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public void addActual(int durationInMinutes) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        this.actualInMinutes \u003d durationInMinutes;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public String getTaskDescription() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public void setTaskDescription(String newDescription) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        description \u003d newDescription;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public String getDateString() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        return (date !\u003d null) ? date.format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy\")) : \"\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    public LocalDate getDeadline() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public ArrayList\u003cTeamMember\u003e getMembers() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        return members;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public void setMember(TeamMember newMember) throws DukeExceptions {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        for (TeamMember member : members) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            if (newMember \u003d\u003d member) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                throw new DukeExceptions(\"TaskAlreadyAssigned\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        members.add(newMember);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public boolean getStatus() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "thatseant"
        },
        "content": "     * Returns details of the specified task."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "thatseant"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "thatseant"
        },
        "content": "     * @return Details of task"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "thatseant"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        String taskStatus \u003d description;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        if (date !\u003d null) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            taskStatus +\u003d \" | \" + getDateString();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        if (estimateInMinutes !\u003d 0) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            int hours \u003d estimateInMinutes / 60;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            int minutes \u003d estimateInMinutes % 60;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            taskStatus +\u003d \" | \" + \"Estimated: \" + hours + \" hours \" + minutes + \" minutes\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        if (actualInMinutes !\u003d 0) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            int hours \u003d actualInMinutes / 60;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            int minutes \u003d actualInMinutes % 60;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            taskStatus +\u003d \" | \" + \"Actual: \" + hours + \" hours \" + minutes + \" minutes\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        return taskStatus;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        if (obj instanceof Task) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            Task task \u003d (Task) obj;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            return ((task.description.equals(this.description))"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "thatseant"
        },
        "content": "                    \u0026\u0026 (task.isDone \u003d\u003d this.isDone) \u0026\u0026 (task.date.equals(this.date)));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "thatseant"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thatseant": 90,
      "samuelchristopher": 6,
      "samuellleow": 11,
      "shreytheshreyas": 13,
      "riazaham": 19
    }
  },
  {
    "path": "src/main/java/seedu/duke/ui/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thatseant"
        },
        "content": "package seedu.duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import seedu.duke.member.TeamMember;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import seedu.duke.project.Project;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import seedu.duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import java.time.Period;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thatseant"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    private static final String MESSAGE_SINGLE_LINE \u003d \"_________________________________________\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            + \"____________________________________________\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    private static final String MESSAGE_WELCOME \u003d \"Hello from EzManager!\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            + \"What can I do for you?\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    private static final String MESSAGE_GOODBYE \u003d \"See you again!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    private static final String MESSAGE_LOGO \u003d \" _____         ___     ___\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            + \"|  ___|       |   \\\\  /   |\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            + \"| |___  _____ |    \\\\/    | ______    ______  ______    ______  ______   _____  _____\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            + \"|  ___||___ / |  |\\\\  /|  ||  __  |  |  __  ||  __  |  |  __  ||  __  | / ___ \\\\|  ___|\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            + \"| |___   / /_ |  | \\\\/ |  || |__| |_ | |  | || |__| |_ | |  | || |__| ||   ___/|  |\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            + \"|_____| /____||__|    |__||________||_|  |_||________||_|  |_||____  ||______||__|\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            + \"                                                                   | |\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            + \"                                                               ____| |\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            + \"                                                              |______|\\n\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public void printWelcome() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        System.out.println(MESSAGE_SINGLE_LINE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        System.out.println(MESSAGE_LOGO);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        System.out.println(MESSAGE_WELCOME);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        System.out.println(MESSAGE_SINGLE_LINE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public static String printGoodbyeMessage() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        return MESSAGE_GOODBYE;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public void printLine() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        System.out.println(MESSAGE_SINGLE_LINE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public static void printOutput(String output) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        System.out.println(output);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public static String printMemberAddedMessage(String name) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        return \"Team member \\\"\" + name + \"\\\" has been added\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public static String printMemberRemovedInHomeViewMessage(String name) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        return \"Team member \\\"\" + name + \"\\\" has been removed from program entirely\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public static String printMemberRemovedInProjectViewMessage(String name, String projectName) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        return \"Team member \\\"\" + name + \"\\\" has been removed from Project \\\"\" + projectName + \"\\\"\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public static String printProjectDeletedMessage(Project project) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        return \"Project \\\"\" + project.getProjectName() + \"\\\" deleted\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public static String printProjectListMessage(ArrayList\u003cProject\u003e projects) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        output +\u003d \"List of Projects:\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        for (int i \u003d 0; i \u003c projects.size(); i++) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            output +\u003d \"\\n     \" + (i + 1) + \".\" + projects.get(i).getProjectName();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            if (projects.get(i).getProjectDeadline() !\u003d null) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                output +\u003d \" (\" + projects.get(i).getProjectDeadline() + \") \";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public static String printTaskListMessage(Project project) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        project.sortTasksList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        int numberOfTasks \u003d project.getTaskList().size();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        String output \u003d \"List of Tasks:\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        for (int i \u003d 0; i \u003c numberOfTasks; i++) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "            output +\u003d \"\\n     \" + (i + 1) + \".\" + project.getTask(i)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "                    + ((project.getTask(i).getPriority() !\u003d 0) ? \"|\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "                    + \"priority: \" + project.getTask(i).getPriority() : \"\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public static String printProjectCreatedMessage(String projectName) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        return \"Project \\\"\" + projectName + \"\\\" created!\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public static String printProjectDescriptionAddedMessage(Project project) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        return \"Project description added \\\"\" + project.getDescription() + \"\\\".\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public static String printProjectDoneMessage(String projectName) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        return \"Project \\\"\" + projectName + \"\\\" is done!\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public static String printProjectDeadlineAddedMessage(ArrayList\u003cProject\u003e projects, Project project,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                                                          LocalDate date, ArrayList\u003cTeamMember\u003e members) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        String output \u003d  \"Deadline \" + date.format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy\"))"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                + \" added to Project \" + project.getProjectName() + \"\\n\\n\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        output +\u003d printHomeView(projects, members);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public static String printTaskCreatedMessage(String taskName) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        return \"Task \\\"\" + taskName + \"\\\" created!\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public static String printEstimateAddedMessage(String taskName, int hours, int minutes) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        return \"Task \\\"\" + taskName + \"\\\" has estimated time of \" + hours + \" hours and \" + minutes + \" minutes\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public static String printActualDurationAddedMessage(String taskName, int hours, int minutes) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        return \"Task \\\"\" + taskName + \"\\\" took \" + hours + \" hours and \" + minutes + \" minutes to be completed.\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public static String printTaskDoneMessage(String taskName) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        return \"Task \\\"\" + taskName + \"\\\" is done!\";"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public static String printTaskDeletedMessage(String taskName) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        return \"Task \\\"\" + taskName + \"\\\" removed!\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    public static String printHomeView(ArrayList\u003cProject\u003e projects, ArrayList\u003cTeamMember\u003e teamMembers) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        String output \u003d \"EZ Manager Home View\\n\";"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        output +\u003d \"\\n ----------------------\";"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        output +\u003d \"\\n| PROJECT LIST         |\";"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        output +\u003d \"\\n ----------------------\\n\";"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        output +\u003d \"\\nIndex   Status   Project Name             Project Description                \""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                + \"Deadline     Tasks Completed     Remarks\";"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        output +\u003d \"\\n---------------------------------------------------------------------------\""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                + \"---------------------------------------------------------------------------\";"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        int projectIndex \u003d 1;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        String paddedProjectIndex;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        String paddedProjectStatus;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        String paddedProjectName;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        String paddedProjectDescription;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        String paddedProjectDeadline;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        String paddedTaskCompleted;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        for (Project project : projects) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            paddedProjectIndex \u003d String.format(\"%-8s\", projectIndex + \".\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            String projectStatus;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            if (project.isProjectDone()) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                projectStatus \u003d \"Y\";"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                projectStatus \u003d \"N\";"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            paddedProjectStatus \u003d String.format(\"%-9s\", projectStatus);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            String projectName \u003d project.getProjectName();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            if (projectName.length() \u003e\u003d 25) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                projectName \u003d projectName.substring(0, 21) + \"...\";"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            paddedProjectName \u003d String.format(\"%-25s\", projectName);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            if (!project.getDescription().equals(\"\u003cproject description empty\u003e\")) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                String projectDescription \u003d project.getDescription();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                if (projectDescription.length() \u003e\u003d 35) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                    projectDescription \u003d projectDescription.substring(0, 31) + \"...\";"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                paddedProjectDescription \u003d String.format(\"%-35s\", projectDescription);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                paddedProjectDescription \u003d String.format(\"%-35s\", \"-\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            if (project.getProjectDeadline() !\u003d null) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                String projectDeadline \u003d project.getProjectDeadline().format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy\"));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                paddedProjectDeadline \u003d String.format(\"%-13s\", projectDeadline);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                paddedProjectDeadline \u003d String.format(\"%-13s\", \"-\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            String taskCompleted \u003d project.getNumberOfFinishedTask() + \"/\""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                    + project.getNumberOfTask();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            paddedTaskCompleted \u003d String.format(\"%-20s\", taskCompleted);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            String remarks \u003d \"-\";"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            LocalDate dateOfTaskWithNearestDeadline \u003d null;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            Task taskWithNearestDeadline \u003d null;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            if (!project.getTaskList().isEmpty()) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                ArrayList\u003cTask\u003e tasks \u003d project.getTaskList();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                for (Task task : tasks) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                    LocalDate deadlineOfTask \u003d task.getDeadline();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                    if (deadlineOfTask \u003d\u003d null) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                        continue;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                    } else if (dateOfTaskWithNearestDeadline \u003d\u003d null) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                        dateOfTaskWithNearestDeadline \u003d deadlineOfTask;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                        taskWithNearestDeadline \u003d task;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                    } else if (deadlineOfTask.compareTo(dateOfTaskWithNearestDeadline) \u003c 0) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                        dateOfTaskWithNearestDeadline \u003d deadlineOfTask;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                        taskWithNearestDeadline \u003d task;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                LocalDate currentDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                if (dateOfTaskWithNearestDeadline !\u003d null \u0026\u0026 !taskWithNearestDeadline.getStatus()) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                    //find the difference in the number of days from current days to deadline"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                    Period period \u003d Period.between(currentDate, dateOfTaskWithNearestDeadline);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                    if (period.getDays() \u003c\u003d 5 \u0026\u0026 period.getMonths() \u003d\u003d 0 \u0026\u0026 period.getYears() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                        remarks \u003d \"!!!WARNING!!! Task \\\"\" + taskWithNearestDeadline.getDescription()"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                                + \"\\\" has \" + period.getDays() + \" day(s) before deadline and still not done!!\";"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                        remarks \u003d \"Task \\\"\" + taskWithNearestDeadline.getDescription()"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                                + \"\\\" has an upcoming deadline at \" + taskWithNearestDeadline.getDateString()"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                                + \" and still not done!!\";"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            output +\u003d \"\\n\" + paddedProjectIndex + paddedProjectStatus + paddedProjectName + paddedProjectDescription"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                    + paddedProjectDeadline + paddedTaskCompleted + remarks;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            projectIndex++;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        output +\u003d \"\\n\\n ----------------------\";"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        output +\u003d \"\\n| MEMBERS LIST         |\";"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        output +\u003d \"\\n ----------------------\\n\";"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        output +\u003d \"\\nIndex   Member Name                   Projects Involved\";"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        output +\u003d \"\\n-----------------------------------------------------------------------------\";"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        int memberIndex \u003d 1;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        for (TeamMember member : teamMembers) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            String paddedMemberIndex \u003d String.format(\"%-8s\", memberIndex + \".\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            String memberName \u003d member.getName();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            if (member.getName().length() \u003e\u003d 30) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                memberName \u003d member.getName().substring(0, 26) + \"...\";"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            String paddedMemberName \u003d String.format(\"%-30s\", memberName);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            output +\u003d \"\\n\" + paddedMemberIndex + paddedMemberName;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            if (!member.getAssignedProjects().isEmpty()) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                for (int i \u003d 0; i \u003c member.getAssignedProjects().size(); i++) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                    String assignedProjectName \u003d member.getAssignedProjects().get(i).getProjectName();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                    if (i \u003d\u003d 0) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                        output +\u003d \"1. \" + assignedProjectName;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                        output +\u003d \"\\n                                      \""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                                + (i + 1) + \". \" + assignedProjectName;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                output +\u003d \"-\";"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            output +\u003d System.lineSeparator();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            memberIndex++;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public static String printTaskSelectedMessage(String taskName) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        return \"Selected Task: \" + taskName;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public static String printTaskDeadlineMessage(LocalDate date, String taskName) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        return \"Deadline \" + date.format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy\"))"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "thatseant"
        },
        "content": "                + \" added to Task \" + taskName;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public static String printTaskNameUpdatedMessage(String oldTaskName, String newTaskName) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        return \"Task \" + \"\\\"\" + oldTaskName + \"\\\" has been updated to \\\"\" + newTaskName + \"\\\"\";"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public static String printInHomeViewMessage() {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        return \"Already in Home View!\";"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public static String printSwitchedToHomeViewMessage() {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        return \"Switched to Home View\";"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    public static String projectViewMessage(Project project) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            String projectTitle \u003d \"Project \\\"\" + project.getProjectName() + \"\\\"\";"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            String projectDescription \u003d \"\\n\" + \"Description:\" + \"\\n\" + project.getDescription();"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            String taskListTitle \u003d \"\\n ---------------------\\n| TASK LIST           |\\n ---------------------\";"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            String membersListTitle \u003d \"\\n ---------------------\\n| MEMBERS LIST        |\\n ---------------------\";"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            String indexSpaces \u003d \"      \"; // 6"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            String statusSpaces \u003d \"      \"; // 6"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            String descriptionSpaces \u003d \"                   \"; // 19"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            String deadlineSpaces \u003d \"               \"; // 16"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            String prioritySpaces \u003d \"              \"; // 11"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            String expectedSpaces \u003d \"                 \"; // 18"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            String actualSpaces \u003d \"             \"; // 13"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            String membersSpaces \u003d \"                \"; // 16"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            String tableLabel \u003d \"Index  Status   Description        \""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                                + \"Deadline        Priority      Expected Hrs     Actual Hrs   | Members Involved\\n\""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                                + \"------------------------------------------------\""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "thatseant"
        },
        "content": "                                + \"-----------------------------------------------|------------------\";"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            Integer extra \u003d 0;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            Integer i \u003d 0;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            int index;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            String currentTaskLine \u003d \"\";"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            String taskLines \u003d \"\\n\";"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            if (project.getTaskList().size() \u003e 0) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                for (; i \u003c project.getTaskList().size(); i++) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "thatseant"
        },
        "content": "                    index \u003d i + 1;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                    Task currentTask \u003d project.getTaskList().get(i);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                    String status \u003d currentTask.isDone() ? \"(Y)\" : \"(N)\";"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                    String description \u003d currentTask.getTaskDescription();"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                    String deadline \u003d currentTask.getDateString();"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "thatseant"
        },
        "content": "                    currentTaskLine \u003d index + indexSpaces + status + statusSpaces + description"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                            + (descriptionSpaces.substring(0, descriptionSpaces.length() - description.length()));"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                    if (deadline.length() \u003e 0) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                        currentTaskLine +\u003d (deadline);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "thatseant"
        },
        "content": "                        currentTaskLine +\u003d \"-\";"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                    currentTaskLine +\u003d (deadlineSpaces.substring(0, deadlineSpaces.length() - deadline.length()));"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "thatseant"
        },
        "content": "                    int priority \u003d currentTask.getPriority();"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "thatseant"
        },
        "content": "                    if (priority \u003e 0) {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                        currentTaskLine +\u003d (priority);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "thatseant"
        },
        "content": "                        currentTaskLine +\u003d \"-\";"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "thatseant"
        },
        "content": "                    currentTaskLine +\u003d (prioritySpaces.substring(0, prioritySpaces.length() - 1));"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                    Integer estimate \u003d currentTask.getEstimate();"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                    if (estimate \u003e 1) {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                        currentTaskLine +\u003d (estimate / 60);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                        extra \u003d estimate.toString().length() - 1;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "thatseant"
        },
        "content": "                        currentTaskLine +\u003d \"-\";"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                        extra \u003d 0;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                    currentTaskLine +\u003d (expectedSpaces.substring(0, expectedSpaces.length()"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                            - estimate.toString().length() + extra));"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                    Integer actual \u003d currentTask.getActual();"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                    if (actual \u003e 1) {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                        currentTaskLine +\u003d (actual / 60);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "thatseant"
        },
        "content": "                        currentTaskLine +\u003d \"-\";"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                    extra \u003d actual.toString().length() - 1;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                    currentTaskLine +\u003d (actualSpaces.substring(0, actualSpaces.length()"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                            - actual.toString().length() + extra));"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "thatseant"
        },
        "content": "                    String memberName \u003d null;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "thatseant"
        },
        "content": "                    ArrayList\u003cTeamMember\u003e members \u003d currentTask.getMembers();"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "thatseant"
        },
        "content": "                    currentTaskLine +\u003d \"|\";"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "thatseant"
        },
        "content": "                    memberName \u003d \"|\";"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "thatseant"
        },
        "content": "                    for (TeamMember member : members) {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "thatseant"
        },
        "content": "                        currentTaskLine +\u003d member.getName() + \"|\";"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                        memberName \u003d member.getName();"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "thatseant"
        },
        "content": "                    //currentTaskLine +\u003d (membersSpaces.substring(0, membersSpaces.length() - memberName.length()));"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                    taskLines +\u003d (currentTaskLine + \"\\n\");"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                taskLines +\u003d \"No tasks have been added to this project.\";"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            ArrayList\u003cTeamMember\u003e members \u003d project.getTeamMembers();"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            String membersListLines \u003d \"\";"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            if (members.size() \u003e 0) {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                for (int j \u003d 0; j \u003c members.size(); j++) {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                    membersListLines +\u003d (j + 1) + \". \" + members.get(j).getName() + \"\\n\";"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                membersListLines +\u003d \"No team members have been assigned to this project.\";"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            }"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            return projectTitle + \"\\n\" + projectDescription + \"\\n\" + taskListTitle + \"\\n\""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                    + (project.getTaskList().size() \u003e 0 ? tableLabel : \"\") + taskLines"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                    + \"\\n \\n\" + membersListTitle + \"\\n\" + membersListLines;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        } catch (Error e) {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        return \"hi\";"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    }"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public static String printMemberAssignedToTaskMessage(String memberName, String taskName) {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        return \"Member \\\"\" + memberName + \"\\\" has been assigned to \\\"\" + taskName + \"\\\"\";"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public static String printMemberAssignedToProjectMessage(String memberName, String projectName) {"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        return memberName + \" assigned to Project \\\"\" + projectName + \"\\\"\";"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public static String printPriorityAssignedToTaskMessage(int priority, String taskName) {"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        return \"Priority \\\"\" + priority + \"\\\" has been assigned to \\\"\" + taskName + \"\\\"\";"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public static String printHoursWorkedMessage(String memberName, double hoursWorked) {"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        return memberName + \" worked for \" + String.format(\"%.1f\", hoursWorked) + \" hours.\";"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "thatseant"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thatseant": 65,
      "samuelchristopher": 94,
      "samuellleow": 195,
      "shreytheshreyas": 11,
      "riazaham": 28
    }
  },
  {
    "path": "src/test/java/seedu/duke/ParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thatseant"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.commands.ExitCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.commands.HomeCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.commands.PrintHomeViewCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.commands.member.AssignMemberToProjectCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.commands.member.TeamMemberAddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.commands.member.TeamMemberAssignToTaskCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.commands.member.TeamMemberDeleteCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.commands.member.TeamMemberHoursCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.commands.project.ProjectCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.commands.project.ProjectDeadlineCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.commands.project.ProjectDeleteCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.commands.project.ProjectDescriptionCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.commands.project.ProjectDoneCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.commands.project.ProjectSelectCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.commands.task.ActualTimeCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.commands.task.EstimatedTimeCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.commands.task.TaskAssignDeadlineCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.commands.task.TaskAssignPriorityCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.commands.task.TaskCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.commands.task.TaskDeleteCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.commands.task.TaskDoneCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.commands.task.TaskEditCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.commands.task.TaskListCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.commands.task.TaskSortCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thatseant"
        },
        "content": "class ParserTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    void getParams_correctTaskParams_correctHashmap() throws DukeExceptions {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        String paramString \u003d \"n/new Named Task d/2020-08-04 t/109 p/121 h/12 m/56\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        HashMap\u003cString, String\u003e expectedHashmap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        expectedHashmap.put(\"n\", \"new Named Task\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        expectedHashmap.put(\"p\", \"121\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        expectedHashmap.put(\"d\", \"2020-08-04\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        expectedHashmap.put(\"t\", \"109\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        expectedHashmap.put(\"h\", \"12\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        expectedHashmap.put(\"m\", \"56\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        HashMap\u003cString, String\u003e actualHashmap \u003d Parser.getParams(paramString);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        assertEquals(expectedHashmap, actualHashmap);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    void getParams_slashInParameters_slashException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        String paramString \u003d \"n//// d//\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        DukeExceptions exception \u003d assertThrows(DukeExceptions.class, () -\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thatseant"
        },
        "content": "                Parser.getParams(paramString));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        String expectedOutput \u003d \"Parameters should not contain slashes!\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        assertEquals(expectedOutput, exception.toString());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    void getParams_excessSlashInParameters_slashException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        String paramString \u003d \"t/1/2\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        DukeExceptions exception \u003d assertThrows(DukeExceptions.class, () -\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thatseant"
        },
        "content": "                Parser.getParams(paramString));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        String expectedOutput \u003d \"Parameters should not contain slashes!\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        assertEquals(expectedOutput, exception.toString());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    void getParams_duplicateParams_duplicateParamsException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        String paramString \u003d \"n/3 n/5\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        DukeExceptions exception \u003d assertThrows(DukeExceptions.class, () -\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "thatseant"
        },
        "content": "                Parser.getParams(paramString));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        String expectedOutput \u003d \"Duplicate Parameters detected!\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        assertEquals(expectedOutput, exception.toString());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    void getHashValue_missingParam_missingParamsException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        HashMap\u003cString, String\u003e params \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        params.put(\"t\", \"3\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        DukeExceptions exception \u003d assertThrows(DukeExceptions.class, () -\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "thatseant"
        },
        "content": "                Parser.getHashValue(params, \"d\")); //Missing description"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        String expectedOutput \u003d \"Certain Parameters are missing!\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        assertEquals(expectedOutput, exception.toString());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    void parse_listCommandHomeView_correctCommand() throws DukeExceptions {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        String inputCommand \u003d \"list\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Parser.setProjectIndex(-1);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Command actualCommand \u003d Parser.parse(inputCommand);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        assertTrue(actualCommand instanceof PrintHomeViewCommand);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    void parse_listCommandProjectView_correctCommand() throws DukeExceptions {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        String inputCommand \u003d \"list\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Parser.setProjectIndex(1);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Command actualCommand \u003d Parser.parse(inputCommand);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        assertTrue(actualCommand instanceof TaskListCommand);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    void parse_selectCommandHomeView_correctCommand() throws DukeExceptions {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        String inputCommand \u003d \"select p/1\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Parser.setProjectIndex(-1);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Command actualCommand \u003d Parser.parse(inputCommand);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        assertTrue(actualCommand instanceof ProjectSelectCommand);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    void parse_selectCommandProjectView_HomeViewException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        String inputCommand \u003d \"select p/1\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Parser.setProjectIndex(3);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        DukeExceptions exception \u003d assertThrows(DukeExceptions.class, () -\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "thatseant"
        },
        "content": "                Parser.parse(inputCommand));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        String expectedOutput \u003d \"You must be in Home View to do that!\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        assertEquals(expectedOutput, exception.toString());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    void parse_descriptionCommandHomeView_correctCommand() throws DukeExceptions {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        String inputCommand \u003d \"description p/1 d/This is a test.\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Parser.setProjectIndex(-1);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Command actualCommand \u003d Parser.parse(inputCommand);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        assertTrue(actualCommand instanceof ProjectDescriptionCommand);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    void parse_descriptionCommandProjectView_HomeViewException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        String inputCommand \u003d \"description p/1 d/Test\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Parser.setProjectIndex(3);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        DukeExceptions exception \u003d assertThrows(DukeExceptions.class, () -\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "thatseant"
        },
        "content": "                Parser.parse(inputCommand));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        String expectedOutput \u003d \"You must be in Home View to do that!\";"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        assertEquals(expectedOutput, exception.toString());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    void parse_projectCommandHomeView_correctCommand() throws DukeExceptions {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        String inputCommand \u003d \"project n/New Project\";"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Parser.setProjectIndex(-1);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Command actualCommand \u003d Parser.parse(inputCommand);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        assertTrue(actualCommand instanceof ProjectCommand);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    void parse_projectCommandProjectView_HomeViewException() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        String inputCommand \u003d \"project n/New Project\";"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Parser.setProjectIndex(3);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        DukeExceptions exception \u003d assertThrows(DukeExceptions.class, () -\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "thatseant"
        },
        "content": "                Parser.parse(inputCommand));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        String expectedOutput \u003d \"You must be in Home View to do that!\";"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        assertEquals(expectedOutput, exception.toString());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    void parse_taskCommandHomeView_ProjectViewException() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        String inputCommand \u003d \"task n/New Task\";"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Parser.setProjectIndex(-1);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        DukeExceptions exception \u003d assertThrows(DukeExceptions.class, () -\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "thatseant"
        },
        "content": "                Parser.parse(inputCommand));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        String expectedOutput \u003d \"You must be in Project View to do that!\";"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        assertEquals(expectedOutput, exception.toString());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    void parse_TaskCommandProjectView_correctCommand() throws DukeExceptions {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        String inputCommand \u003d \"task n/New Task\";"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Parser.setProjectIndex(2);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Command actualCommand \u003d Parser.parse(inputCommand);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        assertTrue(actualCommand instanceof TaskCommand);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    void parse_EditCommandHomeView_ProjectViewException() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        String inputCommand \u003d \"edit t/3 n/New Project\";"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Parser.setProjectIndex(-1);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        DukeExceptions exception \u003d assertThrows(DukeExceptions.class, () -\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "thatseant"
        },
        "content": "                Parser.parse(inputCommand));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        String expectedOutput \u003d \"You must be in Project View to do that!\";"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        assertEquals(expectedOutput, exception.toString());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    void parse_EditCommandProjectView_correctCommand() throws DukeExceptions {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        String inputCommand \u003d \"edit t/3 n/New Project\";"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Parser.setProjectIndex(2);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Command actualCommand \u003d Parser.parse(inputCommand);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        assertTrue(actualCommand instanceof TaskEditCommand);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    void parse_DoneCommandHomeView_correctCommand() throws DukeExceptions {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        String inputCommand \u003d \"done p/3\";"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Parser.setProjectIndex(-1);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Command actualCommand \u003d Parser.parse(inputCommand);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        assertTrue(actualCommand instanceof ProjectDoneCommand);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    void parse_DoneCommandProjectView_correctCommand() throws DukeExceptions {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        String inputCommand \u003d \"done t/3\";"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Parser.setProjectIndex(3);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Command actualCommand \u003d Parser.parse(inputCommand);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        assertTrue(actualCommand instanceof TaskDoneCommand);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    void parse_DeadlineCommandHomeView_correctCommand() throws DukeExceptions {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        String inputCommand \u003d \"deadline p/2 d/2020-08-04\";"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Parser.setProjectIndex(-1);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Command actualCommand \u003d Parser.parse(inputCommand);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        assertTrue(actualCommand instanceof ProjectDeadlineCommand);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    void parse_DeadlineCommandProjectView_correctCommand() throws DukeExceptions {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        String inputCommand \u003d \"deadline t/3 d/2020-08-04\";"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Parser.setProjectIndex(3);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Command actualCommand \u003d Parser.parse(inputCommand);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        assertTrue(actualCommand instanceof TaskAssignDeadlineCommand);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    void parse_DeleteCommandHomeView_correctCommand() throws DukeExceptions {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        String inputCommand \u003d \"delete p/3\";"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Parser.setProjectIndex(-1);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Command actualCommand \u003d Parser.parse(inputCommand);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        assertTrue(actualCommand instanceof ProjectDeleteCommand);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    void parse_DeleteCommandProjectView_correctCommand() throws DukeExceptions {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        String inputCommand \u003d \"delete t/3\";"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Parser.setProjectIndex(3);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Command actualCommand \u003d Parser.parse(inputCommand);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        assertTrue(actualCommand instanceof TaskDeleteCommand);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    void parse_ActualCommandProjectView_correctCommand() throws DukeExceptions {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        String inputCommand \u003d \"actual t/3 h/7 m/32\";"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Parser.setProjectIndex(3);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Command actualCommand \u003d Parser.parse(inputCommand);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        assertTrue(actualCommand instanceof ActualTimeCommand);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    void parse_EstimateCommandProjectView_correctCommand() throws DukeExceptions {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        String inputCommand \u003d \"estimate t/3 h/5 m/32\";"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Parser.setProjectIndex(3);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Command actualCommand \u003d Parser.parse(inputCommand);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        assertTrue(actualCommand instanceof EstimatedTimeCommand);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    void parse_HomeCommandProjectView_correctCommand() throws DukeExceptions {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        String inputCommand \u003d \"home\";"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Parser.setProjectIndex(3);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Command actualCommand \u003d Parser.parse(inputCommand);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        assertTrue(actualCommand instanceof HomeCommand);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    void parse_MemberCommandHomeView_correctCommand() throws DukeExceptions {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        String inputCommand \u003d \"member n/New Member\";"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Parser.setProjectIndex(-1);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Command actualCommand \u003d Parser.parse(inputCommand);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        assertTrue(actualCommand instanceof TeamMemberAddCommand);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    void parse_memberCommandProjectView_HomeViewException() {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        String inputCommand \u003d \"member n/New Member\";"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Parser.setProjectIndex(3);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        DukeExceptions exception \u003d assertThrows(DukeExceptions.class, () -\u003e"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "thatseant"
        },
        "content": "                Parser.parse(inputCommand));"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        String expectedOutput \u003d \"You must be in Home View to do that!\";"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        assertEquals(expectedOutput, exception.toString());"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    void parse_removeCommandHomeView_correctCommand() throws DukeExceptions {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        String inputCommand \u003d \"remove m/3\";"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Parser.setProjectIndex(-1);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Command actualCommand \u003d Parser.parse(inputCommand);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        assertTrue(actualCommand instanceof TeamMemberDeleteCommand);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    void parse_assignCommandHomeView_correctCommand() throws DukeExceptions {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        String inputCommand \u003d \"assign p/1 m/3\";"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Parser.setProjectIndex(-1);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Command actualCommand \u003d Parser.parse(inputCommand);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        assertTrue(actualCommand instanceof AssignMemberToProjectCommand);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    void parse_assignCommandProjectView_correctCommand() throws DukeExceptions {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        String inputCommand \u003d \"assign t/3 m/3\";"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Parser.setProjectIndex(3);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Command actualCommand \u003d Parser.parse(inputCommand);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        assertTrue(actualCommand instanceof TeamMemberAssignToTaskCommand);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    void parse_priorityCommandProjectView_correctCommand() throws DukeExceptions {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        String inputCommand \u003d \"priority t/3 p/2\";"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Parser.setProjectIndex(3);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Command actualCommand \u003d Parser.parse(inputCommand);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        assertTrue(actualCommand instanceof TaskAssignPriorityCommand);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    void parse_priorityCommandHomeView_ProjectViewException() {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        String inputCommand \u003d \"priority t/3 p/2\";"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Parser.setProjectIndex(-1);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        DukeExceptions exception \u003d assertThrows(DukeExceptions.class, () -\u003e"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "thatseant"
        },
        "content": "                Parser.parse(inputCommand));"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        String expectedOutput \u003d \"You must be in Project View to do that!\";"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        assertEquals(expectedOutput, exception.toString());"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    void parse_byeCommand_correctCommand() throws DukeExceptions {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        String inputCommand \u003d \"bye\";"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Parser.setProjectIndex(3);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Command actualCommand \u003d Parser.parse(inputCommand);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        assertTrue(actualCommand instanceof ExitCommand);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    void parse_sortCommandHomeView_ProjectViewException() {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        String inputCommand \u003d \"sort s/p\";"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Parser.setProjectIndex(-1);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        DukeExceptions exception \u003d assertThrows(DukeExceptions.class, () -\u003e"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "thatseant"
        },
        "content": "                Parser.parse(inputCommand));"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        String expectedOutput \u003d \"You must be in Project View to do that!\";"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        assertEquals(expectedOutput, exception.toString());"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    void parse_sortCommandProjectView_correctCommand() throws DukeExceptions {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        String inputCommand \u003d \"sort s/p\";"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Parser.setProjectIndex(3);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Command actualCommand \u003d Parser.parse(inputCommand);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        assertTrue(actualCommand instanceof TaskSortCommand);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    void parse_hoursCommandProjectView_correctCommand() throws DukeExceptions {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        String inputCommand \u003d \"hours m/2\";"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Parser.setProjectIndex(-1);"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Command actualCommand \u003d Parser.parse(inputCommand);"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        assertTrue(actualCommand instanceof TeamMemberHoursCommand);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    void parse_unrecognisedCommand_unrecognisedException() {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        String inputCommand \u003d \"blah p/3\";"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Parser.setProjectIndex(-1);"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        DukeExceptions exception \u003d assertThrows(DukeExceptions.class, () -\u003e"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "thatseant"
        },
        "content": "                Parser.parse(inputCommand));"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        String expectedOutput \u003d \"OOPS!!! I\u0027m sorry, but I don\u0027t know what that command means :-(\";"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        assertEquals(expectedOutput, exception.toString());"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    void parse_missingParametersPriority_missingParamsException() {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        String inputCommand \u003d \"priority t/1\";"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Parser.setProjectIndex(3);"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        DukeExceptions exception \u003d assertThrows(DukeExceptions.class, () -\u003e"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "thatseant"
        },
        "content": "                Parser.parse(inputCommand));"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        String expectedOutput \u003d \"Certain Parameters are missing!\";"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        assertEquals(expectedOutput, exception.toString());"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "thatseant"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thatseant": 381
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/member/AssignMemberToProjectCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "package seedu.duke.commands.member;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "import seedu.duke.DukeExceptions;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "import seedu.duke.member.TeamMember;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "import seedu.duke.project.Project;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "public class AssignMemberToProjectCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    static ArrayList\u003cProject\u003e projects;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    static ArrayList\u003cTeamMember\u003e teamMembers;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    static Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    static void createProjectList() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        projects \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        teamMembers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        Project project1 \u003d new Project(\"Project 1\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        Project project2 \u003d new Project(\"Project 2\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        Project project3 \u003d new Project(\"Project 3\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        projects.add(project1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        projects.add(project2);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        projects.add(project3);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    static void createMemberList() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        teamMembers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        TeamMember member1 \u003d new TeamMember(\"Member 1\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        TeamMember member2 \u003d new TeamMember(\"Member 2\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        TeamMember member3 \u003d new TeamMember(\"Member 3\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        teamMembers.add(member1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        teamMembers.add(member2);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        teamMembers.add(member3);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    public void executeCommand_validMemberId_validProjectId_assignMemberToProject() throws DukeExceptions {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        HashMap\u003cString, String\u003e params \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        params.put(\"m\",\"2\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        params.put(\"p\",\"1\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        AssignMemberToProjectCommand assignProject \u003d new AssignMemberToProjectCommand(params,-1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        String expectedOutput \u003d \"Member 2 assigned to Project \\\"Project 1\\\"\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        String actualOutput \u003d assignProject.executeCommand(projects,teamMembers);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        assertEquals(expectedOutput,actualOutput);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    public void executeCommand_invalidMemberId_assignMemberToProject() throws DukeExceptions {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        HashMap\u003cString,String\u003e params \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        params.put(\"m\",\"7\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        params.put(\"p\",\"2\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        AssignMemberToProjectCommand command \u003d new AssignMemberToProjectCommand(params,-1);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        String expectedOutput \u003d \"Team Member ID does not exist!\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        DukeExceptions actualOutputException \u003d assertThrows(DukeExceptions.class, () -\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            command.executeCommand(projects, teamMembers));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        assertEquals(expectedOutput, actualOutputException.toString());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    public void executeCommand_invalidProjectId_assignMemberToProject() throws DukeExceptions {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        HashMap\u003cString,String\u003e params \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        params.put(\"m\",\"1\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        params.put(\"p\",\"5\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        AssignMemberToProjectCommand assignProject \u003d new AssignMemberToProjectCommand(params,-1);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        String expectedOutput \u003d \"Project ID does not exist!\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        Throwable actualOutputException \u003d assertThrows(DukeExceptions.class, () -\u003e {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "            assignProject.executeCommand(projects,teamMembers);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        });"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        assertEquals(expectedOutput,actualOutputException.toString());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thatseant": 3,
      "samuellleow": 1,
      "shreytheshreyas": 75,
      "riazaham": 3
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/member/TeamMemberAddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "riazaham"
        },
        "content": "package seedu.duke.commands.member;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.DukeExceptions;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.member.TeamMember;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.project.Project;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "riazaham"
        },
        "content": "class TeamMemberAddCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    static ArrayList\u003cProject\u003e projects;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    static ArrayList\u003cTeamMember\u003e teamMembers;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    static Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    static HashMap\u003cString, String\u003e params;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    static void createProjectList() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        projects \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        teamMembers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        params \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    public void executeCommand_validMemberName_memberAddedMessage() throws DukeExceptions {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        params.put(\"n\", \"John Doe\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        TeamMemberAddCommand command \u003d new TeamMemberAddCommand(params);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        String expectedOutput \u003d Ui.printMemberAddedMessage(\"John Doe\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        String actualOuput \u003d command.executeCommand(projects, teamMembers);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        assertEquals(expectedOutput, actualOuput);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "riazaham"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thatseant": 1,
      "riazaham": 37
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/member/TeamMemberAssignToTaskCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "riazaham"
        },
        "content": "package seedu.duke.commands.member;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.DukeExceptions;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.member.TeamMember;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.project.Project;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "riazaham"
        },
        "content": "class TeamMemberAssignToTaskCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    static ArrayList\u003cProject\u003e projects;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    static ArrayList\u003cTeamMember\u003e teamMembers;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    static HashMap\u003cString, String\u003e params;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    static Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "riazaham"
        },
        "content": "     * Create 1 projects list"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "riazaham"
        },
        "content": "     * Create 1 project."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "riazaham"
        },
        "content": "     * Create 3 tasks."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "riazaham"
        },
        "content": "     * Add the 3 tasks to that project."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "riazaham"
        },
        "content": "     * Add that project to projects list."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "riazaham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    static void testSetup() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        params \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        teamMembers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        projects \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        Project projectOne \u003d new Project(\"Project One\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        Task taskOne \u003d new Task(\"Task One\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        Task taskTwo \u003d new Task(\"Task Two\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        Task taskThree \u003d new Task(\"Task Three\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        projectOne.addTask(taskOne);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        projectOne.addTask(taskTwo);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        projectOne.addTask(taskThree);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        projects.add(projectOne);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        TeamMember memberOne \u003d new TeamMember(\"Arnold\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        TeamMember memberTwo \u003d new TeamMember(\"Julian\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        TeamMember memberThree \u003d new TeamMember(\"Victor\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        teamMembers.add(memberOne);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        teamMembers.add(memberTwo);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        teamMembers.add(memberThree);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        projectOne.addTeamMemberToProject(memberOne);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        projectOne.addTeamMemberToProject(memberTwo);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        projectOne.addTeamMemberToProject(memberThree);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "riazaham"
        },
        "content": "     * Assign member 1 (Arnold) to task 1 (Task One)."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "riazaham"
        },
        "content": "     * @throws DukeExceptions exception message"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "riazaham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    void executeCommand_validTaskIdMemberId_memberAssignedMessage() throws DukeExceptions {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        params.put(\"t\", \"1\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        params.put(\"m\", \"1\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        TeamMemberAssignToTaskCommand command \u003d new TeamMemberAssignToTaskCommand(params,0);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        String expectedOutput \u003d Ui.printMemberAssignedToTaskMessage(\"Arnold\", \"Task One\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        String actualOutput \u003d command.executeCommand(projects, teamMembers);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        assertEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    void executeCommand_nonExistentMemberId_memberAssignedMessage() throws DukeExceptions {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        params.put(\"t\", \"1\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        params.put(\"m\", \"50\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        TeamMemberAssignToTaskCommand command \u003d new TeamMemberAssignToTaskCommand(params,0);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        String expectedOutput \u003d \"Team Member ID does not exist!\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        DukeExceptions exception \u003d assertThrows(DukeExceptions.class, () -\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                command.executeCommand(projects, teamMembers));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        assertEquals(expectedOutput, exception.toString());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    void executeCommand_nonExistentTaskId_memberAssignedMessage() throws DukeExceptions {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        params.put(\"t\", \"5\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        params.put(\"m\", \"1\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        TeamMemberAssignToTaskCommand command \u003d new TeamMemberAssignToTaskCommand(params,0);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        String expectedOutput \u003d \"Task ID does not exist!\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        DukeExceptions exception \u003d assertThrows(DukeExceptions.class, () -\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "riazaham"
        },
        "content": "                command.executeCommand(projects, teamMembers));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        assertEquals(expectedOutput, exception.toString());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "riazaham"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samuellleow": 12,
      "riazaham": 78
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/member/TeamMemberDeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "riazaham"
        },
        "content": "package seedu.duke.commands.member;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.DukeExceptions;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import seedu.duke.commands.PrintHomeViewCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import seedu.duke.commands.task.TaskListCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.member.TeamMember;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.project.Project;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import seedu.duke.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "riazaham"
        },
        "content": "class TeamMemberDeleteCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    private ArrayList\u003cProject\u003e projects;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    private ArrayList\u003cTeamMember\u003e teamMembers;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    private Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    private HashMap\u003cString, String\u003e params;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    void createTeamMembersList() throws DukeExceptions {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        projects \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        teamMembers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        Project project1 \u003d new Project(\"Project One\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        TeamMember member1 \u003d new TeamMember(\"John Doe\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        TeamMember member2 \u003d new TeamMember(\"Sarah Hopkins\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        projects.add(project1);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        teamMembers.add(member1);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        teamMembers.add(member2);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        project1.addTeamMemberToProject(member1);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        project1.addTeamMemberToProject(member2);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        member1.assignProject(project1);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        member2.assignProject(project1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        Task task1 \u003d new Task(\"Task One\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        project1.addTask(task1);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        task1.setMember(member1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        task1.setMember(member2);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        member1.setTask(task1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        member2.setTask(task1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        params \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    void executeCommand_validMemberIdInProjectView_memberRemovedMessage() throws DukeExceptions {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        int projectIndex \u003d 0;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        params.put(\"m\", \"2\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        TeamMemberDeleteCommand command \u003d new TeamMemberDeleteCommand(params, projectIndex);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        String expectedOutput \u003d \"Team member \\\"Sarah Hopkins\\\" has been removed from Project \\\"Project One\\\"\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        String actualOutput \u003d command.executeCommand(projects, teamMembers);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        assertEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    void executeCommand_nonExistentMemberIdInProjectView_invalidMemberIdException()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            throws DukeExceptions {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        int projectIndex \u003d 0;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        params.put(\"m\", \"10\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        TeamMemberDeleteCommand command \u003d new TeamMemberDeleteCommand(params, projectIndex);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        String expectedOutput \u003d \"Team Member ID does not exist!\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        DukeExceptions exception \u003d assertThrows(DukeExceptions.class, () -\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                command.executeCommand(projects, teamMembers));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        assertEquals(expectedOutput, exception.toString());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    void executeCommand_validMemberIdInProjectView_projectViewMember1RemovedFromListAndTaskAssignment()"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            throws DukeExceptions {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        int projectIndex \u003d 0;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        params.put(\"m\", \"1\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        TeamMemberDeleteCommand command \u003d new TeamMemberDeleteCommand(params, projectIndex);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        command.executeCommand(projects, teamMembers);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        String expectedOutput \u003d \"Project \\\"Project One\\\"\\n\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                + \"Description:\\n\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                + \"\u003cproject description empty\u003e\\n\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                + \" ---------------------\\n\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                + \"| TASK LIST           |\\n\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                + \" ---------------------\\n\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                + \"Index  Status   Description        Deadline        Priority      \""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                + \"Expected Hrs     Actual Hrs   | Members Involved\\n\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                + \"-----------------------------------------------------------\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                + \"------------------------------------|------------------\\n\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                + \"1      (N)      Task One           -               -             \""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                + \"-                -            |Sarah Hopkins|\\n\""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                + \" \\n\""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                + \" ---------------------\\n\""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                + \"| MEMBERS LIST        |\\n\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                + \" ---------------------\\n\""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                + \"1. Sarah Hopkins\\n\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        TaskListCommand listCommand \u003d new TaskListCommand(projectIndex);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        String actualOutput \u003d listCommand.executeCommand(projects, teamMembers);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        assertEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    void executeCommand_validMemberIdInHomeView_memberRemovedMessage() throws DukeExceptions {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        int projectIndex \u003d -1;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        params.put(\"m\", \"2\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        TeamMemberDeleteCommand command \u003d new TeamMemberDeleteCommand(params, projectIndex);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        String expectedOutput \u003d \"Team member \\\"Sarah Hopkins\\\" has been removed from program entirely\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        String actualOutput \u003d command.executeCommand(projects, teamMembers);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        assertEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    void executeCommand_nonExistentMemberIdInHomeView_invalidMemberIdException()"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            throws DukeExceptions {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        int projectIndex \u003d -1;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        params.put(\"m\", \"10\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        TeamMemberDeleteCommand command \u003d new TeamMemberDeleteCommand(params, projectIndex);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        String expectedOutput \u003d \"Team Member ID does not exist!\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        DukeExceptions exception \u003d assertThrows(DukeExceptions.class, () -\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "riazaham"
        },
        "content": "                command.executeCommand(projects, teamMembers));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        assertEquals(expectedOutput, exception.toString());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    void executeCommand_validMemberIdInHomeView_homeViewMember2RemovedFromList()"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            throws DukeExceptions {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        int projectIndex \u003d -1;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        params.put(\"m\", \"2\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        TeamMemberDeleteCommand command \u003d new TeamMemberDeleteCommand(params, projectIndex);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        command.executeCommand(projects, teamMembers);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        String expectedOutput \u003d \"EZ Manager Home View\\n\""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                + \" ----------------------\\n\""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                + \"| PROJECT LIST         |\\n\""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                + \" ----------------------\\n\""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                + \"Index   Status   Project Name             Project Description                \""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                + \"Deadline     Tasks Completed     Remarks\\n\""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                + \"-----------------------------------------------------------------------------\""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                + \"-------------------------------------------------------------------------\\n\""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                + \"1.      N        Project One              -                                  \""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                + \"-            0/1                 -\\n\""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                + \" ----------------------\\n\""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                + \"| MEMBERS LIST         |\\n\""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                + \" ----------------------\\n\""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                + \"Index   Member Name                   Projects Involved\\n\""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                + \"-----------------------------------------------------------------------------\\n\""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                + \"1.      John Doe                      1. Project One\";"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        PrintHomeViewCommand homeViewCommand \u003d new PrintHomeViewCommand();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        String actualOutput \u003d homeViewCommand.executeCommand(projects, teamMembers);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        assertEquals(expectedOutput.trim(), actualOutput.trim());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    void executeCommand_validMemberIdInHomeView_projectViewMember2RemovedFromList()"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            throws DukeExceptions {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        int homeView \u003d -1;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        int projectIndex \u003d 0;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        params.put(\"m\", \"2\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        TeamMemberDeleteCommand command \u003d new TeamMemberDeleteCommand(params, homeView);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        command.executeCommand(projects, teamMembers);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        String expectedOutput \u003d \"Project \\\"Project One\\\"\\n\""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                + \"Description:\\n\""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                + \"\u003cproject description empty\u003e\\n\""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                + \" ---------------------\\n\""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                + \"| TASK LIST           |\\n\""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                + \" ---------------------\\n\""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                + \"Index  Status   Description        Deadline        Priority      \""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                + \"Expected Hrs     Actual Hrs   | Members Involved\\n\""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                + \"-------------------------------------------------------------------\""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                + \"----------------------------|------------------\\n\""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                + \"1      (N)      Task One           -               -             \""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                + \"-                -            |John Doe|\\n\""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                + \" \\n\""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                + \" ---------------------\\n\""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                + \"| MEMBERS LIST        |\\n\""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                + \" ---------------------\\n\""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                + \"1. John Doe\\n\";"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        TaskListCommand listCommand \u003d new TaskListCommand(projectIndex);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        String actualOutput \u003d listCommand.executeCommand(projects, teamMembers);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        assertEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "riazaham"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samuellleow": 153,
      "riazaham": 40
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/member/TeamMemberHoursCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thatseant"
        },
        "content": "//@@author thatseant"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thatseant"
        },
        "content": "package seedu.duke.commands.member;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.DukeExceptions;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.member.TeamMember;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.project.Project;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thatseant"
        },
        "content": "class TeamMemberHoursCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    static ArrayList\u003cProject\u003e projects;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    static ArrayList\u003cTeamMember\u003e teamMembers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    static Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    static void createMemberList() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        TeamMember member1 \u003d new TeamMember(\"Member 1\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        TeamMember member2 \u003d new TeamMember(\"Member 2\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        TeamMember member3 \u003d new TeamMember(\"Member 3\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        teamMembers.add(member1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        teamMembers.add(member2);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        teamMembers.add(member3);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public void executeCommand_validMemberId_correctHours() throws DukeExceptions {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Task task1 \u003d new Task(\"task1\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        task1.addActual(274);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Task task2 \u003d new Task(\"task2\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        task2.addActual(128);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Task task3 \u003d new Task(\"task3\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        task3.addActual(45);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Task task4 \u003d new Task(\"task4\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        task4.addActual(290);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        TeamMember member3 \u003d teamMembers.get(2);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        member3.setTask(task1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        member3.setTask(task2);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        member3.setTask(task3);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        member3.setTask(task4);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        HashMap\u003cString, String\u003e params \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        params.put(\"m\",\"3\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        TeamMemberHoursCommand assignProject \u003d new TeamMemberHoursCommand(params,-1);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        String expectedOutput \u003d \"Member 3 worked for 12.3 hours.\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        String actualOutput \u003d assignProject.executeCommand(projects,teamMembers);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        assertEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public void executeCommand_invalidMemberId_assignMemberToProject() throws DukeExceptions {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        HashMap\u003cString,String\u003e params \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        params.put(\"m\",\"7\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        TeamMemberHoursCommand assignProject \u003d new TeamMemberHoursCommand(params,-1);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        String expectedOutput \u003d \"The member ID entered does not exist\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Throwable actualOutputException \u003d assertThrows(DukeExceptions.class, () -\u003e {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            assignProject.executeCommand(projects,teamMembers);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        });"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        assertEquals(expectedOutput,actualOutputException.toString());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "thatseant"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thatseant": 75
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/member/TeamMembersListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "riazaham"
        },
        "content": "package seedu.duke.commands.member;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.DukeExceptions;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.commands.project.ProjectListCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.member.TeamMember;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.project.Project;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "riazaham"
        },
        "content": "class TeamMembersListCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    static ArrayList\u003cProject\u003e projects;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    static ArrayList\u003cTeamMember\u003e teamMembers;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    static void createTeamMembersList() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        projects \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        Project projectOne \u003d new Project(\"Project One\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        projects.add(projectOne);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        teamMembers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        TeamMember member1 \u003d new TeamMember(\"John Doe\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        TeamMember member2 \u003d new TeamMember(\"Sarah Hopkins\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        TeamMember member3 \u003d new TeamMember(\"Brandon Ginger\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        TeamMember member4 \u003d new TeamMember(\"Jonathan Joseph\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        teamMembers.add(member1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        teamMembers.add(member2);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        teamMembers.add(member3);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        teamMembers.add(member4);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    void executeCommand_listWithoutAssignedProject_listMessage() throws DukeExceptions {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        TeamMembersListCommand command \u003d new TeamMembersListCommand(true, 0);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        String expectedOutput \u003d \"List of members:\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "riazaham"
        },
        "content": "                + \"1. John Doe: \\tNot assigned to a project\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "riazaham"
        },
        "content": "                + \"2. Sarah Hopkins: \\tNot assigned to a project\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "riazaham"
        },
        "content": "                + \"3. Brandon Ginger: \\tNot assigned to a project\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "riazaham"
        },
        "content": "                + \"4. Jonathan Joseph: \\tNot assigned to a project\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        String actualOutput \u003d command.executeCommand(projects, teamMembers);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        assertEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    void executeCommand_listWithAssignedProject_listMessage() throws DukeExceptions {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        teamMembers.get(0).setAssignedProjectId(1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        teamMembers.get(2).setAssignedProjectId(1);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        TeamMembersListCommand command \u003d new TeamMembersListCommand(true, 0);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        String expectedOutput \u003d \"List of members:\\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "riazaham"
        },
        "content": "                + \"1. John Doe: \\tAssigned to project 1\\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "riazaham"
        },
        "content": "                + \"2. Sarah Hopkins: \\tNot assigned to a project\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "riazaham"
        },
        "content": "                + \"3. Brandon Ginger: \\tAssigned to project 1\\n\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "riazaham"
        },
        "content": "                + \"4. Jonathan Joseph: \\tNot assigned to a project\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        String actualOutput \u003d command.executeCommand(projects, teamMembers);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        assertEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "riazaham"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "riazaham": 62
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/project/ProjectDeadlineCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "riazaham"
        },
        "content": "package seedu.duke.commands.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.DukeExceptions;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.member.TeamMember;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import seedu.duke.project.Project;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "public class ProjectDeadlineCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    static ArrayList\u003cProject\u003e projects;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    static ArrayList\u003cTeamMember\u003e teamMembers;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    static Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    static HashMap\u003cString, String\u003e params;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    static void createProjectList() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        projects \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        Project projectOne \u003d new Project(\"Drink Water\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        Project projectTwo \u003d new Project(\"Fire\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        Project projectThree \u003d new Project(\"CS2113 Tutorial\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        projects.add(projectOne);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        projects.add(projectTwo);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        projects.add(projectThree);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        teamMembers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        params \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     * Test: Add deadline to the second project with valid project ID and deadline format."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    void executeCommand_validProjectId_addDeadlineToProject() throws DukeExceptions {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        params.put(\"p\", \"1\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        params.put(\"d\", \"2030-12-31\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        ProjectDeadlineCommand command \u003d new ProjectDeadlineCommand(params);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        String expectedOutput \u003d \"Deadline 31/12/2030 added to Project Drink Water\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                + \"EZ Manager Home View\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                + \" ----------------------\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                + \"| PROJECT LIST         |\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                + \" ----------------------\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                + \"Index   Status   Project Name             Project Description                \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                + \"Deadline     Tasks Completed     Remarks\\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                + \"-----------------------------------------------------------------------------\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                + \"-------------------------------------------------------------------------\\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                + \"1.      N        Drink Water              -                                  \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                + \"31/12/2030   0/0                 -\\n\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                + \"2.      N        Fire                     -                                  \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                + \"-            0/0                 -\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                + \"3.      N        CS2113 Tutorial          -                                  \""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                + \"-            0/0                 -\\n\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                + \" ----------------------\\n\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                + \"| MEMBERS LIST         |\\n\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                + \" ----------------------\\n\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                + \"Index   Member Name                   Projects Involved\\n\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                + \"-----------------------------------------------------------------------------\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        String actualOutput \u003d command.executeCommand(projects, teamMembers);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        assertEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    void executeCommand_invalidProjectId_exceptionThrown() throws DukeExceptions {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        params.put(\"p\", \"-5\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        params.put(\"d\", \"2020-12-31\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        ProjectDeadlineCommand command \u003d new ProjectDeadlineCommand(params);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        String expectedOutput \u003d \"Project ID does not exist!\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        Throwable actualOutputException \u003d assertThrows(DukeExceptions.class, () -\u003e {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            command.executeCommand(projects, teamMembers);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        });"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        assertEquals(expectedOutput, actualOutputException.toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    void executeCommand_invalidDeadlineFormat_addDeadlineToProject() throws DukeExceptions {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        params.put(\"p\", \"2\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        params.put(\"d\", \"2020-31-31\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        String expectedOutput \u003d \"Date must be specified in format YYYY-MM-DD\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        Throwable actualOutputException \u003d assertThrows(DukeExceptions.class, () -\u003e {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "            ProjectDeadlineCommand command \u003d new ProjectDeadlineCommand(params);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        });"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        assertEquals(expectedOutput, actualOutputException.toString());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samuellleow": 80,
      "riazaham": 15
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/project/ProjectDescriptionCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "riazaham"
        },
        "content": "package seedu.duke.commands.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.DukeExceptions;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.member.TeamMember;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import seedu.duke.project.Project;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "public class ProjectDescriptionCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    static ArrayList\u003cProject\u003e projects;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    static ArrayList\u003cTeamMember\u003e teamMembers;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "    static Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    static HashMap\u003cString, String\u003e params;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    static void createProjectList() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        projects \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        Project projectOne \u003d new Project(\"Project One\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        Project projectTwo \u003d new Project(\"Project Two\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        Project projectThree \u003d new Project(\"Project Three\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        projects.add(projectOne);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        projects.add(projectTwo);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        projects.add(projectThree);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        projectTwo.addDescription(\"Do CS2113 Tutorial by today\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        params \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    void executeCommand_projectList_projectDescriptionAdded() throws DukeExceptions {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        params.put(\"d\", \"Do CS2113 Tutorial by today\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        params.put(\"p\", \"2\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        ProjectDescriptionCommand addDescription \u003d new ProjectDescriptionCommand(params);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        String actualOutput \u003d addDescription.executeCommand(projects, teamMembers);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        String expectedOutput \u003d \"Project description added \\\"Do CS2113 Tutorial by today\\\".\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        assertEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samuelchristopher": 6,
      "samuellleow": 29,
      "riazaham": 10
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/project/ProjectListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "riazaham"
        },
        "content": "package seedu.duke.commands.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.DukeExceptions;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import seedu.duke.commands.project.ProjectListCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import seedu.duke.member.TeamMember;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import seedu.duke.project.Project;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "public class ProjectListTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    static ArrayList\u003cProject\u003e projects;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    static ArrayList\u003cTeamMember\u003e teamMembers;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    static void createProjectList() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        projects \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        Project projectOne \u003d new Project(\"Drink Water\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        Project projectTwo \u003d new Project(\"Fire\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        Project projectThree \u003d new Project(\"CS2113 Tutorial\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        projects.add(projectOne);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        projects.add(projectTwo);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        projects.add(projectThree);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        projectOne.addProjectDeadline(LocalDate.parse(\"2020-12-31\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        projectThree.addProjectDeadline(LocalDate.parse(\"2019-01-01\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    void executeCommand_differentDeadline_listOfSortedProjectsByDeadline() throws DukeExceptions {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        ProjectListCommand command \u003d new ProjectListCommand();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        String expectedOutput \u003d \"List of Projects:\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                + \"     1.CS2113 Tutorial (2019-01-01) \\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                + \"     2.Drink Water (2020-12-31) \\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "                + \"     3.Fire\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        String actualOutput \u003d command.executeCommand(projects, teamMembers);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        assertEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samuellleow": 41,
      "riazaham": 2
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/project/ProjectSelectCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "riazaham"
        },
        "content": "package seedu.duke.commands.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.DukeExceptions;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import seedu.duke.commands.project.ProjectCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import seedu.duke.commands.project.ProjectSelectCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.member.TeamMember;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import seedu.duke.project.Project;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import seedu.duke.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "public class ProjectSelectCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    static ArrayList\u003cTeamMember\u003e teamMembers;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    static ArrayList\u003cProject\u003e projects;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    static Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    static void testSetup() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        projects \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        Project projectOne \u003d new Project(\"Project One\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        Project projectTwo \u003d new Project(\"Project Two\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        Project projectThree \u003d new Project(\"Project Three\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        projects.add(projectOne);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        projects.add(projectTwo);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        projects.add(projectThree);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        projectTwo.addProjectDeadline(LocalDate.parse(\"2020-12-31\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    void executeCommand_validProjectIdWithDescription_additionalInformation() throws DukeExceptions {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        HashMap\u003cString, String\u003e params \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        params.put(\"p\",\"2\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        ProjectSelectCommand selectProject \u003d new ProjectSelectCommand(params);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "        String expectedOutput \u003d  \"Project \\\"Project Two\\\"\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thatseant"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thatseant"
        },
        "content": "                + \"Description:\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thatseant"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thatseant"
        },
        "content": "                + \"\u003cproject description empty\u003e\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thatseant"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                + \" ---------------------\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                + \"| TASK LIST           |\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                + \" ---------------------\\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                + \"No tasks have been added to this project.\\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                + \" \\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                + \" ---------------------\\n\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                + \"| MEMBERS LIST        |\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                + \" ---------------------\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "samuelchristopher"
        },
        "content": "                + \"No team members have been assigned to this project.\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        String actualOutput \u003d selectProject.executeCommand(projects, teamMembers);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        assertEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "samuellleow"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    void executeCommand_invalidProjectIdWithDescription_additionalInformation() throws DukeExceptions {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        HashMap\u003cString, String\u003e params \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        params.put(\"p\",\"-5\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        ProjectSelectCommand selectProject \u003d new ProjectSelectCommand(params);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        String expectedOutput \u003d \"Project ID does not exist!\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        Throwable actualOutputException \u003d assertThrows(DukeExceptions.class, () -\u003e {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "riazaham"
        },
        "content": "            selectProject.executeCommand(projects, teamMembers);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        });"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "        assertEquals(expectedOutput, actualOutputException.toString());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samuelchristopher": 13,
      "thatseant": 5,
      "samuellleow": 51,
      "riazaham": 6
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/task/ActualTimeCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thatseant"
        },
        "content": "package seedu.duke.commands.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.DukeExceptions;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.project.Project;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thatseant"
        },
        "content": "class ActualTimeCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    static ArrayList\u003cProject\u003e projects;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    static void createProjectsTasks() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        projects \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Project projectOne \u003d new Project(\"Drink Water\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        projects.add(projectOne);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Project projectTwo \u003d new Project(\"Fire\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Task taskOne \u003d new Task(\"test1\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Task taskTwo \u003d new Task(\"test2\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        taskTwo.markAsDone();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        projectTwo.addTask(taskOne);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        projectTwo.addTask(taskTwo);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        projects.add(projectTwo);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Project projectThree \u003d new Project(\"CS2113 Tutorial\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        projects.add(projectThree);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    void executeCommand_validIndexAndDone_addActualTime() throws DukeExceptions {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        HashMap\u003cString, String\u003e params \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        params.put(\"t\", \"2\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        params.put(\"h\", \"4\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        params.put(\"m\", \"3\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        ActualTimeCommand newCommand \u003d new ActualTimeCommand(params, 1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        String actualOutput \u003d newCommand.executeCommand(projects, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        String expectedOutput \u003d \"Task \\\"test2\\\" took 4 hours and 3 minutes to be completed.\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        assertEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    void executeCommand_invalidTaskIndex_invalidIdException() throws DukeExceptions {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        HashMap\u003cString, String\u003e params \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        params.put(\"t\", \"5\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        params.put(\"h\", \"4\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        params.put(\"m\", \"3\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        ActualTimeCommand newCommand \u003d new ActualTimeCommand(params, 1);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Throwable actualOutputException \u003d assertThrows(DukeExceptions.class,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            () -\u003e newCommand.executeCommand(projects, new ArrayList\u003c\u003e()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        String expectedOutput \u003d \"Task ID does not exist!\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        assertEquals(expectedOutput, actualOutputException.toString());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    void executeCommand_taskNotDone_notDoneException() throws DukeExceptions {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        HashMap\u003cString, String\u003e params \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        params.put(\"t\", \"1\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        params.put(\"h\", \"4\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        params.put(\"m\", \"3\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        ActualTimeCommand newCommand \u003d new ActualTimeCommand(params, 1);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Throwable actualOutputException \u003d assertThrows(DukeExceptions.class,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            () -\u003e newCommand.executeCommand(projects, new ArrayList\u003c\u003e()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        String expectedOutput \u003d \"Task must be marked as done before adding actual duration taken to complete!\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        assertEquals(expectedOutput, actualOutputException.toString());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "thatseant"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thatseant": 75
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/task/EstimatedTimeCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thatseant"
        },
        "content": "package seedu.duke.commands.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.DukeExceptions;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.project.Project;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thatseant"
        },
        "content": "class EstimatedTimeCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    static ArrayList\u003cProject\u003e projects;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    static void createProjectsTasks() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        projects \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Project projectOne \u003d new Project(\"Drink Water\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Project projectTwo \u003d new Project(\"Fire\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Task taskOne \u003d new Task(\"test1\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Task taskTwo \u003d new Task(\"test2\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        projectTwo.addTask(taskOne);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        projectTwo.addTask(taskTwo);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Project projectThree \u003d new Project(\"CS2113 Tutorial\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        projects.add(projectOne);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        projects.add(projectTwo);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        projects.add(projectThree);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    void executeCommand_validTaskIndex_addEstimatedTime() throws DukeExceptions {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        HashMap\u003cString, String\u003e params \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        params.put(\"t\", \"2\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        params.put(\"h\", \"4\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        params.put(\"m\", \"3\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        EstimatedTimeCommand newCommand \u003d new EstimatedTimeCommand(params, 1);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        String actualOutput \u003d newCommand.executeCommand(projects, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        String expectedOutput \u003d \"Task \\\"test2\\\" has estimated time of 4 hours and 3 minutes\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        assertEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    void executeCommand_invalidTaskIndex_invalidIdException() throws DukeExceptions {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        HashMap\u003cString, String\u003e params \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        params.put(\"t\", \"5\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        params.put(\"h\", \"4\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        params.put(\"m\", \"3\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        EstimatedTimeCommand newCommand \u003d new EstimatedTimeCommand(params, 1);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Throwable actualOutputException \u003d assertThrows(DukeExceptions.class,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            () -\u003e newCommand.executeCommand(projects, new ArrayList\u003c\u003e()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        String expectedOutput \u003d \"Task ID does not exist!\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        assertEquals(expectedOutput, actualOutputException.toString());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "thatseant"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thatseant": 58
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/task/TaskAssignDeadlineCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thatseant"
        },
        "content": "package seedu.duke.commands.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.DukeExceptions;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.project.Project;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thatseant"
        },
        "content": "class TaskAssignDeadlineCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    static ArrayList\u003cProject\u003e projects;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    static void createProjectsTasks() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        projects \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Project projectOne \u003d new Project(\"Drink Water\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        projects.add(projectOne);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Project projectTwo \u003d new Project(\"Fire\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Task taskOne \u003d new Task(\"test1\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Task taskTwo \u003d new Task(\"test2\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        projectTwo.addTask(taskOne);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        projectTwo.addTask(taskTwo);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        projects.add(projectTwo);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Project projectThree \u003d new Project(\"CS2113 Tutorial\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        projects.add(projectThree);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    void executeCommand_correctDateFormat_addDeadline() throws DukeExceptions {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        HashMap\u003cString, String\u003e params \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        params.put(\"d\", \"2020-09-12\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        params.put(\"t\", \"2\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        TaskAssignDeadlineCommand newCommand \u003d new TaskAssignDeadlineCommand(params, 1);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        String actualOutput \u003d newCommand.executeCommand(projects, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        String expectedOutput \u003d \"Deadline 12/09/2020 added to Task test2\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        assertEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    void executeCommand_wrongDateFormat_DateTimeException() throws DukeExceptions {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        HashMap\u003cString, String\u003e params \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        params.put(\"d\", \"2020-09-1\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        params.put(\"t\", \"2\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Throwable actualOutputException \u003d assertThrows(DukeExceptions.class,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            () -\u003e new TaskAssignDeadlineCommand(params, 1));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        String expectedOutput \u003d \"Date must be specified in format YYYY-MM-DD\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        assertEquals(expectedOutput, actualOutputException.toString());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "thatseant"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thatseant": 57
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/task/TaskAssignPriorityCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "riazaham"
        },
        "content": "package seedu.duke.commands.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.DukeExceptions;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.member.TeamMember;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.project.Project;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "riazaham"
        },
        "content": "class TaskAssignPriorityCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    static ArrayList\u003cProject\u003e projects;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    static ArrayList\u003cTeamMember\u003e teamMembers;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    static HashMap\u003cString, String\u003e params;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    static Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "riazaham"
        },
        "content": "     * Create 1 projects list"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "riazaham"
        },
        "content": "     * Create 1 project."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "riazaham"
        },
        "content": "     * Create 3 tasks."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "riazaham"
        },
        "content": "     * Add the 3 tasks to that project."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "riazaham"
        },
        "content": "     * Add that project to projects list."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "riazaham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    static void testSetup() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        params \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        teamMembers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        projects \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        Project projectOne \u003d new Project(\"Project One\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        Task taskOne \u003d new Task(\"Task One\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        Task taskTwo \u003d new Task(\"Task Two\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        Task taskThree \u003d new Task(\"Task Three\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        projectOne.addTask(taskOne);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        projectOne.addTask(taskTwo);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        projectOne.addTask(taskThree);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        projects.add(projectOne);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "riazaham"
        },
        "content": "     * Test: Assign priority HIGH to first task."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "riazaham"
        },
        "content": "     * Check for message."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "riazaham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    void executeCommand_validPriorityAndTaskId_priorityAssignedToTask() throws DukeExceptions {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        params.put(\"p\", \"3\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        params.put(\"t\", \"1\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        TaskAssignPriorityCommand command \u003d new TaskAssignPriorityCommand(params, 0);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        String expectedOutput \u003d Ui.printPriorityAssignedToTaskMessage(3, \"Task One\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        String actualOutput \u003d command.executeCommand(projects, teamMembers);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        assertEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "riazaham"
        },
        "content": "     * Test: Assign priority HIGH to non existent task."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "riazaham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    void executeCommand_nonExistentTaskId_invalidTaskId() throws DukeExceptions {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        params.put(\"p\", \"1\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        params.put(\"t\", \"5\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        TaskAssignPriorityCommand command \u003d new TaskAssignPriorityCommand(params, 0);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        String expectedOutput \u003d \"Task ID does not exist!\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        DukeExceptions exception \u003d assertThrows(DukeExceptions.class, () -\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "riazaham"
        },
        "content": "                command.executeCommand(projects, teamMembers));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        assertEquals(expectedOutput, exception.toString());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "riazaham"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thatseant": 1,
      "shreytheshreyas": 2,
      "riazaham": 70
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/task/TaskCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "riazaham"
        },
        "content": "package seedu.duke.commands.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.DukeExceptions;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.project.Project;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thatseant"
        },
        "content": "class TaskCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    static ArrayList\u003cProject\u003e projects;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    static void createProjectList() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        projects \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Project projectOne \u003d new Project(\"Drink Water\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        projects.add(projectOne);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Project projectTwo \u003d new Project(\"Fire\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Task taskOne \u003d new Task(\"test1\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Task taskTwo \u003d new Task(\"test2\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        projectTwo.addTask(taskOne);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        projectTwo.addTask(taskTwo);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        projects.add(projectTwo);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Project projectThree \u003d new Project(\"CS2113 Tutorial\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        projects.add(projectThree);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    void executeCommand_existingTasks_taskCreated() throws DukeExceptions {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        HashMap\u003cString, String\u003e params \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        params.put(\"n\", \"Task 3\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        TaskCommand createTask \u003d new TaskCommand(params, 1);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        String actualOutput \u003d createTask.executeCommand(projects, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        String expectedOutput \u003d \"Task \\\"Task 3\\\" created!\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        assertEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thatseant"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thatseant": 42,
      "riazaham": 1
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/task/TaskDeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "riazaham"
        },
        "content": "package seedu.duke.commands.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.DukeExceptions;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.member.TeamMember;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.project.Project;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "riazaham"
        },
        "content": "class TaskDeleteCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    static ArrayList\u003cProject\u003e projects;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    static ArrayList\u003cTeamMember\u003e teamMembers;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    static HashMap\u003cString, String\u003e params;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "riazaham"
        },
        "content": "     * Create 1 projects list"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "riazaham"
        },
        "content": "     * Create 1 project."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "riazaham"
        },
        "content": "     * Create 3 tasks."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "riazaham"
        },
        "content": "     * Add the 3 tasks to that project."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "riazaham"
        },
        "content": "     * Add that project to projects list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "riazaham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    static void testSetup() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        params \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        teamMembers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        projects \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        Project projectOne \u003d new Project(\"Project One\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        Task taskOne \u003d new Task(\"Task One\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        Task taskTwo \u003d new Task(\"Task Two\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        Task taskThree \u003d new Task(\"Task Three\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        projectOne.addTask(taskOne);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        projectOne.addTask(taskTwo);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        projectOne.addTask(taskThree);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        projects.add(projectOne);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "riazaham"
        },
        "content": "     * Test: Delete the first task from the first project."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "riazaham"
        },
        "content": "     * Check for message."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "riazaham"
        },
        "content": "     * Check if task has been deleted from task list by checking task list length;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "riazaham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    void executeCommand_validTaskId_taskDescription() throws DukeExceptions {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        params.put(\"t\", \"1\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        TaskDeleteCommand command \u003d new TaskDeleteCommand(params,0);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        String expectedOutput0 \u003d \"Task \\\"Task One\\\" removed!\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        String actualOutput0 \u003d command.executeCommand(projects, teamMembers);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        assertEquals(expectedOutput0, actualOutput0);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        int expectedOutput1 \u003d 2;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        int actualOutput1 \u003d projects.get(0).getTaskList().size();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        assertEquals(expectedOutput1, actualOutput1);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "riazaham"
        },
        "content": "     * Test: Input a non-existent task ID to test exception error message."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "riazaham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    void executeCommand_nonExistentTaskId_taskDescription() throws DukeExceptions {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        params.put(\"t\", \"4\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        TaskDeleteCommand command \u003d new TaskDeleteCommand(params,0);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        String expectedOutput \u003d \"Task ID does not exist!\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        DukeExceptions exception \u003d assertThrows(DukeExceptions.class, () -\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "riazaham"
        },
        "content": "                command.executeCommand(projects, teamMembers));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        assertEquals(expectedOutput, exception.toString());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "riazaham"
        },
        "content": "     * Test: Pass a non existent projects list to test exception error message."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "riazaham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    void executeCommand_nonExistentProjectsList_taskDescription() throws DukeExceptions {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        params.put(\"t\", \"1\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        TaskDeleteCommand command \u003d new TaskDeleteCommand(params,0);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        String expectedOutput \u003d \"Project list is empty!\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        DukeExceptions exception \u003d assertThrows(DukeExceptions.class, () -\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "riazaham"
        },
        "content": "                command.executeCommand(new ArrayList\u003cProject\u003e(), teamMembers));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        assertEquals(expectedOutput, exception.toString());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "riazaham"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "riazaham": 87
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/task/TaskDoneCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thatseant"
        },
        "content": "package seedu.duke.commands.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.DukeExceptions;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.project.Project;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thatseant"
        },
        "content": "class TaskDoneCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    static ArrayList\u003cProject\u003e projects;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    static void createProjectsTasks() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        projects \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Project projectOne \u003d new Project(\"Drink Water\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        projects.add(projectOne);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Project projectTwo \u003d new Project(\"Fire\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Task taskOne \u003d new Task(\"test1\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Task taskTwo \u003d new Task(\"test2\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        projectTwo.addTask(taskOne);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        projectTwo.addTask(taskTwo);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        projects.add(projectTwo);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Project projectThree \u003d new Project(\"CS2113 Tutorial\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        projects.add(projectThree);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    void executeCommand_validIndex_addActualTime() throws DukeExceptions {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        HashMap\u003cString, String\u003e params \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        params.put(\"t\", \"2\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        TaskDoneCommand newCommand \u003d new TaskDoneCommand(params, 1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        String actualOutput \u003d newCommand.executeCommand(projects, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        String expectedOutput \u003d \"Task \\\"test2\\\" is done!\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        assertEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    void executeCommand_invalidTaskIndex_invalidIdException() throws DukeExceptions {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        HashMap\u003cString, String\u003e params \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        params.put(\"t\", \"5\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        TaskDoneCommand newCommand \u003d new TaskDoneCommand(params, 1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Throwable actualOutputException \u003d assertThrows(DukeExceptions.class,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            () -\u003e newCommand.executeCommand(projects, new ArrayList\u003c\u003e()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        String expectedOutput \u003d \"Task ID does not exist!\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        assertEquals(expectedOutput, actualOutputException.toString());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "thatseant"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thatseant": 56
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/task/TaskEditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "riazaham"
        },
        "content": "package seedu.duke.commands.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.DukeExceptions;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.member.TeamMember;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.project.Project;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "riazaham"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "riazaham"
        },
        "content": "class TaskEditCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    static ArrayList\u003cProject\u003e projects;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    static ArrayList\u003cTeamMember\u003e teamMembers;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    static HashMap\u003cString, String\u003e params;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "riazaham"
        },
        "content": "     * Create 1 projects list"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "riazaham"
        },
        "content": "     * Create 1 project."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "riazaham"
        },
        "content": "     * Create 3 tasks."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "riazaham"
        },
        "content": "     * Add the 3 tasks to that project."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "riazaham"
        },
        "content": "     * Add that project to projects list."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "riazaham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    static void testSetup() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        params \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        teamMembers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        projects \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        Project projectOne \u003d new Project(\"Project One\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        Task taskOne \u003d new Task(\"Task One\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        Task taskTwo \u003d new Task(\"Task Two\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        Task taskThree \u003d new Task(\"Task Three\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        projectOne.addTask(taskOne);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        projectOne.addTask(taskTwo);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        projectOne.addTask(taskThree);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        projects.add(projectOne);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "riazaham"
        },
        "content": "     * Test: Select the first task from the first project."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "riazaham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    void executeCommand_validTaskId_taskDescription() throws DukeExceptions {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        params.put(\"t\", \"1\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        params.put(\"n\", \"Task One Upgraded\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        TaskEditCommand command \u003d new TaskEditCommand(params,0);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        String expectedOutput \u003d Ui.printTaskNameUpdatedMessage(\"Task One\", \"Task One Upgraded\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        String actualOutput \u003d command.executeCommand(projects, teamMembers);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        assertEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "riazaham"
        },
        "content": "     * Test: Input a non-existent task ID to test exception error message."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "riazaham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    void executeCommand_nonExistentTaskId_taskDescription() throws DukeExceptions {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        params.put(\"t\", \"4\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        params.put(\"n\", \"Should Not Print This\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        TaskEditCommand command \u003d new TaskEditCommand(params,0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        String expectedOutput \u003d \"Task ID does not exist!\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        DukeExceptions exception \u003d assertThrows(DukeExceptions.class, () -\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "riazaham"
        },
        "content": "                command.executeCommand(projects, teamMembers));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        assertEquals(expectedOutput, exception.toString());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "riazaham"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "riazaham"
        },
        "content": "     * Test: Pass a non existent projects list to test exception error message."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "riazaham"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    void executeCommand_nonExistentProjectsList_taskDescription() throws DukeExceptions {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        params.put(\"t\", \"1\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        params.put(\"n\", \"Should Not Print This\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        TaskEditCommand command \u003d new TaskEditCommand(params,0);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        String expectedOutput \u003d \"Project list is empty!\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        DukeExceptions exception \u003d assertThrows(DukeExceptions.class, () -\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "riazaham"
        },
        "content": "                command.executeCommand(new ArrayList\u003cProject\u003e(), teamMembers));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "riazaham"
        },
        "content": "        assertEquals(expectedOutput, exception.toString());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "riazaham"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "riazaham"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "riazaham": 85
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/task/TaskSortCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "package seedu.duke.commands.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "import seedu.duke.DukeExceptions;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "import seedu.duke.commands.member.AssignMemberToProjectCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "import seedu.duke.commands.project.ProjectCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "import seedu.duke.commands.project.ProjectSelectCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "import seedu.duke.member.TeamMember;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "import seedu.duke.project.Project;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "import seedu.duke.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "public class TaskSortCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    static ArrayList\u003cProject\u003e projects;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    static ArrayList\u003cTeamMember\u003e teamMembers;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    static Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    static void createProjectL() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        projects \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        Project projectOne \u003d new Project(\"Project One\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        Task taskOne \u003d new Task(\"Task One\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        Task taskTwo \u003d new Task(\"Task Two\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        Task taskThree \u003d new Task(\"Task Three\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        projectOne.addTask(taskOne);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        projectOne.addTask(taskTwo);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        projectOne.addTask(taskThree);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        projects.add(projectOne);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        projectOne.getTask(0).setPriority(3);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        projectOne.getTask(1).setPriority(1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        projectOne.getTask(2).setPriority(2);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        projectOne.getTask(0).addDeadline(LocalDate.parse(\"2020-12-13\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        projectOne.getTask(1).addDeadline(LocalDate.parse(\"2020-12-23\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        projectOne.getTask(2).addDeadline(LocalDate.parse(\"2020-11-14\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        projectOne.getTask(0).addActual(90);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        projectOne.getTask(1).addActual(130);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        projectOne.getTask(2).addActual(210);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    public void execute_command_sortTaskList_Priority() throws DukeExceptions {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        HashMap\u003cString, String\u003e params \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        params.put(\"s\", \"p\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        String expectedOutput \u003d \"List of Tasks:\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "                + \"\\n     \" + \"1\" + \".\" + \"Task Two | 23/12/2020 | Actual: 2 hours 10 minutes|priority: 1\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "                + \"\\n     \" + \"2\" + \".\" + \"Task Three | 14/11/2020 | Actual: 3 hours 30 minutes|priority: 2\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "                + \"\\n     \" + \"3\" + \".\" + \"Task One | 13/12/2020 | Actual: 1 hours 30 minutes|priority: 3\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        TaskSortCommand tasksSorter \u003d new TaskSortCommand(params,0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        tasksSorter.executeCommand(projects,teamMembers);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        String actualOutput \u003d Ui.printTaskListMessage(projects.get(0));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        assertEquals(expectedOutput,actualOutput);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    public void execute_command_sortTaskList_Deadline() throws DukeExceptions {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        HashMap\u003cString, String\u003e params \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        params.put(\"s\", \"d\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        String expectedOutput \u003d \"List of Tasks:\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "                + \"\\n     \" + \"1\" + \".\" + \"Task Three | 14/11/2020 | Actual: 3 hours 30 minutes|priority: 2\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "                + \"\\n     \" + \"2\" + \".\" + \"Task One | 13/12/2020 | Actual: 1 hours 30 minutes|priority: 3\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "                + \"\\n     \" + \"3\" + \".\" + \"Task Two | 23/12/2020 | Actual: 2 hours 10 minutes|priority: 1\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        TaskSortCommand tasksSorter \u003d new TaskSortCommand(params,0);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        tasksSorter.executeCommand(projects,teamMembers);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        String actualOutput \u003d Ui.printTaskListMessage(projects.get(0));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        assertEquals(expectedOutput,actualOutput);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    public void execute_command_sortTaskList_ActualTime() throws DukeExceptions {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        HashMap\u003cString, String\u003e params \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        params.put(\"s\", \"t\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        String expectedOutput \u003d \"List of Tasks:\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "                + \"\\n     \" + \"1\" + \".\" + \"Task One | 13/12/2020 | Actual: 1 hours 30 minutes|priority: 3\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "                + \"\\n     \" + \"2\" + \".\" + \"Task Two | 23/12/2020 | Actual: 2 hours 10 minutes|priority: 1\""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "                + \"\\n     \" + \"3\" + \".\" + \"Task Three | 14/11/2020 | Actual: 3 hours 30 minutes|priority: 2\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        TaskSortCommand tasksSorter \u003d new TaskSortCommand(params,0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        tasksSorter.executeCommand(projects,teamMembers);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        String actualOutput \u003d Ui.printTaskListMessage(projects.get(0));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        assertEquals(expectedOutput,actualOutput);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    public void executeCommand_invalidProjectId_exception() throws DukeExceptions {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        HashMap\u003cString, String\u003e params \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        String expectedOutput \u003d \"Certain Parameters are missing!\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        Throwable actualOutputException \u003d assertThrows(DukeExceptions.class, () -\u003e {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "thatseant"
        },
        "content": "            new TaskSortCommand(params,0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        });"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "        assertEquals(expectedOutput,actualOutputException.toString());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thatseant": 14,
      "shreytheshreyas": 95
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/task/TaskTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "riazaham"
        },
        "content": "package seedu.duke.commands.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import seedu.duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "thatseant"
        },
        "content": "class TaskTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    static Task task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    static void createTask() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        task \u003d new Task(\"task1\", LocalDate.parse(\"2020-07-14\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        assertEquals(\"task1 | 14/07/2020\", task.toString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    void equals_sameTask_true() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Task sameTask \u003d new Task(\"task1\", LocalDate.parse(\"2020-07-14\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        assertTrue(sameTask.equals(task));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    void equals_diffDescription_false() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Task diffTask \u003d new Task(\"task2\", LocalDate.parse(\"2020-07-14\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        assertFalse(diffTask.equals(task));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    void equals_diffDeadline_false() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        Task diffTask \u003d new Task(\"task1\", LocalDate.parse(\"2020-04-14\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "thatseant"
        },
        "content": "        assertFalse(diffTask.equals(task));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    **/"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "thatseant"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thatseant": 45,
      "riazaham": 1
    }
  },
  {
    "path": "src/test/java/util/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "thatseant"
        },
        "content": "package util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "thatseant"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "thatseant"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "thatseant"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "thatseant"
        },
        "content": "    "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "thatseant"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "thatseant": 7
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "\u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samuellleow"
        },
        "content": "project n/p1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shreytheshreyas"
        },
        "content": "list"
      },
      {
        "lineNumber": 5,
        "content": "bye"
      },
      {
        "lineNumber": 6,
        "content": "\u003e\u003e\u003e\u003e\u003e\u003e\u003e 93459e5fda65f80041b63ed0dbd409d692abd089"
      }
    ],
    "authorContributionMap": {
      "null": 2,
      "samuellleow": 1,
      "shreytheshreyas": 3
    }
  }
]
